<?php
/**
 * @author Jefferson González
 * 
 * @license 
 * This file is part of wxPHP check the LICENSE file for information.
 *
 * @description
 * Auto-generated interface file to enable code completion on IDE's
 * like eclipse, netbeans, etc... Just drop it on your project tree
 * and it should be automatically parsed by the IDE code completion
 * engine.
 *
 */

//wxWidgets constants

define('wxBITMAP_SCREEN_DEPTH', 1);
define('wxBookCtrl', 1);
define('wxBK_HITTEST_NOWHERE', 1);
define('wxBK_HITTEST_ONICON', 1);
define('wxBK_HITTEST_ONLABEL', 1);
define('wxBK_HITTEST_ONITEM', 1);
define('wxBK_HITTEST_ONPAGE', 1);
define('wxInvalidDateTime', 1);
define('wxDEFAULT_DIALOG_STYLE', 1);
define('wxDrag_CopyOnly', 1);
define('wxDrag_AllowMove', 1);
define('wxDrag_DefaultMove', 1);
define('wxLC_VRULES', 1);
define('wxLC_HRULES', 1);
define('wxLC_ICON', 1);
define('wxLC_SMALL_ICON', 1);
define('wxLC_LIST', 1);
define('wxLC_REPORT', 1);
define('wxLC_ALIGN_TOP', 1);
define('wxLC_ALIGN_LEFT', 1);
define('wxLC_AUTOARRANGE', 1);
define('wxLC_VIRTUAL', 1);
define('wxLC_EDIT_LABELS', 1);
define('wxLC_NO_HEADER', 1);
define('wxLC_NO_SORT_HEADER', 1);
define('wxLC_SINGLE_SEL', 1);
define('wxLC_SORT_ASCENDING', 1);
define('wxLC_SORT_DESCENDING', 1);
define('wxLC_MASK_TYPE', 1);
define('wxLC_MASK_ALIGN', 1);
define('wxLC_MASK_SORT', 1);
define('wxLIST_MASK_STATE', 1);
define('wxLIST_MASK_TEXT', 1);
define('wxLIST_MASK_IMAGE', 1);
define('wxLIST_MASK_DATA', 1);
define('wxLIST_SET_ITEM', 1);
define('wxLIST_MASK_WIDTH', 1);
define('wxLIST_MASK_FORMAT', 1);
define('wxLIST_STATE_DONTCARE', 1);
define('wxLIST_STATE_DROPHILITED', 1);
define('wxLIST_STATE_FOCUSED', 1);
define('wxLIST_STATE_SELECTED', 1);
define('wxLIST_STATE_CUT', 1);
define('wxLIST_STATE_DISABLED', 1);
define('wxLIST_STATE_FILTERED', 1);
define('wxLIST_STATE_INUSE', 1);
define('wxLIST_STATE_PICKED', 1);
define('wxLIST_STATE_SOURCE', 1);
define('wxLIST_HITTEST_ABOVE', 1);
define('wxLIST_HITTEST_BELOW', 1);
define('wxLIST_HITTEST_NOWHERE', 1);
define('wxLIST_HITTEST_ONITEMICON', 1);
define('wxLIST_HITTEST_ONITEMLABEL', 1);
define('wxLIST_HITTEST_ONITEMRIGHT', 1);
define('wxLIST_HITTEST_ONITEMSTATEICON', 1);
define('wxLIST_HITTEST_TOLEFT', 1);
define('wxLIST_HITTEST_TORIGHT', 1);
define('wxLIST_HITTEST_ONITEM', 1);
define('wxLIST_GETSUBITEMRECT_WHOLEITEM', 1);
define('wxLIST_NEXT_ABOVE', 1);
define('wxLIST_NEXT_ALL', 1);
define('wxLIST_NEXT_BELOW', 1);
define('wxLIST_NEXT_LEFT', 1);
define('wxLIST_NEXT_RIGHT', 1);
define('wxLIST_ALIGN_DEFAULT', 1);
define('wxLIST_ALIGN_LEFT', 1);
define('wxLIST_ALIGN_TOP', 1);
define('wxLIST_ALIGN_SNAP_TO_GRID', 1);
define('wxLIST_AUTOSIZE', 1);
define('wxLIST_AUTOSIZE_USEHEADER', 1);
define('wxLIST_RECT_BOUNDS', 1);
define('wxLIST_RECT_ICON', 1);
define('wxLIST_RECT_LABEL', 1);
define('wxLIST_FIND_UP', 1);
define('wxLIST_FIND_DOWN', 1);
define('wxLIST_FIND_LEFT', 1);
define('wxLIST_FIND_RIGHT', 1);
define('wxPG_DEFAULT_STYLE', 1);
define('wxPGMAN_DEFAULT_STYLE', 1);
define('wxRE_READONLY', 1);
define('wxRE_MULTILINE', 1);
define('wxRE_CENTRE_CARET', 1);
define('wxRE_CENTER_CARET', 1);
define('wxRICHTEXT_SHIFT_DOWN', 1);
define('wxRICHTEXT_CTRL_DOWN', 1);
define('wxRICHTEXT_ALT_DOWN', 1);
define('wxRICHTEXT_EX_NO_GUIDELINES', 1);
define('wxRICHTEXT_DEFAULT_OVERALL_SIZE', 1);
define('wxRICHTEXT_DEFAULT_IMAGE_SIZE', 1);
define('wxRICHTEXT_DEFAULT_SPACING', 1);
define('wxRICHTEXT_DEFAULT_MARGIN', 1);
define('wxRICHTEXT_DEFAULT_UNFOCUSSED_BACKGROUND', 1);
define('wxRICHTEXT_DEFAULT_FOCUSSED_BACKGROUND', 1);
define('wxRICHTEXT_DEFAULT_UNSELECTED_BACKGROUND', 1);
define('wxRICHTEXT_DEFAULT_TYPE_COLOUR', 1);
define('wxRICHTEXT_DEFAULT_FOCUS_RECT_COLOUR', 1);
define('wxRICHTEXT_DEFAULT_CARET_WIDTH', 1);
define('wxRICHTEXT_DEFAULT_DELAYED_LAYOUT_THRESHOLD', 1);
define('wxRICHTEXT_DEFAULT_LAYOUT_INTERVAL', 1);
define('wxID_RICHTEXT_PROPERTIES1', 1);
define('wxID_RICHTEXT_PROPERTIES2', 1);
define('wxID_RICHTEXT_PROPERTIES3', 1);
define('WXTHREAD_MIN_PRIORITY', 1);
define('WXTHREAD_DEFAULT_PRIORITY', 1);
define('WXTHREAD_MAX_PRIORITY', 1);
define('wxTB_HORIZONTAL', 1);
define('wxTB_TOP', 1);
define('wxTB_VERTICAL', 1);
define('wxTB_LEFT', 1);
define('wxTB_3DBUTTONS', 1);
define('wxTB_FLAT', 1);
define('wxTB_DOCKABLE', 1);
define('wxTB_NOICONS', 1);
define('wxTB_TEXT', 1);
define('wxTB_NODIVIDER', 1);
define('wxTB_NOALIGN', 1);
define('wxTB_HORZ_LAYOUT', 1);
define('wxTB_HORZ_TEXT', 1);
define('wxTB_NO_TOOLTIPS', 1);
define('wxTB_BOTTOM', 1);
define('wxTB_RIGHT', 1);
define('wxACC_STATE_SYSTEM_ALERT_MEDIUM', 1);
define('wxACC_STATE_SYSTEM_ALERT_LOW', 1);
define('wxACC_STATE_SYSTEM_ANIMATED', 1);
define('wxACC_STATE_SYSTEM_BUSY', 1);
define('wxACC_STATE_SYSTEM_CHECKED', 1);
define('wxACC_STATE_SYSTEM_COLLAPSED', 1);
define('wxACC_STATE_SYSTEM_DEFAULT', 1);
define('wxACC_STATE_SYSTEM_EXPANDED', 1);
define('wxACC_STATE_SYSTEM_EXTSELECTABLE', 1);
define('wxACC_STATE_SYSTEM_FLOATING', 1);
define('wxACC_STATE_SYSTEM_FOCUSABLE', 1);
define('wxACC_STATE_SYSTEM_FOCUSED', 1);
define('wxACC_STATE_SYSTEM_HOTTRACKED', 1);
define('wxACC_STATE_SYSTEM_INVISIBLE', 1);
define('wxACC_STATE_SYSTEM_MARQUEED', 1);
define('wxACC_STATE_SYSTEM_MIXED', 1);
define('wxACC_STATE_SYSTEM_MULTISELECTABLE', 1);
define('wxACC_STATE_SYSTEM_OFFSCREEN', 1);
define('wxACC_STATE_SYSTEM_PRESSED', 1);
define('wxACC_STATE_SYSTEM_PROTECTED', 1);
define('wxACC_STATE_SYSTEM_READONLY', 1);
define('wxACC_STATE_SYSTEM_SELECTABLE', 1);
define('wxACC_STATE_SYSTEM_SELECTED', 1);
define('wxACC_STATE_SYSTEM_SELFVOICING', 1);
define('wxACC_STATE_SYSTEM_UNAVAILABLE', 1);
define('wxACC_EVENT_SYSTEM_ALERT', 1);
define('wxACC_EVENT_SYSTEM_FOREGROUND', 1);
define('wxACC_EVENT_SYSTEM_MENUSTART', 1);
define('wxACC_EVENT_SYSTEM_MENUEND', 1);
define('wxACC_EVENT_SYSTEM_MENUPOPUPSTART', 1);
define('wxACC_EVENT_SYSTEM_MENUPOPUPEND', 1);
define('wxACC_EVENT_SYSTEM_CAPTURESTART', 1);
define('wxACC_EVENT_SYSTEM_CAPTUREEND', 1);
define('wxACC_EVENT_SYSTEM_MOVESIZESTART', 1);
define('wxACC_EVENT_SYSTEM_MOVESIZEEND', 1);
define('wxACC_EVENT_SYSTEM_CONTEXTHELPSTART', 1);
define('wxACC_EVENT_SYSTEM_CONTEXTHELPEND', 1);
define('wxACC_EVENT_SYSTEM_DRAGDROPSTART', 1);
define('wxACC_EVENT_SYSTEM_DRAGDROPEND', 1);
define('wxACC_EVENT_SYSTEM_DIALOGSTART', 1);
define('wxACC_EVENT_SYSTEM_DIALOGEND', 1);
define('wxACC_EVENT_SYSTEM_SCROLLINGSTART', 1);
define('wxACC_EVENT_SYSTEM_SCROLLINGEND', 1);
define('wxACC_EVENT_SYSTEM_SWITCHSTART', 1);
define('wxACC_EVENT_SYSTEM_SWITCHEND', 1);
define('wxACC_EVENT_SYSTEM_MINIMIZESTART', 1);
define('wxACC_EVENT_SYSTEM_MINIMIZEEND', 1);
define('wxACC_EVENT_OBJECT_CREATE', 1);
define('wxACC_EVENT_OBJECT_DESTROY', 1);
define('wxACC_EVENT_OBJECT_SHOW', 1);
define('wxACC_EVENT_OBJECT_HIDE', 1);
define('wxACC_EVENT_OBJECT_REORDER', 1);
define('wxACC_EVENT_OBJECT_FOCUS', 1);
define('wxACC_EVENT_OBJECT_SELECTION', 1);
define('wxACC_EVENT_OBJECT_SELECTIONADD', 1);
define('wxACC_EVENT_OBJECT_SELECTIONREMOVE', 1);
define('wxACC_EVENT_OBJECT_SELECTIONWITHIN', 1);
define('wxACC_EVENT_OBJECT_STATECHANGE', 1);
define('wxACC_EVENT_OBJECT_LOCATIONCHANGE', 1);
define('wxACC_EVENT_OBJECT_NAMECHANGE', 1);
define('wxACC_EVENT_OBJECT_DESCRIPTIONCHANGE', 1);
define('wxACC_EVENT_OBJECT_VALUECHANGE', 1);
define('wxACC_EVENT_OBJECT_PARENTCHANGE', 1);
define('wxACC_EVENT_OBJECT_HELPCHANGE', 1);
define('wxACC_EVENT_OBJECT_DEFACTIONCHANGE', 1);
define('wxACC_EVENT_OBJECT_ACCELERATORCHANGE', 1);
define('WX_ANY_VALUE_BUFFER_SIZE', 1);
define('wxBU_LEFT', 1);
define('wxBU_TOP', 1);
define('wxBU_RIGHT', 1);
define('wxBU_BOTTOM', 1);
define('wxBU_ALIGN_MASK', 1);
define('wxBU_EXACTFIT', 1);
define('wxBU_NOTEXT', 1);
define('wxBU_AUTODRAW', 1);
define('wxCAL_SUNDAY_FIRST', 1);
define('wxCAL_MONDAY_FIRST', 1);
define('wxCAL_SHOW_HOLIDAYS', 1);
define('wxCAL_NO_YEAR_CHANGE', 1);
define('wxCAL_NO_MONTH_CHANGE', 1);
define('wxCAL_SEQUENTIAL_MONTH_SELECTION', 1);
define('wxCAL_SHOW_SURROUNDING_WEEKS', 1);
define('wxCAL_SHOW_WEEK_NUMBERS', 1);
define('wxCHK_2STATE', 1);
define('wxCHK_3STATE', 1);
define('wxCHK_ALLOW_3RD_STATE_FOR_USER', 1);
define('wxCHOICE_WIDTH', 1);
define('wxCHOICE_HEIGHT', 1);
define('wxCHOICEDLG_STYLE', 1);
define('wxTheClipboard', 1);
define('wxCLRP_USE_TEXTCTRL', 1);
define('wxCLRP_DEFAULT_STYLE', 1);
define('wxCLRP_SHOW_LABEL', 1);
define('wxCP_DEFAULT_STYLE', 1);
define('wxCP_NO_TLW_RESIZE', 1);
define('wxC2S_NAME', 1);
define('wxC2S_CSS_SYNTAX', 1);
define('wxC2S_HTML_SYNTAX', 1);
define('wxDVC_DEFAULT_RENDERER_SIZE', 1);
define('wxDVC_DEFAULT_WIDTH', 1);
define('wxDVC_TOGGLE_DEFAULT_WIDTH', 1);
define('wxDVC_DEFAULT_MINWIDTH', 1);
define('wxDVR_DEFAULT_ALIGNMENT', 1);
define('wxDV_SINGLE', 1);
define('wxDV_MULTIPLE', 1);
define('wxDV_NO_HEADER', 1);
define('wxDV_HORIZ_RULES', 1);
define('wxDV_VERT_RULES', 1);
define('wxDV_ROW_LINES', 1);
define('wxDV_VARIABLE_LINE_HEIGHT', 1);
define('wxDP_DEFAULT', 1);
define('wxDP_SPIN', 1);
define('wxDP_DROPDOWN', 1);
define('wxDP_SHOWCENTURY', 1);
define('wxDP_ALLOWNONE', 1);
define('wxBUFFER_VIRTUAL_AREA', 1);
define('wxBUFFER_CLIENT_AREA', 1);
define('wxBUFFER_USES_SHARED_BUFFER', 1);
define('wxDEBUG_LEVEL', 1);
define('wxFAIL', 1);
define('wxINT8_MIN', 1);
define('wxINT8_MAX', 1);
define('wxUINT8_MAX', 1);
define('wxINT16_MIN', 1);
define('wxINT16_MAX', 1);
define('wxUINT16_MAX', 1);
define('wxINT32_MIN', 1);
define('wxINT32_MAX', 1);
define('wxUINT32_MAX', 1);
define('wxINT64_MIN', 1);
define('wxINT64_MAX', 1);
define('wxUINT64_MAX', 1);
define('wxSIZE_AUTO_WIDTH', 1);
define('wxSIZE_AUTO_HEIGHT', 1);
define('wxSIZE_AUTO', 1);
define('wxSIZE_USE_EXISTING', 1);
define('wxSIZE_ALLOW_MINUS_ONE', 1);
define('wxSIZE_NO_ADJUSTMENTS', 1);
define('wxSIZE_FORCE', 1);
define('wxSIZE_FORCE_EVENT', 1);
define('wxVSCROLL', 1);
define('wxHSCROLL', 1);
define('wxCAPTION', 1);
define('wxDOUBLE_BORDER', 1);
define('wxSUNKEN_BORDER', 1);
define('wxRAISED_BORDER', 1);
define('wxBORDER', 1);
define('wxSIMPLE_BORDER', 1);
define('wxSTATIC_BORDER', 1);
define('wxNO_BORDER', 1);
define('wxALWAYS_SHOW_SB', 1);
define('wxCLIP_CHILDREN', 1);
define('wxCLIP_SIBLINGS', 1);
define('wxTRANSPARENT_WINDOW', 1);
define('wxTAB_TRAVERSAL', 1);
define('wxWANTS_CHARS', 1);
define('wxRETAINED', 1);
define('wxBACKINGSTORE', 1);
define('wxPOPUP_WINDOW', 1);
define('wxFULL_REPAINT_ON_RESIZE', 1);
define('wxNO_FULL_REPAINT_ON_RESIZE', 1);
define('wxWINDOW_STYLE_MASK', 1);
define('wxWS_EX_VALIDATE_RECURSIVELY', 1);
define('wxWS_EX_BLOCK_EVENTS', 1);
define('wxWS_EX_TRANSIENT', 1);
define('wxWS_EX_THEMED_BACKGROUND', 1);
define('wxWS_EX_PROCESS_IDLE', 1);
define('wxWS_EX_PROCESS_UI_UPDATES', 1);
define('wxFRAME_EX_METAL', 1);
define('wxDIALOG_EX_METAL', 1);
define('wxWS_EX_CONTEXTHELP', 1);
define('wxFRAME_EX_CONTEXTHELP', 1);
define('wxDIALOG_EX_CONTEXTHELP', 1);
define('wxFRAME_DRAWER', 1);
define('wxFRAME_NO_WINDOW_MENU', 1);
define('wxMB_DOCKABLE', 1);
define('wxMENU_TEAROFF', 1);
define('wxCOLOURED', 1);
define('wxFIXED_LENGTH', 1);
define('wxLB_SORT', 1);
define('wxLB_SINGLE', 1);
define('wxLB_MULTIPLE', 1);
define('wxLB_EXTENDED', 1);
define('wxLB_NEEDED_SB', 1);
define('wxLB_OWNERDRAW', 1);
define('wxLB_ALWAYS_SB', 1);
define('wxLB_NO_SB', 1);
define('wxLB_HSCROLL', 1);
define('wxLB_INT_HEIGHT', 1);
define('wxCB_SIMPLE', 1);
define('wxCB_SORT', 1);
define('wxCB_READONLY', 1);
define('wxCB_DROPDOWN', 1);
define('wxRA_LEFTTORIGHT', 1);
define('wxRA_TOPTOBOTTOM', 1);
define('wxRA_SPECIFY_COLS', 1);
define('wxRA_SPECIFY_ROWS', 1);
define('wxRA_HORIZONTAL', 1);
define('wxRA_VERTICAL', 1);
define('wxRB_GROUP', 1);
define('wxRB_SINGLE', 1);
define('wxSB_HORIZONTAL', 1);
define('wxSB_VERTICAL', 1);
define('wxSP_HORIZONTAL', 1);
define('wxSP_VERTICAL', 1);
define('wxSP_ARROW_KEYS', 1);
define('wxSP_WRAP', 1);
define('wxTC_RIGHTJUSTIFY', 1);
define('wxTC_FIXEDWIDTH', 1);
define('wxTC_TOP', 1);
define('wxTC_LEFT', 1);
define('wxTC_RIGHT', 1);
define('wxTC_BOTTOM', 1);
define('wxTC_MULTILINE', 1);
define('wxTC_OWNERDRAW', 1);
define('wxBI_EXPAND', 1);
define('wxLI_HORIZONTAL', 1);
define('wxLI_VERTICAL', 1);
define('wxYES', 1);
define('wxOK', 1);
define('wxNO', 1);
define('wxYES_NO', 1);
define('wxCANCEL', 1);
define('wxAPPLY', 1);
define('wxCLOSE', 1);
define('wxOK_DEFAULT', 1);
define('wxYES_DEFAULT', 1);
define('wxNO_DEFAULT', 1);
define('wxCANCEL_DEFAULT', 1);
define('wxICON_EXCLAMATION', 1);
define('wxICON_HAND', 1);
define('wxICON_WARNING', 1);
define('wxICON_ERROR', 1);
define('wxICON_QUESTION', 1);
define('wxICON_INFORMATION', 1);
define('wxICON_STOP', 1);
define('wxICON_ASTERISK', 1);
define('wxHELP', 1);
define('wxFORWARD', 1);
define('wxBACKWARD', 1);
define('wxRESET', 1);
define('wxMORE', 1);
define('wxSETUP', 1);
define('wxICON_NONE', 1);
define('wxICON_MASK', 1);
define('wxNOT_FOUND', 1);
define('wxPRINT_QUALITY_HIGH', 1);
define('wxPRINT_QUALITY_MEDIUM', 1);
define('wxPRINT_QUALITY_LOW', 1);
define('wxPRINT_QUALITY_DRAFT', 1);
define('wxSTAY_ON_TOP', 1);
define('wxICONIZE', 1);
define('wxMINIMIZE', 1);
define('wxMAXIMIZE', 1);
define('wxCLOSE_BOX', 1);
define('wxSYSTEM_MENU', 1);
define('wxMINIMIZE_BOX', 1);
define('wxMAXIMIZE_BOX', 1);
define('wxTINY_CAPTION', 1);
define('wxRESIZE_BORDER', 1);
define('wxEXPLICIT', 1);
define('wxDIRCTRL_DIR_ONLY', 1);
define('wxDIRCTRL_SELECT_FIRST', 1);
define('wxDIRCTRL_3D_INTERNAL', 1);
define('wxDIRCTRL_EDIT_LABELS', 1);
define('wxDIRCTRL_MULTIPLE', 1);
define('wxDD_DEFAULT_STYLE', 1);
define('wxJOYSTICK1', 1);
define('wxJOYSTICK2', 1);
define('wxJOY_BUTTON_ANY', 1);
define('wxJOY_BUTTON1', 1);
define('wxJOY_BUTTON2', 1);
define('wxJOY_BUTTON3', 1);
define('wxJOY_BUTTON4', 1);
define('wxFC_DEFAULT_STYLE', 1);
define('wxFC_OPEN', 1);
define('wxFC_SAVE', 1);
define('wxFC_MULTIPLE', 1);
define('wxFC_NOSHOWHIDDEN', 1);
define('wxFD_DEFAULT_STYLE', 1);
define('wxFD_OPEN', 1);
define('wxFD_SAVE', 1);
define('wxFD_OVERWRITE_PROMPT', 1);
define('wxFD_FILE_MUST_EXIST', 1);
define('wxFD_MULTIPLE', 1);
define('wxFD_CHANGE_DIR', 1);
define('wxFD_PREVIEW', 1);
define('wxPATH_RMDIR_FULL', 1);
define('wxPATH_RMDIR_RECURSIVE', 1);
define('wxFLP_OPEN', 1);
define('wxFLP_SAVE', 1);
define('wxFLP_OVERWRITE_PROMPT', 1);
define('wxFLP_FILE_MUST_EXIST', 1);
define('wxFLP_CHANGE_DIR', 1);
define('wxFLP_SMALL', 1);
define('wxFLP_USE_TEXTCTRL', 1);
define('wxFLP_DEFAULT_STYLE', 1);
define('wxDIRP_DIR_MUST_EXIST', 1);
define('wxDIRP_CHANGE_DIR', 1);
define('wxDIRP_SMALL', 1);
define('wxDIRP_USE_TEXTCTRL', 1);
define('wxDIRP_DEFAULT_STYLE', 1);
define('wxFNTP_FONTDESC_AS_LABEL', 1);
define('wxFNTP_USEFONT_FOR_LABEL', 1);
define('wxFONTBTN_DEFAULT_STYLE', 1);
define('wxFNTP_USE_TEXTCTRL', 1);
define('wxFNTP_DEFAULT_STYLE', 1);
define('wxGA_HORIZONTAL', 1);
define('wxGA_VERTICAL', 1);
define('wxGA_SMOOTH', 1);
define('wxCOL_WIDTH_DEFAULT', 1);
define('wxCOL_WIDTH_AUTOSIZE', 1);
define('wxCOL_RESIZABLE', 1);
define('wxCOL_SORTABLE', 1);
define('wxCOL_REORDERABLE', 1);
define('wxCOL_HIDDEN', 1);
define('wxCOL_DEFAULT_FLAGS', 1);
define('wxHELP_NETSCAPE', 1);
define('wxHL_CONTEXTMENU', 1);
define('wxHL_ALIGN_LEFT', 1);
define('wxHL_ALIGN_RIGHT', 1);
define('wxHL_ALIGN_CENTRE', 1);
define('wxHL_DEFAULT_STYLE', 1);
define('wxICON_SCREEN_DEPTH', 1);
define('wxIMAGE_OPTION_QUALITY', 1);
define('wxIMAGE_OPTION_FILENAME', 1);
define('wxIMAGE_OPTION_RESOLUTION', 1);
define('wxIMAGE_OPTION_RESOLUTIONX', 1);
define('wxIMAGE_OPTION_RESOLUTIONY', 1);
define('wxIMAGE_OPTION_RESOLUTIONUNIT', 1);
define('wxIMAGE_OPTION_MAX_WIDTH', 1);
define('wxIMAGE_OPTION_MAX_HEIGHT', 1);
define('wxIMAGE_OPTION_ORIGINAL_WIDTH', 1);
define('wxIMAGE_OPTION_ORIGINAL_HEIGHT', 1);
define('wxIMAGE_OPTION_BMP_FORMAT', 1);
define('wxIMAGE_OPTION_CUR_HOTSPOT_X', 1);
define('wxIMAGE_OPTION_CUR_HOTSPOT_Y', 1);
define('wxIMAGE_OPTION_GIF_COMMENT', 1);
define('wxIMAGE_OPTION_PNG_FORMAT', 1);
define('wxIMAGE_OPTION_PNG_BITDEPTH', 1);
define('wxIMAGE_OPTION_PNG_FILTER', 1);
define('wxIMAGE_OPTION_PNG_COMPRESSION_LEVEL', 1);
define('wxIMAGE_OPTION_PNG_COMPRESSION_MEM_LEVEL', 1);
define('wxIMAGE_OPTION_PNG_COMPRESSION_STRATEGY', 1);
define('wxIMAGE_OPTION_PNG_COMPRESSION_BUFFER_SIZE', 1);
define('wxIMAGE_OPTION_TIFF_BITSPERSAMPLE', 1);
define('wxIMAGE_OPTION_TIFF_SAMPLESPERPIXEL', 1);
define('wxIMAGE_OPTION_TIFF_COMPRESSION', 1);
define('wxIMAGE_OPTION_TIFF_PHOTOMETRIC', 1);
define('wxIMAGE_OPTION_TIFF_IMAGEDESCRIPTOR', 1);
define('wxBMP_24BPP', 1);
define('wxBMP_8BPP', 1);
define('wxBMP_8BPP_GREY', 1);
define('wxBMP_8BPP_GRAY', 1);
define('wxBMP_8BPP_RED', 1);
define('wxBMP_8BPP_PALETTE', 1);
define('wxBMP_4BPP', 1);
define('wxBMP_1BPP', 1);
define('wxBMP_1BPP_BW', 1);
define('wxIMAGELIST_DRAW_NORMAL', 1);
define('wxIMAGELIST_DRAW_TRANSPARENT', 1);
define('wxIMAGELIST_DRAW_SELECTED', 1);
define('wxIMAGELIST_DRAW_FOCUSED', 1);
define('wxLongLongFmtSpec', 1);
define('wxNB_DEFAULT', 1);
define('wxNB_TOP', 1);
define('wxNB_BOTTOM', 1);
define('wxNB_LEFT', 1);
define('wxNB_RIGHT', 1);
define('wxNB_FIXEDWIDTH', 1);
define('wxNB_MULTILINE', 1);
define('wxNB_NOPAGETHEME', 1);
define('wxNB_FLAT', 1);
define('wxNB_HITTEST_NOWHERE', 1);
define('wxNB_HITTEST_ONICON', 1);
define('wxNB_HITTEST_ONLABEL', 1);
define('wxNB_HITTEST_ONITEM', 1);
define('wxNB_HITTEST_ONPAGE', 1);
define('wxDEFAULT_FRAME_STYLE', 1);
define('wxUSER_ATTENTION_INFO', 1);
define('wxUSER_ATTENTION_ERROR', 1);
define('wxFULLSCREEN_NOMENUBAR', 1);
define('wxFULLSCREEN_NOTOOLBAR', 1);
define('wxFULLSCREEN_NOSTATUSBAR', 1);
define('wxFULLSCREEN_NOBORDER', 1);
define('wxFULLSCREEN_NOCAPTION', 1);
define('wxFULLSCREEN_ALL', 1);
define('wxPB_USE_TEXTCTRL', 1);
define('wxPB_SMALL', 1);
define('wxPREVIEW_PRINT', 1);
define('wxPREVIEW_PREVIOUS', 1);
define('wxPREVIEW_NEXT', 1);
define('wxPREVIEW_ZOOM', 1);
define('wxPREVIEW_FIRST', 1);
define('wxPREVIEW_LAST', 1);
define('wxPREVIEW_GOTO', 1);
define('wxPREVIEW_DEFAULT', 1);
define('wxID_PREVIEW_CLOSE', 1);
define('wxID_PREVIEW_NEXT', 1);
define('wxID_PREVIEW_PREVIOUS', 1);
define('wxID_PREVIEW_PRINT', 1);
define('wxID_PREVIEW_ZOOM', 1);
define('wxID_PREVIEW_FIRST', 1);
define('wxID_PREVIEW_LAST', 1);
define('wxID_PREVIEW_GOTO', 1);
define('wxID_PREVIEW_ZOOM_IN', 1);
define('wxID_PREVIEW_ZOOM_OUT', 1);
define('wxPD_APP_MODAL', 1);
define('wxPD_AUTO_HIDE', 1);
define('wxPD_ELAPSED_TIME', 1);
define('wxPD_ESTIMATED_TIME', 1);
define('wxPD_SMOOTH', 1);
define('wxPD_REMAINING_TIME', 1);
define('wxPD_CAN_SKIP', 1);
define('wxPG_ATTR_DEFAULT_VALUE', 1);
define('wxPG_ATTR_MIN', 1);
define('wxPG_ATTR_MAX', 1);
define('wxPG_ATTR_UNITS', 1);
define('wxPG_ATTR_HINT', 1);
define('wxPG_ATTR_INLINE_HELP', 1);
define('wxPG_ATTR_AUTOCOMPLETE', 1);
define('wxPG_BOOL_USE_CHECKBOX', 1);
define('wxPG_BOOL_USE_DOUBLE_CLICK_CYCLING', 1);
define('wxPG_FLOAT_PRECISION', 1);
define('wxPG_STRING_PASSWORD', 1);
define('wxPG_UINT_BASE', 1);
define('wxPG_UINT_PREFIX', 1);
define('wxPG_FILE_WILDCARD', 1);
define('wxPG_FILE_SHOW_FULL_PATH', 1);
define('wxPG_FILE_SHOW_RELATIVE_PATH', 1);
define('wxPG_FILE_INITIAL_PATH', 1);
define('wxPG_FILE_DIALOG_TITLE', 1);
define('wxPG_FILE_DIALOG_STYLE', 1);
define('wxPG_DIR_DIALOG_MESSAGE', 1);
define('wxPG_ARRAY_DELIMITER', 1);
define('wxPG_DATE_FORMAT', 1);
define('wxPG_DATE_PICKER_STYLE', 1);
define('wxPG_ATTR_SPINCTRL_STEP', 1);
define('wxPG_ATTR_SPINCTRL_WRAP', 1);
define('wxPG_ATTR_SPINCTRL_MOTIONSPIN', 1);
define('wxPG_ATTR_MULTICHOICE_USERSTRINGMODE', 1);
define('wxPG_COLOUR_ALLOW_CUSTOM', 1);
define('wxPG_COLOUR_HAS_ALPHA', 1);
define('wxPG_PROP_MAX', 1);
define('wxPG_PROP_PARENTAL_FLAGS', 1);
define('wxNullProperty', 1);
define('wxRE_EXTENDED', 1);
define('wxRE_ADVANCED', 1);
define('wxRE_BASIC', 1);
define('wxRE_ICASE', 1);
define('wxRE_NOSUB', 1);
define('wxRE_NEWLINE', 1);
define('wxRE_DEFAULT', 1);
define('wxRE_NOTBOL', 1);
define('wxRE_NOTEOL', 1);
define('wxCONTROL_DISABLED', 1);
define('wxCONTROL_FOCUSED', 1);
define('wxCONTROL_PRESSED', 1);
define('wxCONTROL_SPECIAL', 1);
define('wxCONTROL_ISDEFAULT', 1);
define('wxCONTROL_ISSUBMENU', 1);
define('wxCONTROL_EXPANDED', 1);
define('wxCONTROL_SIZEGRIP', 1);
define('wxCONTROL_FLAT', 1);
define('wxCONTROL_CURRENT', 1);
define('wxCONTROL_SELECTED', 1);
define('wxCONTROL_CHECKED', 1);
define('wxCONTROL_CHECKABLE', 1);
define('wxCONTROL_UNDETERMINED', 1);
define('wxRICHTEXT_FIXED_WIDTH', 1);
define('wxRICHTEXT_FIXED_HEIGHT', 1);
define('wxRICHTEXT_VARIABLE_WIDTH', 1);
define('wxRICHTEXT_VARIABLE_HEIGHT', 1);
define('wxRICHTEXT_LAYOUT_SPECIFIED_RECT', 1);
define('wxRICHTEXT_DRAW_IGNORE_CACHE', 1);
define('wxRICHTEXT_DRAW_SELECTED', 1);
define('wxRICHTEXT_DRAW_PRINT', 1);
define('wxRICHTEXT_DRAW_GUIDELINES', 1);
define('wxRICHTEXT_FORMATTED', 1);
define('wxRICHTEXT_UNFORMATTED', 1);
define('wxRICHTEXT_CACHE_SIZE', 1);
define('wxRICHTEXT_HEIGHT_ONLY', 1);
define('wxRICHTEXT_SETSTYLE_NONE', 1);
define('wxRICHTEXT_SETSTYLE_WITH_UNDO', 1);
define('wxRICHTEXT_SETSTYLE_OPTIMIZE', 1);
define('wxRICHTEXT_SETSTYLE_PARAGRAPHS_ONLY', 1);
define('wxRICHTEXT_SETSTYLE_CHARACTERS_ONLY', 1);
define('wxRICHTEXT_SETSTYLE_RENUMBER', 1);
define('wxRICHTEXT_SETSTYLE_SPECIFY_LEVEL', 1);
define('wxRICHTEXT_SETSTYLE_RESET', 1);
define('wxRICHTEXT_SETSTYLE_REMOVE', 1);
define('wxRICHTEXT_SETPROPERTIES_NONE', 1);
define('wxRICHTEXT_SETPROPERTIES_WITH_UNDO', 1);
define('wxRICHTEXT_SETPROPERTIES_PARAGRAPHS_ONLY', 1);
define('wxRICHTEXT_SETPROPERTIES_CHARACTERS_ONLY', 1);
define('wxRICHTEXT_SETPROPERTIES_RESET', 1);
define('wxRICHTEXT_SETPROPERTIES_REMOVE', 1);
define('wxRICHTEXT_INSERT_NONE', 1);
define('wxRICHTEXT_INSERT_WITH_PREVIOUS_PARAGRAPH_STYLE', 1);
define('wxRICHTEXT_INSERT_INTERACTIVE', 1);
define('wxTEXT_ATTR_KEEP_FIRST_PARA_STYLE', 1);
define('wxSCRIPT_MUL_FACTOR', 1);
define('wxRICHTEXT_ALL', 1);
define('wxRICHTEXT_NONE', 1);
define('wxRICHTEXT_NO_SELECTION', 1);
define('wxRICHTEXT_HANDLER_INCLUDE_STYLESHEET', 1);
define('wxRICHTEXT_HANDLER_SAVE_IMAGES_TO_MEMORY', 1);
define('wxRICHTEXT_HANDLER_SAVE_IMAGES_TO_FILES', 1);
define('wxRICHTEXT_HANDLER_SAVE_IMAGES_TO_BASE64', 1);
define('wxRICHTEXT_HANDLER_NO_HEADER_FOOTER', 1);
define('wxRICHTEXT_HANDLER_CONVERT_FACENAMES', 1);
define('wxRICHTEXT_FORMAT_STYLE_EDITOR', 1);
define('wxRICHTEXT_FORMAT_FONT', 1);
define('wxRICHTEXT_FORMAT_TABS', 1);
define('wxRICHTEXT_FORMAT_BULLETS', 1);
define('wxRICHTEXT_FORMAT_INDENTS_SPACING', 1);
define('wxSL_HORIZONTAL', 1);
define('wxSL_VERTICAL', 1);
define('wxSL_TICKS', 1);
define('wxSL_AUTOTICKS', 1);
define('wxSL_LEFT', 1);
define('wxSL_TOP', 1);
define('wxSL_RIGHT', 1);
define('wxSL_BOTTOM', 1);
define('wxSL_BOTH', 1);
define('wxSL_SELRANGE', 1);
define('wxSL_INVERSE', 1);
define('wxSL_MIN_MAX_LABELS', 1);
define('wxSL_VALUE_LABEL', 1);
define('wxSL_LABELS', 1);
define('wxSOCKET_NONE', 1);
define('wxSOCKET_NOWAIT', 1);
define('wxSOCKET_WAITALL', 1);
define('wxSOCKET_BLOCK', 1);
define('wxSOCKET_REUSEADDR', 1);
define('wxSOCKET_BROADCAST', 1);
define('wxSOCKET_NOBIND', 1);
define('wxSP_NOBORDER', 1);
define('wxSP_THIN_SASH', 1);
define('wxSP_NOSASH', 1);
define('wxSP_PERMIT_UNSPLIT', 1);
define('wxSP_LIVE_UPDATE', 1);
define('wxSP_3DSASH', 1);
define('wxSP_3DBORDER', 1);
define('wxSP_NO_XP_THEME', 1);
define('wxSP_BORDER', 1);
define('wxSP_3D', 1);
define('wxSPLIT_DRAG_NONE', 1);
define('wxSPLIT_DRAG_DRAGGING', 1);
define('wxSPLIT_DRAG_LEFT_DOWN', 1);
define('wxSTACKWALKER_MAX_DEPTH', 1);
define('wxST_NO_AUTORESIZE', 1);
define('wxST_ELLIPSIZE_START', 1);
define('wxST_ELLIPSIZE_MIDDLE', 1);
define('wxST_ELLIPSIZE_END', 1);
define('wxSTB_SIZEGRIP', 1);
define('wxSTB_SHOW_TIPS', 1);
define('wxSTB_ELLIPSIZE_START', 1);
define('wxSTB_ELLIPSIZE_MIDDLE', 1);
define('wxSTB_ELLIPSIZE_END', 1);
define('wxSTB_DEFAULT_STYLE', 1);
define('wxSB_NORMAL', 1);
define('wxSB_FLAT', 1);
define('wxSB_RAISED', 1);
define('wxSTC_INVALID_POSITION', 1);
define('wxTE_NO_VSCROLL', 1);
define('wxTE_READONLY', 1);
define('wxTE_MULTILINE', 1);
define('wxTE_PROCESS_TAB', 1);
define('wxTE_LEFT', 1);
define('wxTE_CENTER', 1);
define('wxTE_RIGHT', 1);
define('wxTE_CENTRE', 1);
define('wxTE_RICH', 1);
define('wxTE_PROCESS_ENTER', 1);
define('wxTE_PASSWORD', 1);
define('wxTE_AUTO_URL', 1);
define('wxTE_NOHIDESEL', 1);
define('wxTE_DONTWRAP', 1);
define('wxTE_CHARWRAP', 1);
define('wxTE_WORDWRAP', 1);
define('wxTE_BESTWRAP', 1);
define('wxTE_RICH2', 1);
define('wxTEXT_TYPE_ANY', 1);
define('wxTextEntryDialogStyle', 1);
define('wxTP_DEFAULT', 1);
define('wxTIMER_CONTINUOUS', 1);
define('wxTIMER_ONE_SHOT', 1);
define('wxDEFAULT_DELIMITERS', 1);
define('wxTR_NO_BUTTONS', 1);
define('wxTR_HAS_BUTTONS', 1);
define('wxTR_NO_LINES', 1);
define('wxTR_LINES_AT_ROOT', 1);
define('wxTR_TWIST_BUTTONS', 1);
define('wxTR_SINGLE', 1);
define('wxTR_MULTIPLE', 1);
define('wxTR_HAS_VARIABLE_ROW_HEIGHT', 1);
define('wxTR_EDIT_LABELS', 1);
define('wxTR_ROW_LINES', 1);
define('wxTR_HIDE_ROOT', 1);
define('wxTR_FULL_ROW_HIGHLIGHT', 1);
define('wxTR_DEFAULT_STYLE', 1);
define('wxStrip_Mnemonics', 1);
define('wxStrip_Accel', 1);
define('wxStrip_All', 1);
define('wxEXEC_ASYNC', 1);
define('wxEXEC_SYNC', 1);
define('wxEXEC_SHOW_CONSOLE', 1);
define('wxEXEC_MAKE_GROUP_LEADER', 1);
define('wxEXEC_NODISABLE', 1);
define('wxEXEC_NOEVENTS', 1);
define('wxEXEC_HIDE_CONSOLE', 1);
define('wxEXEC_BLOCK', 1);
define('wxEXTEND_LAST_ON_EACH_LINE', 1);
define('wxREMOVE_LEADING_SPACES', 1);
define('wxWRAPSIZER_DEFAULT_FLAGS', 1);
define('wxHORIZONTAL', 1);
define('wxVERTICAL', 1);
define('wxTOP', 1);
define('wxBOTTOM', 1);
define('wxLEFT', 1);
define('wxRIGHT', 1);
define('wxALL', 1);
define('wxEXPAND', 1);
define('wxSHAPED', 1);
define('wxFIXED_MINSIZE', 1);
define('wxALIGN_CENTER', 1);
define('wxALIGN_CENTRE', 1);
define('wxALIGN_LEFT', 1);
define('wxALIGN_RIGHT', 1);
define('wxALIGN_TOP', 1);
define('wxALIGN_BOTTOM', 1);
define('wxALIGN_CENTER_VERTICAL', 1);
define('wxALIGN_CENTRE_VERTICAL', 1);
define('wxALIGN_CENTER_HORIZONTAL', 1);
define('wxALIGN_CENTRE_HORIZONTAL', 1);
define('wxBITMAP_TYPE_BMP', 1);
define('wxBITMAP_TYPE_BMP_RESOURCE', 1);
define('wxBITMAP_TYPE_PICT_RESOURCE', 1);
define('wxBITMAP_TYPE_GIF', 1);
define('wxBITMAP_TYPE_XBM', 1);
define('wxBITMAP_TYPE_XPM', 1);
define('wxID_LOWEST', 1);
define('wxID_OPEN', 1);
define('wxID_CLOSE', 1);
define('wxID_NEW', 1);
define('wxID_SAVE', 1);
define('wxID_SAVEAS', 1);
define('wxID_REVERT', 1);
define('wxID_EXIT', 1);
define('wxID_UNDO', 1);
define('wxID_REDO', 1);
define('wxID_HELP', 1);
define('wxID_PRINT', 1);
define('wxID_PRINT_SETUP', 1);
define('wxID_PAGE_SETUP', 1);
define('wxID_PREVIEW', 1);
define('wxID_ABOUT', 1);
define('wxID_HELP_CONTENTS', 1);
define('wxID_HELP_INDEX', 1);
define('wxID_HELP_SEARCH', 1);
define('wxID_HELP_COMMANDS', 1);
define('wxID_HELP_PROCEDURES', 1);
define('wxID_HELP_CONTEXT', 1);
define('wxID_CLOSE_ALL', 1);
define('wxID_EDIT', 1);
define('wxID_CUT', 1);
define('wxID_COPY', 1);
define('wxID_PASTE', 1);
define('wxID_CLEAR', 1);
define('wxID_FIND', 1);
define('wxID_DUPLICATE', 1);
define('wxID_SELECTALL', 1);
define('wxID_DELETE', 1);
define('wxID_REPLACE', 1);
define('wxID_REPLACE_ALL', 1);
define('wxID_PROPERTIES', 1);
define('wxID_VIEW_DETAILS', 1);
define('wxID_VIEW_LARGEICONS', 1);
define('wxID_VIEW_SMALLICONS', 1);
define('wxID_VIEW_LIST', 1);
define('wxID_VIEW_SORTDATE', 1);
define('wxID_VIEW_SORTNAME', 1);
define('wxID_VIEW_SORTSIZE', 1);
define('wxID_VIEW_SORTTYPE', 1);
define('wxID_FILE', 1);
define('wxID_FILE1', 1);
define('wxID_FILE2', 1);
define('wxID_FILE3', 1);
define('wxID_FILE4', 1);
define('wxID_FILE5', 1);
define('wxID_FILE6', 1);
define('wxID_FILE7', 1);
define('wxID_FILE8', 1);
define('wxID_FILE9', 1);
define('wxID_OK', 1);
define('wxID_CANCEL', 1);
define('wxID_APPLY', 1);
define('wxID_YES', 1);
define('wxID_NO', 1);
define('wxID_STATIC', 1);
define('wxID_FORWARD', 1);
define('wxID_BACKWARD', 1);
define('wxID_DEFAULT', 1);
define('wxID_MORE', 1);
define('wxID_SETUP', 1);
define('wxID_RESET', 1);
define('wxID_CONTEXT_HELP', 1);
define('wxID_YESTOALL', 1);
define('wxID_NOTOALL', 1);
define('wxID_ABORT', 1);
define('wxID_RETRY', 1);
define('wxID_IGNORE', 1);
define('wxID_UP', 1);
define('wxID_DOWN', 1);
define('wxID_HOME', 1);
define('wxID_REFRESH', 1);
define('wxID_STOP', 1);
define('wxID_INDEX', 1);
define('wxID_BOLD', 1);
define('wxID_ITALIC', 1);
define('wxID_JUSTIFY_CENTER', 1);
define('wxID_JUSTIFY_FILL', 1);
define('wxID_JUSTIFY_RIGHT', 1);
define('wxID_JUSTIFY_LEFT', 1);
define('wxID_UNDERLINE', 1);
define('wxID_INDENT', 1);
define('wxID_UNINDENT', 1);
define('wxID_ZOOM_100', 1);
define('wxID_ZOOM_FIT', 1);
define('wxID_ZOOM_IN', 1);
define('wxID_ZOOM_OUT', 1);
define('wxID_UNDELETE', 1);
define('wxID_REVERT_TO_SAVED', 1);
define('wxID_SYSTEM_MENU', 1);
define('wxID_CLOSE_FRAME', 1);
define('wxID_MOVE_FRAME', 1);
define('wxID_RESIZE_FRAME', 1);
define('wxID_MAXIMIZE_FRAME', 1);
define('wxID_ICONIZE_FRAME', 1);
define('wxID_RESTORE_FRAME', 1);
define('wxID_FILEDLGG', 1);
define('wxID_HIGHEST', 1);
define('WXK_BACK', 1);
define('WXK_TAB', 1);
define('WXK_RETURN', 1);
define('WXK_ESCAPE', 1);
define('WXK_SPACE', 1);
define('WXK_DELETE', 1);
define('WXK_START', 1);
define('WXK_LBUTTON', 1);
define('WXK_RBUTTON', 1);
define('WXK_CANCEL', 1);
define('WXK_MBUTTON', 1);
define('WXK_CLEAR', 1);
define('WXK_SHIFT', 1);
define('WXK_ALT', 1);
define('WXK_CONTROL', 1);
define('WXK_MENU', 1);
define('WXK_PAUSE', 1);
define('WXK_CAPITAL', 1);
define('WXK_END', 1);
define('WXK_HOME', 1);
define('WXK_LEFT', 1);
define('WXK_UP', 1);
define('WXK_RIGHT', 1);
define('WXK_DOWN', 1);
define('WXK_SELECT', 1);
define('WXK_PRINT', 1);
define('WXK_EXECUTE', 1);
define('WXK_SNAPSHOT', 1);
define('WXK_INSERT', 1);
define('WXK_HELP', 1);
define('WXK_NUMPAD0', 1);
define('WXK_NUMPAD1', 1);
define('WXK_NUMPAD2', 1);
define('WXK_NUMPAD3', 1);
define('WXK_NUMPAD4', 1);
define('WXK_NUMPAD5', 1);
define('WXK_NUMPAD6', 1);
define('WXK_NUMPAD7', 1);
define('WXK_NUMPAD8', 1);
define('WXK_NUMPAD9', 1);
define('WXK_MULTIPLY', 1);
define('WXK_ADD', 1);
define('WXK_SEPARATOR', 1);
define('WXK_SUBTRACT', 1);
define('WXK_DECIMAL', 1);
define('WXK_DIVIDE', 1);
define('WXK_F1', 1);
define('WXK_F2', 1);
define('WXK_F3', 1);
define('WXK_F4', 1);
define('WXK_F5', 1);
define('WXK_F6', 1);
define('WXK_F7', 1);
define('WXK_F8', 1);
define('WXK_F9', 1);
define('WXK_F10', 1);
define('WXK_F11', 1);
define('WXK_F12', 1);
define('WXK_F13', 1);
define('WXK_F14', 1);
define('WXK_F15', 1);
define('WXK_F16', 1);
define('WXK_F17', 1);
define('WXK_F18', 1);
define('WXK_F19', 1);
define('WXK_F20', 1);
define('WXK_F21', 1);
define('WXK_F22', 1);
define('WXK_F23', 1);
define('WXK_F24', 1);
define('WXK_NUMLOCK', 1);
define('WXK_SCROLL', 1);
define('WXK_PAGEUP', 1);
define('WXK_PAGEDOWN', 1);
define('WXK_NUMPAD_SPACE', 1);
define('WXK_NUMPAD_TAB', 1);
define('WXK_NUMPAD_ENTER', 1);
define('WXK_NUMPAD_F1', 1);
define('WXK_NUMPAD_F2', 1);
define('WXK_NUMPAD_F3', 1);
define('WXK_NUMPAD_F4', 1);
define('WXK_NUMPAD_HOME', 1);
define('WXK_NUMPAD_LEFT', 1);
define('WXK_NUMPAD_UP', 1);
define('WXK_NUMPAD_RIGHT', 1);
define('WXK_NUMPAD_DOWN', 1);
define('WXK_NUMPAD_PAGEUP', 1);
define('WXK_NUMPAD_PAGEDOWN', 1);
define('WXK_NUMPAD_END', 1);
define('WXK_NUMPAD_BEGIN', 1);
define('WXK_NUMPAD_INSERT', 1);
define('WXK_NUMPAD_DELETE', 1);
define('WXK_NUMPAD_EQUAL', 1);
define('WXK_NUMPAD_MULTIPLY', 1);
define('WXK_NUMPAD_ADD', 1);
define('WXK_NUMPAD_SEPARATOR', 1);
define('WXK_NUMPAD_SUBTRACT', 1);
define('WXK_NUMPAD_DECIMAL', 1);
define('WXK_NUMPAD_DIVIDE', 1);
define('WXK_WINDOWS_LEFT', 1);
define('WXK_WINDOWS_RIGHT', 1);
define('WXK_WINDOWS_MENU', 1);
define('WXK_COMMAND', 1);
define('WXK_SPECIAL1', 1);
define('WXK_SPECIAL2', 1);
define('WXK_SPECIAL3', 1);
define('WXK_SPECIAL4', 1);
define('WXK_SPECIAL5', 1);
define('WXK_SPECIAL6', 1);
define('WXK_SPECIAL7', 1);
define('WXK_SPECIAL8', 1);
define('WXK_SPECIAL9', 1);
define('WXK_SPECIAL10', 1);
define('WXK_SPECIAL11', 1);
define('WXK_SPECIAL12', 1);
define('WXK_SPECIAL13', 1);
define('WXK_SPECIAL14', 1);
define('WXK_SPECIAL15', 1);
define('WXK_SPECIAL16', 1);
define('WXK_SPECIAL17', 1);
define('WXK_SPECIAL18', 1);
define('WXK_SPECIAL19', 1);
define('WXK_SPECIAL20', 1);
define('wxTE_CAPITALIZE', 1);
define('wxBORDER_DEFAULT', 1);
define('wxBORDER_SIMPLE', 1);
define('wxBORDER_SUNKEN', 1);
define('wxBORDER_RAISED', 1);
define('wxBORDER_STATIC', 1);
define('wxBORDER_THEME', 1);
define('wxBORDER_NONE', 1);
define('wxBORDER_DOUBLE', 1);
define('wxSOCKET_NOERROR', 1);
define('wxSOCKET_INVOP', 1);
define('wxSOCKET_IOERR', 1);
define('wxSOCKET_INVADDR', 1);
define('wxSOCKET_INVSOCK', 1);
define('wxSOCKET_NOHOST', 1);
define('wxSOCKET_INVPORT', 1);
define('wxSOCKET_WOULDBLOCK', 1);
define('wxSOCKET_TIMEDOUT', 1);
define('wxSOCKET_MEMERR', 1);
define('wxSOCKET_INPUT', 1);
define('wxSOCKET_OUTPUT', 1);
define('wxSOCKET_CONNECTION', 1);
define('wxSOCKET_LOST', 1);
define('wxTR_EXTENDED', 1);
define('wxST_SIZEGRIP', 1);
define('wxDIRCTRL_SHOW_FILTERS', 1);
define('wxHW_SCROLLBAR_AUTO', 1);
define('wxHW_NO_SELECTION', 1);
define('wxHW_SCROLLBAR_NEVER', 1);
define('wxHW_DEFAULT_STYLE', 1);
define('wxCHB_BOTTOM', 1);
define('wxCHB_DEFAULT', 1);
define('wxCHB_LEFT', 1);
define('wxCHB_RIGHT', 1);
define('wxCHB_TOP', 1);
define('wxLB_BOTTOM', 1);
define('wxLB_DEFAULT', 1);
define('wxLB_LEFT', 1);
define('wxLB_RIGHT', 1);
define('wxLB_TOP', 1);
define('wxAUI_NB_BOTTOM', 1);
define('wxAUI_NB_CLOSE_BUTTON', 1);
define('wxAUI_NB_CLOSE_ON_ACTIVE_TAB', 1);
define('wxAUI_NB_CLOSE_ON_ALL_TABS', 1);
define('wxAUI_NB_DEFAULT_STYLE', 1);
define('wxAUI_NB_SCROLL_BUTTONS', 1);
define('wxAUI_NB_TAB_EXTERNAL_MOVE', 1);
define('wxAUI_NB_TAB_FIXED_WIDTH', 1);
define('wxAUI_NB_TAB_MOVE', 1);
define('wxAUI_NB_TAB_SPLIT', 1);
define('wxAUI_NB_TOP', 1);
define('wxAUI_NB_WINDOWLIST_BUTTON', 1);
define('wxITEM_CHECK', 1);
define('wxITEM_NORMAL', 1);
define('wxITEM_RADIO', 1);
define('wxSPLASH_CENTRE_ON_PARENT', 1);
define('wxSPLASH_CENTRE_ON_SCREEN', 1);
define('wxSPLASH_NO_CENTRE', 1);
define('wxSPLASH_TIMEOUT', 1);
define('wxSPLASH_NO_TIMEOUT', 1);
define('wxEVT_ACTIVATE', 1);
define('wxEVT_ACTIVATE_APP', 1);
define('wxEVT_AUI_FIND_MANAGER', 1);
define('wxEVT_AUI_PANE_BUTTON', 1);
define('wxEVT_AUI_PANE_CLOSE', 1);
define('wxEVT_AUI_PANE_MAXIMIZE', 1);
define('wxEVT_AUI_PANE_RESTORE', 1);
define('wxEVT_AUI_RENDER', 1);
define('wxEVT_CALCULATE_LAYOUT', 1);
define('wxEVT_CALENDAR_DAY_CHANGED', 1);
define('wxEVT_CALENDAR_DOUBLECLICKED', 1);
define('wxEVT_CALENDAR_MONTH_CHANGED', 1);
define('wxEVT_CALENDAR_SEL_CHANGED', 1);
define('wxEVT_CALENDAR_WEEKDAY_CLICKED', 1);
define('wxEVT_CALENDAR_YEAR_CHANGED', 1);
define('wxEVT_CHAR', 1);
define('wxEVT_CHAR_HOOK', 1);
define('wxEVT_CHILD_FOCUS', 1);
define('wxEVT_CLOSE_WINDOW', 1);
define('wxEVT_COMMAND_AUINOTEBOOK_ALLOW_DND', 1);
define('wxEVT_COMMAND_AUINOTEBOOK_BEGIN_DRAG', 1);
define('wxEVT_COMMAND_AUINOTEBOOK_BG_DCLICK', 1);
define('wxEVT_COMMAND_AUINOTEBOOK_BUTTON', 1);
define('wxEVT_COMMAND_AUINOTEBOOK_DRAG_DONE', 1);
define('wxEVT_COMMAND_AUINOTEBOOK_DRAG_MOTION', 1);
define('wxEVT_COMMAND_AUINOTEBOOK_END_DRAG', 1);
define('wxEVT_COMMAND_AUINOTEBOOK_PAGE_CHANGED', 1);
define('wxEVT_COMMAND_AUINOTEBOOK_PAGE_CHANGING', 1);
define('wxEVT_COMMAND_AUINOTEBOOK_PAGE_CLOSE', 1);
define('wxEVT_COMMAND_AUINOTEBOOK_PAGE_CLOSED', 1);
define('wxEVT_COMMAND_AUINOTEBOOK_TAB_MIDDLE_DOWN', 1);
define('wxEVT_COMMAND_AUINOTEBOOK_TAB_MIDDLE_UP', 1);
define('wxEVT_COMMAND_AUINOTEBOOK_TAB_RIGHT_DOWN', 1);
define('wxEVT_COMMAND_AUINOTEBOOK_TAB_RIGHT_UP', 1);
define('wxEVT_COMMAND_AUITOOLBAR_BEGIN_DRAG', 1);
define('wxEVT_COMMAND_AUITOOLBAR_MIDDLE_CLICK', 1);
define('wxEVT_COMMAND_AUITOOLBAR_OVERFLOW_CLICK', 1);
define('wxEVT_COMMAND_AUITOOLBAR_RIGHT_CLICK', 1);
define('wxEVT_COMMAND_AUITOOLBAR_TOOL_DROPDOWN', 1);
define('wxEVT_COMMAND_BOOKCTRL_PAGE_CHANGED', 1);
define('wxEVT_COMMAND_BOOKCTRL_PAGE_CHANGING', 1);
define('wxEVT_COMMAND_BUTTON_CLICKED', 1);
define('wxEVT_COMMAND_CHECKBOX_CLICKED', 1);
define('wxEVT_COMMAND_CHECKLISTBOX_TOGGLED', 1);
define('wxEVT_COMMAND_CHOICEBOOK_PAGE_CHANGED', 1);
define('wxEVT_COMMAND_CHOICEBOOK_PAGE_CHANGING', 1);
define('wxEVT_COMMAND_CHOICE_SELECTED', 1);
define('wxEVT_COMMAND_COLLPANE_CHANGED', 1);
define('wxEVT_COMMAND_COLOURPICKER_CHANGED', 1);
define('wxEVT_COMMAND_COMBOBOX_SELECTED', 1);
define('wxEVT_COMMAND_DIRPICKER_CHANGED', 1);
define('wxEVT_COMMAND_ENTER', 1);
define('wxEVT_COMMAND_FILEPICKER_CHANGED', 1);
define('wxEVT_COMMAND_FIND', 1);
define('wxEVT_COMMAND_FIND_CLOSE', 1);
define('wxEVT_COMMAND_FIND_NEXT', 1);
define('wxEVT_COMMAND_FIND_REPLACE', 1);
define('wxEVT_COMMAND_FIND_REPLACE_ALL', 1);
define('wxEVT_COMMAND_FONTPICKER_CHANGED', 1);
define('wxEVT_COMMAND_HTML_CELL_CLICKED', 1);
define('wxEVT_COMMAND_HTML_CELL_HOVER', 1);
define('wxEVT_COMMAND_HTML_LINK_CLICKED', 1);
define('wxEVT_COMMAND_HYPERLINK', 1);
define('wxEVT_COMMAND_KILL_FOCUS', 1);
define('wxEVT_COMMAND_LEFT_CLICK', 1);
define('wxEVT_COMMAND_LEFT_DCLICK', 1);
define('wxEVT_COMMAND_LISTBOOK_PAGE_CHANGED', 1);
define('wxEVT_COMMAND_LISTBOOK_PAGE_CHANGING', 1);
define('wxEVT_COMMAND_LISTBOX_DOUBLECLICKED', 1);
define('wxEVT_COMMAND_LISTBOX_SELECTED', 1);
define('wxEVT_COMMAND_LIST_BEGIN_DRAG', 1);
define('wxEVT_COMMAND_LIST_BEGIN_LABEL_EDIT', 1);
define('wxEVT_COMMAND_LIST_BEGIN_RDRAG', 1);
define('wxEVT_COMMAND_LIST_CACHE_HINT', 1);
define('wxEVT_COMMAND_LIST_COL_BEGIN_DRAG', 1);
define('wxEVT_COMMAND_LIST_COL_CLICK', 1);
define('wxEVT_COMMAND_LIST_COL_DRAGGING', 1);
define('wxEVT_COMMAND_LIST_COL_END_DRAG', 1);
define('wxEVT_COMMAND_LIST_COL_RIGHT_CLICK', 1);
define('wxEVT_COMMAND_LIST_DELETE_ALL_ITEMS', 1);
define('wxEVT_COMMAND_LIST_DELETE_ITEM', 1);
define('wxEVT_COMMAND_LIST_END_LABEL_EDIT', 1);
define('wxEVT_COMMAND_LIST_INSERT_ITEM', 1);
define('wxEVT_COMMAND_LIST_ITEM_ACTIVATED', 1);
define('wxEVT_COMMAND_LIST_ITEM_DESELECTED', 1);
define('wxEVT_COMMAND_LIST_ITEM_FOCUSED', 1);
define('wxEVT_COMMAND_LIST_ITEM_MIDDLE_CLICK', 1);
define('wxEVT_COMMAND_LIST_ITEM_RIGHT_CLICK', 1);
define('wxEVT_COMMAND_LIST_ITEM_SELECTED', 1);
define('wxEVT_COMMAND_LIST_KEY_DOWN', 1);
define('wxEVT_COMMAND_MENU_SELECTED', 1);
define('wxEVT_COMMAND_NOTEBOOK_PAGE_CHANGED', 1);
define('wxEVT_COMMAND_NOTEBOOK_PAGE_CHANGING', 1);
define('wxEVT_COMMAND_RADIOBOX_SELECTED', 1);
define('wxEVT_COMMAND_RADIOBUTTON_SELECTED', 1);
define('wxEVT_COMMAND_RICHTEXT_BUFFER_RESET', 1);
define('wxEVT_COMMAND_RICHTEXT_CHARACTER', 1);
define('wxEVT_COMMAND_RICHTEXT_CONTENT_DELETED', 1);
define('wxEVT_COMMAND_RICHTEXT_CONTENT_INSERTED', 1);
define('wxEVT_COMMAND_RICHTEXT_DELETE', 1);
define('wxEVT_COMMAND_RICHTEXT_LEFT_CLICK', 1);
define('wxEVT_COMMAND_RICHTEXT_LEFT_DCLICK', 1);
define('wxEVT_COMMAND_RICHTEXT_MIDDLE_CLICK', 1);
define('wxEVT_COMMAND_RICHTEXT_RETURN', 1);
define('wxEVT_COMMAND_RICHTEXT_RIGHT_CLICK', 1);
define('wxEVT_COMMAND_RICHTEXT_SELECTION_CHANGED', 1);
define('wxEVT_COMMAND_RICHTEXT_STYLESHEET_CHANGED', 1);
define('wxEVT_COMMAND_RICHTEXT_STYLESHEET_CHANGING', 1);
define('wxEVT_COMMAND_RICHTEXT_STYLESHEET_REPLACED', 1);
define('wxEVT_COMMAND_RICHTEXT_STYLESHEET_REPLACING', 1);
define('wxEVT_COMMAND_RICHTEXT_STYLE_CHANGED', 1);
define('wxEVT_COMMAND_RIGHT_CLICK', 1);
define('wxEVT_COMMAND_RIGHT_DCLICK', 1);
define('wxEVT_COMMAND_SEARCHCTRL_CANCEL_BTN', 1);
define('wxEVT_COMMAND_SEARCHCTRL_SEARCH_BTN', 1);
define('wxEVT_COMMAND_SET_FOCUS', 1);
define('wxEVT_COMMAND_SLIDER_UPDATED', 1);
define('wxEVT_COMMAND_SPINCTRL_UPDATED', 1);
define('wxEVT_COMMAND_SPLITTER_DOUBLECLICKED', 1);
define('wxEVT_COMMAND_SPLITTER_SASH_POS_CHANGED', 1);
define('wxEVT_COMMAND_SPLITTER_SASH_POS_CHANGING', 1);
define('wxEVT_COMMAND_SPLITTER_UNSPLIT', 1);
define('wxEVT_COMMAND_TEXT_COPY', 1);
define('wxEVT_COMMAND_TEXT_CUT', 1);
define('wxEVT_COMMAND_TEXT_ENTER', 1);
define('wxEVT_COMMAND_TEXT_MAXLEN', 1);
define('wxEVT_COMMAND_TEXT_PASTE', 1);
define('wxEVT_COMMAND_TEXT_UPDATED', 1);
define('wxEVT_COMMAND_TEXT_URL', 1);
define('wxEVT_COMMAND_TOGGLEBUTTON_CLICKED', 1);
define('wxEVT_COMMAND_TOOLBOOK_PAGE_CHANGED', 1);
define('wxEVT_COMMAND_TOOLBOOK_PAGE_CHANGING', 1);
define('wxEVT_COMMAND_TOOL_CLICKED', 1);
define('wxEVT_COMMAND_TOOL_ENTER', 1);
define('wxEVT_COMMAND_TOOL_RCLICKED', 1);
define('wxEVT_COMMAND_TREEBOOK_NODE_COLLAPSED', 1);
define('wxEVT_COMMAND_TREEBOOK_NODE_EXPANDED', 1);
define('wxEVT_COMMAND_TREEBOOK_PAGE_CHANGED', 1);
define('wxEVT_COMMAND_TREEBOOK_PAGE_CHANGING', 1);
define('wxEVT_COMMAND_TREE_BEGIN_DRAG', 1);
define('wxEVT_COMMAND_TREE_BEGIN_LABEL_EDIT', 1);
define('wxEVT_COMMAND_TREE_BEGIN_RDRAG', 1);
define('wxEVT_COMMAND_TREE_DELETE_ITEM', 1);
define('wxEVT_COMMAND_TREE_END_DRAG', 1);
define('wxEVT_COMMAND_TREE_END_LABEL_EDIT', 1);
define('wxEVT_COMMAND_TREE_GET_INFO', 1);
define('wxEVT_COMMAND_TREE_ITEM_ACTIVATED', 1);
define('wxEVT_COMMAND_TREE_ITEM_COLLAPSED', 1);
define('wxEVT_COMMAND_TREE_ITEM_COLLAPSING', 1);
define('wxEVT_COMMAND_TREE_ITEM_EXPANDED', 1);
define('wxEVT_COMMAND_TREE_ITEM_EXPANDING', 1);
define('wxEVT_COMMAND_TREE_ITEM_GETTOOLTIP', 1);
define('wxEVT_COMMAND_TREE_ITEM_MENU', 1);
define('wxEVT_COMMAND_TREE_ITEM_MIDDLE_CLICK', 1);
define('wxEVT_COMMAND_TREE_ITEM_RIGHT_CLICK', 1);
define('wxEVT_COMMAND_TREE_KEY_DOWN', 1);
define('wxEVT_COMMAND_TREE_SEL_CHANGED', 1);
define('wxEVT_COMMAND_TREE_SEL_CHANGING', 1);
define('wxEVT_COMMAND_TREE_SET_INFO', 1);
define('wxEVT_COMMAND_TREE_STATE_IMAGE_CLICK', 1);
define('wxEVT_COMMAND_VLBOX_SELECTED', 1);
define('wxEVT_CONTEXT_MENU', 1);
define('wxEVT_CREATE', 1);
define('wxEVT_DATE_CHANGED', 1);
define('wxEVT_DESTROY', 1);
define('wxEVT_DETAILED_HELP', 1);
define('wxEVT_DISPLAY_CHANGED', 1);
define('wxEVT_DROP_FILES', 1);
define('wxEVT_END_PROCESS', 1);
define('wxEVT_END_SESSION', 1);
define('wxEVT_ENTER_WINDOW', 1);
define('wxEVT_ERASE_BACKGROUND	', 1);
define('wxEVT_GRID_CELL_BEGIN_DRAG', 1);
define('wxEVT_GRID_CELL_CHANGE', 1);
define('wxEVT_GRID_CELL_LEFT_CLICK', 1);
define('wxEVT_GRID_CELL_LEFT_DCLICK', 1);
define('wxEVT_GRID_CELL_RIGHT_CLICK', 1);
define('wxEVT_GRID_CELL_RIGHT_DCLICK', 1);
define('wxEVT_GRID_COL_MOVE', 1);
define('wxEVT_GRID_COL_SIZE', 1);
define('wxEVT_GRID_EDITOR_CREATED', 1);
define('wxEVT_GRID_EDITOR_HIDDEN', 1);
define('wxEVT_GRID_EDITOR_SHOWN', 1);
define('wxEVT_GRID_LABEL_LEFT_CLICK', 1);
define('wxEVT_GRID_LABEL_LEFT_DCLICK', 1);
define('wxEVT_GRID_LABEL_RIGHT_CLICK', 1);
define('wxEVT_GRID_LABEL_RIGHT_DCLICK', 1);
define('wxEVT_GRID_RANGE_SELECT', 1);
define('wxEVT_GRID_ROW_SIZE', 1);
define('wxEVT_GRID_SELECT_CELL', 1);
define('wxEVT_HELP', 1);
define('wxEVT_HIBERNATE', 1);
define('wxEVT_ICONIZE', 1);
define('wxEVT_IDLE', 1);
define('wxEVT_INIT_DIALOG', 1);
define('wxEVT_JOY_BUTTON_DOWN', 1);
define('wxEVT_JOY_BUTTON_UP', 1);
define('wxEVT_JOY_MOVE', 1);
define('wxEVT_JOY_ZMOVE', 1);
define('wxEVT_KEY_DOWN', 1);
define('wxEVT_KEY_UP', 1);
define('wxEVT_KILL_FOCUS', 1);
define('wxEVT_LEAVE_WINDOW', 1);
define('wxEVT_LEFT_DCLICK', 1);
define('wxEVT_LEFT_DOWN', 1);
define('wxEVT_LEFT_UP', 1);
define('wxEVT_MAXIMIZE', 1);
define('wxEVT_MENU_CLOSE', 1);
define('wxEVT_MENU_HIGHLIGHT', 1);
define('wxEVT_MENU_OPEN', 1);
define('wxEVT_MIDDLE_DCLICK', 1);
define('wxEVT_MIDDLE_DOWN', 1);
define('wxEVT_MIDDLE_UP', 1);
define('wxEVT_MOTION', 1);
define('wxEVT_MOUSEWHEEL', 1);
define('wxEVT_MOUSE_CAPTURE_CHANGED', 1);
define('wxEVT_MOUSE_CAPTURE_LOST', 1);
define('wxEVT_MOVE', 1);
define('wxEVT_MOVING', 1);
define('wxEVT_NAVIGATION_KEY', 1);
define('wxEVT_NC_PAINT', 1);
define('wxEVT_PAINT', 1);
define('wxEVT_PALETTE_CHANGED', 1);
define('wxEVT_QUERY_END_SESSION', 1);
define('wxEVT_QUERY_LAYOUT_INFO', 1);
define('wxEVT_QUERY_NEW_PALETTE', 1);
define('wxEVT_RIGHT_DCLICK', 1);
define('wxEVT_RIGHT_DOWN', 1);
define('wxEVT_RIGHT_UP', 1);
define('wxEVT_SASH_DRAGGED', 1);
define('wxEVT_SCROLLWIN_BOTTOM', 1);
define('wxEVT_SCROLLWIN_LINEDOWN', 1);
define('wxEVT_SCROLLWIN_LINEUP', 1);
define('wxEVT_SCROLLWIN_PAGEDOWN', 1);
define('wxEVT_SCROLLWIN_PAGEUP', 1);
define('wxEVT_SCROLLWIN_THUMBRELEASE', 1);
define('wxEVT_SCROLLWIN_THUMBTRACK', 1);
define('wxEVT_SCROLLWIN_TOP', 1);
define('wxEVT_SCROLL_BOTTOM', 1);
define('wxEVT_SCROLL_CHANGED', 1);
define('wxEVT_SCROLL_LINEDOWN', 1);
define('wxEVT_SCROLL_LINEUP', 1);
define('wxEVT_SCROLL_PAGEDOWN', 1);
define('wxEVT_SCROLL_PAGEUP', 1);
define('wxEVT_SCROLL_THUMBRELEASE', 1);
define('wxEVT_SCROLL_THUMBTRACK', 1);
define('wxEVT_SCROLL_TOP', 1);
define('wxEVT_SET_CURSOR', 1);
define('wxEVT_SET_FOCUS', 1);
define('wxEVT_SHOW', 1);
define('wxEVT_SIZE', 1);
define('wxEVT_SIZING', 1);
define('wxEVT_SOCKET', 1);
define('wxEVT_SYS_COLOUR_CHANGED', 1);
define('wxEVT_TASKBAR_CLICK', 1);
define('wxEVT_TASKBAR_LEFT_DCLICK', 1);
define('wxEVT_TASKBAR_LEFT_DOWN', 1);
define('wxEVT_TASKBAR_LEFT_UP', 1);
define('wxEVT_TASKBAR_MOVE', 1);
define('wxEVT_TASKBAR_RIGHT_DCLICK', 1);
define('wxEVT_TASKBAR_RIGHT_DOWN', 1);
define('wxEVT_TASKBAR_RIGHT_UP', 1);
define('wxEVT_TIMER', 1);
define('wxEVT_UPDATE_UI', 1);
define('wxEVT_WIZARD_CANCEL', 1);
define('wxEVT_WIZARD_FINISHED', 1);
define('wxEVT_WIZARD_HELP', 1);
define('wxEVT_WIZARD_PAGE_CHANGED', 1);
define('wxEVT_WIZARD_PAGE_CHANGING', 1);
define('wxEVT_WIZARD_PAGE_SHOWN', 1);

//wxWidgets enum constants

define('wxCLEAR', 1);
define('wxXOR', 1);
define('wxINVERT', 1);
define('wxOR_REVERSE', 1);
define('wxAND_REVERSE', 1);
define('wxCOPY', 1);
define('wxAND', 1);
define('wxAND_INVERT', 1);
define('wxNO_OP', 1);
define('wxNOR', 1);
define('wxEQUIV', 1);
define('wxSRC_INVERT', 1);
define('wxOR_INVERT', 1);
define('wxNAND', 1);
define('wxOR', 1);
define('wxSET', 1);
define('wxFLOOD_SURFACE', 1);
define('wxFLOOD_BORDER', 1);
define('wxMM_TEXT', 1);
define('wxMM_METRIC', 1);
define('wxMM_LOMETRIC', 1);
define('wxMM_TWIPS', 1);
define('wxMM_POINTS', 1);
define('wxDIALOG_ADAPTATION_MODE_DEFAULT', 1);
define('wxDIALOG_ADAPTATION_MODE_ENABLED', 1);
define('wxDIALOG_ADAPTATION_MODE_DISABLED', 1);
define('wxDragError', 1);
define('wxDragCopy', 1);
define('wxDragMove', 1);
define('wxDragLink', 1);
define('wxDragCancel', 1);
define('wxFONTFAMILY_DEFAULT', 1);
define('wxFONTFAMILY_DECORATIVE', 1);
define('wxFONTFAMILY_ROMAN', 1);
define('wxFONTFAMILY_SCRIPT', 1);
define('wxFONTFAMILY_SWISS', 1);
define('wxFONTFAMILY_MODERN', 1);
define('wxFONTFAMILY_TELETYPE', 1);
define('wxFONTFAMILY_MAX', 1);
define('wxFONTFAMILY_UNKNOWN', 1);
define('wxFONTSTYLE_NORMAL', 1);
define('wxFONTSTYLE_ITALIC', 1);
define('wxFONTSTYLE_SLANT', 1);
define('wxFONTSTYLE_MAX', 1);
define('wxFONTWEIGHT_NORMAL', 1);
define('wxFONTWEIGHT_LIGHT', 1);
define('wxFONTWEIGHT_BOLD', 1);
define('wxFONTWEIGHT_MAX', 1);
define('wxFONTSIZE_XX_SMALL', 1);
define('wxFONTSIZE_X_SMALL', 1);
define('wxFONTSIZE_SMALL', 1);
define('wxFONTSIZE_MEDIUM', 1);
define('wxFONTSIZE_LARGE', 1);
define('wxFONTSIZE_X_LARGE', 1);
define('wxFONTSIZE_XX_LARGE', 1);
define('wxFONTFLAG_DEFAULT', 1);
define('wxFONTFLAG_ITALIC', 1);
define('wxFONTFLAG_SLANT', 1);
define('wxFONTFLAG_LIGHT', 1);
define('wxFONTFLAG_BOLD', 1);
define('wxFONTFLAG_ANTIALIASED', 1);
define('wxFONTFLAG_NOT_ANTIALIASED', 1);
define('wxFONTFLAG_UNDERLINED', 1);
define('wxFONTFLAG_STRIKETHROUGH', 1);
define('wxFONTFLAG_MASK', 1);
define('wxFONTENCODING_SYSTEM', 1);
define('wxFONTENCODING_DEFAULT', 1);
define('wxFONTENCODING_ISO8859_1', 1);
define('wxFONTENCODING_ISO8859_2', 1);
define('wxFONTENCODING_ISO8859_3', 1);
define('wxFONTENCODING_ISO8859_4', 1);
define('wxFONTENCODING_ISO8859_5', 1);
define('wxFONTENCODING_ISO8859_6', 1);
define('wxFONTENCODING_ISO8859_7', 1);
define('wxFONTENCODING_ISO8859_8', 1);
define('wxFONTENCODING_ISO8859_9', 1);
define('wxFONTENCODING_ISO8859_10', 1);
define('wxFONTENCODING_ISO8859_11', 1);
define('wxFONTENCODING_ISO8859_12', 1);
define('wxFONTENCODING_ISO8859_13', 1);
define('wxFONTENCODING_ISO8859_14', 1);
define('wxFONTENCODING_ISO8859_15', 1);
define('wxFONTENCODING_ISO8859_MAX', 1);
define('wxFONTENCODING_KOI8', 1);
define('wxFONTENCODING_KOI8_U', 1);
define('wxFONTENCODING_ALTERNATIVE', 1);
define('wxFONTENCODING_BULGARIAN', 1);
define('wxFONTENCODING_CP437', 1);
define('wxFONTENCODING_CP850', 1);
define('wxFONTENCODING_CP852', 1);
define('wxFONTENCODING_CP855', 1);
define('wxFONTENCODING_CP866', 1);
define('wxFONTENCODING_CP874', 1);
define('wxFONTENCODING_CP932', 1);
define('wxFONTENCODING_CP936', 1);
define('wxFONTENCODING_CP949', 1);
define('wxFONTENCODING_CP950', 1);
define('wxFONTENCODING_CP1250', 1);
define('wxFONTENCODING_CP1251', 1);
define('wxFONTENCODING_CP1252', 1);
define('wxFONTENCODING_CP1253', 1);
define('wxFONTENCODING_CP1254', 1);
define('wxFONTENCODING_CP1255', 1);
define('wxFONTENCODING_CP1256', 1);
define('wxFONTENCODING_CP1257', 1);
define('wxFONTENCODING_CP12_MAX', 1);
define('wxFONTENCODING_UTF7', 1);
define('wxFONTENCODING_UTF8', 1);
define('wxFONTENCODING_EUC_JP', 1);
define('wxFONTENCODING_UTF16BE', 1);
define('wxFONTENCODING_UTF16LE', 1);
define('wxFONTENCODING_UTF32BE', 1);
define('wxFONTENCODING_UTF32LE', 1);
define('wxFONTENCODING_MACROMAN', 1);
define('wxFONTENCODING_MACJAPANESE', 1);
define('wxFONTENCODING_MACCHINESETRAD', 1);
define('wxFONTENCODING_MACKOREAN', 1);
define('wxFONTENCODING_MACARABIC', 1);
define('wxFONTENCODING_MACHEBREW', 1);
define('wxFONTENCODING_MACGREEK', 1);
define('wxFONTENCODING_MACCYRILLIC', 1);
define('wxFONTENCODING_MACDEVANAGARI', 1);
define('wxFONTENCODING_MACGURMUKHI', 1);
define('wxFONTENCODING_MACGUJARATI', 1);
define('wxFONTENCODING_MACORIYA', 1);
define('wxFONTENCODING_MACBENGALI', 1);
define('wxFONTENCODING_MACTAMIL', 1);
define('wxFONTENCODING_MACTELUGU', 1);
define('wxFONTENCODING_MACKANNADA', 1);
define('wxFONTENCODING_MACMALAJALAM', 1);
define('wxFONTENCODING_MACSINHALESE', 1);
define('wxFONTENCODING_MACBURMESE', 1);
define('wxFONTENCODING_MACKHMER', 1);
define('wxFONTENCODING_MACTHAI', 1);
define('wxFONTENCODING_MACLAOTIAN', 1);
define('wxFONTENCODING_MACGEORGIAN', 1);
define('wxFONTENCODING_MACARMENIAN', 1);
define('wxFONTENCODING_MACCHINESESIMP', 1);
define('wxFONTENCODING_MACTIBETAN', 1);
define('wxFONTENCODING_MACMONGOLIAN', 1);
define('wxFONTENCODING_MACETHIOPIC', 1);
define('wxFONTENCODING_MACCENTRALEUR', 1);
define('wxFONTENCODING_MACVIATNAMESE', 1);
define('wxFONTENCODING_MACARABICEXT', 1);
define('wxFONTENCODING_MACSYMBOL', 1);
define('wxFONTENCODING_MACDINGBATS', 1);
define('wxFONTENCODING_MACTURKISH', 1);
define('wxFONTENCODING_MACCROATIAN', 1);
define('wxFONTENCODING_MACICELANDIC', 1);
define('wxFONTENCODING_MACROMANIAN', 1);
define('wxFONTENCODING_MACCELTIC', 1);
define('wxFONTENCODING_MACGAELIC', 1);
define('wxFONTENCODING_MACKEYBOARD', 1);
define('wxFONTENCODING_ISO2022_JP', 1);
define('wxFONTENCODING_MAX', 1);
define('wxFONTENCODING_MACMIN', 1);
define('wxFONTENCODING_MACMAX', 1);
define('wxFONTENCODING_UTF16', 1);
define('wxFONTENCODING_UTF32', 1);
define('wxFONTENCODING_UNICODE', 1);
define('wxFONTENCODING_GB2312', 1);
define('wxFONTENCODING_BIG5', 1);
define('wxFONTENCODING_SHIFT_JIS', 1);
define('wxFONTENCODING_EUC_KR', 1);
define('wxGRID_FLOAT_FORMAT_FIXED', 1);
define('wxGRID_FLOAT_FORMAT_SCIENTIFIC', 1);
define('wxGRID_FLOAT_FORMAT_COMPACT', 1);
define('wxGRID_FLOAT_FORMAT_UPPER', 1);
define('wxGRID_FLOAT_FORMAT_DEFAULT', 1);
define('wxLIST_FORMAT_LEFT', 1);
define('wxLIST_FORMAT_RIGHT', 1);
define('wxLIST_FORMAT_CENTRE', 1);
define('wxLIST_FORMAT_CENTER', 1);
define('wxLOG_FatalError', 1);
define('wxLOG_Error', 1);
define('wxLOG_Warning', 1);
define('wxLOG_Message', 1);
define('wxLOG_Status', 1);
define('wxLOG_Info', 1);
define('wxLOG_Debug', 1);
define('wxLOG_Trace', 1);
define('wxLOG_Progress', 1);
define('wxLOG_User', 1);
define('wxLOG_Max', 1);
define('wxPG_AUTO_SORT', 1);
define('wxPG_HIDE_CATEGORIES', 1);
define('wxPG_ALPHABETIC_MODE', 1);
define('wxPG_BOLD_MODIFIED', 1);
define('wxPG_SPLITTER_AUTO_CENTER', 1);
define('wxPG_TOOLTIPS', 1);
define('wxPG_HIDE_MARGIN', 1);
define('wxPG_STATIC_SPLITTER', 1);
define('wxPG_STATIC_LAYOUT', 1);
define('wxPG_LIMITED_EDITING', 1);
define('wxPG_TOOLBAR', 1);
define('wxPG_DESCRIPTION', 1);
define('wxPG_NO_INTERNAL_BORDER', 1);
define('wxPG_EX_INIT_NOCAT', 1);
define('wxPG_EX_NO_FLAT_TOOLBAR', 1);
define('wxPG_EX_MODE_BUTTONS', 1);
define('wxPG_EX_HELP_AS_TOOLTIPS', 1);
define('wxPG_EX_NATIVE_DOUBLE_BUFFERING', 1);
define('wxPG_EX_AUTO_UNSPECIFIED_VALUES', 1);
define('wxPG_EX_WRITEONLY_BUILTIN_ATTRIBUTES', 1);
define('wxPG_EX_HIDE_PAGE_BUTTONS', 1);
define('wxPG_EX_MULTIPLE_SELECTION', 1);
define('wxPG_EX_ENABLE_TLP_TRACKING', 1);
define('wxPG_EX_NO_TOOLBAR_DIVIDER', 1);
define('wxPG_EX_TOOLBAR_SEPARATOR', 1);
define('wxPG_VFB_STAY_IN_PROPERTY', 1);
define('wxPG_VFB_BEEP', 1);
define('wxPG_VFB_MARK_CELL', 1);
define('wxPG_VFB_SHOW_MESSAGE', 1);
define('wxPG_VFB_SHOW_MESSAGEBOX', 1);
define('wxPG_VFB_SHOW_MESSAGE_ON_STATUSBAR', 1);
define('wxPG_VFB_DEFAULT', 1);
define('wxPG_ACTION_INVALID', 1);
define('wxPG_ACTION_NEXT_PROPERTY', 1);
define('wxPG_ACTION_PREV_PROPERTY', 1);
define('wxPG_ACTION_EXPAND_PROPERTY', 1);
define('wxPG_ACTION_COLLAPSE_PROPERTY', 1);
define('wxPG_ACTION_CANCEL_EDIT', 1);
define('wxPG_ACTION_EDIT', 1);
define('wxPG_ACTION_PRESS_BUTTON', 1);
define('wxPG_ACTION_MAX', 1);
define('wxRichTextCtrlSelectionState_Normal', 1);
define('wxRichTextCtrlSelectionState_CommonAncestor', 1);
define('wxFLEX_GROWMODE_SPECIFIED', 1);
define('wxFLEX_GROWMODE_ALL', 1);
define('wxSTREAM_NO_ERROR', 1);
define('wxSTREAM_EOF', 1);
define('wxSTREAM_WRITE_ERROR', 1);
define('wxSTREAM_READ_ERROR', 1);
define('wxSTREAM_PROTOCOL', 1);
define('wxSTREAM_MIMETYPE', 1);
define('wxSTREAM_ENCODING', 1);
define('wxSTREAM_FILEEXT', 1);
define('wxCOND_NO_ERROR', 1);
define('wxCOND_INVALID', 1);
define('wxCOND_TIMEOUT', 1);
define('wxCOND_MISC_ERROR', 1);
define('wxCRITSEC_DEFAULT', 1);
define('wxCRITSEC_NON_RECURSIVE', 1);
define('wxTHREAD_WAIT_BLOCK', 1);
define('wxTHREAD_WAIT_YIELD', 1);
define('wxTHREAD_WAIT_DEFAULT', 1);
define('wxTHREAD_DETACHED', 1);
define('wxTHREAD_JOINABLE', 1);
define('wxTHREAD_NO_ERROR', 1);
define('wxTHREAD_NO_RESOURCE', 1);
define('wxTHREAD_RUNNING', 1);
define('wxTHREAD_NOT_RUNNING', 1);
define('wxTHREAD_KILLED', 1);
define('wxTHREAD_MISC_ERROR', 1);
define('wxSEMA_NO_ERROR', 1);
define('wxSEMA_INVALID', 1);
define('wxSEMA_BUSY', 1);
define('wxSEMA_TIMEOUT', 1);
define('wxSEMA_OVERFLOW', 1);
define('wxSEMA_MISC_ERROR', 1);
define('wxMUTEX_DEFAULT', 1);
define('wxMUTEX_RECURSIVE', 1);
define('wxMUTEX_NO_ERROR', 1);
define('wxMUTEX_INVALID', 1);
define('wxMUTEX_DEAD_LOCK', 1);
define('wxMUTEX_BUSY', 1);
define('wxMUTEX_UNLOCKED', 1);
define('wxMUTEX_TIMEOUT', 1);
define('wxMUTEX_MISC_ERROR', 1);
define('wxAUI_TB_TEXT', 1);
define('wxAUI_TB_NO_TOOLTIPS', 1);
define('wxAUI_TB_NO_AUTORESIZE', 1);
define('wxAUI_TB_GRIPPER', 1);
define('wxAUI_TB_OVERFLOW', 1);
define('wxAUI_TB_VERTICAL', 1);
define('wxAUI_TB_HORZ_LAYOUT', 1);
define('wxAUI_TB_HORIZONTAL', 1);
define('wxAUI_TB_HORZ_TEXT', 1);
define('wxAUI_ORIENTATION_MASK', 1);
define('wxAUI_TB_DEFAULT_STYLE', 1);
define('wxAUI_TBART_SEPARATOR_SIZE', 1);
define('wxAUI_TBART_GRIPPER_SIZE', 1);
define('wxAUI_TBART_OVERFLOW_SIZE', 1);
define('wxAUI_TBTOOL_TEXT_LEFT', 1);
define('wxAUI_TBTOOL_TEXT_RIGHT', 1);
define('wxAUI_TBTOOL_TEXT_TOP', 1);
define('wxAUI_TBTOOL_TEXT_BOTTOM', 1);
define('wxTOOL_STYLE_BUTTON', 1);
define('wxTOOL_STYLE_SEPARATOR', 1);
define('wxTOOL_STYLE_CONTROL', 1);
define('wxANIMATION_TYPE_INVALID', 1);
define('wxANIMATION_TYPE_GIF', 1);
define('wxANIMATION_TYPE_ANI', 1);
define('wxANIMATION_TYPE_ANY', 1);
define('wxAUI_DOCKART_SASH_SIZE', 1);
define('wxAUI_DOCKART_CAPTION_SIZE', 1);
define('wxAUI_DOCKART_GRIPPER_SIZE', 1);
define('wxAUI_DOCKART_PANE_BORDER_SIZE', 1);
define('wxAUI_DOCKART_PANE_BUTTON_SIZE', 1);
define('wxAUI_DOCKART_BACKGROUND_COLOUR', 1);
define('wxAUI_DOCKART_SASH_COLOUR', 1);
define('wxAUI_DOCKART_ACTIVE_CAPTION_COLOUR', 1);
define('wxAUI_DOCKART_ACTIVE_CAPTION_GRADIENT_COLOUR', 1);
define('wxAUI_DOCKART_INACTIVE_CAPTION_COLOUR', 1);
define('wxAUI_DOCKART_INACTIVE_CAPTION_GRADIENT_COLOUR', 1);
define('wxAUI_DOCKART_ACTIVE_CAPTION_TEXT_COLOUR', 1);
define('wxAUI_DOCKART_INACTIVE_CAPTION_TEXT_COLOUR', 1);
define('wxAUI_DOCKART_BORDER_COLOUR', 1);
define('wxAUI_DOCKART_GRIPPER_COLOUR', 1);
define('wxAUI_DOCKART_CAPTION_FONT', 1);
define('wxAUI_DOCKART_GRADIENT_TYPE', 1);
define('wxAUI_GRADIENT_VERTICAL', 1);
define('wxAUI_GRADIENT_HORIZONTAL', 1);
define('wxAUI_BUTTON_STATE_NORMAL', 1);
define('wxAUI_BUTTON_STATE_HOVER', 1);
define('wxAUI_BUTTON_STATE_PRESSED', 1);
define('wxAUI_BUTTON_CLOSE', 1);
define('wxAUI_BUTTON_MAXIMIZE_RESTORE', 1);
define('wxAUI_BUTTON_MINIMIZE', 1);
define('wxAUI_BUTTON_PIN', 1);
define('wxAUI_BUTTON_OPTIONS', 1);
define('wxAUI_BUTTON_WINDOWLIST', 1);
define('wxAUI_BUTTON_LEFT', 1);
define('wxAUI_BUTTON_RIGHT', 1);
define('wxAUI_BUTTON_UP', 1);
define('wxAUI_BUTTON_DOWN', 1);
define('wxAUI_BUTTON_CUSTOM1', 1);
define('wxAUI_BUTTON_CUSTOM2', 1);
define('wxAUI_BUTTON_CUSTOM3', 1);
define('wxAUI_DOCK_TOP', 1);
define('wxAUI_DOCK_RIGHT', 1);
define('wxAUI_DOCK_BOTTOM', 1);
define('wxAUI_DOCK_LEFT', 1);
define('wxAUI_DOCK_CENTER', 1);
define('wxAUI_DOCK_CENTRE', 1);
define('wxAUI_MGR_ALLOW_FLOATING', 1);
define('wxAUI_MGR_ALLOW_ACTIVE_PANE', 1);
define('wxAUI_MGR_TRANSPARENT_DRAG', 1);
define('wxAUI_MGR_TRANSPARENT_HINT', 1);
define('wxAUI_MGR_VENETIAN_BLINDS_HINT', 1);
define('wxAUI_MGR_RECTANGLE_HINT', 1);
define('wxAUI_MGR_HINT_FADE', 1);
define('wxAUI_MGR_NO_VENETIAN_BLINDS_FADE', 1);
define('wxAUI_MGR_LIVE_RESIZE', 1);
define('wxAUI_MGR_DEFAULT', 1);
define('wxBase64DecodeMode_Strict', 1);
define('wxBase64DecodeMode_SkipWS', 1);
define('wxBase64DecodeMode_Relaxed', 1);
define('wxBRUSHSTYLE_INVALID', 1);
define('wxBRUSHSTYLE_SOLID', 1);
define('wxBRUSHSTYLE_TRANSPARENT', 1);
define('wxBRUSHSTYLE_STIPPLE_MASK_OPAQUE', 1);
define('wxBRUSHSTYLE_STIPPLE_MASK', 1);
define('wxBRUSHSTYLE_STIPPLE', 1);
define('wxBRUSHSTYLE_BDIAGONAL_HATCH', 1);
define('wxBRUSHSTYLE_CROSSDIAG_HATCH', 1);
define('wxBRUSHSTYLE_FDIAGONAL_HATCH', 1);
define('wxBRUSHSTYLE_CROSS_HATCH', 1);
define('wxBRUSHSTYLE_HORIZONTAL_HATCH', 1);
define('wxBRUSHSTYLE_VERTICAL_HATCH', 1);
define('wxBRUSHSTYLE_FIRST_HATCH', 1);
define('wxBRUSHSTYLE_LAST_HATCH', 1);
define('wxCAL_BORDER_SQUARE', 1);
define('wxCAL_BORDER_ROUND', 1);
define('wxCAL_HITTEST_NOWHERE', 1);
define('wxCAL_HITTEST_HEADER', 1);
define('wxCAL_HITTEST_DAY', 1);
define('wxCAL_HITTEST_INCMONTH', 1);
define('wxCAL_HITTEST_DECMONTH', 1);
define('wxCAL_HITTEST_SURROUNDING_WEEK', 1);
define('wxCAL_HITTEST_WEEK', 1);
define('wxCHK_UNCHECKED', 1);
define('wxCHK_CHECKED', 1);
define('wxCHK_UNDETERMINED', 1);
define('wxCMD_LINE_OPTION_MANDATORY', 1);
define('wxCMD_LINE_PARAM_OPTIONAL', 1);
define('wxCMD_LINE_PARAM_MULTIPLE', 1);
define('wxCMD_LINE_OPTION_HELP', 1);
define('wxCMD_LINE_NEEDS_SEPARATOR', 1);
define('wxCMD_LINE_SWITCH_NEGATABLE', 1);
define('wxCMD_LINE_VAL_STRING', 1);
define('wxCMD_LINE_VAL_NUMBER', 1);
define('wxCMD_LINE_VAL_DATE', 1);
define('wxCMD_LINE_VAL_DOUBLE', 1);
define('wxCMD_LINE_SWITCH', 1);
define('wxCMD_LINE_OPTION', 1);
define('wxCMD_LINE_PARAM', 1);
define('wxCMD_LINE_USAGE_TEXT', 1);
define('wxCMD_SWITCH_OFF', 1);
define('wxCMD_SWITCH_ON', 1);
define('wxCMD_LINE_SPLIT_DOS', 1);
define('wxCMD_LINE_SPLIT_UNIX', 1);
define('wxPRINTBIN_DEFAULT', 1);
define('wxPRINTBIN_ONLYONE', 1);
define('wxPRINTBIN_LOWER', 1);
define('wxPRINTBIN_MIDDLE', 1);
define('wxPRINTBIN_MANUAL', 1);
define('wxPRINTBIN_ENVELOPE', 1);
define('wxPRINTBIN_ENVMANUAL', 1);
define('wxPRINTBIN_AUTO', 1);
define('wxPRINTBIN_TRACTOR', 1);
define('wxPRINTBIN_SMALLFMT', 1);
define('wxPRINTBIN_LARGEFMT', 1);
define('wxPRINTBIN_LARGECAPACITY', 1);
define('wxPRINTBIN_CASSETTE', 1);
define('wxPRINTBIN_FORMSOURCE', 1);
define('wxPRINTBIN_USER', 1);
define('wxELLIPSIZE_FLAGS_PROCESS_MNEMONICS', 1);
define('wxELLIPSIZE_FLAGS_EXPAND_TABS', 1);
define('wxELLIPSIZE_FLAGS_DEFAULT', 1);
define('wxELLIPSIZE_START', 1);
define('wxELLIPSIZE_MIDDLE', 1);
define('wxELLIPSIZE_END', 1);
define('wxBOM_Unknown', 1);
define('wxBOM_UTF32BE', 1);
define('wxBOM_UTF32LE', 1);
define('wxBOM_UTF16BE', 1);
define('wxBOM_UTF16LE', 1);
define('wxBOM_UTF8', 1);
define('wxDATAVIEW_CELL_INERT', 1);
define('wxDATAVIEW_CELL_ACTIVATABLE', 1);
define('wxDATAVIEW_CELL_EDITABLE', 1);
define('wxDATAVIEW_CELL_SELECTED', 1);
define('wxDATAVIEW_CELL_PRELIT', 1);
define('wxDATAVIEW_CELL_INSENSITIVE', 1);
define('wxDATAVIEW_CELL_FOCUSED', 1);
define('wxDATAVIEW_COL_RESIZABLE', 1);
define('wxDATAVIEW_COL_SORTABLE', 1);
define('wxDATAVIEW_COL_REORDERABLE', 1);
define('wxDATAVIEW_COL_HIDDEN', 1);
define('wxCENTRE', 1);
define('wxCENTER', 1);
define('wxHORIZONTAL', 1);
define('wxVERTICAL', 1);
define('wxBOTH', 1);
define('wxORIENTATION_MASK', 1);
define('wxLEFT', 1);
define('wxRIGHT', 1);
define('wxUP', 1);
define('wxDOWN', 1);
define('wxTOP', 1);
define('wxBOTTOM', 1);
define('wxNORTH', 1);
define('wxSOUTH', 1);
define('wxWEST', 1);
define('wxEAST', 1);
define('wxALL', 1);
define('wxDIRECTION_MASK', 1);
define('wxALIGN_INVALID', 1);
define('wxALIGN_NOT', 1);
define('wxALIGN_CENTER_HORIZONTAL', 1);
define('wxALIGN_CENTRE_HORIZONTAL', 1);
define('wxALIGN_LEFT', 1);
define('wxALIGN_TOP', 1);
define('wxALIGN_RIGHT', 1);
define('wxALIGN_BOTTOM', 1);
define('wxALIGN_CENTER_VERTICAL', 1);
define('wxALIGN_CENTRE_VERTICAL', 1);
define('wxALIGN_CENTER', 1);
define('wxALIGN_CENTRE', 1);
define('wxALIGN_MASK', 1);
define('wxFIXED_MINSIZE', 1);
define('wxRESERVE_SPACE_EVEN_IF_HIDDEN', 1);
define('wxSIZER_FLAG_BITS_MASK', 1);
define('wxSTRETCH_NOT', 1);
define('wxSHRINK', 1);
define('wxGROW', 1);
define('wxEXPAND', 1);
define('wxSHAPED', 1);
define('wxTILE', 1);
define('wxSTRETCH_MASK', 1);
define('wxBORDER_DEFAULT', 1);
define('wxBORDER_STATIC', 1);
define('wxBORDER_SIMPLE', 1);
define('wxBORDER_RAISED', 1);
define('wxBORDER_SUNKEN', 1);
define('wxBORDER_DOUBLE', 1);
define('wxBORDER_THEME', 1);
define('wxBORDER_MASK', 1);
define('wxBG_STYLE_ERASE', 1);
define('wxBG_STYLE_SYSTEM', 1);
define('wxBG_STYLE_PAINT', 1);
define('wxBG_STYLE_COLOUR', 1);
define('wxBG_STYLE_TRANSPARENT', 1);
define('wxID_AUTO_LOWEST', 1);
define('wxID_AUTO_HIGHEST', 1);
define('wxID_SEPARATOR', 1);
define('wxID_ANY', 1);
define('wxID_LOWEST', 1);
define('wxID_OPEN', 1);
define('wxID_CLOSE', 1);
define('wxID_NEW', 1);
define('wxID_SAVE', 1);
define('wxID_SAVEAS', 1);
define('wxID_REVERT', 1);
define('wxID_EXIT', 1);
define('wxID_UNDO', 1);
define('wxID_REDO', 1);
define('wxID_HELP', 1);
define('wxID_PRINT', 1);
define('wxID_PRINT_SETUP', 1);
define('wxID_PAGE_SETUP', 1);
define('wxID_PREVIEW', 1);
define('wxID_ABOUT', 1);
define('wxID_HELP_CONTENTS', 1);
define('wxID_HELP_INDEX', 1);
define('wxID_HELP_SEARCH', 1);
define('wxID_HELP_COMMANDS', 1);
define('wxID_HELP_PROCEDURES', 1);
define('wxID_HELP_CONTEXT', 1);
define('wxID_CLOSE_ALL', 1);
define('wxID_PREFERENCES', 1);
define('wxID_EDIT', 1);
define('wxID_CUT', 1);
define('wxID_COPY', 1);
define('wxID_PASTE', 1);
define('wxID_CLEAR', 1);
define('wxID_FIND', 1);
define('wxID_DUPLICATE', 1);
define('wxID_SELECTALL', 1);
define('wxID_DELETE', 1);
define('wxID_REPLACE', 1);
define('wxID_REPLACE_ALL', 1);
define('wxID_PROPERTIES', 1);
define('wxID_VIEW_DETAILS', 1);
define('wxID_VIEW_LARGEICONS', 1);
define('wxID_VIEW_SMALLICONS', 1);
define('wxID_VIEW_LIST', 1);
define('wxID_VIEW_SORTDATE', 1);
define('wxID_VIEW_SORTNAME', 1);
define('wxID_VIEW_SORTSIZE', 1);
define('wxID_VIEW_SORTTYPE', 1);
define('wxID_FILE', 1);
define('wxID_FILE1', 1);
define('wxID_FILE2', 1);
define('wxID_FILE3', 1);
define('wxID_FILE4', 1);
define('wxID_FILE5', 1);
define('wxID_FILE6', 1);
define('wxID_FILE7', 1);
define('wxID_FILE8', 1);
define('wxID_FILE9', 1);
define('wxID_OK', 1);
define('wxID_CANCEL', 1);
define('wxID_APPLY', 1);
define('wxID_YES', 1);
define('wxID_NO', 1);
define('wxID_STATIC', 1);
define('wxID_FORWARD', 1);
define('wxID_BACKWARD', 1);
define('wxID_DEFAULT', 1);
define('wxID_MORE', 1);
define('wxID_SETUP', 1);
define('wxID_RESET', 1);
define('wxID_CONTEXT_HELP', 1);
define('wxID_YESTOALL', 1);
define('wxID_NOTOALL', 1);
define('wxID_ABORT', 1);
define('wxID_RETRY', 1);
define('wxID_IGNORE', 1);
define('wxID_ADD', 1);
define('wxID_REMOVE', 1);
define('wxID_UP', 1);
define('wxID_DOWN', 1);
define('wxID_HOME', 1);
define('wxID_REFRESH', 1);
define('wxID_STOP', 1);
define('wxID_INDEX', 1);
define('wxID_BOLD', 1);
define('wxID_ITALIC', 1);
define('wxID_JUSTIFY_CENTER', 1);
define('wxID_JUSTIFY_FILL', 1);
define('wxID_JUSTIFY_RIGHT', 1);
define('wxID_JUSTIFY_LEFT', 1);
define('wxID_UNDERLINE', 1);
define('wxID_INDENT', 1);
define('wxID_UNINDENT', 1);
define('wxID_ZOOM_100', 1);
define('wxID_ZOOM_FIT', 1);
define('wxID_ZOOM_IN', 1);
define('wxID_ZOOM_OUT', 1);
define('wxID_UNDELETE', 1);
define('wxID_REVERT_TO_SAVED', 1);
define('wxID_CDROM', 1);
define('wxID_CONVERT', 1);
define('wxID_EXECUTE', 1);
define('wxID_FLOPPY', 1);
define('wxID_HARDDISK', 1);
define('wxID_BOTTOM', 1);
define('wxID_FIRST', 1);
define('wxID_LAST', 1);
define('wxID_TOP', 1);
define('wxID_INFO', 1);
define('wxID_JUMP_TO', 1);
define('wxID_NETWORK', 1);
define('wxID_SELECT_COLOR', 1);
define('wxID_SELECT_FONT', 1);
define('wxID_SORT_ASCENDING', 1);
define('wxID_SORT_DESCENDING', 1);
define('wxID_SPELL_CHECK', 1);
define('wxID_STRIKETHROUGH', 1);
define('wxID_SYSTEM_MENU', 1);
define('wxID_CLOSE_FRAME', 1);
define('wxID_MOVE_FRAME', 1);
define('wxID_RESIZE_FRAME', 1);
define('wxID_MAXIMIZE_FRAME', 1);
define('wxID_ICONIZE_FRAME', 1);
define('wxID_RESTORE_FRAME', 1);
define('wxID_MDI_WINDOW_FIRST', 1);
define('wxID_MDI_WINDOW_CASCADE', 1);
define('wxID_MDI_WINDOW_TILE_HORZ', 1);
define('wxID_MDI_WINDOW_TILE_VERT', 1);
define('wxID_MDI_WINDOW_ARRANGE_ICONS', 1);
define('wxID_MDI_WINDOW_PREV', 1);
define('wxID_MDI_WINDOW_NEXT', 1);
define('wxID_MDI_WINDOW_LAST', 1);
define('wxID_FILEDLGG', 1);
define('wxID_FILECTRL', 1);
define('wxID_HIGHEST', 1);
define('wxITEM_SEPARATOR', 1);
define('wxITEM_NORMAL', 1);
define('wxITEM_CHECK', 1);
define('wxITEM_RADIO', 1);
define('wxITEM_DROPDOWN', 1);
define('wxITEM_MAX', 1);
define('wxHT_NOWHERE', 1);
define('wxHT_SCROLLBAR_FIRST', 1);
define('wxHT_SCROLLBAR_ARROW_LINE_1', 1);
define('wxHT_SCROLLBAR_ARROW_LINE_2', 1);
define('wxHT_SCROLLBAR_ARROW_PAGE_1', 1);
define('wxHT_SCROLLBAR_ARROW_PAGE_2', 1);
define('wxHT_SCROLLBAR_THUMB', 1);
define('wxHT_SCROLLBAR_BAR_1', 1);
define('wxHT_SCROLLBAR_BAR_2', 1);
define('wxHT_SCROLLBAR_LAST', 1);
define('wxHT_WINDOW_OUTSIDE', 1);
define('wxHT_WINDOW_INSIDE', 1);
define('wxHT_WINDOW_VERT_SCROLLBAR', 1);
define('wxHT_WINDOW_HORZ_SCROLLBAR', 1);
define('wxHT_WINDOW_CORNER', 1);
define('wxHT_MAX', 1);
define('wxDF_INVALID', 1);
define('wxDF_TEXT', 1);
define('wxDF_BITMAP', 1);
define('wxDF_METAFILE', 1);
define('wxDF_SYLK', 1);
define('wxDF_DIF', 1);
define('wxDF_TIFF', 1);
define('wxDF_OEMTEXT', 1);
define('wxDF_DIB', 1);
define('wxDF_PALETTE', 1);
define('wxDF_PENDATA', 1);
define('wxDF_RIFF', 1);
define('wxDF_WAVE', 1);
define('wxDF_UNICODETEXT', 1);
define('wxDF_ENHMETAFILE', 1);
define('wxDF_FILENAME', 1);
define('wxDF_LOCALE', 1);
define('wxDF_PRIVATE', 1);
define('wxDF_HTML', 1);
define('wxDF_MAX', 1);
define('WXK_BACK', 1);
define('WXK_TAB', 1);
define('WXK_RETURN', 1);
define('WXK_ESCAPE', 1);
define('WXK_SPACE', 1);
define('WXK_DELETE', 1);
define('WXK_START', 1);
define('WXK_LBUTTON', 1);
define('WXK_RBUTTON', 1);
define('WXK_CANCEL', 1);
define('WXK_MBUTTON', 1);
define('WXK_CLEAR', 1);
define('WXK_SHIFT', 1);
define('WXK_ALT', 1);
define('WXK_CONTROL', 1);
define('WXK_RAW_CONTROL', 1);
define('WXK_MENU', 1);
define('WXK_PAUSE', 1);
define('WXK_CAPITAL', 1);
define('WXK_END', 1);
define('WXK_HOME', 1);
define('WXK_LEFT', 1);
define('WXK_UP', 1);
define('WXK_RIGHT', 1);
define('WXK_DOWN', 1);
define('WXK_SELECT', 1);
define('WXK_PRINT', 1);
define('WXK_EXECUTE', 1);
define('WXK_SNAPSHOT', 1);
define('WXK_INSERT', 1);
define('WXK_HELP', 1);
define('WXK_NUMPAD0', 1);
define('WXK_NUMPAD1', 1);
define('WXK_NUMPAD2', 1);
define('WXK_NUMPAD3', 1);
define('WXK_NUMPAD4', 1);
define('WXK_NUMPAD5', 1);
define('WXK_NUMPAD6', 1);
define('WXK_NUMPAD7', 1);
define('WXK_NUMPAD8', 1);
define('WXK_NUMPAD9', 1);
define('WXK_MULTIPLY', 1);
define('WXK_ADD', 1);
define('WXK_SEPARATOR', 1);
define('WXK_SUBTRACT', 1);
define('WXK_DECIMAL', 1);
define('WXK_DIVIDE', 1);
define('WXK_F1', 1);
define('WXK_F2', 1);
define('WXK_F3', 1);
define('WXK_F4', 1);
define('WXK_F5', 1);
define('WXK_F6', 1);
define('WXK_F7', 1);
define('WXK_F8', 1);
define('WXK_F9', 1);
define('WXK_F10', 1);
define('WXK_F11', 1);
define('WXK_F12', 1);
define('WXK_F13', 1);
define('WXK_F14', 1);
define('WXK_F15', 1);
define('WXK_F16', 1);
define('WXK_F17', 1);
define('WXK_F18', 1);
define('WXK_F19', 1);
define('WXK_F20', 1);
define('WXK_F21', 1);
define('WXK_F22', 1);
define('WXK_F23', 1);
define('WXK_F24', 1);
define('WXK_NUMLOCK', 1);
define('WXK_SCROLL', 1);
define('WXK_PAGEUP', 1);
define('WXK_PAGEDOWN', 1);
define('WXK_NUMPAD_SPACE', 1);
define('WXK_NUMPAD_TAB', 1);
define('WXK_NUMPAD_ENTER', 1);
define('WXK_NUMPAD_F1', 1);
define('WXK_NUMPAD_F2', 1);
define('WXK_NUMPAD_F3', 1);
define('WXK_NUMPAD_F4', 1);
define('WXK_NUMPAD_HOME', 1);
define('WXK_NUMPAD_LEFT', 1);
define('WXK_NUMPAD_UP', 1);
define('WXK_NUMPAD_RIGHT', 1);
define('WXK_NUMPAD_DOWN', 1);
define('WXK_NUMPAD_PAGEUP', 1);
define('WXK_NUMPAD_PAGEDOWN', 1);
define('WXK_NUMPAD_END', 1);
define('WXK_NUMPAD_BEGIN', 1);
define('WXK_NUMPAD_INSERT', 1);
define('WXK_NUMPAD_DELETE', 1);
define('WXK_NUMPAD_EQUAL', 1);
define('WXK_NUMPAD_MULTIPLY', 1);
define('WXK_NUMPAD_ADD', 1);
define('WXK_NUMPAD_SEPARATOR', 1);
define('WXK_NUMPAD_SUBTRACT', 1);
define('WXK_NUMPAD_DECIMAL', 1);
define('WXK_NUMPAD_DIVIDE', 1);
define('WXK_WINDOWS_LEFT', 1);
define('WXK_WINDOWS_RIGHT', 1);
define('WXK_WINDOWS_MENU', 1);
define('WXK_COMMAND', 1);
define('WXK_SPECIAL1', 1);
define('WXK_SPECIAL2', 1);
define('WXK_SPECIAL3', 1);
define('WXK_SPECIAL4', 1);
define('WXK_SPECIAL5', 1);
define('WXK_SPECIAL6', 1);
define('WXK_SPECIAL7', 1);
define('WXK_SPECIAL8', 1);
define('WXK_SPECIAL9', 1);
define('WXK_SPECIAL10', 1);
define('WXK_SPECIAL11', 1);
define('WXK_SPECIAL12', 1);
define('WXK_SPECIAL13', 1);
define('WXK_SPECIAL14', 1);
define('WXK_SPECIAL15', 1);
define('WXK_SPECIAL16', 1);
define('WXK_SPECIAL17', 1);
define('WXK_SPECIAL18', 1);
define('WXK_SPECIAL19', 1);
define('WXK_SPECIAL20', 1);
define('wxMOD_ALT', 1);
define('wxMOD_CONTROL', 1);
define('wxMOD_ALTGR', 1);
define('wxMOD_SHIFT', 1);
define('wxMOD_META', 1);
define('wxMOD_WIN', 1);
define('wxMOD_RAW_CONTROL', 1);
define('wxMOD_CMD', 1);
define('wxMOD_ALL', 1);
define('wxPAPER_LETTER', 1);
define('wxPAPER_LEGAL', 1);
define('wxPAPER_A4', 1);
define('wxPAPER_CSHEET', 1);
define('wxPAPER_DSHEET', 1);
define('wxPAPER_ESHEET', 1);
define('wxPAPER_LETTERSMALL', 1);
define('wxPAPER_TABLOID', 1);
define('wxPAPER_LEDGER', 1);
define('wxPAPER_STATEMENT', 1);
define('wxPAPER_EXECUTIVE', 1);
define('wxPAPER_A3', 1);
define('wxPAPER_A4SMALL', 1);
define('wxPAPER_A5', 1);
define('wxPAPER_B4', 1);
define('wxPAPER_B5', 1);
define('wxPAPER_FOLIO', 1);
define('wxPAPER_QUARTO', 1);
define('wxPAPER_10X14', 1);
define('wxPAPER_11X17', 1);
define('wxPAPER_NOTE', 1);
define('wxPAPER_ENV_9', 1);
define('wxPAPER_ENV_10', 1);
define('wxPAPER_ENV_11', 1);
define('wxPAPER_ENV_12', 1);
define('wxPAPER_ENV_14', 1);
define('wxPAPER_ENV_DL', 1);
define('wxPAPER_ENV_C5', 1);
define('wxPAPER_ENV_C3', 1);
define('wxPAPER_ENV_C4', 1);
define('wxPAPER_ENV_C6', 1);
define('wxPAPER_ENV_C65', 1);
define('wxPAPER_ENV_B4', 1);
define('wxPAPER_ENV_B5', 1);
define('wxPAPER_ENV_B6', 1);
define('wxPAPER_ENV_ITALY', 1);
define('wxPAPER_ENV_MONARCH', 1);
define('wxPAPER_ENV_PERSONAL', 1);
define('wxPAPER_FANFOLD_US', 1);
define('wxPAPER_FANFOLD_STD_GERMAN', 1);
define('wxPAPER_FANFOLD_LGL_GERMAN', 1);
define('wxPAPER_ISO_B4', 1);
define('wxPAPER_JAPANESE_POSTCARD', 1);
define('wxPAPER_9X11', 1);
define('wxPAPER_10X11', 1);
define('wxPAPER_15X11', 1);
define('wxPAPER_ENV_INVITE', 1);
define('wxPAPER_LETTER_EXTRA', 1);
define('wxPAPER_LEGAL_EXTRA', 1);
define('wxPAPER_TABLOID_EXTRA', 1);
define('wxPAPER_A4_EXTRA', 1);
define('wxPAPER_LETTER_TRANSVERSE', 1);
define('wxPAPER_A4_TRANSVERSE', 1);
define('wxPAPER_LETTER_EXTRA_TRANSVERSE', 1);
define('wxPAPER_A_PLUS', 1);
define('wxPAPER_B_PLUS', 1);
define('wxPAPER_LETTER_PLUS', 1);
define('wxPAPER_A4_PLUS', 1);
define('wxPAPER_A5_TRANSVERSE', 1);
define('wxPAPER_B5_TRANSVERSE', 1);
define('wxPAPER_A3_EXTRA', 1);
define('wxPAPER_A5_EXTRA', 1);
define('wxPAPER_B5_EXTRA', 1);
define('wxPAPER_A2', 1);
define('wxPAPER_A3_TRANSVERSE', 1);
define('wxPAPER_A3_EXTRA_TRANSVERSE', 1);
define('wxPAPER_DBL_JAPANESE_POSTCARD', 1);
define('wxPAPER_A6', 1);
define('wxPAPER_JENV_KAKU2', 1);
define('wxPAPER_JENV_KAKU3', 1);
define('wxPAPER_JENV_CHOU3', 1);
define('wxPAPER_JENV_CHOU4', 1);
define('wxPAPER_LETTER_ROTATED', 1);
define('wxPAPER_A3_ROTATED', 1);
define('wxPAPER_A4_ROTATED', 1);
define('wxPAPER_A5_ROTATED', 1);
define('wxPAPER_B4_JIS_ROTATED', 1);
define('wxPAPER_B5_JIS_ROTATED', 1);
define('wxPAPER_JAPANESE_POSTCARD_ROTATED', 1);
define('wxPAPER_DBL_JAPANESE_POSTCARD_ROTATED', 1);
define('wxPAPER_A6_ROTATED', 1);
define('wxPAPER_JENV_KAKU2_ROTATED', 1);
define('wxPAPER_JENV_KAKU3_ROTATED', 1);
define('wxPAPER_JENV_CHOU3_ROTATED', 1);
define('wxPAPER_JENV_CHOU4_ROTATED', 1);
define('wxPAPER_B6_JIS', 1);
define('wxPAPER_B6_JIS_ROTATED', 1);
define('wxPAPER_12X11', 1);
define('wxPAPER_JENV_YOU4', 1);
define('wxPAPER_JENV_YOU4_ROTATED', 1);
define('wxPAPER_P16K', 1);
define('wxPAPER_P32K', 1);
define('wxPAPER_P32KBIG', 1);
define('wxPAPER_PENV_1', 1);
define('wxPAPER_PENV_2', 1);
define('wxPAPER_PENV_3', 1);
define('wxPAPER_PENV_4', 1);
define('wxPAPER_PENV_5', 1);
define('wxPAPER_PENV_6', 1);
define('wxPAPER_PENV_7', 1);
define('wxPAPER_PENV_8', 1);
define('wxPAPER_PENV_9', 1);
define('wxPAPER_PENV_10', 1);
define('wxPAPER_P16K_ROTATED', 1);
define('wxPAPER_P32K_ROTATED', 1);
define('wxPAPER_P32KBIG_ROTATED', 1);
define('wxPAPER_PENV_1_ROTATED', 1);
define('wxPAPER_PENV_2_ROTATED', 1);
define('wxPAPER_PENV_3_ROTATED', 1);
define('wxPAPER_PENV_4_ROTATED', 1);
define('wxPAPER_PENV_5_ROTATED', 1);
define('wxPAPER_PENV_6_ROTATED', 1);
define('wxPAPER_PENV_7_ROTATED', 1);
define('wxPAPER_PENV_8_ROTATED', 1);
define('wxPAPER_PENV_9_ROTATED', 1);
define('wxPAPER_PENV_10_ROTATED', 1);
define('wxPORTRAIT', 1);
define('wxLANDSCAPE', 1);
define('wxDUPLEX_SIMPLEX', 1);
define('wxDUPLEX_HORIZONTAL', 1);
define('wxDUPLEX_VERTICAL', 1);
define('wxPRINT_MODE_PREVIEW', 1);
define('wxPRINT_MODE_FILE', 1);
define('wxPRINT_MODE_PRINTER', 1);
define('wxPRINT_MODE_STREAM', 1);
define('wxUPDATE_UI_RECURSE', 1);
define('wxUPDATE_UI_FROMIDLE', 1);
define('wxDIR_IGNORE', 1);
define('wxDIR_STOP', 1);
define('wxDIR_CONTINUE', 1);
define('wxDIR_FILES', 1);
define('wxDIR_DIRS', 1);
define('wxDIR_HIDDEN', 1);
define('wxDIR_DOTDOT', 1);
define('wxDIR_DEFAULT', 1);
define('wxDL_LIBRARY', 1);
define('wxDL_MODULE', 1);
define('wxDL_PLUGIN_GUI', 1);
define('wxDL_PLUGIN_BASE', 1);
define('wxEVENT_PROPAGATE_MAX', 1);
define('wxEVT_CATEGORY_UI', 1);
define('wxEVT_CATEGORY_USER_INPUT', 1);
define('wxEVT_CATEGORY_SOCKET', 1);
define('wxEVT_CATEGORY_TIMER', 1);
define('wxEVT_CATEGORY_THREAD', 1);
define('wxEVT_CATEGORY_ALL', 1);
define('WXK_CATEGORY_ARROW', 1);
define('WXK_CATEGORY_PAGING', 1);
define('WXK_CATEGORY_JUMP', 1);
define('WXK_CATEGORY_TAB', 1);
define('WXK_CATEGORY_CUT', 1);
define('WXK_CATEGORY_NAVIGATION', 1);
define('wxUPDATE_UI_PROCESS_ALL', 1);
define('wxUPDATE_UI_PROCESS_SPECIFIED', 1);
define('wxMOUSE_WHEEL_VERTICAL', 1);
define('wxMOUSE_WHEEL_HORIZONTAL', 1);
define('wxIDLE_PROCESS_ALL', 1);
define('wxIDLE_PROCESS_SPECIFIED', 1);
define('wxFR_DOWN', 1);
define('wxFR_WHOLEWORD', 1);
define('wxFR_MATCHCASE', 1);
define('wxFR_REPLACEDIALOG', 1);
define('wxFR_NOUPDOWN', 1);
define('wxFR_NOMATCHCASE', 1);
define('wxFR_NOWHOLEWORD', 1);
define('wxS_IRUSR', 1);
define('wxS_IWUSR', 1);
define('wxS_IXUSR', 1);
define('wxS_IRGRP', 1);
define('wxS_IWGRP', 1);
define('wxS_IXGRP', 1);
define('wxS_IROTH', 1);
define('wxS_IWOTH', 1);
define('wxS_IXOTH', 1);
define('wxPOSIX_USER_READ', 1);
define('wxPOSIX_USER_WRITE', 1);
define('wxPOSIX_USER_EXECUTE', 1);
define('wxPOSIX_GROUP_READ', 1);
define('wxPOSIX_GROUP_WRITE', 1);
define('wxPOSIX_GROUP_EXECUTE', 1);
define('wxPOSIX_OTHERS_READ', 1);
define('wxPOSIX_OTHERS_WRITE', 1);
define('wxPOSIX_OTHERS_EXECUTE', 1);
define('wxS_DEFAULT', 1);
define('wxS_DIR_DEFAULT', 1);
define('wxFromStart', 1);
define('wxFromCurrent', 1);
define('wxFromEnd', 1);
define('wxFILE_KIND_UNKNOWN', 1);
define('wxFILE_KIND_DISK', 1);
define('wxFILE_KIND_TERMINAL', 1);
define('wxFILE_KIND_PIPE', 1);
define('wxPATH_NATIVE', 1);
define('wxPATH_UNIX', 1);
define('wxPATH_BEOS', 1);
define('wxPATH_MAC', 1);
define('wxPATH_DOS', 1);
define('wxPATH_WIN', 1);
define('wxPATH_OS2', 1);
define('wxPATH_VMS', 1);
define('wxPATH_MAX', 1);
define('wxSIZE_CONV_TRADITIONAL', 1);
define('wxSIZE_CONV_IEC', 1);
define('wxSIZE_CONV_SI', 1);
define('wxPATH_NORM_ENV_VARS', 1);
define('wxPATH_NORM_DOTS', 1);
define('wxPATH_NORM_TILDE', 1);
define('wxPATH_NORM_CASE', 1);
define('wxPATH_NORM_ABSOLUTE', 1);
define('wxPATH_NORM_LONG', 1);
define('wxPATH_NORM_SHORTCUT', 1);
define('wxPATH_NORM_ALL', 1);
define('wxFS_READ', 1);
define('wxFS_SEEKABLE', 1);
define('wxFSW_EVENT_CREATE', 1);
define('wxFSW_EVENT_DELETE', 1);
define('wxFSW_EVENT_RENAME', 1);
define('wxFSW_EVENT_MODIFY', 1);
define('wxFSW_EVENT_ACCESS', 1);
define('wxFSW_EVENT_WARNING', 1);
define('wxFSW_EVENT_ERROR', 1);
define('wxFSW_EVENT_ALL', 1);
define('wxBITMAP_TYPE_INVALID', 1);
define('wxBITMAP_TYPE_BMP', 1);
define('wxBITMAP_TYPE_BMP_RESOURCE', 1);
define('wxBITMAP_TYPE_RESOURCE', 1);
define('wxBITMAP_TYPE_ICO', 1);
define('wxBITMAP_TYPE_ICO_RESOURCE', 1);
define('wxBITMAP_TYPE_CUR', 1);
define('wxBITMAP_TYPE_CUR_RESOURCE', 1);
define('wxBITMAP_TYPE_XBM', 1);
define('wxBITMAP_TYPE_XBM_DATA', 1);
define('wxBITMAP_TYPE_XPM', 1);
define('wxBITMAP_TYPE_XPM_DATA', 1);
define('wxBITMAP_TYPE_TIFF', 1);
define('wxBITMAP_TYPE_TIF', 1);
define('wxBITMAP_TYPE_TIFF_RESOURCE', 1);
define('wxBITMAP_TYPE_TIF_RESOURCE', 1);
define('wxBITMAP_TYPE_GIF', 1);
define('wxBITMAP_TYPE_GIF_RESOURCE', 1);
define('wxBITMAP_TYPE_PNG', 1);
define('wxBITMAP_TYPE_PNG_RESOURCE', 1);
define('wxBITMAP_TYPE_JPEG', 1);
define('wxBITMAP_TYPE_JPEG_RESOURCE', 1);
define('wxBITMAP_TYPE_PNM', 1);
define('wxBITMAP_TYPE_PNM_RESOURCE', 1);
define('wxBITMAP_TYPE_PCX', 1);
define('wxBITMAP_TYPE_PCX_RESOURCE', 1);
define('wxBITMAP_TYPE_PICT', 1);
define('wxBITMAP_TYPE_PICT_RESOURCE', 1);
define('wxBITMAP_TYPE_ICON', 1);
define('wxBITMAP_TYPE_ICON_RESOURCE', 1);
define('wxBITMAP_TYPE_ANI', 1);
define('wxBITMAP_TYPE_IFF', 1);
define('wxBITMAP_TYPE_TGA', 1);
define('wxBITMAP_TYPE_MACCURSOR', 1);
define('wxBITMAP_TYPE_MACCURSOR_RESOURCE', 1);
define('wxBITMAP_TYPE_ANY', 1);
define('wxODDEVEN_RULE', 1);
define('wxWINDING_RULE', 1);
define('wxInside', 1);
define('wxOutLeft', 1);
define('wxOutRight', 1);
define('wxOutTop', 1);
define('wxOutBottom', 1);
define('wxANTIALIAS_DEFAULT', 1);
define('wxINTERPOLATION_DEFAULT', 1);
define('wxINTERPOLATION_FAST', 1);
define('wxINTERPOLATION_GOOD', 1);
define('wxINTERPOLATION_BEST', 1);
define('wxCOMPOSITION_INVALID', 1);
define('wxCOMPOSITION_CLEAR', 1);
define('wxCOMPOSITION_SOURCE', 1);
define('wxCOMPOSITION_OVER', 1);
define('wxCOMPOSITION_IN', 1);
define('wxCOMPOSITION_OUT', 1);
define('wxCOMPOSITION_ATOP', 1);
define('wxCOMPOSITION_DEST', 1);
define('wxCOMPOSITION_DEST_OVER', 1);
define('wxCOMPOSITION_DEST_IN', 1);
define('wxCOMPOSITION_DEST_OUT', 1);
define('wxCOMPOSITION_DEST_ATOP', 1);
define('wxCOMPOSITION_XOR', 1);
define('wxCOMPOSITION_ADD', 1);
define('wxHELP_SEARCH_INDEX', 1);
define('wxHELP_SEARCH_ALL', 1);
define('wxIMAGE_RESOLUTION_INCHES', 1);
define('wxIMAGE_RESOLUTION_CM', 1);
define('wxIMAGE_QUALITY_NEAREST', 1);
define('wxIMAGE_QUALITY_BILINEAR', 1);
define('wxIMAGE_QUALITY_BICUBIC', 1);
define('wxIMAGE_QUALITY_BOX_AVERAGE', 1);
define('wxIMAGE_QUALITY_NORMAL', 1);
define('wxIMAGE_QUALITY_HIGH', 1);
define('wxPNG_TYPE_COLOUR', 1);
define('wxPNG_TYPE_GREY', 1);
define('wxPNG_TYPE_GREY_RED', 1);
define('wxPNG_TYPE_PALETTE', 1);
define('wxLayout_Default', 1);
define('wxLayout_LeftToRight', 1);
define('wxLayout_RightToLeft', 1);
define('wxLOCALE_CAT_NUMBER', 1);
define('wxLOCALE_CAT_DATE', 1);
define('wxLOCALE_CAT_MONEY', 1);
define('wxLOCALE_CAT_DEFAULT', 1);
define('wxLOCALE_THOUSANDS_SEP', 1);
define('wxLOCALE_DECIMAL_POINT', 1);
define('wxLOCALE_SHORT_DATE_FMT', 1);
define('wxLOCALE_LONG_DATE_FMT', 1);
define('wxLOCALE_DATE_TIME_FMT', 1);
define('wxLOCALE_TIME_FMT', 1);
define('wxIPC_INVALID', 1);
define('wxIPC_TEXT', 1);
define('wxIPC_BITMAP', 1);
define('wxIPC_METAFILE', 1);
define('wxIPC_SYLK', 1);
define('wxIPC_DIF', 1);
define('wxIPC_TIFF', 1);
define('wxIPC_OEMTEXT', 1);
define('wxIPC_DIB', 1);
define('wxIPC_PALETTE', 1);
define('wxIPC_PENDATA', 1);
define('wxIPC_RIFF', 1);
define('wxIPC_WAVE', 1);
define('wxIPC_UTF16TEXT', 1);
define('wxIPC_ENHMETAFILE', 1);
define('wxIPC_FILENAME', 1);
define('wxIPC_LOCALE', 1);
define('wxIPC_UTF8TEXT', 1);
define('wxIPC_UTF32TEXT', 1);
define('wxIPC_UNICODETEXT', 1);
define('wxIPC_PRIVATE', 1);
define('wxIPC_INVALID', 1);
define('wxIPC_TEXT', 1);
define('wxIPC_BITMAP', 1);
define('wxIPC_METAFILE', 1);
define('wxIPC_SYLK', 1);
define('wxIPC_DIF', 1);
define('wxIPC_TIFF', 1);
define('wxIPC_OEMTEXT', 1);
define('wxIPC_DIB', 1);
define('wxIPC_PALETTE', 1);
define('wxIPC_PENDATA', 1);
define('wxIPC_RIFF', 1);
define('wxIPC_WAVE', 1);
define('wxIPC_UTF16TEXT', 1);
define('wxIPC_ENHMETAFILE', 1);
define('wxIPC_FILENAME', 1);
define('wxIPC_LOCALE', 1);
define('wxIPC_UTF8TEXT', 1);
define('wxIPC_UTF32TEXT', 1);
define('wxIPC_UNICODETEXT', 1);
define('wxIPC_PRIVATE', 1);
define('wxLANGUAGE_DEFAULT', 1);
define('wxLANGUAGE_UNKNOWN', 1);
define('wxLANGUAGE_ABKHAZIAN', 1);
define('wxLANGUAGE_AFAR', 1);
define('wxLANGUAGE_AFRIKAANS', 1);
define('wxLANGUAGE_ALBANIAN', 1);
define('wxLANGUAGE_AMHARIC', 1);
define('wxLANGUAGE_ARABIC', 1);
define('wxLANGUAGE_ARABIC_ALGERIA', 1);
define('wxLANGUAGE_ARABIC_BAHRAIN', 1);
define('wxLANGUAGE_ARABIC_EGYPT', 1);
define('wxLANGUAGE_ARABIC_IRAQ', 1);
define('wxLANGUAGE_ARABIC_JORDAN', 1);
define('wxLANGUAGE_ARABIC_KUWAIT', 1);
define('wxLANGUAGE_ARABIC_LEBANON', 1);
define('wxLANGUAGE_ARABIC_LIBYA', 1);
define('wxLANGUAGE_ARABIC_MOROCCO', 1);
define('wxLANGUAGE_ARABIC_OMAN', 1);
define('wxLANGUAGE_ARABIC_QATAR', 1);
define('wxLANGUAGE_ARABIC_SAUDI_ARABIA', 1);
define('wxLANGUAGE_ARABIC_SUDAN', 1);
define('wxLANGUAGE_ARABIC_SYRIA', 1);
define('wxLANGUAGE_ARABIC_TUNISIA', 1);
define('wxLANGUAGE_ARABIC_UAE', 1);
define('wxLANGUAGE_ARABIC_YEMEN', 1);
define('wxLANGUAGE_ARMENIAN', 1);
define('wxLANGUAGE_ASSAMESE', 1);
define('wxLANGUAGE_ASTURIAN', 1);
define('wxLANGUAGE_AYMARA', 1);
define('wxLANGUAGE_AZERI', 1);
define('wxLANGUAGE_AZERI_CYRILLIC', 1);
define('wxLANGUAGE_AZERI_LATIN', 1);
define('wxLANGUAGE_BASHKIR', 1);
define('wxLANGUAGE_BASQUE', 1);
define('wxLANGUAGE_BELARUSIAN', 1);
define('wxLANGUAGE_BENGALI', 1);
define('wxLANGUAGE_BHUTANI', 1);
define('wxLANGUAGE_BIHARI', 1);
define('wxLANGUAGE_BISLAMA', 1);
define('wxLANGUAGE_BOSNIAN', 1);
define('wxLANGUAGE_BRETON', 1);
define('wxLANGUAGE_BULGARIAN', 1);
define('wxLANGUAGE_BURMESE', 1);
define('wxLANGUAGE_CAMBODIAN', 1);
define('wxLANGUAGE_CATALAN', 1);
define('wxLANGUAGE_CHINESE', 1);
define('wxLANGUAGE_CHINESE_SIMPLIFIED', 1);
define('wxLANGUAGE_CHINESE_TRADITIONAL', 1);
define('wxLANGUAGE_CHINESE_HONGKONG', 1);
define('wxLANGUAGE_CHINESE_MACAU', 1);
define('wxLANGUAGE_CHINESE_SINGAPORE', 1);
define('wxLANGUAGE_CHINESE_TAIWAN', 1);
define('wxLANGUAGE_CORSICAN', 1);
define('wxLANGUAGE_CROATIAN', 1);
define('wxLANGUAGE_CZECH', 1);
define('wxLANGUAGE_DANISH', 1);
define('wxLANGUAGE_DUTCH', 1);
define('wxLANGUAGE_DUTCH_BELGIAN', 1);
define('wxLANGUAGE_ENGLISH', 1);
define('wxLANGUAGE_ENGLISH_UK', 1);
define('wxLANGUAGE_ENGLISH_US', 1);
define('wxLANGUAGE_ENGLISH_AUSTRALIA', 1);
define('wxLANGUAGE_ENGLISH_BELIZE', 1);
define('wxLANGUAGE_ENGLISH_BOTSWANA', 1);
define('wxLANGUAGE_ENGLISH_CANADA', 1);
define('wxLANGUAGE_ENGLISH_CARIBBEAN', 1);
define('wxLANGUAGE_ENGLISH_DENMARK', 1);
define('wxLANGUAGE_ENGLISH_EIRE', 1);
define('wxLANGUAGE_ENGLISH_JAMAICA', 1);
define('wxLANGUAGE_ENGLISH_NEW_ZEALAND', 1);
define('wxLANGUAGE_ENGLISH_PHILIPPINES', 1);
define('wxLANGUAGE_ENGLISH_SOUTH_AFRICA', 1);
define('wxLANGUAGE_ENGLISH_TRINIDAD', 1);
define('wxLANGUAGE_ENGLISH_ZIMBABWE', 1);
define('wxLANGUAGE_ESPERANTO', 1);
define('wxLANGUAGE_ESTONIAN', 1);
define('wxLANGUAGE_FAEROESE', 1);
define('wxLANGUAGE_FARSI', 1);
define('wxLANGUAGE_FIJI', 1);
define('wxLANGUAGE_FINNISH', 1);
define('wxLANGUAGE_FRENCH', 1);
define('wxLANGUAGE_FRENCH_BELGIAN', 1);
define('wxLANGUAGE_FRENCH_CANADIAN', 1);
define('wxLANGUAGE_FRENCH_LUXEMBOURG', 1);
define('wxLANGUAGE_FRENCH_MONACO', 1);
define('wxLANGUAGE_FRENCH_SWISS', 1);
define('wxLANGUAGE_FRISIAN', 1);
define('wxLANGUAGE_GALICIAN', 1);
define('wxLANGUAGE_GEORGIAN', 1);
define('wxLANGUAGE_GERMAN', 1);
define('wxLANGUAGE_GERMAN_AUSTRIAN', 1);
define('wxLANGUAGE_GERMAN_BELGIUM', 1);
define('wxLANGUAGE_GERMAN_LIECHTENSTEIN', 1);
define('wxLANGUAGE_GERMAN_LUXEMBOURG', 1);
define('wxLANGUAGE_GERMAN_SWISS', 1);
define('wxLANGUAGE_GREEK', 1);
define('wxLANGUAGE_GREENLANDIC', 1);
define('wxLANGUAGE_GUARANI', 1);
define('wxLANGUAGE_GUJARATI', 1);
define('wxLANGUAGE_HAUSA', 1);
define('wxLANGUAGE_HEBREW', 1);
define('wxLANGUAGE_HINDI', 1);
define('wxLANGUAGE_HUNGARIAN', 1);
define('wxLANGUAGE_ICELANDIC', 1);
define('wxLANGUAGE_INDONESIAN', 1);
define('wxLANGUAGE_INTERLINGUA', 1);
define('wxLANGUAGE_INTERLINGUE', 1);
define('wxLANGUAGE_INUKTITUT', 1);
define('wxLANGUAGE_INUPIAK', 1);
define('wxLANGUAGE_IRISH', 1);
define('wxLANGUAGE_ITALIAN', 1);
define('wxLANGUAGE_ITALIAN_SWISS', 1);
define('wxLANGUAGE_JAPANESE', 1);
define('wxLANGUAGE_JAVANESE', 1);
define('wxLANGUAGE_KANNADA', 1);
define('wxLANGUAGE_KASHMIRI', 1);
define('wxLANGUAGE_KASHMIRI_INDIA', 1);
define('wxLANGUAGE_KAZAKH', 1);
define('wxLANGUAGE_KERNEWEK', 1);
define('wxLANGUAGE_KINYARWANDA', 1);
define('wxLANGUAGE_KIRGHIZ', 1);
define('wxLANGUAGE_KIRUNDI', 1);
define('wxLANGUAGE_KONKANI', 1);
define('wxLANGUAGE_KOREAN', 1);
define('wxLANGUAGE_KURDISH', 1);
define('wxLANGUAGE_LAOTHIAN', 1);
define('wxLANGUAGE_LATIN', 1);
define('wxLANGUAGE_LATVIAN', 1);
define('wxLANGUAGE_LINGALA', 1);
define('wxLANGUAGE_LITHUANIAN', 1);
define('wxLANGUAGE_MACEDONIAN', 1);
define('wxLANGUAGE_MALAGASY', 1);
define('wxLANGUAGE_MALAY', 1);
define('wxLANGUAGE_MALAYALAM', 1);
define('wxLANGUAGE_MALAY_BRUNEI_DARUSSALAM', 1);
define('wxLANGUAGE_MALAY_MALAYSIA', 1);
define('wxLANGUAGE_MALTESE', 1);
define('wxLANGUAGE_MANIPURI', 1);
define('wxLANGUAGE_MAORI', 1);
define('wxLANGUAGE_MARATHI', 1);
define('wxLANGUAGE_MOLDAVIAN', 1);
define('wxLANGUAGE_MONGOLIAN', 1);
define('wxLANGUAGE_NAURU', 1);
define('wxLANGUAGE_NEPALI', 1);
define('wxLANGUAGE_NEPALI_INDIA', 1);
define('wxLANGUAGE_NORWEGIAN_BOKMAL', 1);
define('wxLANGUAGE_NORWEGIAN_NYNORSK', 1);
define('wxLANGUAGE_OCCITAN', 1);
define('wxLANGUAGE_ORIYA', 1);
define('wxLANGUAGE_OROMO', 1);
define('wxLANGUAGE_PASHTO', 1);
define('wxLANGUAGE_POLISH', 1);
define('wxLANGUAGE_PORTUGUESE', 1);
define('wxLANGUAGE_PORTUGUESE_BRAZILIAN', 1);
define('wxLANGUAGE_PUNJABI', 1);
define('wxLANGUAGE_QUECHUA', 1);
define('wxLANGUAGE_RHAETO_ROMANCE', 1);
define('wxLANGUAGE_ROMANIAN', 1);
define('wxLANGUAGE_RUSSIAN', 1);
define('wxLANGUAGE_RUSSIAN_UKRAINE', 1);
define('wxLANGUAGE_SAMI', 1);
define('wxLANGUAGE_SAMOAN', 1);
define('wxLANGUAGE_SANGHO', 1);
define('wxLANGUAGE_SANSKRIT', 1);
define('wxLANGUAGE_SCOTS_GAELIC', 1);
define('wxLANGUAGE_SERBIAN', 1);
define('wxLANGUAGE_SERBIAN_CYRILLIC', 1);
define('wxLANGUAGE_SERBIAN_LATIN', 1);
define('wxLANGUAGE_SERBO_CROATIAN', 1);
define('wxLANGUAGE_SESOTHO', 1);
define('wxLANGUAGE_SETSWANA', 1);
define('wxLANGUAGE_SHONA', 1);
define('wxLANGUAGE_SINDHI', 1);
define('wxLANGUAGE_SINHALESE', 1);
define('wxLANGUAGE_SISWATI', 1);
define('wxLANGUAGE_SLOVAK', 1);
define('wxLANGUAGE_SLOVENIAN', 1);
define('wxLANGUAGE_SOMALI', 1);
define('wxLANGUAGE_SPANISH', 1);
define('wxLANGUAGE_SPANISH_ARGENTINA', 1);
define('wxLANGUAGE_SPANISH_BOLIVIA', 1);
define('wxLANGUAGE_SPANISH_CHILE', 1);
define('wxLANGUAGE_SPANISH_COLOMBIA', 1);
define('wxLANGUAGE_SPANISH_COSTA_RICA', 1);
define('wxLANGUAGE_SPANISH_DOMINICAN_REPUBLIC', 1);
define('wxLANGUAGE_SPANISH_ECUADOR', 1);
define('wxLANGUAGE_SPANISH_EL_SALVADOR', 1);
define('wxLANGUAGE_SPANISH_GUATEMALA', 1);
define('wxLANGUAGE_SPANISH_HONDURAS', 1);
define('wxLANGUAGE_SPANISH_MEXICAN', 1);
define('wxLANGUAGE_SPANISH_MODERN', 1);
define('wxLANGUAGE_SPANISH_NICARAGUA', 1);
define('wxLANGUAGE_SPANISH_PANAMA', 1);
define('wxLANGUAGE_SPANISH_PARAGUAY', 1);
define('wxLANGUAGE_SPANISH_PERU', 1);
define('wxLANGUAGE_SPANISH_PUERTO_RICO', 1);
define('wxLANGUAGE_SPANISH_URUGUAY', 1);
define('wxLANGUAGE_SPANISH_US', 1);
define('wxLANGUAGE_SPANISH_VENEZUELA', 1);
define('wxLANGUAGE_SUNDANESE', 1);
define('wxLANGUAGE_SWAHILI', 1);
define('wxLANGUAGE_SWEDISH', 1);
define('wxLANGUAGE_SWEDISH_FINLAND', 1);
define('wxLANGUAGE_TAGALOG', 1);
define('wxLANGUAGE_TAJIK', 1);
define('wxLANGUAGE_TAMIL', 1);
define('wxLANGUAGE_TATAR', 1);
define('wxLANGUAGE_TELUGU', 1);
define('wxLANGUAGE_THAI', 1);
define('wxLANGUAGE_TIBETAN', 1);
define('wxLANGUAGE_TIGRINYA', 1);
define('wxLANGUAGE_TONGA', 1);
define('wxLANGUAGE_TSONGA', 1);
define('wxLANGUAGE_TURKISH', 1);
define('wxLANGUAGE_TURKMEN', 1);
define('wxLANGUAGE_TWI', 1);
define('wxLANGUAGE_UIGHUR', 1);
define('wxLANGUAGE_UKRAINIAN', 1);
define('wxLANGUAGE_URDU', 1);
define('wxLANGUAGE_URDU_INDIA', 1);
define('wxLANGUAGE_URDU_PAKISTAN', 1);
define('wxLANGUAGE_UZBEK', 1);
define('wxLANGUAGE_UZBEK_CYRILLIC', 1);
define('wxLANGUAGE_UZBEK_LATIN', 1);
define('wxLANGUAGE_VALENCIAN', 1);
define('wxLANGUAGE_VIETNAMESE', 1);
define('wxLANGUAGE_VOLAPUK', 1);
define('wxLANGUAGE_WELSH', 1);
define('wxLANGUAGE_WOLOF', 1);
define('wxLANGUAGE_XHOSA', 1);
define('wxLANGUAGE_YIDDISH', 1);
define('wxLANGUAGE_YORUBA', 1);
define('wxLANGUAGE_ZHUANG', 1);
define('wxLANGUAGE_ZULU', 1);
define('wxLANGUAGE_USER_DEFINED', 1);
define('wxLeft', 1);
define('wxTop', 1);
define('wxRight', 1);
define('wxBottom', 1);
define('wxWidth', 1);
define('wxHeight', 1);
define('wxCentre', 1);
define('wxCenter', 1);
define('wxCentreX', 1);
define('wxCentreY', 1);
define('wxUnconstrained', 1);
define('wxAsIs', 1);
define('wxPercentOf', 1);
define('wxAbove', 1);
define('wxBelow', 1);
define('wxLeftOf', 1);
define('wxRightOf', 1);
define('wxSameAs', 1);
define('wxAbsolute', 1);
define('wxLAYOUT_HORIZONTAL', 1);
define('wxLAYOUT_VERTICAL', 1);
define('wxLAYOUT_TOP', 1);
define('wxLAYOUT_LEFT', 1);
define('wxLAYOUT_RIGHT', 1);
define('wxLAYOUT_BOTTOM', 1);
define('wxMOUSE_BTN_ANY', 1);
define('wxMOUSE_BTN_LEFT', 1);
define('wxMOUSE_BTN_MIDDLE', 1);
define('wxMOUSE_BTN_RIGHT', 1);
define('wxMOUSE_BTN_AUX1', 1);
define('wxMOUSE_BTN_AUX2', 1);
define('wxMOUSE_BTN_MAX', 1);
define('wxMSGOUT_PREFER_STDERR', 1);
define('wxMSGOUT_PREFER_MSGBOX', 1);
define('wxMSGQUEUE_NO_ERROR', 1);
define('wxMSGQUEUE_TIMEOUT', 1);
define('wxMSGQUEUE_MISC_ERROR', 1);
define('wxODCB_PAINTING_CONTROL', 1);
define('wxODCB_PAINTING_SELECTED', 1);
define('wxPENSTYLE_INVALID', 1);
define('wxPENSTYLE_SOLID', 1);
define('wxPENSTYLE_DOT', 1);
define('wxPENSTYLE_LONG_DASH', 1);
define('wxPENSTYLE_SHORT_DASH', 1);
define('wxPENSTYLE_DOT_DASH', 1);
define('wxPENSTYLE_USER_DASH', 1);
define('wxPENSTYLE_TRANSPARENT', 1);
define('wxPENSTYLE_STIPPLE_MASK_OPAQUE', 1);
define('wxPENSTYLE_STIPPLE_MASK', 1);
define('wxPENSTYLE_STIPPLE', 1);
define('wxPENSTYLE_BDIAGONAL_HATCH', 1);
define('wxPENSTYLE_CROSSDIAG_HATCH', 1);
define('wxPENSTYLE_FDIAGONAL_HATCH', 1);
define('wxPENSTYLE_CROSS_HATCH', 1);
define('wxPENSTYLE_HORIZONTAL_HATCH', 1);
define('wxPENSTYLE_VERTICAL_HATCH', 1);
define('wxPENSTYLE_FIRST_HATCH', 1);
define('wxPENSTYLE_LAST_HATCH', 1);
define('wxJOIN_INVALID', 1);
define('wxJOIN_BEVEL', 1);
define('wxJOIN_MITER', 1);
define('wxJOIN_ROUND', 1);
define('wxCAP_INVALID', 1);
define('wxCAP_ROUND', 1);
define('wxCAP_PROJECTING', 1);
define('wxCAP_BUTT', 1);
define('wxSHOW_EFFECT_ROLL_TO_LEFT', 1);
define('wxSHOW_EFFECT_ROLL_TO_RIGHT', 1);
define('wxSHOW_EFFECT_ROLL_TO_TOP', 1);
define('wxSHOW_EFFECT_ROLL_TO_BOTTOM', 1);
define('wxSHOW_EFFECT_SLIDE_TO_LEFT', 1);
define('wxSHOW_EFFECT_SLIDE_TO_RIGHT', 1);
define('wxSHOW_EFFECT_SLIDE_TO_TOP', 1);
define('wxSHOW_EFFECT_SLIDE_TO_BOTTOM', 1);
define('wxSHOW_EFFECT_BLEND', 1);
define('wxSHOW_EFFECT_EXPAND', 1);
define('wxWINDOW_VARIANT_NORMAL', 1);
define('wxWINDOW_VARIANT_SMALL', 1);
define('wxWINDOW_VARIANT_MINI', 1);
define('wxWINDOW_VARIANT_LARGE', 1);
define('wxWINDOW_VARIANT_MAX', 1);
define('wxOS_UNKNOWN', 1);
define('wxOS_MAC_OS', 1);
define('wxOS_MAC_OSX_DARWIN', 1);
define('wxOS_MAC', 1);
define('wxOS_WINDOWS_9X', 1);
define('wxOS_WINDOWS_NT', 1);
define('wxOS_WINDOWS_MICRO', 1);
define('wxOS_WINDOWS_CE', 1);
define('wxOS_WINDOWS', 1);
define('wxOS_UNIX_LINUX', 1);
define('wxOS_UNIX_FREEBSD', 1);
define('wxOS_UNIX_OPENBSD', 1);
define('wxOS_UNIX_NETBSD', 1);
define('wxOS_UNIX_SOLARIS', 1);
define('wxOS_UNIX_AIX', 1);
define('wxOS_UNIX_HPUX', 1);
define('wxOS_UNIX', 1);
define('wxOS_DOS', 1);
define('wxOS_OS2', 1);
define('wxPORT_UNKNOWN', 1);
define('wxPORT_BASE', 1);
define('wxPORT_MSW', 1);
define('wxPORT_MOTIF', 1);
define('wxPORT_GTK', 1);
define('wxPORT_DFB', 1);
define('wxPORT_X11', 1);
define('wxPORT_OS2', 1);
define('wxPORT_MAC', 1);
define('wxPORT_COCOA', 1);
define('wxPORT_WINCE', 1);
define('wxARCH_INVALID', 1);
define('wxARCH_32', 1);
define('wxARCH_64', 1);
define('wxARCH_MAX', 1);
define('wxENDIAN_INVALID', 1);
define('wxENDIAN_BIG', 1);
define('wxENDIAN_LITTLE', 1);
define('wxENDIAN_PDP', 1);
define('wxENDIAN_MAX', 1);
define('wxPOWER_SOCKET', 1);
define('wxPOWER_BATTERY', 1);
define('wxPOWER_UNKNOWN', 1);
define('wxBATTERY_NORMAL_STATE', 1);
define('wxBATTERY_LOW_STATE', 1);
define('wxBATTERY_CRITICAL_STATE', 1);
define('wxBATTERY_SHUTDOWN_STATE', 1);
define('wxBATTERY_UNKNOWN_STATE', 1);
define('wxPRINTER_NO_ERROR', 1);
define('wxPRINTER_CANCELLED', 1);
define('wxPRINTER_ERROR', 1);
define('wxPreviewFrame_AppModal', 1);
define('wxPreviewFrame_WindowModal', 1);
define('wxPreviewFrame_NonModal', 1);
define('wxPROPSHEET_DEFAULT', 1);
define('wxPROPSHEET_NOTEBOOK', 1);
define('wxPROPSHEET_TOOLBOOK', 1);
define('wxPROPSHEET_CHOICEBOOK', 1);
define('wxPROPSHEET_LISTBOOK', 1);
define('wxPROPSHEET_BUTTONTOOLBOOK', 1);
define('wxPROPSHEET_TREEBOOK', 1);
define('wxPROPSHEET_SHRINKTOFIT', 1);
define('wxPG_PROP_MODIFIED', 1);
define('wxPG_PROP_DISABLED', 1);
define('wxPG_PROP_HIDDEN', 1);
define('wxPG_PROP_CUSTOMIMAGE', 1);
define('wxPG_PROP_NOEDITOR', 1);
define('wxPG_PROP_COLLAPSED', 1);
define('wxPG_PROP_INVALID_VALUE', 1);
define('wxPG_PROP_WAS_MODIFIED', 1);
define('wxPG_PROP_AGGREGATE', 1);
define('wxPG_PROP_CHILDREN_ARE_COPIES', 1);
define('wxPG_PROP_PROPERTY', 1);
define('wxPG_PROP_CATEGORY', 1);
define('wxPG_PROP_MISC_PARENT', 1);
define('wxPG_PROP_READONLY', 1);
define('wxPG_PROP_COMPOSED_VALUE', 1);
define('wxPG_PROP_USES_COMMON_VALUE', 1);
define('wxPG_PROP_AUTO_UNSPECIFIED', 1);
define('wxPG_PROP_CLASS_SPECIFIC_1', 1);
define('wxPG_PROP_CLASS_SPECIFIC_2', 1);
define('wxPG_PROP_BEING_DELETED', 1);
define('wxPG_ITERATE_PROPERTIES', 1);
define('wxPG_ITERATE_HIDDEN', 1);
define('wxPG_ITERATE_FIXED_CHILDREN', 1);
define('wxPG_ITERATE_CATEGORIES', 1);
define('wxPG_ITERATE_ALL_PARENTS', 1);
define('wxPG_ITERATE_ALL_PARENTS_RECURSIVELY', 1);
define('wxPG_ITERATOR_FLAGS_ALL', 1);
define('wxPG_ITERATOR_MASK_OP_ITEM', 1);
define('wxPG_ITERATOR_MASK_OP_PARENT', 1);
define('wxPG_ITERATE_VISIBLE', 1);
define('wxPG_ITERATE_ALL', 1);
define('wxPG_ITERATE_NORMAL', 1);
define('wxPG_ITERATE_DEFAULT', 1);
define('wxPROTO_NOERR', 1);
define('wxPROTO_NETERR', 1);
define('wxPROTO_PROTERR', 1);
define('wxPROTO_CONNERR', 1);
define('wxPROTO_INVVAL', 1);
define('wxPROTO_NOHNDLR', 1);
define('wxPROTO_NOFILE', 1);
define('wxPROTO_ABRT', 1);
define('wxPROTO_RCNCT', 1);
define('wxPROTO_STREAMING', 1);
define('wxOutRegion', 1);
define('wxPartRegion', 1);
define('wxInRegion', 1);
define('wxTITLEBAR_BUTTON_CLOSE', 1);
define('wxTITLEBAR_BUTTON_MAXIMIZE', 1);
define('wxTITLEBAR_BUTTON_ICONIZE', 1);
define('wxTITLEBAR_BUTTON_RESTORE', 1);
define('wxTITLEBAR_BUTTON_HELP', 1);
define('wxHDR_SORT_ICON_UP', 1);
define('wxHDR_SORT_ICON_DOWN', 1);
define('wxRIBBON_ART_TAB_SEPARATION_SIZE', 1);
define('wxRIBBON_ART_PAGE_BORDER_LEFT_SIZE', 1);
define('wxRIBBON_ART_PAGE_BORDER_TOP_SIZE', 1);
define('wxRIBBON_ART_PAGE_BORDER_RIGHT_SIZE', 1);
define('wxRIBBON_ART_PAGE_BORDER_BOTTOM_SIZE', 1);
define('wxRIBBON_ART_PANEL_X_SEPARATION_SIZE', 1);
define('wxRIBBON_ART_PANEL_Y_SEPARATION_SIZE', 1);
define('wxRIBBON_ART_TOOL_GROUP_SEPARATION_SIZE', 1);
define('wxRIBBON_ART_GALLERY_BITMAP_PADDING_LEFT_SIZE', 1);
define('wxRIBBON_ART_GALLERY_BITMAP_PADDING_RIGHT_SIZE', 1);
define('wxRIBBON_ART_GALLERY_BITMAP_PADDING_TOP_SIZE', 1);
define('wxRIBBON_ART_GALLERY_BITMAP_PADDING_BOTTOM_SIZE', 1);
define('wxRIBBON_ART_PANEL_LABEL_FONT', 1);
define('wxRIBBON_ART_BUTTON_BAR_LABEL_FONT', 1);
define('wxRIBBON_ART_TAB_LABEL_FONT', 1);
define('wxRIBBON_ART_BUTTON_BAR_LABEL_COLOUR', 1);
define('wxRIBBON_ART_BUTTON_BAR_HOVER_BORDER_COLOUR', 1);
define('wxRIBBON_ART_BUTTON_BAR_HOVER_BACKGROUND_TOP_COLOUR', 1);
define('wxRIBBON_ART_BUTTON_BAR_HOVER_BACKGROUND_TOP_GRADIENT_COLOUR', 1);
define('wxRIBBON_ART_BUTTON_BAR_HOVER_BACKGROUND_COLOUR', 1);
define('wxRIBBON_ART_BUTTON_BAR_HOVER_BACKGROUND_GRADIENT_COLOUR', 1);
define('wxRIBBON_ART_BUTTON_BAR_ACTIVE_BORDER_COLOUR', 1);
define('wxRIBBON_ART_BUTTON_BAR_ACTIVE_BACKGROUND_TOP_COLOUR', 1);
define('wxRIBBON_ART_BUTTON_BAR_ACTIVE_BACKGROUND_TOP_GRADIENT_COLOUR', 1);
define('wxRIBBON_ART_BUTTON_BAR_ACTIVE_BACKGROUND_COLOUR', 1);
define('wxRIBBON_ART_BUTTON_BAR_ACTIVE_BACKGROUND_GRADIENT_COLOUR', 1);
define('wxRIBBON_ART_GALLERY_BORDER_COLOUR', 1);
define('wxRIBBON_ART_GALLERY_HOVER_BACKGROUND_COLOUR', 1);
define('wxRIBBON_ART_GALLERY_BUTTON_BACKGROUND_COLOUR', 1);
define('wxRIBBON_ART_GALLERY_BUTTON_BACKGROUND_GRADIENT_COLOUR', 1);
define('wxRIBBON_ART_GALLERY_BUTTON_BACKGROUND_TOP_COLOUR', 1);
define('wxRIBBON_ART_GALLERY_BUTTON_FACE_COLOUR', 1);
define('wxRIBBON_ART_GALLERY_BUTTON_HOVER_BACKGROUND_COLOUR', 1);
define('wxRIBBON_ART_GALLERY_BUTTON_HOVER_BACKGROUND_GRADIENT_COLOUR', 1);
define('wxRIBBON_ART_GALLERY_BUTTON_HOVER_BACKGROUND_TOP_COLOUR', 1);
define('wxRIBBON_ART_GALLERY_BUTTON_HOVER_FACE_COLOUR', 1);
define('wxRIBBON_ART_GALLERY_BUTTON_ACTIVE_BACKGROUND_COLOUR', 1);
define('wxRIBBON_ART_GALLERY_BUTTON_ACTIVE_BACKGROUND_GRADIENT_COLOUR', 1);
define('wxRIBBON_ART_GALLERY_BUTTON_ACTIVE_BACKGROUND_TOP_COLOUR', 1);
define('wxRIBBON_ART_GALLERY_BUTTON_ACTIVE_FACE_COLOUR', 1);
define('wxRIBBON_ART_GALLERY_BUTTON_DISABLED_BACKGROUND_COLOUR', 1);
define('wxRIBBON_ART_GALLERY_BUTTON_DISABLED_BACKGROUND_GRADIENT_COLOUR', 1);
define('wxRIBBON_ART_GALLERY_BUTTON_DISABLED_BACKGROUND_TOP_COLOUR', 1);
define('wxRIBBON_ART_GALLERY_BUTTON_DISABLED_FACE_COLOUR', 1);
define('wxRIBBON_ART_GALLERY_ITEM_BORDER_COLOUR', 1);
define('wxRIBBON_ART_TAB_LABEL_COLOUR', 1);
define('wxRIBBON_ART_TAB_SEPARATOR_COLOUR', 1);
define('wxRIBBON_ART_TAB_SEPARATOR_GRADIENT_COLOUR', 1);
define('wxRIBBON_ART_TAB_CTRL_BACKGROUND_COLOUR', 1);
define('wxRIBBON_ART_TAB_CTRL_BACKGROUND_GRADIENT_COLOUR', 1);
define('wxRIBBON_ART_TAB_HOVER_BACKGROUND_TOP_COLOUR', 1);
define('wxRIBBON_ART_TAB_HOVER_BACKGROUND_TOP_GRADIENT_COLOUR', 1);
define('wxRIBBON_ART_TAB_HOVER_BACKGROUND_COLOUR', 1);
define('wxRIBBON_ART_TAB_HOVER_BACKGROUND_GRADIENT_COLOUR', 1);
define('wxRIBBON_ART_TAB_ACTIVE_BACKGROUND_TOP_COLOUR', 1);
define('wxRIBBON_ART_TAB_ACTIVE_BACKGROUND_TOP_GRADIENT_COLOUR', 1);
define('wxRIBBON_ART_TAB_ACTIVE_BACKGROUND_COLOUR', 1);
define('wxRIBBON_ART_TAB_ACTIVE_BACKGROUND_GRADIENT_COLOUR', 1);
define('wxRIBBON_ART_TAB_BORDER_COLOUR', 1);
define('wxRIBBON_ART_PANEL_BORDER_COLOUR', 1);
define('wxRIBBON_ART_PANEL_BORDER_GRADIENT_COLOUR', 1);
define('wxRIBBON_ART_PANEL_MINIMISED_BORDER_COLOUR', 1);
define('wxRIBBON_ART_PANEL_MINIMISED_BORDER_GRADIENT_COLOUR', 1);
define('wxRIBBON_ART_PANEL_LABEL_BACKGROUND_COLOUR', 1);
define('wxRIBBON_ART_PANEL_LABEL_BACKGROUND_GRADIENT_COLOUR', 1);
define('wxRIBBON_ART_PANEL_LABEL_COLOUR', 1);
define('wxRIBBON_ART_PANEL_HOVER_LABEL_BACKGROUND_COLOUR', 1);
define('wxRIBBON_ART_PANEL_HOVER_LABEL_BACKGROUND_GRADIENT_COLOUR', 1);
define('wxRIBBON_ART_PANEL_HOVER_LABEL_COLOUR', 1);
define('wxRIBBON_ART_PANEL_MINIMISED_LABEL_COLOUR', 1);
define('wxRIBBON_ART_PANEL_ACTIVE_BACKGROUND_TOP_COLOUR', 1);
define('wxRIBBON_ART_PANEL_ACTIVE_BACKGROUND_TOP_GRADIENT_COLOUR', 1);
define('wxRIBBON_ART_PANEL_ACTIVE_BACKGROUND_COLOUR', 1);
define('wxRIBBON_ART_PANEL_ACTIVE_BACKGROUND_GRADIENT_COLOUR', 1);
define('wxRIBBON_ART_PAGE_BORDER_COLOUR', 1);
define('wxRIBBON_ART_PAGE_BACKGROUND_TOP_COLOUR', 1);
define('wxRIBBON_ART_PAGE_BACKGROUND_TOP_GRADIENT_COLOUR', 1);
define('wxRIBBON_ART_PAGE_BACKGROUND_COLOUR', 1);
define('wxRIBBON_ART_PAGE_BACKGROUND_GRADIENT_COLOUR', 1);
define('wxRIBBON_ART_PAGE_HOVER_BACKGROUND_TOP_COLOUR', 1);
define('wxRIBBON_ART_PAGE_HOVER_BACKGROUND_TOP_GRADIENT_COLOUR', 1);
define('wxRIBBON_ART_PAGE_HOVER_BACKGROUND_COLOUR', 1);
define('wxRIBBON_ART_PAGE_HOVER_BACKGROUND_GRADIENT_COLOUR', 1);
define('wxRIBBON_ART_TOOLBAR_BORDER_COLOUR', 1);
define('wxRIBBON_ART_TOOLBAR_HOVER_BORDER_COLOUR', 1);
define('wxRIBBON_ART_TOOLBAR_FACE_COLOUR', 1);
define('wxRIBBON_ART_TOOL_BACKGROUND_TOP_COLOUR', 1);
define('wxRIBBON_ART_TOOL_BACKGROUND_TOP_GRADIENT_COLOUR', 1);
define('wxRIBBON_ART_TOOL_BACKGROUND_COLOUR', 1);
define('wxRIBBON_ART_TOOL_BACKGROUND_GRADIENT_COLOUR', 1);
define('wxRIBBON_ART_TOOL_HOVER_BACKGROUND_TOP_COLOUR', 1);
define('wxRIBBON_ART_TOOL_HOVER_BACKGROUND_TOP_GRADIENT_COLOUR', 1);
define('wxRIBBON_ART_TOOL_HOVER_BACKGROUND_COLOUR', 1);
define('wxRIBBON_ART_TOOL_HOVER_BACKGROUND_GRADIENT_COLOUR', 1);
define('wxRIBBON_ART_TOOL_ACTIVE_BACKGROUND_TOP_COLOUR', 1);
define('wxRIBBON_ART_TOOL_ACTIVE_BACKGROUND_TOP_GRADIENT_COLOUR', 1);
define('wxRIBBON_ART_TOOL_ACTIVE_BACKGROUND_COLOUR', 1);
define('wxRIBBON_ART_TOOL_ACTIVE_BACKGROUND_GRADIENT_COLOUR', 1);
define('wxRIBBON_SCROLL_BTN_LEFT', 1);
define('wxRIBBON_SCROLL_BTN_RIGHT', 1);
define('wxRIBBON_SCROLL_BTN_UP', 1);
define('wxRIBBON_SCROLL_BTN_DOWN', 1);
define('wxRIBBON_SCROLL_BTN_DIRECTION_MASK', 1);
define('wxRIBBON_SCROLL_BTN_NORMAL', 1);
define('wxRIBBON_SCROLL_BTN_HOVERED', 1);
define('wxRIBBON_SCROLL_BTN_ACTIVE', 1);
define('wxRIBBON_SCROLL_BTN_STATE_MASK', 1);
define('wxRIBBON_SCROLL_BTN_FOR_OTHER', 1);
define('wxRIBBON_SCROLL_BTN_FOR_TABS', 1);
define('wxRIBBON_SCROLL_BTN_FOR_PAGE', 1);
define('wxRIBBON_SCROLL_BTN_FOR_MASK', 1);
define('wxRIBBON_BUTTON_NORMAL', 1);
define('wxRIBBON_BUTTON_DROPDOWN', 1);
define('wxRIBBON_BUTTON_HYBRID', 1);
define('wxRIBBON_BUTTON_TOGGLE', 1);
define('wxRIBBON_BUTTONBAR_BUTTON_SMALL', 1);
define('wxRIBBON_BUTTONBAR_BUTTON_MEDIUM', 1);
define('wxRIBBON_BUTTONBAR_BUTTON_LARGE', 1);
define('wxRIBBON_BUTTONBAR_BUTTON_SIZE_MASK', 1);
define('wxRIBBON_BUTTONBAR_BUTTON_NORMAL_HOVERED', 1);
define('wxRIBBON_BUTTONBAR_BUTTON_DROPDOWN_HOVERED', 1);
define('wxRIBBON_BUTTONBAR_BUTTON_HOVER_MASK', 1);
define('wxRIBBON_BUTTONBAR_BUTTON_NORMAL_ACTIVE', 1);
define('wxRIBBON_BUTTONBAR_BUTTON_DROPDOWN_ACTIVE', 1);
define('wxRIBBON_BUTTONBAR_BUTTON_DISABLED', 1);
define('wxRIBBON_BUTTONBAR_BUTTON_TOGGLED', 1);
define('wxRIBBON_BUTTONBAR_BUTTON_STATE_MASK', 1);
define('wxRIBBON_GALLERY_BUTTON_NORMAL', 1);
define('wxRIBBON_GALLERY_BUTTON_HOVERED', 1);
define('wxRIBBON_GALLERY_BUTTON_ACTIVE', 1);
define('wxRIBBON_GALLERY_BUTTON_DISABLED', 1);
define('wxRICHTEXT_TYPE_ANY', 1);
define('wxRICHTEXT_TYPE_TEXT', 1);
define('wxRICHTEXT_TYPE_XML', 1);
define('wxRICHTEXT_TYPE_HTML', 1);
define('wxRICHTEXT_TYPE_RTF', 1);
define('wxRICHTEXT_TYPE_PDF', 1);
define('wxRICHTEXT_HITTEST_BEFORE', 1);
define('wxRICHTEXT_HITTEST_AFTER', 1);
define('wxRICHTEXT_HITTEST_ON', 1);
define('wxRICHTEXT_HITTEST_OUTSIDE', 1);
define('wxRICHTEXT_HITTEST_NO_NESTED_OBJECTS', 1);
define('wxRICHTEXT_HITTEST_NO_FLOATING_OBJECTS', 1);
define('wxTEXT_BOX_ATTR_FLOAT', 1);
define('wxTEXT_BOX_ATTR_CLEAR', 1);
define('wxTEXT_BOX_ATTR_COLLAPSE_BORDERS', 1);
define('wxTEXT_BOX_ATTR_VERTICAL_ALIGNMENT', 1);
define('wxTEXT_ATTR_VALUE_VALID', 1);
define('wxTEXT_ATTR_VALUE_VALID_MASK', 1);
define('wxTEXT_ATTR_UNITS_TENTHS_MM', 1);
define('wxTEXT_ATTR_UNITS_PIXELS', 1);
define('wxTEXT_ATTR_UNITS_PERCENTAGE', 1);
define('wxTEXT_ATTR_UNITS_POINTS', 1);
define('wxTEXT_ATTR_UNITS_MASK', 1);
define('wxTEXT_BOX_ATTR_POSITION_STATIC', 1);
define('wxTEXT_BOX_ATTR_POSITION_RELATIVE', 1);
define('wxTEXT_BOX_ATTR_POSITION_ABSOLUTE', 1);
define('wxTEXT_BOX_ATTR_POSITION_MASK', 1);
define('wxTEXT_BOX_ATTR_BORDER_SOLID', 1);
define('wxTEXT_BOX_ATTR_BORDER_DOTTED', 1);
define('wxTEXT_BOX_ATTR_BORDER_DASHED', 1);
define('wxTEXT_BOX_ATTR_BORDER_DOUBLE', 1);
define('wxTEXT_BOX_ATTR_BORDER_GROOVE', 1);
define('wxTEXT_BOX_ATTR_BORDER_RIDGE', 1);
define('wxTEXT_BOX_ATTR_BORDER_INSET', 1);
define('wxTEXT_BOX_ATTR_BORDER_OUTSET', 1);
define('wxTEXT_BOX_ATTR_BORDER_STYLE', 1);
define('wxTEXT_BOX_ATTR_BORDER_COLOUR', 1);
define('wxTEXT_BOX_ATTR_BORDER_THIN', 1);
define('wxTEXT_BOX_ATTR_BORDER_MEDIUM', 1);
define('wxTEXT_BOX_ATTR_BORDER_THICK', 1);
define('wxTEXT_BOX_ATTR_FLOAT_LEFT', 1);
define('wxTEXT_BOX_ATTR_FLOAT_RIGHT', 1);
define('wxTEXT_BOX_ATTR_CLEAR_LEFT', 1);
define('wxTEXT_BOX_ATTR_CLEAR_RIGHT', 1);
define('wxTEXT_BOX_ATTR_CLEAR_BOTH', 1);
define('wxTEXT_BOX_ATTR_COLLAPSE_FULL', 1);
define('wxTEXT_BOX_ATTR_VERTICAL_ALIGNMENT_TOP', 1);
define('wxTEXT_BOX_ATTR_VERTICAL_ALIGNMENT_CENTRE', 1);
define('wxTEXT_BOX_ATTR_VERTICAL_ALIGNMENT_BOTTOM', 1);
define('wxRICHTEXT_INSERT', 1);
define('wxRICHTEXT_DELETE', 1);
define('wxRICHTEXT_CHANGE_ATTRIBUTES', 1);
define('wxRICHTEXT_CHANGE_STYLE', 1);
define('wxRICHTEXT_CHANGE_OBJECT', 1);
define('wxRICHTEXT_PAGE_ODD', 1);
define('wxRICHTEXT_PAGE_EVEN', 1);
define('wxRICHTEXT_PAGE_ALL', 1);
define('wxRICHTEXT_PAGE_LEFT', 1);
define('wxRICHTEXT_PAGE_CENTRE', 1);
define('wxRICHTEXT_PAGE_RIGHT', 1);
define('wxTipKind_TopLeft', 1);
define('wxTipKind_Top', 1);
define('wxTipKind_TopRight', 1);
define('wxTipKind_BottomLeft', 1);
define('wxTipKind_Bottom', 1);
define('wxTipKind_BottomRight', 1);
define('wxTipKind_Auto', 1);
define('wxSASH_TOP', 1);
define('wxSASH_RIGHT', 1);
define('wxSASH_BOTTOM', 1);
define('wxSASH_LEFT', 1);
define('wxSASH_STATUS_OK', 1);
define('wxSASH_STATUS_OUT_OF_RANGE', 1);
define('wxSHOW_SB_NEVER', 1);
define('wxSHOW_SB_DEFAULT', 1);
define('wxSHOW_SB_ALWAYS', 1);
define('wxSYS_OEM_FIXED_FONT', 1);
define('wxSYS_ANSI_FIXED_FONT', 1);
define('wxSYS_ANSI_VAR_FONT', 1);
define('wxSYS_SYSTEM_FONT', 1);
define('wxSYS_DEVICE_DEFAULT_FONT', 1);
define('wxSYS_DEFAULT_GUI_FONT', 1);
define('wxSYS_COLOUR_SCROLLBAR', 1);
define('wxSYS_COLOUR_DESKTOP', 1);
define('wxSYS_COLOUR_ACTIVECAPTION', 1);
define('wxSYS_COLOUR_INACTIVECAPTION', 1);
define('wxSYS_COLOUR_MENU', 1);
define('wxSYS_COLOUR_WINDOW', 1);
define('wxSYS_COLOUR_WINDOWFRAME', 1);
define('wxSYS_COLOUR_MENUTEXT', 1);
define('wxSYS_COLOUR_WINDOWTEXT', 1);
define('wxSYS_COLOUR_CAPTIONTEXT', 1);
define('wxSYS_COLOUR_ACTIVEBORDER', 1);
define('wxSYS_COLOUR_INACTIVEBORDER', 1);
define('wxSYS_COLOUR_APPWORKSPACE', 1);
define('wxSYS_COLOUR_HIGHLIGHT', 1);
define('wxSYS_COLOUR_HIGHLIGHTTEXT', 1);
define('wxSYS_COLOUR_BTNFACE', 1);
define('wxSYS_COLOUR_BTNSHADOW', 1);
define('wxSYS_COLOUR_GRAYTEXT', 1);
define('wxSYS_COLOUR_BTNTEXT', 1);
define('wxSYS_COLOUR_INACTIVECAPTIONTEXT', 1);
define('wxSYS_COLOUR_BTNHIGHLIGHT', 1);
define('wxSYS_COLOUR_3DDKSHADOW', 1);
define('wxSYS_COLOUR_3DLIGHT', 1);
define('wxSYS_COLOUR_INFOTEXT', 1);
define('wxSYS_COLOUR_INFOBK', 1);
define('wxSYS_COLOUR_LISTBOX', 1);
define('wxSYS_COLOUR_HOTLIGHT', 1);
define('wxSYS_COLOUR_GRADIENTACTIVECAPTION', 1);
define('wxSYS_COLOUR_GRADIENTINACTIVECAPTION', 1);
define('wxSYS_COLOUR_MENUHILIGHT', 1);
define('wxSYS_COLOUR_MENUBAR', 1);
define('wxSYS_COLOUR_LISTBOXTEXT', 1);
define('wxSYS_COLOUR_LISTBOXHIGHLIGHTTEXT', 1);
define('wxSYS_COLOUR_BACKGROUND', 1);
define('wxSYS_COLOUR_3DFACE', 1);
define('wxSYS_COLOUR_3DSHADOW', 1);
define('wxSYS_COLOUR_BTNHILIGHT', 1);
define('wxSYS_COLOUR_3DHIGHLIGHT', 1);
define('wxSYS_COLOUR_3DHILIGHT', 1);
define('wxSYS_COLOUR_FRAMEBK', 1);
define('wxSYS_MOUSE_BUTTONS', 1);
define('wxSYS_BORDER_X', 1);
define('wxSYS_BORDER_Y', 1);
define('wxSYS_CURSOR_X', 1);
define('wxSYS_CURSOR_Y', 1);
define('wxSYS_DCLICK_X', 1);
define('wxSYS_DCLICK_Y', 1);
define('wxSYS_DRAG_X', 1);
define('wxSYS_DRAG_Y', 1);
define('wxSYS_EDGE_X', 1);
define('wxSYS_EDGE_Y', 1);
define('wxSYS_HSCROLL_ARROW_X', 1);
define('wxSYS_HSCROLL_ARROW_Y', 1);
define('wxSYS_HTHUMB_X', 1);
define('wxSYS_ICON_X', 1);
define('wxSYS_ICON_Y', 1);
define('wxSYS_ICONSPACING_X', 1);
define('wxSYS_ICONSPACING_Y', 1);
define('wxSYS_WINDOWMIN_X', 1);
define('wxSYS_WINDOWMIN_Y', 1);
define('wxSYS_SCREEN_X', 1);
define('wxSYS_SCREEN_Y', 1);
define('wxSYS_FRAMESIZE_X', 1);
define('wxSYS_FRAMESIZE_Y', 1);
define('wxSYS_SMALLICON_X', 1);
define('wxSYS_SMALLICON_Y', 1);
define('wxSYS_HSCROLL_Y', 1);
define('wxSYS_VSCROLL_X', 1);
define('wxSYS_VSCROLL_ARROW_X', 1);
define('wxSYS_VSCROLL_ARROW_Y', 1);
define('wxSYS_VTHUMB_Y', 1);
define('wxSYS_CAPTION_Y', 1);
define('wxSYS_MENU_Y', 1);
define('wxSYS_NETWORK_PRESENT', 1);
define('wxSYS_PENWINDOWS_PRESENT', 1);
define('wxSYS_SHOW_SOUNDS', 1);
define('wxSYS_SWAP_BUTTONS', 1);
define('wxSYS_DCLICK_MSEC', 1);
define('wxSYS_CAN_DRAW_FRAME_DECORATIONS', 1);
define('wxSYS_CAN_ICONIZE_FRAME', 1);
define('wxSYS_TABLET_PRESENT', 1);
define('wxSYS_SCREEN_TINY', 1);
define('wxSYS_SCREEN_PDA', 1);
define('wxSYS_SCREEN_SMALL', 1);
define('wxSYS_SCREEN_DESKTOP', 1);
define('wxSOCKET_NOERROR', 1);
define('wxSOCKET_INVOP', 1);
define('wxSOCKET_IOERR', 1);
define('wxSOCKET_INVADDR', 1);
define('wxSOCKET_INVSOCK', 1);
define('wxSOCKET_NOHOST', 1);
define('wxSOCKET_INVPORT', 1);
define('wxSOCKET_WOULDBLOCK', 1);
define('wxSOCKET_TIMEDOUT', 1);
define('wxSOCKET_MEMERR', 1);
define('wxSOCKET_INPUT', 1);
define('wxSOCKET_OUTPUT', 1);
define('wxSOCKET_CONNECTION', 1);
define('wxSOCKET_LOST', 1);
define('wxSPLIT_HORIZONTAL', 1);
define('wxSPLIT_VERTICAL', 1);
define('wxSTOCK_NOFLAGS', 1);
define('wxSTOCK_WITH_MNEMONIC', 1);
define('wxSTOCK_WITH_ACCELERATOR', 1);
define('wxSTOCK_WITHOUT_ELLIPSIS', 1);
define('wxSTOCK_FOR_BUTTON', 1);
define('wxTAR_REGTYPE', 1);
define('wxTAR_LNKTYPE', 1);
define('wxTAR_SYMTYPE', 1);
define('wxTAR_CHRTYPE', 1);
define('wxTAR_BLKTYPE', 1);
define('wxTAR_DIRTYPE', 1);
define('wxTAR_FIFOTYPE', 1);
define('wxTAR_CONTTYPE', 1);
define('wxTAR_USTAR', 1);
define('wxTAR_PAX', 1);
define('wxTBI_DOCK', 1);
define('wxTBI_CUSTOM_STATUSITEM', 1);
define('wxTBI_DEFAULT_TYPE', 1);
define('wxTEXT_ALIGNMENT_DEFAULT', 1);
define('wxTEXT_ALIGNMENT_LEFT', 1);
define('wxTEXT_ALIGNMENT_CENTRE', 1);
define('wxTEXT_ALIGNMENT_CENTER', 1);
define('wxTEXT_ALIGNMENT_RIGHT', 1);
define('wxTEXT_ALIGNMENT_JUSTIFIED', 1);
define('wxTEXT_ATTR_TEXT_COLOUR', 1);
define('wxTEXT_ATTR_BACKGROUND_COLOUR', 1);
define('wxTEXT_ATTR_FONT_FACE', 1);
define('wxTEXT_ATTR_FONT_SIZE', 1);
define('wxTEXT_ATTR_FONT_WEIGHT', 1);
define('wxTEXT_ATTR_FONT_ITALIC', 1);
define('wxTEXT_ATTR_FONT_UNDERLINE', 1);
define('wxTEXT_ATTR_FONT_ENCODING', 1);
define('wxTEXT_ATTR_FONT_FAMILY', 1);
define('wxTEXT_ATTR_FONT', 1);
define('wxTEXT_ATTR_ALIGNMENT', 1);
define('wxTEXT_ATTR_LEFT_INDENT', 1);
define('wxTEXT_ATTR_RIGHT_INDENT', 1);
define('wxTEXT_ATTR_TABS', 1);
define('wxTEXT_ATTR_PARA_SPACING_AFTER', 1);
define('wxTEXT_ATTR_PARA_SPACING_BEFORE', 1);
define('wxTEXT_ATTR_LINE_SPACING', 1);
define('wxTEXT_ATTR_CHARACTER_STYLE_NAME', 1);
define('wxTEXT_ATTR_PARAGRAPH_STYLE_NAME', 1);
define('wxTEXT_ATTR_LIST_STYLE_NAME', 1);
define('wxTEXT_ATTR_BULLET_STYLE', 1);
define('wxTEXT_ATTR_BULLET_NUMBER', 1);
define('wxTEXT_ATTR_BULLET_TEXT', 1);
define('wxTEXT_ATTR_BULLET_NAME', 1);
define('wxTEXT_ATTR_BULLET', 1);
define('wxTEXT_ATTR_URL', 1);
define('wxTEXT_ATTR_PAGE_BREAK', 1);
define('wxTEXT_ATTR_EFFECTS', 1);
define('wxTEXT_ATTR_OUTLINE_LEVEL', 1);
define('wxTEXT_ATTR_CHARACTER', 1);
define('wxTEXT_ATTR_PARAGRAPH', 1);
define('wxTEXT_ATTR_ALL', 1);
define('wxTEXT_ATTR_BULLET_STYLE_ARABIC', 1);
define('wxTEXT_ATTR_BULLET_STYLE_LETTERS_UPPER', 1);
define('wxTEXT_ATTR_BULLET_STYLE_LETTERS_LOWER', 1);
define('wxTEXT_ATTR_BULLET_STYLE_ROMAN_UPPER', 1);
define('wxTEXT_ATTR_BULLET_STYLE_ROMAN_LOWER', 1);
define('wxTEXT_ATTR_BULLET_STYLE_SYMBOL', 1);
define('wxTEXT_ATTR_BULLET_STYLE_BITMAP', 1);
define('wxTEXT_ATTR_BULLET_STYLE_PARENTHESES', 1);
define('wxTEXT_ATTR_BULLET_STYLE_PERIOD', 1);
define('wxTEXT_ATTR_BULLET_STYLE_STANDARD', 1);
define('wxTEXT_ATTR_BULLET_STYLE_RIGHT_PARENTHESIS', 1);
define('wxTEXT_ATTR_BULLET_STYLE_OUTLINE', 1);
define('wxTEXT_ATTR_BULLET_STYLE_ALIGN_LEFT', 1);
define('wxTEXT_ATTR_BULLET_STYLE_ALIGN_RIGHT', 1);
define('wxTEXT_ATTR_BULLET_STYLE_ALIGN_CENTRE', 1);
define('wxTEXT_ATTR_EFFECT_CAPITALS', 1);
define('wxTEXT_ATTR_EFFECT_SMALL_CAPITALS', 1);
define('wxTEXT_ATTR_EFFECT_STRIKETHROUGH', 1);
define('wxTEXT_ATTR_EFFECT_DOUBLE_STRIKETHROUGH', 1);
define('wxTEXT_ATTR_EFFECT_SHADOW', 1);
define('wxTEXT_ATTR_EFFECT_EMBOSS', 1);
define('wxTEXT_ATTR_EFFECT_OUTLINE', 1);
define('wxTEXT_ATTR_EFFECT_ENGRAVE', 1);
define('wxTEXT_ATTR_EFFECT_SUPERSCRIPT', 1);
define('wxTEXT_ATTR_EFFECT_SUBSCRIPT', 1);
define('wxTEXT_ATTR_LINE_SPACING_NORMAL', 1);
define('wxTEXT_ATTR_LINE_SPACING_HALF', 1);
define('wxTEXT_ATTR_LINE_SPACING_TWICE', 1);
define('wxTE_HT_UNKNOWN', 1);
define('wxTE_HT_BEFORE', 1);
define('wxTE_HT_ON_TEXT', 1);
define('wxTE_HT_BELOW', 1);
define('wxTE_HT_BEYOND', 1);
define('wxTextFileType_Unix', 1);
define('wxTextFileType_Dos', 1);
define('wxTextFileType_Mac', 1);
define('wxTextFileType_Os2', 1);
define('wxTOKEN_INVALID', 1);
define('wxTOKEN_DEFAULT', 1);
define('wxTOKEN_RET_EMPTY', 1);
define('wxTOKEN_RET_EMPTY_ALL', 1);
define('wxTOKEN_RET_DELIMS', 1);
define('wxTOKEN_STRTOK', 1);
define('wxTreeItemIcon_Normal', 1);
define('wxTreeItemIcon_Selected', 1);
define('wxTreeItemIcon_Expanded', 1);
define('wxTreeItemIcon_SelectedExpanded', 1);
define('wxTreeItemIcon_Max', 1);
define('wxEOL_NATIVE', 1);
define('wxEOL_UNIX', 1);
define('wxEOL_MAC', 1);
define('wxEOL_DOS', 1);
define('wxURI_REGNAME', 1);
define('wxURI_IPV4ADDRESS', 1);
define('wxURI_IPV6ADDRESS', 1);
define('wxURI_IPVFUTURE', 1);
define('wxURL_NOERR', 1);
define('wxURL_SNTXERR', 1);
define('wxURL_NOPROTO', 1);
define('wxURL_NOHOST', 1);
define('wxURL_NOPATH', 1);
define('wxURL_CONNERR', 1);
define('wxURL_PROTOERR', 1);
define('wxSIGHUP', 1);
define('wxSIGINT', 1);
define('wxSIGQUIT', 1);
define('wxSIGILL', 1);
define('wxSIGTRAP', 1);
define('wxSIGABRT', 1);
define('wxSIGEMT', 1);
define('wxSIGFPE', 1);
define('wxSIGKILL', 1);
define('wxSIGBUS', 1);
define('wxSIGSEGV', 1);
define('wxSIGSYS', 1);
define('wxSIGPIPE', 1);
define('wxSIGALRM', 1);
define('wxSIGTERM', 1);
define('wxKILL_OK', 1);
define('wxKILL_BAD_SIGNAL', 1);
define('wxKILL_ACCESS_DENIED', 1);
define('wxKILL_NO_PROCESS', 1);
define('wxKILL_ERROR', 1);
define('wxKILL_NOCHILDREN', 1);
define('wxKILL_CHILDREN', 1);
define('wxSHUTDOWN_FORCE', 1);
define('wxSHUTDOWN_POWEROFF', 1);
define('wxSHUTDOWN_REBOOT', 1);
define('wxSHUTDOWN_LOGOFF', 1);
define('wxNUM_VAL_DEFAULT', 1);
define('wxNUM_VAL_THOUSANDS_SEPARATOR', 1);
define('wxNUM_VAL_ZERO_AS_BLANK', 1);
define('wxNUM_VAL_NO_TRAILING_ZEROES', 1);
define('wxFILTER_EMPTY', 1);
define('wxFILTER_ALPHA', 1);
define('wxFILTER_ALPHANUMERIC', 1);
define('wxFILTER_DIGITS', 1);
define('wxFILTER_NUMERIC', 1);
define('wxFILTER_INCLUDE_LIST', 1);
define('wxFILTER_INCLUDE_CHAR_LIST', 1);
define('wxFILTER_EXCLUDE_LIST', 1);
define('wxFILTER_EXCLUDE_CHAR_LIST', 1);
define('wxXML_ELEMENT_NODE', 1);
define('wxXML_ATTRIBUTE_NODE', 1);
define('wxXML_TEXT_NODE', 1);
define('wxXML_CDATA_SECTION_NODE', 1);
define('wxXML_ENTITY_REF_NODE', 1);
define('wxXML_ENTITY_NODE', 1);
define('wxXML_PI_NODE', 1);
define('wxXML_COMMENT_NODE', 1);
define('wxXML_DOCUMENT_NODE', 1);
define('wxXML_DOCUMENT_TYPE_NODE', 1);
define('wxXML_DOCUMENT_FRAG_NODE', 1);
define('wxXML_NOTATION_NODE', 1);
define('wxXML_HTML_DOCUMENT_NODE', 1);
define('wxXRC_USE_LOCALE', 1);
define('wxXRC_NO_SUBCLASSING', 1);
define('wxXRC_NO_RELOADING', 1);
define('wxZIP_METHOD_STORE', 1);
define('wxZIP_METHOD_SHRINK', 1);
define('wxZIP_METHOD_REDUCE1', 1);
define('wxZIP_METHOD_REDUCE2', 1);
define('wxZIP_METHOD_REDUCE3', 1);
define('wxZIP_METHOD_REDUCE4', 1);
define('wxZIP_METHOD_IMPLODE', 1);
define('wxZIP_METHOD_TOKENIZE', 1);
define('wxZIP_METHOD_DEFLATE', 1);
define('wxZIP_METHOD_DEFLATE64', 1);
define('wxZIP_METHOD_BZIP2', 1);
define('wxZIP_METHOD_DEFAULT', 1);
define('wxZIP_SYSTEM_MSDOS', 1);
define('wxZIP_SYSTEM_AMIGA', 1);
define('wxZIP_SYSTEM_OPENVMS', 1);
define('wxZIP_SYSTEM_UNIX', 1);
define('wxZIP_SYSTEM_VM_CMS', 1);
define('wxZIP_SYSTEM_ATARI_ST', 1);
define('wxZIP_SYSTEM_OS2_HPFS', 1);
define('wxZIP_SYSTEM_MACINTOSH', 1);
define('wxZIP_SYSTEM_Z_SYSTEM', 1);
define('wxZIP_SYSTEM_CPM', 1);
define('wxZIP_SYSTEM_WINDOWS_NTFS', 1);
define('wxZIP_SYSTEM_MVS', 1);
define('wxZIP_SYSTEM_VSE', 1);
define('wxZIP_SYSTEM_ACORN_RISC', 1);
define('wxZIP_SYSTEM_VFAT', 1);
define('wxZIP_SYSTEM_ALTERNATE_MVS', 1);
define('wxZIP_SYSTEM_BEOS', 1);
define('wxZIP_SYSTEM_TANDEM', 1);
define('wxZIP_SYSTEM_OS_400', 1);
define('wxZIP_A_RDONLY', 1);
define('wxZIP_A_HIDDEN', 1);
define('wxZIP_A_SYSTEM', 1);
define('wxZIP_A_SUBDIR', 1);
define('wxZIP_A_ARCH', 1);
define('wxZIP_A_MASK', 1);
define('wxZIP_ENCRYPTED', 1);
define('wxZIP_DEFLATE_NORMAL', 1);
define('wxZIP_DEFLATE_EXTRA', 1);
define('wxZIP_DEFLATE_FAST', 1);
define('wxZIP_DEFLATE_SUPERFAST', 1);
define('wxZIP_DEFLATE_MASK', 1);
define('wxZIP_SUMS_FOLLOW', 1);
define('wxZIP_ENHANCED', 1);
define('wxZIP_PATCH', 1);
define('wxZIP_STRONG_ENC', 1);
define('wxZIP_UNUSED', 1);
define('wxZIP_RESERVED', 1);
define('wxZ_DEFAULT_COMPRESSION', 1);
define('wxZ_NO_COMPRESSION', 1);
define('wxZ_BEST_SPEED', 1);
define('wxZ_BEST_COMPRESSION', 1);
define('wxZLIB_NO_HEADER', 1);
define('wxZLIB_ZLIB', 1);
define('wxZLIB_GZIP', 1);
define('wxZLIB_AUTO', 1);

//wxWidgets object constants

define('wxTheApp', 1);
define('wxNullBitmap', 1);
define('wxDefaultDateTime', 1);
define('wxNullFont', 1);
define('wxNORMAL_FONT', 1);
define('wxSMALL_FONT', 1);
define('wxITALIC_FONT', 1);
define('wxSWISS_FONT', 1);
define('wxTheFontList', 1);
define('wxEVT_COMMAND_LIST_BEGIN_DRAG', 1);
define('wxEVT_COMMAND_LIST_BEGIN_RDRAG', 1);
define('wxEVT_COMMAND_LIST_BEGIN_LABEL_EDIT', 1);
define('wxEVT_COMMAND_LIST_END_LABEL_EDIT', 1);
define('wxEVT_COMMAND_LIST_DELETE_ITEM', 1);
define('wxEVT_COMMAND_LIST_DELETE_ALL_ITEMS', 1);
define('wxEVT_COMMAND_LIST_ITEM_SELECTED', 1);
define('wxEVT_COMMAND_LIST_ITEM_DESELECTED', 1);
define('wxEVT_COMMAND_LIST_KEY_DOWN', 1);
define('wxEVT_COMMAND_LIST_INSERT_ITEM', 1);
define('wxEVT_COMMAND_LIST_COL_CLICK', 1);
define('wxEVT_COMMAND_LIST_ITEM_RIGHT_CLICK', 1);
define('wxEVT_COMMAND_LIST_ITEM_MIDDLE_CLICK', 1);
define('wxEVT_COMMAND_LIST_ITEM_ACTIVATED', 1);
define('wxEVT_COMMAND_LIST_CACHE_HINT', 1);
define('wxEVT_COMMAND_LIST_COL_RIGHT_CLICK', 1);
define('wxEVT_COMMAND_LIST_COL_BEGIN_DRAG', 1);
define('wxEVT_COMMAND_LIST_COL_DRAGGING', 1);
define('wxEVT_COMMAND_LIST_COL_END_DRAG', 1);
define('wxEVT_COMMAND_LIST_ITEM_FOCUSED', 1);
define('wxEmptyString', 1);
define('wxEVT_COMMAND_TREE_BEGIN_DRAG', 1);
define('wxEVT_COMMAND_TREE_BEGIN_RDRAG', 1);
define('wxEVT_COMMAND_TREE_BEGIN_LABEL_EDIT', 1);
define('wxEVT_COMMAND_TREE_END_LABEL_EDIT', 1);
define('wxEVT_COMMAND_TREE_DELETE_ITEM', 1);
define('wxEVT_COMMAND_TREE_GET_INFO', 1);
define('wxEVT_COMMAND_TREE_SET_INFO', 1);
define('wxEVT_COMMAND_TREE_ITEM_EXPANDED', 1);
define('wxEVT_COMMAND_TREE_ITEM_EXPANDING', 1);
define('wxEVT_COMMAND_TREE_ITEM_COLLAPSED', 1);
define('wxEVT_COMMAND_TREE_ITEM_COLLAPSING', 1);
define('wxEVT_COMMAND_TREE_SEL_CHANGED', 1);
define('wxEVT_COMMAND_TREE_SEL_CHANGING', 1);
define('wxEVT_COMMAND_TREE_KEY_DOWN', 1);
define('wxEVT_COMMAND_TREE_ITEM_ACTIVATED', 1);
define('wxEVT_COMMAND_TREE_ITEM_RIGHT_CLICK', 1);
define('wxEVT_COMMAND_TREE_ITEM_MIDDLE_CLICK', 1);
define('wxEVT_COMMAND_TREE_END_DRAG', 1);
define('wxEVT_COMMAND_TREE_STATE_IMAGE_CLICK', 1);
define('wxEVT_COMMAND_TREE_ITEM_GETTOOLTIP', 1);
define('wxEVT_COMMAND_TREE_ITEM_MENU', 1);
define('wxNullAnimation', 1);
define('wxART_TOOLBAR', 1);
define('wxART_MENU', 1);
define('wxART_FRAME_ICON', 1);
define('wxART_CMN_DIALOG', 1);
define('wxART_HELP_BROWSER', 1);
define('wxART_MESSAGE_BOX', 1);
define('wxART_BUTTON', 1);
define('wxART_LIST', 1);
define('wxART_OTHER', 1);
define('wxART_ADD_BOOKMARK', 1);
define('wxART_DEL_BOOKMARK', 1);
define('wxART_HELP_SIDE_PANEL', 1);
define('wxART_HELP_SETTINGS', 1);
define('wxART_HELP_BOOK', 1);
define('wxART_HELP_FOLDER', 1);
define('wxART_HELP_PAGE', 1);
define('wxART_GO_BACK', 1);
define('wxART_GO_FORWARD', 1);
define('wxART_GO_UP', 1);
define('wxART_GO_DOWN', 1);
define('wxART_GO_TO_PARENT', 1);
define('wxART_GO_HOME', 1);
define('wxART_GOTO_FIRST', 1);
define('wxART_GOTO_LAST', 1);
define('wxART_FILE_OPEN', 1);
define('wxART_FILE_SAVE', 1);
define('wxART_FILE_SAVE_AS', 1);
define('wxART_PRINT', 1);
define('wxART_HELP', 1);
define('wxART_TIP', 1);
define('wxART_REPORT_VIEW', 1);
define('wxART_LIST_VIEW', 1);
define('wxART_NEW_DIR', 1);
define('wxART_HARDDISK', 1);
define('wxART_FLOPPY', 1);
define('wxART_CDROM', 1);
define('wxART_REMOVABLE', 1);
define('wxART_FOLDER', 1);
define('wxART_FOLDER_OPEN', 1);
define('wxART_GO_DIR_UP', 1);
define('wxART_EXECUTABLE_FILE', 1);
define('wxART_NORMAL_FILE', 1);
define('wxART_TICK_MARK', 1);
define('wxART_CROSS_MARK', 1);
define('wxART_ERROR', 1);
define('wxART_QUESTION', 1);
define('wxART_WARNING', 1);
define('wxART_INFORMATION', 1);
define('wxART_MISSING_IMAGE', 1);
define('wxART_COPY', 1);
define('wxART_CUT', 1);
define('wxART_PASTE', 1);
define('wxART_DELETE', 1);
define('wxART_NEW', 1);
define('wxART_UNDO', 1);
define('wxART_REDO', 1);
define('wxART_PLUS', 1);
define('wxART_MINUS', 1);
define('wxART_CLOSE', 1);
define('wxART_QUIT', 1);
define('wxART_FIND', 1);
define('wxART_FIND_AND_REPLACE', 1);
define('wxNullBrush', 1);
define('wxBLUE_BRUSH', 1);
define('wxGREEN_BRUSH', 1);
define('wxYELLOW_BRUSH', 1);
define('wxWHITE_BRUSH', 1);
define('wxBLACK_BRUSH', 1);
define('wxGREY_BRUSH', 1);
define('wxMEDIUM_GREY_BRUSH', 1);
define('wxLIGHT_GREY_BRUSH', 1);
define('wxTRANSPARENT_BRUSH', 1);
define('wxCYAN_BRUSH', 1);
define('wxRED_BRUSH', 1);
define('wxTheBrushList', 1);
define('wxEVT_CALENDAR_SEL_CHANGED', 1);
define('wxEVT_CALENDAR_PAGE_CHANGED', 1);
define('wxEVT_CALENDAR_DOUBLECLICKED', 1);
define('wxEVT_CALENDAR_WEEKDAY_CLICKED', 1);
define('wxEVT_CALENDAR_WEEK_CLICKED', 1);
define('wxEVT_COMMAND_COLOURPICKER_CHANGED', 1);
define('wxEVT_COMMAND_COLLPANE_CHANGED', 1);
define('wxNullColour', 1);
define('wxTransparentColour', 1);
define('wxBLACK', 1);
define('wxBLUE', 1);
define('wxCYAN', 1);
define('wxGREEN', 1);
define('wxYELLOW', 1);
define('wxLIGHT_GREY', 1);
define('wxRED', 1);
define('wxWHITE', 1);
define('wxALPHA_TRANSPARENT', 1);
define('wxALPHA_OPAQUE', 1);
define('wxNullCursor', 1);
define('wxSTANDARD_CURSOR', 1);
define('wxHOURGLASS_CURSOR', 1);
define('wxCROSS_CURSOR', 1);
define('wxEVT_COMMAND_DATAVIEW_SELECTION_CHANGED', 1);
define('wxEVT_COMMAND_DATAVIEW_ITEM_ACTIVATED', 1);
define('wxEVT_COMMAND_DATAVIEW_ITEM_COLLAPSING', 1);
define('wxEVT_COMMAND_DATAVIEW_ITEM_COLLAPSED', 1);
define('wxEVT_COMMAND_DATAVIEW_ITEM_EXPANDING', 1);
define('wxEVT_COMMAND_DATAVIEW_ITEM_EXPANDED', 1);
define('wxEVT_COMMAND_DATAVIEW_ITEM_START_EDITING', 1);
define('wxEVT_COMMAND_DATAVIEW_ITEM_EDITING_STARTED', 1);
define('wxEVT_COMMAND_DATAVIEW_ITEM_EDITING_DONE', 1);
define('wxEVT_COMMAND_DATAVIEW_ITEM_VALUE_CHANGED', 1);
define('wxEVT_COMMAND_DATAVIEW_ITEM_CONTEXT_MENU', 1);
define('wxEVT_COMMAND_DATAVIEW_COLUMN_HEADER_CLICK', 1);
define('wxEVT_COMMAND_DATAVIEW_COLUMN_HEADER_RIGHT_CLICK', 1);
define('wxEVT_COMMAND_DATAVIEW_COLUMN_SORTED', 1);
define('wxEVT_COMMAND_DATAVIEW_COLUMN_REORDERED', 1);
define('wxEVT_COMMAND_DATAVIEW_CACHE_HINT', 1);
define('wxEVT_COMMAND_DATAVIEW_ITEM_BEGIN_DRAG', 1);
define('wxEVT_COMMAND_DATAVIEW_ITEM_DROP_POSSIBLE', 1);
define('wxEVT_COMMAND_DATAVIEW_ITEM_DROP', 1);
define('wxEVT_DATE_CHANGED', 1);
define('wxEVT_TIME_CHANGED', 1);
define('wxDefaultCoord', 1);
define('wxDirDialogDefaultFolderStr', 1);
define('wxDirSelectorPromptStr', 1);
define('wxDirDialogNameStr', 1);
define('wxEVT_NULL', 1);
define('wxEVT_ANY', 1);
define('wxEVT_COMMAND_BUTTON_CLICKED', 1);
define('wxEVT_COMMAND_CHECKBOX_CLICKED', 1);
define('wxEVT_COMMAND_CHOICE_SELECTED', 1);
define('wxEVT_COMMAND_LISTBOX_SELECTED', 1);
define('wxEVT_COMMAND_LISTBOX_DOUBLECLICKED', 1);
define('wxEVT_COMMAND_CHECKLISTBOX_TOGGLED', 1);
define('wxEVT_COMMAND_MENU_SELECTED', 1);
define('wxEVT_COMMAND_SLIDER_UPDATED', 1);
define('wxEVT_COMMAND_RADIOBOX_SELECTED', 1);
define('wxEVT_COMMAND_RADIOBUTTON_SELECTED', 1);
define('wxEVT_COMMAND_SCROLLBAR_UPDATED', 1);
define('wxEVT_COMMAND_VLBOX_SELECTED', 1);
define('wxEVT_COMMAND_COMBOBOX_SELECTED', 1);
define('wxEVT_COMMAND_TOOL_RCLICKED', 1);
define('wxEVT_COMMAND_TOOL_DROPDOWN_CLICKED', 1);
define('wxEVT_COMMAND_TOOL_ENTER', 1);
define('wxEVT_COMMAND_COMBOBOX_DROPDOWN', 1);
define('wxEVT_COMMAND_COMBOBOX_CLOSEUP', 1);
define('wxEVT_THREAD', 1);
define('wxEVT_LEFT_DOWN', 1);
define('wxEVT_LEFT_UP', 1);
define('wxEVT_MIDDLE_DOWN', 1);
define('wxEVT_MIDDLE_UP', 1);
define('wxEVT_RIGHT_DOWN', 1);
define('wxEVT_RIGHT_UP', 1);
define('wxEVT_MOTION', 1);
define('wxEVT_ENTER_WINDOW', 1);
define('wxEVT_LEAVE_WINDOW', 1);
define('wxEVT_LEFT_DCLICK', 1);
define('wxEVT_MIDDLE_DCLICK', 1);
define('wxEVT_RIGHT_DCLICK', 1);
define('wxEVT_SET_FOCUS', 1);
define('wxEVT_KILL_FOCUS', 1);
define('wxEVT_CHILD_FOCUS', 1);
define('wxEVT_MOUSEWHEEL', 1);
define('wxEVT_AUX1_DOWN', 1);
define('wxEVT_AUX1_UP', 1);
define('wxEVT_AUX1_DCLICK', 1);
define('wxEVT_AUX2_DOWN', 1);
define('wxEVT_AUX2_UP', 1);
define('wxEVT_AUX2_DCLICK', 1);
define('wxEVT_CHAR', 1);
define('wxEVT_CHAR_HOOK', 1);
define('wxEVT_NAVIGATION_KEY', 1);
define('wxEVT_KEY_DOWN', 1);
define('wxEVT_KEY_UP', 1);
define('wxEVT_SET_CURSOR', 1);
define('wxEVT_SCROLL_TOP', 1);
define('wxEVT_SCROLL_BOTTOM', 1);
define('wxEVT_SCROLL_LINEUP', 1);
define('wxEVT_SCROLL_LINEDOWN', 1);
define('wxEVT_SCROLL_PAGEUP', 1);
define('wxEVT_SCROLL_PAGEDOWN', 1);
define('wxEVT_SCROLL_THUMBTRACK', 1);
define('wxEVT_SCROLL_THUMBRELEASE', 1);
define('wxEVT_SCROLL_CHANGED', 1);
define('wxEVT_SPIN_UP', 1);
define('wxEVT_SPIN_DOWN', 1);
define('wxEVT_SPIN', 1);
define('wxEVT_SCROLLWIN_TOP', 1);
define('wxEVT_SCROLLWIN_BOTTOM', 1);
define('wxEVT_SCROLLWIN_LINEUP', 1);
define('wxEVT_SCROLLWIN_LINEDOWN', 1);
define('wxEVT_SCROLLWIN_PAGEUP', 1);
define('wxEVT_SCROLLWIN_PAGEDOWN', 1);
define('wxEVT_SCROLLWIN_THUMBTRACK', 1);
define('wxEVT_SCROLLWIN_THUMBRELEASE', 1);
define('wxEVT_SIZE', 1);
define('wxEVT_MOVE', 1);
define('wxEVT_CLOSE_WINDOW', 1);
define('wxEVT_END_SESSION', 1);
define('wxEVT_QUERY_END_SESSION', 1);
define('wxEVT_ACTIVATE_APP', 1);
define('wxEVT_ACTIVATE', 1);
define('wxEVT_CREATE', 1);
define('wxEVT_DESTROY', 1);
define('wxEVT_SHOW', 1);
define('wxEVT_ICONIZE', 1);
define('wxEVT_MAXIMIZE', 1);
define('wxEVT_MOUSE_CAPTURE_CHANGED', 1);
define('wxEVT_MOUSE_CAPTURE_LOST', 1);
define('wxEVT_PAINT', 1);
define('wxEVT_ERASE_BACKGROUND', 1);
define('wxEVT_NC_PAINT', 1);
define('wxEVT_MENU_OPEN', 1);
define('wxEVT_MENU_CLOSE', 1);
define('wxEVT_MENU_HIGHLIGHT', 1);
define('wxEVT_CONTEXT_MENU', 1);
define('wxEVT_SYS_COLOUR_CHANGED', 1);
define('wxEVT_DISPLAY_CHANGED', 1);
define('wxEVT_QUERY_NEW_PALETTE', 1);
define('wxEVT_PALETTE_CHANGED', 1);
define('wxEVT_JOY_BUTTON_DOWN', 1);
define('wxEVT_JOY_BUTTON_UP', 1);
define('wxEVT_JOY_MOVE', 1);
define('wxEVT_JOY_ZMOVE', 1);
define('wxEVT_DROP_FILES', 1);
define('wxEVT_INIT_DIALOG', 1);
define('wxEVT_IDLE', 1);
define('wxEVT_UPDATE_UI', 1);
define('wxEVT_SIZING', 1);
define('wxEVT_MOVING', 1);
define('wxEVT_MOVE_START', 1);
define('wxEVT_MOVE_END', 1);
define('wxEVT_HIBERNATE', 1);
define('wxEVT_COMMAND_TEXT_COPY', 1);
define('wxEVT_COMMAND_TEXT_CUT', 1);
define('wxEVT_COMMAND_TEXT_PASTE', 1);
define('wxEVT_COMMAND_LEFT_CLICK', 1);
define('wxEVT_COMMAND_LEFT_DCLICK', 1);
define('wxEVT_COMMAND_RIGHT_CLICK', 1);
define('wxEVT_COMMAND_RIGHT_DCLICK', 1);
define('wxEVT_COMMAND_SET_FOCUS', 1);
define('wxEVT_COMMAND_KILL_FOCUS', 1);
define('wxEVT_COMMAND_ENTER', 1);
define('wxEVT_HELP', 1);
define('wxEVT_DETAILED_HELP', 1);
define('wxEVT_COMMAND_TEXT_UPDATED', 1);
define('wxEVT_COMMAND_TOOL_CLICKED', 1);
define('wxEVT_WINDOW_MODAL_DIALOG_CLOSED', 1);
define('wxEVT_COMMAND_FIND', 1);
define('wxEVT_COMMAND_FIND_NEXT', 1);
define('wxEVT_COMMAND_FIND_REPLACE', 1);
define('wxEVT_COMMAND_FIND_REPLACE_ALL', 1);
define('wxEVT_COMMAND_FIND_CLOSE', 1);
define('wxEVT_FILECTRL_SELECTIONCHANGED', 1);
define('wxEVT_FILECTRL_FILEACTIVATED', 1);
define('wxEVT_FILECTRL_FOLDERCHANGED', 1);
define('wxEVT_FILECTRL_FILTERCHANGED', 1);
define('wxFileSelectorDefaultWildcardStr', 1);
define('wxInvalidOffset', 1);
define('wxInvalidSize', 1);
define('wxEVT_COMMAND_FILEPICKER_CHANGED', 1);
define('wxEVT_COMMAND_DIRPICKER_CHANGED', 1);
define('wxEVT_COMMAND_FONTPICKER_CHANGED', 1);
define('wxDefaultSpan', 1);
define('wxDefaultPosition', 1);
define('wxTheColourDatabase', 1);
define('wxDefaultSize', 1);
define('wxNullGraphicsPen', 1);
define('wxNullGraphicsBrush', 1);
define('wxNullGraphicsFont', 1);
define('wxNullGraphicsBitmap', 1);
define('wxNullGraphicsMatrix', 1);
define('wxNullGraphicsPath', 1);
define('wxEVT_COMMAND_HYPERLINK', 1);
define('wxNullIcon', 1);
define('wxNullIconBundle', 1);
define('wxIMAGE_ALPHA_TRANSPARENT', 1);
define('wxIMAGE_ALPHA_OPAQUE', 1);
define('wxIMAGE_ALPHA_THRESHOLD', 1);
define('wxNullImage', 1);
define('wxLAYOUT_DEFAULT_MARGIN', 1);
define('wxTheMimeTypesManager', 1);
define('wxMessageBoxCaptionStr', 1);
define('wxNullPalette', 1);
define('wxNullPen', 1);
define('wxRED_PEN', 1);
define('wxBLUE_PEN', 1);
define('wxCYAN_PEN', 1);
define('wxGREEN_PEN', 1);
define('wxYELLOW_PEN', 1);
define('wxBLACK_PEN', 1);
define('wxWHITE_PEN', 1);
define('wxTRANSPARENT_PEN', 1);
define('wxBLACK_DASHED_PEN', 1);
define('wxGREY_PEN', 1);
define('wxMEDIUM_GREY_PEN', 1);
define('wxLIGHT_GREY_PEN', 1);
define('wxThePenList', 1);
define('wxEVT_END_PROCESS', 1);
define('wxRichTextLineBreakChar', 1);
define('wxRichTextCommand', 1);
define('wxRichTextAction', 1);
define('wxEVT_COMMAND_SPINCTRL_UPDATED', 1);
define('wxEVT_COMMAND_SPINCTRLDOUBLE_UPDATED', 1);
define('wxEVT_COMMAND_SPLITTER_SASH_POS_CHANGED', 1);
define('wxEVT_COMMAND_SPLITTER_SASH_POS_CHANGING', 1);
define('wxEVT_COMMAND_SPLITTER_DOUBLECLICKED', 1);
define('wxEVT_COMMAND_SPLITTER_UNSPLIT', 1);
define('wxEVT_COMMAND_SEARCHCTRL_CANCEL_BTN', 1);
define('wxEVT_COMMAND_SEARCHCTRL_SEARCH_BTN', 1);
define('wxConvFileName', 1);
define('wxEVT_TASKBAR_MOVE', 1);
define('wxEVT_TASKBAR_LEFT_DOWN', 1);
define('wxEVT_TASKBAR_LEFT_UP', 1);
define('wxEVT_TASKBAR_RIGHT_DOWN', 1);
define('wxEVT_TASKBAR_RIGHT_UP', 1);
define('wxEVT_TASKBAR_LEFT_DCLICK', 1);
define('wxEVT_TASKBAR_RIGHT_DCLICK', 1);
define('wxEVT_TASKBAR_CLICK', 1);
define('wxEVT_TASKBAR_BALLOON_TIMEOUT', 1);
define('wxEVT_TASKBAR_BALLOON_CLICK', 1);
define('wxGetTextFromUserPromptStr', 1);
define('wxGetPasswordFromUserPromptStr', 1);
define('wxEVT_TIMER', 1);
define('wxTREE_ITEMSTATE_NONE', 1);
define('wxTREE_ITEMSTATE_NEXT', 1);
define('wxTREE_ITEMSTATE_PREV', 1);
define('wxTREE_HITTEST_ABOVE', 1);
define('wxTREE_HITTEST_BELOW', 1);
define('wxTREE_HITTEST_NOWHERE', 1);
define('wxTREE_HITTEST_ONITEMBUTTON', 1);
define('wxTREE_HITTEST_ONITEMICON', 1);
define('wxTREE_HITTEST_ONITEMINDENT', 1);
define('wxTREE_HITTEST_ONITEMLABEL', 1);
define('wxTREE_HITTEST_ONITEMRIGHT', 1);
define('wxTREE_HITTEST_ONITEMSTATEICON', 1);
define('wxTREE_HITTEST_TOLEFT', 1);
define('wxTREE_HITTEST_TORIGHT', 1);
define('wxTREE_HITTEST_ONITEMUPPERPART', 1);
define('wxTREE_HITTEST_ONITEMLOWERPART', 1);
define('wxTREE_HITTEST_ONITEM', 1);
define('wxTLI_FIRST', 1);
define('wxTLI_LAST', 1);
define('wxDefaultValidator', 1);
define('wxDefaultVideoMode', 1);
define('wxEVT_COMMAND_WEB_VIEW_NAVIGATING', 1);
define('wxEVT_COMMAND_WEB_VIEW_NAVIGATED', 1);
define('wxEVT_COMMAND_WEB_VIEW_LOADED', 1);
define('wxEVT_COMMAND_WEB_VIEW_ERROR', 1);
define('wxEVT_COMMAND_WEB_VIEW_NEWWINDOW', 1);
define('wxEVT_COMMAND_WEB_VIEW_TITLE_CHANGED', 1);
define('wxNullXLocale', 1);

//wxWidgets functions

/**
 * If doIt is true, the fatal exceptions (also known as general protection faults under Windows or segmentation violations in the Unix world) will be caught and passed to wxApp::OnFatalException.
 * @param bool $doIt
 * @return bool
 */
function wxHandleFatalExceptions($doIt){}

/**
 * This function is used in wxBase only and only if you don't create wxApp object at all.
 * @return bool
 */
function wxInitialize(){}

/**
 * This function is for use in console (wxBase) programs only.
 */
function wxUninitialize(){}

/**
 * This function wakes up the (internal and platform dependent) idle system, i.e.
 */
function wxWakeUpIdle(){}

/**
 * Calls wxAppConsole::Yield.
 * @return bool
 */
function wxYield(){}

/**
 * Calls wxApp::SafeYield.
 * @param wxWindow $win
 * @param bool $onlyIfNeeded
 * @return bool
 */
function wxSafeYield(wxWindow &$win, $onlyIfNeeded){}

/**
 * Exits application after calling wxApp::OnExit.
 */
function wxExit(){}

/**
 * Returns true if res indicates that something was done during a DnD operation, i.e.
 * @param wxDragResult $res
 * @return bool
 */
function wxIsDragResultOk(wxDragResult $res){}

/**
 * Converts string to a wxFont best represented by the given string.
 * @param string $string
 * @param wxFont $font
 * @param wxColour $colour
 * @return bool
 */
function wxFromString($string, wxFont &$font){}

/**
 * Converts the given wxFont into a string.
 * @param wxFont $font
 * @param wxColour $colour
 * @return string
 */
function wxToString(wxFont $font){}

/**
 * This function shows a message to the user in a safe way and should be safe to call even before the application has been initialized or if it is currently in some other strange state (for example, about to crash).
 * @param string $title
 * @param string $text
 */
function wxSafeShowMessage($title, $text){}

/**
 * Returns the error code from the last system call.
 * @return integer
 */
function wxSysErrorCode(){}

/**
 * Returns true if this thread is the main one.
 * @return bool
 */
function wxIsMainThread(){}

/**
 * This function must be called when any thread other than the main GUI thread wants to get access to the GUI library.
 */
function wxMutexGuiEnter(){}

/**
 * This function is only defined on platforms which support preemptive threads.
 */
function wxMutexGuiLeave(){}

/**
 * This function shows the standard about dialog containing the information specified in info.
 * @param wxAboutDialogInfo $info
 * @param wxWindow $parent
 */
function wxAboutBox(wxAboutDialogInfo $info, wxWindow &$parent){}

/**
 * This function encodes the given data using base64.
 * @param string $dst
 * @param integer $dstLen
 * @param mixed $src
 * @param integer $srcLen
 * @return string
 */
function wxBase64Encode(&$dst, $dstLen, $src, $srcLen){}

/**
 * Returns the size of the buffer necessary to contain the data encoded in a base64 string of length srcLen.
 * @param integer $srcLen
 * @return integer
 */
function wxBase64DecodedSize($srcLen){}

/**
 * Returns the length of the string with base64 representation of a buffer of specified size len.
 * @param integer $len
 * @return integer
 */
function wxBase64EncodedSize($len){}

/**
 * This function decodes a Base64-encoded string.
 * @param mixed $dst
 * @param integer $dstLen
 * @param string $src
 * @param integer $srcLen
 * @param wxBase64DecodeMode $mode
 * @param integer $posErr
 * @param string $str
 * @return integer
 */
function wxBase64Decode($dst, $dstLen, $src, $srcLen, wxBase64DecodeMode $mode, &$posErr){}

/**
 * Same as wxGetSingleChoice() but returns the index representing the selected string.
 * @param string $message
 * @param string $caption
 * @param array $aChoices
 * @param wxWindow $parent
 * @param integer $x
 * @param integer $y
 * @param bool $centre
 * @param integer $width
 * @param integer $height
 * @param integer $initialSelection
 * @param integer $n
 * @param string $choices
 * @return integer
 */
function wxGetSingleChoiceIndex($message, $caption, array $aChoices, wxWindow &$parent, $x, $y, $centre, $width, $height, $initialSelection){}

/**
 * Pops up a dialog box containing a message, OK/Cancel buttons and a single-selection listbox.
 * @param string $message
 * @param string $caption
 * @param array $aChoices
 * @param wxWindow $parent
 * @param integer $x
 * @param integer $y
 * @param bool $centre
 * @param integer $width
 * @param integer $height
 * @param integer $initialSelection
 * @param integer $n
 * @param string $choices
 * @return string
 */
function wxGetSingleChoice($message, $caption, array $aChoices, wxWindow &$parent, $x, $y, $centre, $width, $height, $initialSelection){}

/**
 * Shows the colour selection dialog and returns the colour selected by user or invalid colour (use wxColour::IsOk() to test whether a colour is valid) if the dialog was cancelled.
 * @param wxWindow $parent
 * @param wxColour $colInit
 * @param string $caption
 * @param wxColourData $data
 * @return wxColour
 */
function wxGetColourFromUser(wxWindow &$parent, wxColour $colInit, $caption, wxColourData &$data){}

/**
 * Exits the program immediately.
 */
function wxAbort(){}

/**
 * Disable the condition checks in the assertions.
 */
function wxDisableAsserts(){}

/**
 * Returns true if the program is running under debugger, false otherwise.
 * @return bool
 */
function wxIsDebuggerRunning(){}

/**
 * Reset the assert handler to default function which shows a message box when an assert happens.
 */
function wxSetDefaultAssertHandler(){}

/**
 * Generate a debugger exception meaning that the control is passed to the debugger if one is attached to the process.
 */
function wxTrap(){}

/**
 * Pops up a directory selector dialog.
 * @param string $message
 * @param string $default_path
 * @param integer $style
 * @param wxPoint $pos
 * @param wxWindow $parent
 * @return string
 */
function wxDirSelector($message, $default_path, $style, wxPoint $pos, wxWindow &$parent){}

/**
 * Generates a new unique event type.
 * @return integer
 */
function wxNewEventType(){}

/**
 * In a GUI application, this function posts event to the specified dest object using wxEvtHandler::AddPendingEvent().
 * @param wxEvtHandler $dest
 * @param wxEvent $event
 */
function wxPostEvent(wxEvtHandler &$dest, wxEvent $event){}

/**
 * Queue an event for processing on the given object.
 * @param wxEvtHandler $dest
 * @param wxEvent $event
 */
function wxQueueEvent(wxEvtHandler &$dest, wxEvent &$event){}

/**
 * Pops up a file selector box.
 * @param string $message
 * @param string $default_path
 * @param string $default_filename
 * @param string $default_extension
 * @param string $wildcard
 * @param integer $flags
 * @param wxWindow $parent
 * @param integer $x
 * @param integer $y
 * @return string
 */
function wxFileSelector($message, $default_path, $default_filename, $default_extension, $wildcard, $flags, wxWindow &$parent, $x, $y){}

/**
 * An extended version of wxFileSelector.
 * @param string $message
 * @param string $default_path
 * @param string $default_filename
 * @param integer $indexDefaultExtension
 * @param string $wildcard
 * @param integer $flags
 * @param wxWindow $parent
 * @param integer $x
 * @param integer $y
 * @return string
 */
function wxFileSelectorEx($message, $default_path, $default_filename, &$indexDefaultExtension, $wildcard, $flags, wxWindow &$parent, $x, $y){}

/**
 * Ask for filename to load.
 * @param string $what
 * @param string $extension
 * @param string $default_name
 * @param wxWindow $parent
 * @return string
 */
function wxLoadFileSelector($what, $extension, $default_name, wxWindow &$parent){}

/**
 * Ask for filename to save.
 * @param string $what
 * @param string $extension
 * @param string $default_name
 * @param wxWindow $parent
 * @return string
 */
function wxSaveFileSelector($what, $extension, $default_name, wxWindow &$parent){}

/**
 * Returns the Windows directory under Windows; other platforms return an empty string.
 * @return string
 */
function wxGetOSDirectory(){}

/**
 * Parses the wildCard, returning the number of filters.
 * @param string $wildCard
 * @param array $descriptions
 * @param array $filters
 * @return integer
 */
function wxParseCommonDialogsFilter($wildCard, array &$descriptions, array &$filters){}

/**
 * Returns true if dirname exists and is a directory.
 * @param string $dirname
 * @return bool
 */
function wxDirExists($dirname){}

/**
 * wxSplitPath
 * @param string $fullname
 * @param string $path
 * @param string $name
 * @param string $ext
 */
function wxSplitPath($fullname, &$path, &$name, &$ext){}

/**
 * Renames file1 to file2, returning true if successful.
 * @param string $file1
 * @param string $file2
 * @param bool $overwrite
 * @return bool
 */
function wxRenameFile($file1, $file2, $overwrite){}

/**
 * Copies file1 to file2, returning true if successful.
 * @param string $file1
 * @param string $file2
 * @param bool $overwrite
 * @return bool
 */
function wxCopyFile($file1, $file2, $overwrite){}

/**
 * Returns true if the file exists and is a plain file.
 * @param string $filename
 * @return bool
 */
function wxFileExists($filename){}

/**
 * Returns true if the pattern matches the text; if dot_special is true, filenames beginning with a dot are not matched with wildcard characters.
 * @param string $pattern
 * @param string $text
 * @param bool $dot_special
 * @return bool
 */
function wxMatchWild($pattern, $text, $dot_special){}

/**
 * Returns the directory part of the filename.
 * @param string $path
 * @return string
 */
function wxPathOnly($path){}

/**
 * Returns true if the pattern contains wildcards.
 * @param string $pattern
 * @return bool
 */
function wxIsWild($pattern){}

/**
 * Returns true if the argument is an absolute filename, i.e.
 * @param string $filename
 * @return bool
 */
function wxIsAbsolutePath($filename){}

/**
 * Returns a string containing the current (or working) directory.
 * @return string
 */
function wxGetCwd(){}

/**
 * Sets the current working directory, returning true if the operation succeeded.
 * @param string $dir
 * @return bool
 */
function wxSetWorkingDirectory($dir){}

/**
 * Concatenates file1 and file2 to file3, returning true if successful.
 * @param string $file1
 * @param string $file2
 * @param string $file3
 * @return bool
 */
function wxConcatFiles($file1, $file2, $file3){}

/**
 * Removes file, returning true if successful.
 * @param string $file
 * @return bool
 */
function wxRemoveFile($file){}

/**
 * Makes the directory dir, returning true if successful.
 * @param string $dir
 * @param integer $perm
 * @return bool
 */
function wxMkdir($dir, $perm){}

/**
 * Removes the directory dir, returning true if successful.
 * @param string $dir
 * @param integer $flags
 * @return bool
 */
function wxRmdir($dir, $flags){}

/**
 * Returns the next file that matches the path passed to wxFindFirstFile().
 * @return string
 */
function wxFindNextFile(){}

/**
 * This function does directory searching; returns the first file that matches the path spec, or the empty string.
 * @param string $spec
 * @param integer $flags
 * @return string
 */
function wxFindFirstFile($spec, $flags){}

/**
 * Returns the type of an open file.
 * @param integer $fd
 * @return wxFileKind
 */
function wxGetFileKind($fd){}

/**
 * Shows the font selection dialog and returns the font selected by user or invalid font (use wxFont::IsOk() to test whether a font is valid) if the dialog was cancelled.
 * @param wxWindow $parent
 * @param wxFont $fontInit
 * @param string $caption
 * @return wxFont
 */
function wxGetFontFromUser(wxWindow &$parent, wxFont $fontInit, $caption){}

/**
 * Returns true if the display is colour, false otherwise.
 * @return bool
 */
function wxColourDisplay(){}

/**
 * Returns the depth of the display (a value of 1 denotes a monochrome display).
 * @return integer
 */
function wxDisplayDepth(){}

/**
 * Globally sets the cursor; only has an effect on Windows, Mac and GTK+.
 * @param wxCursor $cursor
 */
function wxSetCursor(wxCursor $cursor){}

/**
 * Returns the dimensions of the work area on the display.
 * @param integer $x
 * @param integer $y
 * @param integer $width
 * @param integer $height
 */
function wxClientDisplayRect(&$x, &$y, &$width, &$height){}

/**
 * wxGetClientDisplayRect
 * @return wxRect
 */
function wxGetClientDisplayRect(){}

/**
 * Returns the display resolution in pixels per inch.
 * @return wxSize
 */
function wxGetDisplayPPI(){}

/**
 * Returns the display size in pixels.
 * @param integer $width
 * @param integer $height
 */
function wxDisplaySize(&$width, &$height){}

/**
 * wxGetDisplaySize
 * @return wxSize
 */
function wxGetDisplaySize(){}

/**
 * Returns the display size in millimeters.
 * @param integer $width
 * @param integer $height
 */
function wxDisplaySizeMM(&$width, &$height){}

/**
 * wxGetDisplaySizeMM
 * @return wxSize
 */
function wxGetDisplaySizeMM(){}

/**
 * Initializes all available image handlers.
 */
function wxInitAllImageHandlers(){}

/**
 * Free resources allocated by a successful call to wxEntryStart().
 */
function wxEntryCleanup(){}

/**
 * Returns a non-zero value if x is neither infinite nor NaN (not a number), returns 0 otherwise.
 * @param float $x
 * @return integer
 */
function wxFinite($x){}

/**
 * Returns a non-zero value if x is NaN (not a number), returns 0 otherwise.
 * @param float $x
 * @return bool
 */
function wxIsNaN($x){}

/**
 * Small wrapper around round().
 * @param float $x
 * @return integer
 */
function wxRound($x){}

/**
 * Returns true if both double values are identical.
 * @param float $x
 * @param float $y
 * @return bool
 */
function wxIsSameDouble($x, $y){}

/**
 * Return true of x is exactly zero.
 * @param float $x
 * @return bool
 */
function wxIsNullDouble($x){}

/**
 * Show a general purpose message dialog.
 * @param string $message
 * @param string $caption
 * @param integer $style
 * @param wxWindow $parent
 * @param integer $x
 * @param integer $y
 * @return integer
 */
function wxMessageBox($message, $caption, $style, wxWindow &$parent, $x, $y){}

/**
 * Creates and returns an object of the given class, if the class has been registered with the dynamic class system using DECLARE...
 * @param string $className
 * @return wxObject
 */
function wxCreateDynamicObject($className){}

/**
 * Find the deepest window at the mouse pointer position, returning the window and current pointer position in screen coordinates.
 * @param wxPoint $pt
 * @return wxWindow
 */
function wxFindWindowAtPointer(wxPoint &$pt){}

/**
 * Gets the currently active window (implemented for MSW and GTK only currently, always returns NULL in the other ports).
 * @return wxWindow
 */
function wxGetActiveWindow(){}

/**
 * Returns the first top level parent of the given window, or in other words, the frame or dialog containing it, or NULL.
 * @param wxWindow $window
 * @return wxWindow
 */
function wxGetTopLevelParent(wxWindow &$window){}

/**
 * wxRichTextHasStyle
 * @param integer $flags
 * @param integer $style
 * @return bool
 */
function wxRichTextHasStyle($flags, $style){}

/**
 * Returns label that should be used for given id element.
 * @param integer $id
 * @param integer $flags
 * @return string
 */
function wxGetStockLabel($id, $flags){}

/**
 * Pop up a dialog box with title set to caption, message, and a default_value.
 * @param string $message
 * @param string $caption
 * @param string $default_value
 * @param wxWindow $parent
 * @param integer $x
 * @param integer $y
 * @param bool $centre
 * @return string
 */
function wxGetTextFromUser($message, $caption, $default_value, wxWindow &$parent, $x, $y, $centre){}

/**
 * Similar to wxGetTextFromUser() but the text entered in the dialog is not shown on screen but replaced with stars.
 * @param string $message
 * @param string $caption
 * @param string $default_value
 * @param wxWindow $parent
 * @param integer $x
 * @param integer $y
 * @param bool $centre
 * @return string
 */
function wxGetPasswordFromUser($message, $caption, $default_value, wxWindow &$parent, $x, $y, $centre){}

/**
 * Returns the difference between UTC and local time in seconds.
 * @return integer
 */
function wxGetTimeZone(){}

/**
 * Returns the number of seconds since local time 00:00:00 Jan 1st 1970.
 * @return integer
 */
function wxGetLocalTime(){}

/**
 * Returns the number of seconds since GMT 00:00:00 Jan 1st 1970.
 * @return integer
 */
function wxGetUTCTime(){}

/**
 * This is a convenience function wrapping wxStringTokenizer which simply returns all tokens found in the given str as an array.
 * @param string $str
 * @param string $delims
 * @param wxStringTokenizerMode $mode
 * @return array
 */
function wxStringTokenize($str, $delims, wxStringTokenizerMode $mode){}

/**
 * This function returns the translation of string in the current locale().
 * @param string $string
 * @param string $domain
 * @param string $plural
 * @param integer $n
 * @return string
 */
function wxGetTranslation($string, $domain){}

/**
 * Changes the cursor to the given cursor for all windows in the application.
 * @param wxCursor $cursor
 */
function wxBeginBusyCursor(wxCursor $cursor){}

/**
 * Changes the cursor back to the original cursor, for all windows in the application.
 */
function wxEndBusyCursor(){}

/**
 * Returns true if between two wxBeginBusyCursor() and wxEndBusyCursor() calls.
 * @return bool
 */
function wxIsBusy(){}

/**
 * Ring the system bell.
 */
function wxBell(){}

/**
 * Shows a message box with the information about the wxWidgets build used, including its version, most important build parameters and the version of the underlying GUI toolkit.
 * @param wxWindow $parent
 */
function wxInfoMessageBox(wxWindow &$parent){}

/**
 * Get wxWidgets version information.
 * @return wxVersionInfo
 */
function wxGetLibraryVersionInfo(){}

/**
 * wxGetenv
 * @param string $name
 * @return string
 */
function wxGetenv($name){}

/**
 * Sets the value of the environment variable var (adding it if necessary) to value.
 * @param string $var
 * @param string $value
 * @return bool
 */
function wxSetEnv($var, $value){}

/**
 * Removes the variable var from the environment.
 * @param string $var
 * @return bool
 */
function wxUnsetEnv($var){}

/**
 * Returns battery state as one of wxBATTERY_NORMAL_STATE, wxBATTERY_LOW_STATE, wxBATTERY_CRITICAL_STATE, wxBATTERY_SHUTDOWN_STATE or wxBATTERY_UNKNOWN_STATE.
 * @return wxBatteryState
 */
function wxGetBatteryState(){}

/**
 * Returns the type of power source as one of wxPOWER_SOCKET, wxPOWER_BATTERY or wxPOWER_UNKNOWN.
 * @return wxPowerType
 */
function wxGetPowerType(){}

/**
 * For normal keys, returns true if the specified key is currently down.
 * @param wxKeyCode $key
 * @return bool
 */
function wxGetKeyState(wxKeyCode $key){}

/**
 * Returns the mouse position in screen coordinates.
 * @return wxPoint
 */
function wxGetMousePosition(){}

/**
 * Returns the current state of the mouse.
 * @return wxMouseState
 */
function wxGetMouseState(){}

/**
 * This function enables or disables all top level windows.
 * @param bool $enable
 */
function wxEnableTopLevelWindows($enable){}

/**
 * Find the deepest window at the given mouse position in screen coordinates, returning the window if found, or NULL if not.
 * @param wxPoint $pt
 * @return wxWindow
 */
function wxFindWindowAtPoint(wxPoint $pt){}

/**
 * wxFindWindowByLabel
 * @param string $label
 * @param wxWindow $parent
 * @return wxWindow
 */
function wxFindWindowByLabel($label, wxWindow &$parent){}

/**
 * wxFindWindowByName
 * @param string $name
 * @param wxWindow $parent
 * @return wxWindow
 */
function wxFindWindowByName($name, wxWindow &$parent){}

/**
 * Find a menu item identifier associated with the given frame's menu bar.
 * @param wxFrame $frame
 * @param string $menuString
 * @param string $itemString
 * @return integer
 */
function wxFindMenuItemId(wxFrame &$frame, $menuString, $itemString){}

/**
 * wxNewId
 * @return integer
 */
function wxNewId(){}

/**
 * Ensures that Ids subsequently generated by wxNewId() do not clash with the given id.
 * @param integer $id
 */
function wxRegisterId($id){}

/**
 * Opens the document in the application associated with the files of this type.
 * @param string $document
 * @param integer $flags
 * @return bool
 */
function wxLaunchDefaultApplication($document, $flags){}

/**
 * Opens the url in user's default browser.
 * @param string $url
 * @param integer $flags
 * @return bool
 */
function wxLaunchDefaultBrowser($url, $flags){}

/**
 * Strips any menu codes from str and returns the result.
 * @param string $str
 * @param integer $flags
 * @return string
 */
function wxStripMenuCodes($str, $flags){}

/**
 * Return the (current) user's home directory.
 * @return string
 */
function wxGetHomeDir(){}

/**
 * Returns the FQDN (fully qualified domain host name) or an empty string on error.
 * @return string
 */
function wxGetFullHostName(){}

/**
 * Returns the home directory for the given user.
 * @param string $user
 * @return string
 */
function wxGetUserHome($user){}

/**
 * Returns the string containing the description of the current platform in a user-readable form.
 * @return string
 */
function wxGetOsDescription(){}

/**
 * Gets the version and the operating system ID for currently running OS.
 * @param integer $major
 * @param integer $minor
 * @return wxOperatingSystemId
 */
function wxGetOsVersion(&$major, &$minor){}

/**
 * Returns true if the operating system the program is running under is 64 bit.
 * @return bool
 */
function wxIsPlatform64Bit(){}

/**
 * Returns true if the current platform is little endian (instead of big endian).
 * @return bool
 */
function wxIsPlatformLittleEndian(){}

/**
 * Returns the number uniquely identifying the current process in the system.
 * @return integer
 */
function wxGetProcessId(){}

/**
 * Equivalent to the Unix kill function: send the given signal sig to the process with PID pid.
 * @param integer $pid
 * @param wxSignal $sig
 * @param wxKillError $rc
 * @param integer $flags
 * @return integer
 */
function wxKill($pid, wxSignal $sig, wxKillError &$rc, $flags){}

/**
 * Executes a command in an interactive shell window.
 * @param string $command
 * @return bool
 */
function wxShell($command){}

/**
 * This function shuts down or reboots the computer depending on the value of the flags.
 * @param integer $flags
 * @return bool
 */
function wxShutdown($flags){}

/**
 * Sleeps for the specified number of microseconds.
 * @param integer $microseconds
 */
function wxMicroSleep($microseconds){}

/**
 * Sleeps for the specified number of milliseconds.
 * @param integer $milliseconds
 */
function wxMilliSleep($milliseconds){}

/**
 * Returns a string representing the current date and time.
 * @return string
 */
function wxNow(){}

/**
 * Sleeps for the specified number of seconds.
 * @param integer $secs
 */
function wxSleep($secs){}

/**
 * wxUsleep
 * @param integer $milliseconds
 */
function wxUsleep($milliseconds){}

/**
 * wxIsEmpty
 * @param string $s
 * @return bool
 */
function wxIsEmpty($s){}

/**
 * wxTmemchr
 * @param string $s
 * @param string $c
 * @param integer $len
 * @return string
 */
function wxTmemchr($s, $c, $len){}

/**
 * wxTmemcmp
 * @param string $sz1
 * @param string $sz2
 * @param integer $len
 * @return integer
 */
function wxTmemcmp($sz1, $sz2, $len){}

/**
 * wxTmemcpy
 * @param string $szOut
 * @param string $szIn
 * @param integer $len
 * @return string
 */
function wxTmemcpy(&$szOut, $szIn, $len){}

/**
 * wxTmemmove
 * @param string $szOut
 * @param string $szIn
 * @param integer $len
 * @return string
 */
function wxTmemmove(&$szOut, $szIn, $len){}

/**
 * wxTmemset
 * @param string $szOut
 * @param string $cIn
 * @param integer $len
 * @return string
 */
function wxTmemset(&$szOut, $cIn, $len){}

/**
 * wxSetlocale
 * @param integer $category
 * @param string $locale
 * @return string
 */
function wxSetlocale($category, $locale){}

/**
 * wxStrlen
 * @param string $s
 * @return integer
 */
function wxStrlen($s){}

/**
 * wxStrnlen
 * @param string $str
 * @param integer $maxlen
 * @return integer
 */
function wxStrnlen($str, $maxlen){}

/**
 * wxStrdup
 * @param string $s
 * @return string
 */
function wxStrdup($s){}

/**
 * wxStrcpy
 * @param string $dest
 * @param string $src
 * @return string
 */
function wxStrcpy(&$dest, $src){}

/**
 * wxStrncpy
 * @param string $dest
 * @param string $src
 * @param integer $n
 * @return string
 */
function wxStrncpy(&$dest, $src, $n){}

/**
 * wxStrlcpy
 * @param string $dest
 * @param string $src
 * @param integer $n
 * @return integer
 */
function wxStrlcpy(&$dest, $src, $n){}

/**
 * wxStrcat
 * @param string $dest
 * @param string $src
 * @return string
 */
function wxStrcat(&$dest, $src){}

/**
 * wxStrncat
 * @param string $dest
 * @param string $src
 * @param integer $n
 * @return string
 */
function wxStrncat(&$dest, $src, $n){}

/**
 * wxStrxfrm
 * @param string $dest
 * @param string $src
 * @param integer $n
 * @return integer
 */
function wxStrxfrm(&$dest, $src, $n){}

/**
 * wxStrstr
 * @param string $haystack
 * @param string $needle
 * @return string
 */
function wxStrstr($haystack, $needle){}

/**
 * wxStrchr
 * @param string $s
 * @param string $c
 * @return string
 */
function wxStrchr($s, $c){}

/**
 * wxStrrchr
 * @param string $s
 * @param string $c
 * @return string
 */
function wxStrrchr($s, $c){}

/**
 * wxStrpbrk
 * @param string $s
 * @param string $accept
 * @return string
 */
function wxStrpbrk($s, $accept){}

/**
 * wxRemove
 * @param string $path
 * @return integer
 */
function wxRemove($path){}

/**
 * wxRename
 * @param string $oldpath
 * @param string $newpath
 * @return integer
 */
function wxRename($oldpath, $newpath){}

/**
 * wxAtoi
 * @param string $str
 * @return integer
 */
function wxAtoi($str){}

/**
 * wxAtol
 * @param string $str
 * @return integer
 */
function wxAtol($str){}

/**
 * wxAtof
 * @param string $str
 * @return float
 */
function wxAtof($str){}

/**
 * wxSystem
 * @param string $str
 * @return integer
 */
function wxSystem($str){}

/**
 * Converts a given object from one type to another
 * @param wxObject $object
 * @param string $type
 * @return wxObject
 */
function wxDynamicCast(wxObject $object, $type){}

/**
 * Converts a wxWidgets constant object to dynamic in order to be able to access its methods like wxC2D(wxNORMAL_FONT)->GetPointSize().
 * @param mixed $constantObject
 * @return mixed
 */
function wxC2D($constantObject){}


//wxWidgets Classes

class wxAboutDialogInfo
{
	/**
	 * Default constructor leaves all fields are initially uninitialized, in general you should call at least SetVersion(), SetCopyright() and SetDescription().
	 */
	function __construct(){}

	/**
	 * Adds an artist name to be shown in the program credits.
	 * @param string $artist
	 */
	function AddArtist($artist){}

	/**
	 * Adds a developer name to be shown in the program credits.
	 * @param string $developer
	 */
	function AddDeveloper($developer){}

	/**
	 * Adds a documentation writer name to be shown in the program credits.
	 * @param string $docwriter
	 */
	function AddDocWriter($docwriter){}

	/**
	 * Adds a translator name to be shown in the program credits.
	 * @param string $translator
	 */
	function AddTranslator($translator){}

	/**
	 * Get the copyright string.
	 * @return string
	 */
	function GetCopyright(){}

	/**
	 * Get the description string.
	 * @return string
	 */
	function GetDescription(){}

	/**
	 * Get the name of the program.
	 * @return string
	 */
	function GetName(){}

	/**
	 * Returns true if a copyright string has been specified.
	 * @return bool
	 */
	function HasCopyright(){}

	/**
	 * Returns true if a description string has been specified.
	 * @return bool
	 */
	function HasDescription(){}

	/**
	 * Sets the list of artists to be shown in the program credits.
	 * @param array $artists
	 */
	function SetArtists(array $artists){}

	/**
	 * Set the short string containing the program copyright information.
	 * @param string $copyright
	 */
	function SetCopyright($copyright){}

	/**
	 * Set brief, but possibly multiline, description of the program.
	 * @param string $desc
	 */
	function SetDescription($desc){}

	/**
	 * Set the list of developers of the program.
	 * @param array $developers
	 */
	function SetDevelopers(array $developers){}

	/**
	 * Set the list of documentation writers.
	 * @param array $docwriters
	 */
	function SetDocWriters(array $docwriters){}

	/**
	 * Set the icon to be shown in the dialog.
	 * @param wxIcon $icon
	 */
	function SetIcon(wxIcon $icon){}

	/**
	 * Set the long, multiline string containing the text of the program licence.
	 * @param string $licence
	 */
	function SetLicence($licence){}

	/**
	 * This is the same as SetLicence().
	 * @param string $licence
	 */
	function SetLicense($licence){}

	/**
	 * Set the name of the program.
	 * @param string $name
	 */
	function SetName($name){}

	/**
	 * Set the list of translators.
	 * @param array $translators
	 */
	function SetTranslators(array $translators){}

	/**
	 * Set the version of the program.
	 * @param string $version
	 * @param string $longVersion
	 */
	function SetVersion($version, $longVersion=''){}

	/**
	 * Set the web site for the program and its description (which defaults to url itself if empty).
	 * @param string $url
	 * @param string $desc
	 */
	function SetWebSite($url, $desc=wxEmptyString){}
}

class wxAcceleratorEntry
{
	/**
	 * Copy ctor.
	 * @param wxAcceleratorEntry $entry
	 * @param integer $flags
	 * @param integer $keyCode
	 * @param integer $cmd
	 * @param wxMenuItem $item
	 */
	function __construct(wxAcceleratorEntry $entry, $flags, $keyCode, $cmd, wxMenuItem &$item=null){}

	/**
	 * Parses the given string and sets the accelerator accordingly.
	 * @param string $str
	 * @return bool
	 */
	function FromString($str){}

	/**
	 * Returns the command identifier for the accelerator table entry.
	 * @return integer
	 */
	function GetCommand(){}

	/**
	 * Returns the flags for the accelerator table entry.
	 * @return integer
	 */
	function GetFlags(){}

	/**
	 * Returns the keycode for the accelerator table entry.
	 * @return integer
	 */
	function GetKeyCode(){}

	/**
	 * Returns the menu item associated with this accelerator entry.
	 * @return wxMenuItem
	 */
	function GetMenuItem(){}

	/**
	 * Returns true if this object is correctly initialized.
	 * @return bool
	 */
	function IsOk(){}

	/**
	 * Sets the accelerator entry parameters.
	 * @param integer $flags
	 * @param integer $keyCode
	 * @param integer $cmd
	 * @param wxMenuItem $item
	 */
	function Set($flags, $keyCode, $cmd, wxMenuItem &$item=null){}

	/**
	 * Returns a textual representation of this accelerator.
	 * @return string
	 */
	function ToString(){}
}

class wxAcceleratorTable extends wxObject
{
	/**
	 * Default ctor.
	 */
	function __construct(){}

	/**
	 * Returns true if the accelerator table is valid.
	 * @return bool
	 */
	function IsOk(){}
}

class wxActivateEvent extends wxEvent
{
	/**
	 * Constructor.
	 * @param integer $eventType
	 * @param bool $active
	 * @param integer $id
	 */
	function __construct($eventType=wxEVT_NULL, $active=true, $id){}

	/**
	 * Returns true if the application or window is being activated, false otherwise.
	 * @return bool
	 */
	function GetActive(){}
}

class wxAnimation extends wxGDIObject
{
	/**
	 * Copy ctor.
	 * @param wxAnimation $anim
	 * @param string $name
	 * @param wxAnimationType $type
	 */
	function __construct(wxAnimation $anim, $name, wxAnimationType $type=null){}

	/**
	 * Returns the delay for the i-th frame in milliseconds.
	 * @param integer $i
	 * @return integer
	 */
	function GetDelay($i){}

	/**
	 * Returns the i-th frame as a wxImage.
	 * @param integer $i
	 * @return wxImage
	 */
	function GetFrame($i){}

	/**
	 * Returns the number of frames for this animation.
	 * @return integer
	 */
	function GetFrameCount(){}

	/**
	 * Returns the size of the animation.
	 * @return wxSize
	 */
	function GetSize(){}

	/**
	 * Returns true if animation data is present.
	 * @return bool
	 */
	function IsOk(){}

	/**
	 * Loads an animation from the given stream.
	 * @param wxInputStream $stream
	 * @param wxAnimationType $type
	 * @return bool
	 */
	function Load(wxInputStream &$stream, wxAnimationType $type=null){}

	/**
	 * Loads an animation from a file.
	 * @param string $name
	 * @param wxAnimationType $type
	 * @return bool
	 */
	function LoadFile($name, wxAnimationType $type=null){}
}

class wxAnimationCtrl extends wxControl
{
	/**
	 * Initializes the object and calls Create() with all the parameters.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param wxAnimation $anim
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param string $name
	 */
	function __construct(wxWindow &$parent, $id, wxAnimation $anim=null, wxPoint $pos=null, wxSize $size=null, $style=wxAC_DEFAULT_STYLE, $name=wxAnimationCtrlNameStr){}

	/**
	 * Creates the control with the given anim animation.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param wxAnimation $anim
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param string $name
	 * @return bool
	 */
	function Create(wxWindow &$parent, $id, wxAnimation $anim=null, wxPoint $pos=null, wxSize $size=null, $style=wxAC_DEFAULT_STYLE, $name=wxAnimationCtrlNameStr){}

	/**
	 * Returns the animation associated with this control.
	 * @return wxAnimation
	 */
	function GetAnimation(){}

	/**
	 * Returns the inactive bitmap shown in this control when the; see SetInactiveBitmap() for more info.
	 * @return wxBitmap
	 */
	function GetInactiveBitmap(){}

	/**
	 * Returns true if the animation is being played.
	 * @return bool
	 */
	function IsPlaying(){}

	/**
	 * Loads the animation from the given stream and calls SetAnimation().
	 * @param wxInputStream $file
	 * @param wxAnimationType $animType
	 * @return bool
	 */
	function Load(wxInputStream &$file, wxAnimationType $animType=null){}

	/**
	 * Loads the animation from the given file and calls SetAnimation().
	 * @param string $file
	 * @param wxAnimationType $animType
	 * @return bool
	 */
	function LoadFile($file, wxAnimationType $animType=null){}

	/**
	 * Starts playing the animation.
	 * @return bool
	 */
	function Play(){}

	/**
	 * Sets the animation to play in this control.
	 * @param wxAnimation $anim
	 */
	function SetAnimation(wxAnimation $anim){}

	/**
	 * Sets the bitmap to show on the control when it's not playing an animation.
	 * @param wxBitmap $bmp
	 */
	function SetInactiveBitmap(wxBitmap $bmp){}

	/**
	 * Stops playing the animation.
	 */
	function Stop(){}
}

class wxAnyButton extends wxControl
{
	/**
	 * wxAnyButton
	 */
	function __construct(){}

	/**
	 * Return the bitmap shown by the button.
	 * @return wxBitmap
	 */
	function GetBitmap(){}

	/**
	 * Returns the bitmap used when the mouse is over the button, which may be invalid.
	 * @return wxBitmap
	 */
	function GetBitmapCurrent(){}

	/**
	 * Returns the bitmap for the disabled state, which may be invalid.
	 * @return wxBitmap
	 */
	function GetBitmapDisabled(){}

	/**
	 * Returns the bitmap for the focused state, which may be invalid.
	 * @return wxBitmap
	 */
	function GetBitmapFocus(){}

	/**
	 * Returns the bitmap for the normal state.
	 * @return wxBitmap
	 */
	function GetBitmapLabel(){}

	/**
	 * Get the margins between the bitmap and the text of the button.
	 * @return wxSize
	 */
	function GetBitmapMargins(){}

	/**
	 * Returns the bitmap for the pressed state, which may be invalid.
	 * @return wxBitmap
	 */
	function GetBitmapPressed(){}

	/**
	 * Sets the bitmap to display in the button.
	 * @param wxBitmap $bitmap
	 * @param wxDirection $dir
	 */
	function SetBitmap(wxBitmap $bitmap, wxDirection $dir=null){}

	/**
	 * Sets the bitmap to be shown when the mouse is over the button.
	 * @param wxBitmap $bitmap
	 */
	function SetBitmapCurrent(wxBitmap $bitmap){}

	/**
	 * Sets the bitmap for the disabled button appearance.
	 * @param wxBitmap $bitmap
	 */
	function SetBitmapDisabled(wxBitmap $bitmap){}

	/**
	 * Sets the bitmap for the button appearance when it has the keyboard focus.
	 * @param wxBitmap $bitmap
	 */
	function SetBitmapFocus(wxBitmap $bitmap){}

	/**
	 * Sets the bitmap label for the button.
	 * @param wxBitmap $bitmap
	 */
	function SetBitmapLabel(wxBitmap $bitmap){}

	/**
	 * Set the margins between the bitmap and the text of the button.
	 * @param wxSize $sz
	 * @param integer $x
	 * @param integer $y
	 */
	function SetBitmapMargins(wxSize $sz, $x, $y){}

	/**
	 * Set the position at which the bitmap is displayed.
	 * @param wxDirection $dir
	 */
	function SetBitmapPosition(wxDirection $dir){}

	/**
	 * Sets the bitmap for the selected (depressed) button appearance.
	 * @param wxBitmap $bitmap
	 */
	function SetBitmapPressed(wxBitmap $bitmap){}
}

class wxArtProvider extends wxObject
{
	/**
	 * Remove a provider from the stack if it is on it.
	 * @param wxArtProvider $provider
	 * @return bool
	 */
	function Remove(wxArtProvider &$provider){}

	/**
	 * Register new art provider and add it to the bottom of providers stack.
	 * @param wxArtProvider $provider
	 */
	function PushBack(wxArtProvider &$provider){}

	/**
	 * Register new art provider and add it to the top of providers stack (i.e.
	 * @param wxArtProvider $provider
	 */
	function Push(wxArtProvider &$provider){}

	/**
	 * Remove latest added provider and delete it.
	 * @return bool
	 */
	function Pop(){}

	/**
	 * Insert
	 * @param wxArtProvider $provider
	 */
	function Insert(wxArtProvider &$provider){}

	/**
	 * Returns true if the platform uses native icons provider that should take precedence over any customizations.
	 * @return bool
	 */
	function HasNativeProvider(){}

	/**
	 * Returns a suitable size hint for the given wxArtClient.
	 * @param string $client
	 * @param bool $platform_default
	 * @return wxSize
	 */
	function GetSizeHint($client, $platform_default=false){}

	/**
	 * Returns native icon size for use specified by client hint.
	 * @param string $client
	 * @return wxSize
	 */
	function GetNativeSizeHint($client){}

	/**
	 * Query registered providers for icon bundle with given ID.
	 * @param string $id
	 * @param string $client
	 * @return wxIconBundle
	 */
	function GetIconBundle($id, $client=wxART_OTHER){}

	/**
	 * Same as wxArtProvider::GetBitmap, but return a wxIcon object (or wxNullIcon on failure).
	 * @param string $id
	 * @param string $client
	 * @param wxSize $size
	 * @return wxIcon
	 */
	function GetIcon($id, $client=wxART_OTHER, wxSize $size=null){}

	/**
	 * Query registered providers for bitmap with given ID.
	 * @param string $id
	 * @param string $client
	 * @param wxSize $size
	 * @return wxBitmap
	 */
	function GetBitmap($id, $client=wxART_OTHER, wxSize $size=null){}

	/**
	 * Delete the given provider.
	 * @param wxArtProvider $provider
	 * @return bool
	 */
	function Delete(wxArtProvider &$provider){}
}

class wxAuiDefaultToolBarArt extends wxAuiToolBarArt
{
	/**
	 * wxAuiDefaultToolBarArt
	 */
	function __construct(){}

	/**
	 * Clone
	 * @return wxAuiToolBarArt
	 */
	function CloneMethod(){}

	/**
	 * DrawBackground
	 * @param wxDC $dc
	 * @param wxWindow $wnd
	 * @param wxRect $rect
	 */
	function DrawBackground(wxDC &$dc, wxWindow &$wnd, wxRect $rect){}

	/**
	 * DrawButton
	 * @param wxDC $dc
	 * @param wxWindow $wnd
	 * @param wxAuiToolBarItem $item
	 * @param wxRect $rect
	 */
	function DrawButton(wxDC &$dc, wxWindow &$wnd, wxAuiToolBarItem $item, wxRect $rect){}

	/**
	 * DrawControlLabel
	 * @param wxDC $dc
	 * @param wxWindow $wnd
	 * @param wxAuiToolBarItem $item
	 * @param wxRect $rect
	 */
	function DrawControlLabel(wxDC &$dc, wxWindow &$wnd, wxAuiToolBarItem $item, wxRect $rect){}

	/**
	 * DrawDropDownButton
	 * @param wxDC $dc
	 * @param wxWindow $wnd
	 * @param wxAuiToolBarItem $item
	 * @param wxRect $rect
	 */
	function DrawDropDownButton(wxDC &$dc, wxWindow &$wnd, wxAuiToolBarItem $item, wxRect $rect){}

	/**
	 * DrawGripper
	 * @param wxDC $dc
	 * @param wxWindow $wnd
	 * @param wxRect $rect
	 */
	function DrawGripper(wxDC &$dc, wxWindow &$wnd, wxRect $rect){}

	/**
	 * DrawLabel
	 * @param wxDC $dc
	 * @param wxWindow $wnd
	 * @param wxAuiToolBarItem $item
	 * @param wxRect $rect
	 */
	function DrawLabel(wxDC &$dc, wxWindow &$wnd, wxAuiToolBarItem $item, wxRect $rect){}

	/**
	 * DrawOverflowButton
	 * @param wxDC $dc
	 * @param wxWindow $wnd
	 * @param wxRect $rect
	 * @param integer $state
	 */
	function DrawOverflowButton(wxDC &$dc, wxWindow &$wnd, wxRect $rect, $state){}

	/**
	 * DrawSeparator
	 * @param wxDC $dc
	 * @param wxWindow $wnd
	 * @param wxRect $rect
	 */
	function DrawSeparator(wxDC &$dc, wxWindow &$wnd, wxRect $rect){}

	/**
	 * GetElementSize
	 * @param integer $element
	 * @return integer
	 */
	function GetElementSize($element){}

	/**
	 * GetFlags
	 * @return integer
	 */
	function GetFlags(){}

	/**
	 * GetFont
	 * @return wxFont
	 */
	function GetFont(){}

	/**
	 * GetLabelSize
	 * @param wxDC $dc
	 * @param wxWindow $wnd
	 * @param wxAuiToolBarItem $item
	 * @return wxSize
	 */
	function GetLabelSize(wxDC &$dc, wxWindow &$wnd, wxAuiToolBarItem $item){}

	/**
	 * GetTextOrientation
	 * @return integer
	 */
	function GetTextOrientation(){}

	/**
	 * GetToolSize
	 * @param wxDC $dc
	 * @param wxWindow $wnd
	 * @param wxAuiToolBarItem $item
	 * @return wxSize
	 */
	function GetToolSize(wxDC &$dc, wxWindow &$wnd, wxAuiToolBarItem $item){}

	/**
	 * SetElementSize
	 * @param integer $element_id
	 * @param integer $size
	 */
	function SetElementSize($element_id, $size){}

	/**
	 * SetFlags
	 * @param integer $flags
	 */
	function SetFlags($flags){}

	/**
	 * SetFont
	 * @param wxFont $font
	 */
	function SetFont(wxFont $font){}

	/**
	 * SetTextOrientation
	 * @param integer $orientation
	 */
	function SetTextOrientation($orientation){}
}

class wxAuiDockArt
{
	/**
	 * Constructor.
	 */
	function __construct(){}

	/**
	 * Draws a background.
	 * @param wxDC $dc
	 * @param wxWindow $window
	 * @param integer $orientation
	 * @param wxRect $rect
	 */
	function DrawBackground(wxDC &$dc, wxWindow &$window, $orientation, wxRect $rect){}

	/**
	 * Draws a border.
	 * @param wxDC $dc
	 * @param wxWindow $window
	 * @param wxRect $rect
	 * @param wxAuiPaneInfo $pane
	 */
	function DrawBorder(wxDC &$dc, wxWindow &$window, wxRect $rect, wxAuiPaneInfo &$pane){}

	/**
	 * Draws a caption.
	 * @param wxDC $dc
	 * @param wxWindow $window
	 * @param string $text
	 * @param wxRect $rect
	 * @param wxAuiPaneInfo $pane
	 */
	function DrawCaption(wxDC &$dc, wxWindow &$window, $text, wxRect $rect, wxAuiPaneInfo &$pane){}

	/**
	 * Draws a gripper.
	 * @param wxDC $dc
	 * @param wxWindow $window
	 * @param wxRect $rect
	 * @param wxAuiPaneInfo $pane
	 */
	function DrawGripper(wxDC &$dc, wxWindow &$window, wxRect $rect, wxAuiPaneInfo &$pane){}

	/**
	 * Draws a button in the pane's title bar.
	 * @param wxDC $dc
	 * @param wxWindow $window
	 * @param integer $button
	 * @param integer $button_state
	 * @param wxRect $rect
	 * @param wxAuiPaneInfo $pane
	 */
	function DrawPaneButton(wxDC &$dc, wxWindow &$window, $button, $button_state, wxRect $rect, wxAuiPaneInfo &$pane){}

	/**
	 * Draws a sash between two windows.
	 * @param wxDC $dc
	 * @param wxWindow $window
	 * @param integer $orientation
	 * @param wxRect $rect
	 */
	function DrawSash(wxDC &$dc, wxWindow &$window, $orientation, wxRect $rect){}

	/**
	 * Get the colour of a certain setting.
	 * @param integer $id
	 * @return wxColour
	 */
	function GetColour($id){}

	/**
	 * Get a font setting.
	 * @param integer $id
	 * @return wxFont
	 */
	function GetFont($id){}

	/**
	 * Get the value of a certain setting.
	 * @param integer $id
	 * @return integer
	 */
	function GetMetric($id){}

	/**
	 * Set a certain setting with the value colour.
	 * @param integer $id
	 * @param wxColour $colour
	 */
	function SetColour($id, wxColour $colour){}

	/**
	 * Set a font setting.
	 * @param integer $id
	 * @param wxFont $font
	 */
	function SetFont($id, wxFont $font){}

	/**
	 * Set a certain setting with the value new_val.
	 * @param integer $id
	 * @param integer $new_val
	 */
	function SetMetric($id, $new_val){}
}

class wxAuiManager extends wxEvtHandler
{
	/**
	 * Constructor.
	 * @param wxWindow $managed_wnd
	 * @param integer $flags
	 */
	function __construct(wxWindow &$managed_wnd=null, $flags=wxAUI_MGR_DEFAULT){}

	/**
	 * AddPane() tells the frame manager to start managing a child window.
	 * @param wxWindow $window
	 * @param wxAuiPaneInfo $pane_info
	 * @param wxPoint $drop_pos
	 * @param integer $direction
	 * @param string $caption
	 * @return bool
	 */
	function AddPane(wxWindow &$window, wxAuiPaneInfo $pane_info, wxPoint $drop_pos, wxWindow &$window, $direction=wxLEFT, $caption=wxEmptyString, wxWindow &$window, wxAuiPaneInfo $pane_info){}

	/**
	 * Tells the wxAuiManager to stop managing the pane specified by window.
	 * @param wxWindow $window
	 * @return bool
	 */
	function DetachPane(wxWindow &$window){}

	/**
	 * Returns the current art provider being used.
	 * @return wxAuiDockArt
	 */
	function GetArtProvider(){}

	/**
	 * Returns the current dock constraint values.
	 * @param float $widthpct
	 * @param float $heightpct
	 */
	function GetDockSizeConstraint(&$widthpct, &$heightpct){}

	/**
	 * Returns the current wxAuiManagerOption's flags.
	 * @return integer
	 */
	function GetFlags(){}

	/**
	 * Returns the frame currently being managed by wxAuiManager.
	 * @return wxWindow
	 */
	function GetManagedWindow(){}

	/**
	 * Calling this method will return the wxAuiManager for a given window.
	 * @param wxWindow $window
	 * @return wxAuiManager
	 */
	function GetManager(wxWindow &$window){}

	/**
	 * GetPane() is used to lookup a wxAuiPaneInfo object either by window pointer or by pane name, which acts as a unique id for a window pane.
	 * @param string $name
	 * @param wxWindow $window
	 * @return wxAuiPaneInfo
	 */
	function GetPane($name, wxWindow &$window){}

	/**
	 * HideHint() hides any docking hint that may be visible.
	 */
	function HideHint(){}

	/**
	 * This method is used to insert either a previously unmanaged pane window into the frame manager, or to insert a currently managed pane somewhere else.
	 * @param wxWindow $window
	 * @param wxAuiPaneInfo $insert_location
	 * @param integer $insert_level
	 * @return bool
	 */
	function InsertPane(wxWindow &$window, wxAuiPaneInfo $insert_location, $insert_level=wxAUI_INSERT_PANE){}

	/**
	 * LoadPaneInfo() is similar to LoadPerspective, with the exception that it only loads information about a single pane.
	 * @param string $pane_part
	 * @param wxAuiPaneInfo $pane
	 */
	function LoadPaneInfo($pane_part, wxAuiPaneInfo &$pane){}

	/**
	 * Loads a saved perspective.
	 * @param string $perspective
	 * @param bool $update
	 * @return bool
	 */
	function LoadPerspective($perspective, $update=true){}

	/**
	 * ProcessDockResult() is a protected member of the wxAUI layout manager.
	 * @param wxAuiPaneInfo $target
	 * @param wxAuiPaneInfo $new_pos
	 * @return bool
	 */
	function ProcessDockResult(wxAuiPaneInfo &$target, wxAuiPaneInfo $new_pos){}

	/**
	 * SavePaneInfo() is similar to SavePerspective, with the exception that it only saves information about a single pane.
	 * @param wxAuiPaneInfo $pane
	 * @return string
	 */
	function SavePaneInfo(wxAuiPaneInfo &$pane){}

	/**
	 * Saves the entire user interface layout into an encoded wxString, which can then be stored by the application (probably using wxConfig).
	 * @return string
	 */
	function SavePerspective(){}

	/**
	 * Instructs wxAuiManager to use art provider specified by parameter art_provider for all drawing calls.
	 * @param wxAuiDockArt $art_provider
	 */
	function SetArtProvider(wxAuiDockArt &$art_provider){}

	/**
	 * When a user creates a new dock by dragging a window into a docked position, often times the large size of the window will create a dock that is unwieldly large.
	 * @param float $widthpct
	 * @param float $heightpct
	 */
	function SetDockSizeConstraint($widthpct, $heightpct){}

	/**
	 * This method is used to specify wxAuiManagerOption's flags.
	 * @param integer $flags
	 */
	function SetFlags($flags){}

	/**
	 * Called to specify the frame or window which is to be managed by wxAuiManager.
	 * @param wxWindow $managed_wnd
	 */
	function SetManagedWindow(wxWindow &$managed_wnd){}

	/**
	 * This function is used by controls to explicitly show a hint window at the specified rectangle.
	 * @param wxRect $rect
	 */
	function ShowHint(wxRect $rect){}

	/**
	 * Uninitializes the framework and should be called before a managed frame or window is destroyed.
	 */
	function UnInit(){}

	/**
	 * This method is called after any number of changes are made to any of the managed panes.
	 */
	function Update(){}
}

class wxAuiManagerEvent extends wxEvent
{
	/**
	 * Constructor.
	 * @param integer $type
	 */
	function __construct($type=wxEVT_NULL){}

	/**
	 * CanVeto
	 * @return bool
	 */
	function CanVeto(){}

	/**
	 * GetButton
	 * @return integer
	 */
	function GetButton(){}

	/**
	 * GetDC
	 * @return wxDC
	 */
	function GetDC(){}

	/**
	 * GetManager
	 * @return wxAuiManager
	 */
	function GetManager(){}

	/**
	 * GetPane
	 * @return wxAuiPaneInfo
	 */
	function GetPane(){}

	/**
	 * GetVeto
	 * @return bool
	 */
	function GetVeto(){}

	/**
	 * Sets the ID of the button clicked that triggered this event.
	 * @param integer $button
	 */
	function SetButton($button){}

	/**
	 * Sets whether or not this event can be vetoed.
	 * @param bool $can_veto
	 */
	function SetCanVeto($can_veto){}

	/**
	 * SetDC
	 * @param wxDC $pdc
	 */
	function SetDC(wxDC &$pdc){}

	/**
	 * Sets the wxAuiManager this event is associated with.
	 * @param wxAuiManager $manager
	 */
	function SetManager(wxAuiManager &$manager){}

	/**
	 * Sets the pane this event is associated with.
	 * @param wxAuiPaneInfo $pane
	 */
	function SetPane(wxAuiPaneInfo &$pane){}

	/**
	 * Cancels the action indicated by this event if CanVeto() is true.
	 * @param bool $veto
	 */
	function Veto($veto=true){}
}

class wxAuiNotebook extends wxBookCtrlBase
{
	/**
	 * Constructor.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 */
	function __construct(wxWindow &$parent, $id=wxID_ANY, wxPoint $pos=null, wxSize $size=null, $style=wxAUI_NB_DEFAULT_STYLE){}

	/**
	 * Adds a page.
	 * @param wxWindow $page
	 * @param string $caption
	 * @param bool $select
	 * @param wxBitmap $bitmap
	 * @return bool
	 */
	function AddPage(wxWindow &$page, $caption, $select=false, wxBitmap $bitmap=null){}

	/**
	 * Sets the selection to the next or previous page.
	 * @param bool $forward
	 */
	function AdvanceSelection($forward=true){}

	/**
	 * Changes the selection for the given page, returning the previous selection.
	 * @param integer $n
	 * @return integer
	 */
	function ChangeSelection($n){}

	/**
	 * Creates the notebook window.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @return bool
	 */
	function Create(wxWindow &$parent, $id=wxID_ANY, wxPoint $pos=null, wxSize $size=null, $style){}

	/**
	 * Deletes all pages.
	 * @return bool
	 */
	function DeleteAllPages(){}

	/**
	 * Deletes a page at the given index.
	 * @param integer $page
	 * @return bool
	 */
	function DeletePage($page){}

	/**
	 * Returns the associated art provider.
	 * @return wxAuiTabArt
	 */
	function GetArtProvider(){}

	/**
	 * Returns the currently selected page or NULL.
	 * @return wxWindow
	 */
	function GetCurrentPage(){}

	/**
	 * Returns the desired height of the notebook for the given page height.
	 * @param integer $pageHeight
	 * @return integer
	 */
	function GetHeightForPageHeight($pageHeight){}

	/**
	 * Returns the page specified by the given index.
	 * @param integer $page_idx
	 * @return wxWindow
	 */
	function GetPage($page_idx){}

	/**
	 * Returns the tab bitmap for the page.
	 * @param integer $page
	 * @return wxBitmap
	 */
	function GetPageBitmap($page){}

	/**
	 * Returns the number of pages in the notebook.
	 * @return integer
	 */
	function GetPageCount(){}

	/**
	 * Returns the page index for the specified window.
	 * @param wxWindow $page_wnd
	 * @return integer
	 */
	function GetPageIndex(wxWindow &$page_wnd){}

	/**
	 * Returns the tab label for the page.
	 * @param integer $page
	 * @return string
	 */
	function GetPageText($page){}

	/**
	 * Returns the currently selected page.
	 * @return integer
	 */
	function GetSelection(){}

	/**
	 * Returns the height of the tab control.
	 * @return integer
	 */
	function GetTabCtrlHeight(){}

	/**
	 * Removes a page, without deleting the window pointer.
	 * @param integer $page
	 * @return bool
	 */
	function RemovePage($page){}

	/**
	 * Sets the art provider to be used by the notebook.
	 * @param wxAuiTabArt $art
	 */
	function SetArtProvider(wxAuiTabArt &$art){}

	/**
	 * Sets the font for drawing the tab labels, using a bold version of the font for selected tab labels.
	 * @param wxFont $font
	 * @return bool
	 */
	function SetFont(wxFont $font){}

	/**
	 * Sets the font for measuring tab labels.
	 * @param wxFont $font
	 */
	function SetMeasuringFont(wxFont $font){}

	/**
	 * Sets the font for drawing unselected tab labels.
	 * @param wxFont $font
	 */
	function SetNormalFont(wxFont $font){}

	/**
	 * Sets the bitmap for the page.
	 * @param integer $page
	 * @param wxBitmap $bitmap
	 * @return bool
	 */
	function SetPageBitmap($page, wxBitmap $bitmap){}

	/**
	 * Sets the image index for the given page.
	 * @param integer $n
	 * @param integer $imageId
	 * @return bool
	 */
	function SetPageImage($n, $imageId){}

	/**
	 * Sets the tab label for the page.
	 * @param integer $page
	 * @param string $text
	 * @return bool
	 */
	function SetPageText($page, $text){}

	/**
	 * Sets the font for drawing selected tab labels.
	 * @param wxFont $font
	 */
	function SetSelectedFont(wxFont $font){}

	/**
	 * Sets the page selection.
	 * @param integer $new_page
	 * @return integer
	 */
	function SetSelection($new_page){}

	/**
	 * Sets the tab height.
	 * @param integer $height
	 */
	function SetTabCtrlHeight($height){}

	/**
	 * Split performs a split operation programmatically.
	 * @param wxSize $size
	 */
	function SetUniformBitmapSize(wxSize $size){}

	/**
	 * Shows the window menu for the active tab control associated with this notebook, and returns true if a selection was made.
	 * @return bool
	 */
	function ShowWindowMenu(){}

	/**
	 * Split performs a split operation programmatically.
	 * @param integer $page
	 * @param integer $direction
	 */
	function Split($page, $direction){}
}

class wxAuiNotebookEvent extends wxBookCtrlEvent
{
	/**
	 * Constructor.
	 * @param integer $command_type
	 * @param integer $win_id
	 */
	function __construct($command_type=wxEVT_NULL, $win_id){}

	/**
	 * Clone
	 * @return wxEvent
	 */
	function CloneMethod(){}
}

class wxAuiPaneInfo
{
	/**
	 * Copy constructor.
	 * @param wxAuiPaneInfo $c
	 */
	function __construct(wxAuiPaneInfo $c){}

	/**
	 * BestSize() sets the ideal size for the pane.
	 * @param integer $x
	 * @param integer $y
	 * @param wxSize $size
	 * @return wxAuiPaneInfo
	 */
	function BestSize($x, $y, wxSize $size){}

	/**
	 * Bottom() sets the pane dock position to the bottom side of the frame.
	 * @return wxAuiPaneInfo
	 */
	function Bottom(){}

	/**
	 * BottomDockable() indicates whether a pane can be docked at the bottom of the frame.
	 * @param bool $b
	 * @return wxAuiPaneInfo
	 */
	function BottomDockable($b=true){}

	/**
	 * Caption() sets the caption of the pane.
	 * @param string $c
	 * @return wxAuiPaneInfo
	 */
	function Caption($c){}

	/**
	 * CaptionVisible indicates that a pane caption should be visible.
	 * @param bool $visible
	 * @return wxAuiPaneInfo
	 */
	function CaptionVisible($visible=true){}

	/**
	 * Center() sets the pane dock position to the left side of the frame.
	 * @return wxAuiPaneInfo
	 */
	function Center(){}

	/**
	 * CentrePane() specifies that the pane should adopt the default center pane settings.
	 * @return wxAuiPaneInfo
	 */
	function CenterPane(){}

	/**
	 * Center() sets the pane dock position to the left side of the frame.
	 * @return wxAuiPaneInfo
	 */
	function Centre(){}

	/**
	 * CentrePane() specifies that the pane should adopt the default center pane settings.
	 * @return wxAuiPaneInfo
	 */
	function CentrePane(){}

	/**
	 * CloseButton() indicates that a close button should be drawn for the pane.
	 * @param bool $visible
	 * @return wxAuiPaneInfo
	 */
	function CloseButton($visible=true){}

	/**
	 * DefaultPane() specifies that the pane should adopt the default pane settings.
	 * @return wxAuiPaneInfo
	 */
	function DefaultPane(){}

	/**
	 * DestroyOnClose() indicates whether a pane should be destroyed when it is closed.
	 * @param bool $b
	 * @return wxAuiPaneInfo
	 */
	function DestroyOnClose($b=true){}

	/**
	 * Direction() determines the direction of the docked pane.
	 * @param integer $direction
	 * @return wxAuiPaneInfo
	 */
	function Direction($direction){}

	/**
	 * Dock() indicates that a pane should be docked.
	 * @return wxAuiPaneInfo
	 */
	function Dock(){}

	/**
	 * DockFixed() causes the containing dock to have no resize sash.
	 * @param bool $b
	 * @return wxAuiPaneInfo
	 */
	function DockFixed($b=true){}

	/**
	 * Dockable() specifies whether a frame can be docked or not.
	 * @param bool $b
	 * @return wxAuiPaneInfo
	 */
	function Dockable($b=true){}

	/**
	 * Fixed() forces a pane to be fixed size so that it cannot be resized.
	 * @return wxAuiPaneInfo
	 */
	function Fixed(){}

	/**
	 * Float() indicates that a pane should be floated.
	 * @return wxAuiPaneInfo
	 */
	function Float(){}

	/**
	 * Floatable() sets whether the user will be able to undock a pane and turn it into a floating window.
	 * @param bool $b
	 * @return wxAuiPaneInfo
	 */
	function Floatable($b=true){}

	/**
	 * FloatingPosition() sets the position of the floating pane.
	 * @param integer $x
	 * @param integer $y
	 * @param wxPoint $pos
	 * @return wxAuiPaneInfo
	 */
	function FloatingPosition($x, $y, wxPoint $pos){}

	/**
	 * FloatingSize() sets the size of the floating pane.
	 * @param integer $x
	 * @param integer $y
	 * @param wxSize $size
	 * @return wxAuiPaneInfo
	 */
	function FloatingSize($x, $y, wxSize $size){}

	/**
	 * Gripper() indicates that a gripper should be drawn for the pane.
	 * @param bool $visible
	 * @return wxAuiPaneInfo
	 */
	function Gripper($visible=true){}

	/**
	 * GripperTop() indicates that a gripper should be drawn at the top of the pane.
	 * @param bool $attop
	 * @return wxAuiPaneInfo
	 */
	function GripperTop($attop=true){}

	/**
	 * HasBorder() returns true if the pane displays a border.
	 * @return bool
	 */
	function HasBorder(){}

	/**
	 * HasCaption() returns true if the pane displays a caption.
	 * @return bool
	 */
	function HasCaption(){}

	/**
	 * HasCloseButton() returns true if the pane displays a button to close the pane.
	 * @return bool
	 */
	function HasCloseButton(){}

	/**
	 * HasFlag() returns true if the property specified by flag is active for the pane.
	 * @param integer $flag
	 * @return bool
	 */
	function HasFlag($flag){}

	/**
	 * HasGripper() returns true if the pane displays a gripper.
	 * @return bool
	 */
	function HasGripper(){}

	/**
	 * HasGripper() returns true if the pane displays a gripper at the top.
	 * @return bool
	 */
	function HasGripperTop(){}

	/**
	 * HasMaximizeButton() returns true if the pane displays a button to maximize the pane.
	 * @return bool
	 */
	function HasMaximizeButton(){}

	/**
	 * HasMinimizeButton() returns true if the pane displays a button to minimize the pane.
	 * @return bool
	 */
	function HasMinimizeButton(){}

	/**
	 * HasPinButton() returns true if the pane displays a button to float the pane.
	 * @return bool
	 */
	function HasPinButton(){}

	/**
	 * Hide() indicates that a pane should be hidden.
	 * @return wxAuiPaneInfo
	 */
	function Hide(){}

	/**
	 * Icon() sets the icon of the pane.
	 * @param wxBitmap $b
	 * @return wxAuiPaneInfo
	 */
	function Icon(wxBitmap $b){}

	/**
	 * IsBottomDockable() returns true if the pane can be docked at the bottom of the managed frame.
	 * @return bool
	 */
	function IsBottomDockable(){}

	/**
	 * Returns true if the pane can be docked at any side.
	 * @return bool
	 */
	function IsDockable(){}

	/**
	 * IsDocked() returns true if the pane is currently docked.
	 * @return bool
	 */
	function IsDocked(){}

	/**
	 * IsFixed() returns true if the pane cannot be resized.
	 * @return bool
	 */
	function IsFixed(){}

	/**
	 * IsFloatable() returns true if the pane can be undocked and displayed as a floating window.
	 * @return bool
	 */
	function IsFloatable(){}

	/**
	 * IsFloating() returns true if the pane is floating.
	 * @return bool
	 */
	function IsFloating(){}

	/**
	 * IsLeftDockable() returns true if the pane can be docked on the left of the managed frame.
	 * @return bool
	 */
	function IsLeftDockable(){}

	/**
	 * IsMoveable() returns true if the docked frame can be undocked or moved to another dock position.
	 * @return bool
	 */
	function IsMovable(){}

	/**
	 * IsOk() returns true if the wxAuiPaneInfo structure is valid.
	 * @return bool
	 */
	function IsOk(){}

	/**
	 * IsResizable() returns true if the pane can be resized.
	 * @return bool
	 */
	function IsResizable(){}

	/**
	 * IsRightDockable() returns true if the pane can be docked on the right of the managed frame.
	 * @return bool
	 */
	function IsRightDockable(){}

	/**
	 * IsShown() returns true if the pane is currently shown.
	 * @return bool
	 */
	function IsShown(){}

	/**
	 * IsToolbar() returns true if the pane contains a toolbar.
	 * @return bool
	 */
	function IsToolbar(){}

	/**
	 * IsTopDockable() returns true if the pane can be docked at the top of the managed frame.
	 * @return bool
	 */
	function IsTopDockable(){}

	/**
	 * Layer() determines the layer of the docked pane.
	 * @param integer $layer
	 * @return wxAuiPaneInfo
	 */
	function Layer($layer){}

	/**
	 * Left() sets the pane dock position to the left side of the frame.
	 * @return wxAuiPaneInfo
	 */
	function Left(){}

	/**
	 * LeftDockable() indicates whether a pane can be docked on the left of the frame.
	 * @param bool $b
	 * @return wxAuiPaneInfo
	 */
	function LeftDockable($b=true){}

	/**
	 * MaxSize() sets the maximum size of the pane.
	 * @param integer $x
	 * @param integer $y
	 * @param wxSize $size
	 * @return wxAuiPaneInfo
	 */
	function MaxSize($x, $y, wxSize $size){}

	/**
	 * MaximizeButton() indicates that a maximize button should be drawn for the pane.
	 * @param bool $visible
	 * @return wxAuiPaneInfo
	 */
	function MaximizeButton($visible=true){}

	/**
	 * MinSize() sets the minimum size of the pane.
	 * @param integer $x
	 * @param integer $y
	 * @param wxSize $size
	 * @return wxAuiPaneInfo
	 */
	function MinSize($x, $y, wxSize $size){}

	/**
	 * MinimizeButton() indicates that a minimize button should be drawn for the pane.
	 * @param bool $visible
	 * @return wxAuiPaneInfo
	 */
	function MinimizeButton($visible=true){}

	/**
	 * Movable indicates whether a frame can be moved.
	 * @param bool $b
	 * @return wxAuiPaneInfo
	 */
	function Movable($b=true){}

	/**
	 * Name() sets the name of the pane so it can be referenced in lookup functions.
	 * @param string $n
	 * @return wxAuiPaneInfo
	 */
	function Name($n){}

	/**
	 * PaneBorder indicates that a border should be drawn for the pane.
	 * @param bool $visible
	 * @return wxAuiPaneInfo
	 */
	function PaneBorder($visible=true){}

	/**
	 * PinButton() indicates that a pin button should be drawn for the pane.
	 * @param bool $visible
	 * @return wxAuiPaneInfo
	 */
	function PinButton($visible=true){}

	/**
	 * Position() determines the position of the docked pane.
	 * @param integer $pos
	 * @return wxAuiPaneInfo
	 */
	function Position($pos){}

	/**
	 * Resizable() allows a pane to be resized if the parameter is true, and forces it to be a fixed size if the parameter is false.
	 * @param bool $resizable
	 * @return wxAuiPaneInfo
	 */
	function Resizable($resizable=true){}

	/**
	 * Right() sets the pane dock position to the right side of the frame.
	 * @return wxAuiPaneInfo
	 */
	function Right(){}

	/**
	 * RightDockable() indicates whether a pane can be docked on the right of the frame.
	 * @param bool $b
	 * @return wxAuiPaneInfo
	 */
	function RightDockable($b=true){}

	/**
	 * Row() determines the row of the docked pane.
	 * @param integer $row
	 * @return wxAuiPaneInfo
	 */
	function Row($row){}

	/**
	 * Write the safe parts of a newly loaded PaneInfo structure "source" into "this" used on loading perspectives etc.
	 * @param wxAuiPaneInfo $source
	 */
	function SafeSet(wxAuiPaneInfo $source){}

	/**
	 * SetFlag() turns the property given by flag on or off with the option_state parameter.
	 * @param integer $flag
	 * @param bool $option_state
	 * @return wxAuiPaneInfo
	 */
	function SetFlag($flag, $option_state){}

	/**
	 * Show() indicates that a pane should be shown.
	 * @param bool $show
	 * @return wxAuiPaneInfo
	 */
	function Show($show=true){}

	/**
	 * ToolbarPane() specifies that the pane should adopt the default toolbar pane settings.
	 * @return wxAuiPaneInfo
	 */
	function ToolbarPane(){}

	/**
	 * Top() sets the pane dock position to the top of the frame.
	 * @return wxAuiPaneInfo
	 */
	function Top(){}

	/**
	 * TopDockable() indicates whether a pane can be docked at the top of the frame.
	 * @param bool $b
	 * @return wxAuiPaneInfo
	 */
	function TopDockable($b=true){}

	/**
	 * Window() assigns the window pointer that the wxAuiPaneInfo should use.
	 * @param wxWindow $w
	 * @return wxAuiPaneInfo
	 */
	function Window(wxWindow &$w){}
}

class wxAuiTabArt
{
	/**
	 * Sets sizing information.
	 * @param wxSize $tab_ctrl_size
	 * @param integer $tab_count
	 */
	function SetSizingInfo(wxSize $tab_ctrl_size, $tab_count){}

	/**
	 * Sets the font for drawing text for selected UI elements.
	 * @param wxFont $font
	 */
	function SetSelectedFont(wxFont $font){}

	/**
	 * Sets the normal font for drawing labels.
	 * @param wxFont $font
	 */
	function SetNormalFont(wxFont $font){}

	/**
	 * Sets the font used for calculating measurements.
	 * @param wxFont $font
	 */
	function SetMeasuringFont(wxFont $font){}

	/**
	 * Sets flags.
	 * @param integer $flags
	 */
	function SetFlags($flags){}

	/**
	 * Sets the colour of the inactive tabs.
	 * @param wxColour $colour
	 */
	function SetColour(wxColour $colour){}

	/**
	 * Sets the colour of the selected tab.
	 * @param wxColour $colour
	 */
	function SetActiveColour(wxColour $colour){}

	/**
	 * Returns the tab size for the given caption, bitmap and state.
	 * @param wxDC $dc
	 * @param wxWindow $wnd
	 * @param string $caption
	 * @param wxBitmap $bitmap
	 * @param bool $active
	 * @param integer $close_button_state
	 * @param integer $x_extent
	 * @return wxSize
	 */
	function GetTabSize(wxDC &$dc, wxWindow &$wnd, $caption, wxBitmap $bitmap, $active, $close_button_state, &$x_extent){}

	/**
	 * Returns the indent size.
	 * @return integer
	 */
	function GetIndentSize(){}

	/**
	 * Draws a button.
	 * @param wxDC $dc
	 * @param wxWindow $wnd
	 * @param wxRect $in_rect
	 * @param integer $bitmap_id
	 * @param integer $button_state
	 * @param integer $orientation
	 * @param wxRect $out_rect
	 */
	function DrawButton(wxDC &$dc, wxWindow &$wnd, wxRect $in_rect, $bitmap_id, $button_state, $orientation, wxRect &$out_rect){}

	/**
	 * Draws a background on the given area.
	 * @param wxDC $dc
	 * @param wxWindow $wnd
	 * @param wxRect $rect
	 */
	function DrawBackground(wxDC &$dc, wxWindow &$wnd, wxRect $rect){}

	/**
	 * Clones the art object.
	 * @return wxAuiTabArt
	 */
	function CloneMethod(){}
}

class wxAuiToolBar extends wxControl
{
	/**
	 * wxAuiToolBar
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param wxPoint $position
	 * @param wxSize $size
	 * @param integer $style
	 */
	function __construct(wxWindow &$parent, $id=-1, wxPoint $position=null, wxSize $size=null, $style=wxAUI_TB_DEFAULT_STYLE){}

	/**
	 * AddControl
	 * @param wxControl $control
	 * @param string $label
	 * @return wxAuiToolBarItem
	 */
	function AddControl(wxControl &$control, $label=wxEmptyString){}

	/**
	 * AddLabel
	 * @param integer $tool_id
	 * @param string $label
	 * @param integer $width
	 * @return wxAuiToolBarItem
	 */
	function AddLabel($tool_id, $label=wxEmptyString, $width=-1){}

	/**
	 * AddSeparator
	 * @return wxAuiToolBarItem
	 */
	function AddSeparator(){}

	/**
	 * AddSpacer
	 * @param integer $pixels
	 * @return wxAuiToolBarItem
	 */
	function AddSpacer($pixels){}

	/**
	 * AddStretchSpacer
	 * @param integer $proportion
	 * @return wxAuiToolBarItem
	 */
	function AddStretchSpacer($proportion=1){}

	/**
	 * AddTool
	 * @param integer $tool_id
	 * @param string $label
	 * @param wxBitmap $bitmap
	 * @param string $short_help_string
	 * @param wxItemKind $kind
	 * @param wxBitmap $disabled_bitmap
	 * @param string $long_help_string
	 * @param wxObject $client_data
	 * @param bool $toggle
	 * @return wxAuiToolBarItem
	 */
	function AddTool($tool_id, $label, wxBitmap $bitmap, $short_help_string=wxEmptyString, wxItemKind $kind=null, $tool_id, $label, wxBitmap $bitmap, wxBitmap $disabled_bitmap, wxItemKind $kind, $short_help_string, $long_help_string, wxObject &$client_data, $tool_id, wxBitmap $bitmap, wxBitmap $disabled_bitmap, $toggle=false, wxObject &$client_data=null, $short_help_string=wxEmptyString, $long_help_string=wxEmptyString){}

	/**
	 * Clear
	 */
	function Clear(){}

	/**
	 * ClearTools
	 */
	function ClearTools(){}

	/**
	 * DeleteByIndex
	 * @param integer $tool_id
	 * @return bool
	 */
	function DeleteByIndex($tool_id){}

	/**
	 * DeleteTool
	 * @param integer $tool_id
	 * @return bool
	 */
	function DeleteTool($tool_id){}

	/**
	 * EnableTool
	 * @param integer $tool_id
	 * @param bool $state
	 */
	function EnableTool($tool_id, $state){}

	/**
	 * FindControl
	 * @param integer $window_id
	 * @return wxControl
	 */
	function FindControl($window_id){}

	/**
	 * FindTool
	 * @param integer $tool_id
	 * @return wxAuiToolBarItem
	 */
	function FindTool($tool_id){}

	/**
	 * FindToolByIndex
	 * @param integer $idx
	 * @return wxAuiToolBarItem
	 */
	function FindToolByIndex($idx){}

	/**
	 * FindToolByPosition
	 * @param integer $x
	 * @param integer $y
	 * @return wxAuiToolBarItem
	 */
	function FindToolByPosition($x, $y){}

	/**
	 * GetArtProvider
	 * @return wxAuiToolBarArt
	 */
	function GetArtProvider(){}

	/**
	 * GetGripperVisible
	 * @return bool
	 */
	function GetGripperVisible(){}

	/**
	 * get size of hint rectangle for a particular dock location
	 * @param integer $dock_direction
	 * @return wxSize
	 */
	function GetHintSize($dock_direction){}

	/**
	 * GetOverflowVisible
	 * @return bool
	 */
	function GetOverflowVisible(){}

	/**
	 * GetToolBarFits
	 * @return bool
	 */
	function GetToolBarFits(){}

	/**
	 * GetToolBitmap
	 * @param integer $tool_id
	 * @return wxBitmap
	 */
	function GetToolBitmap($tool_id){}

	/**
	 * GetToolBitmapSize
	 * @return wxSize
	 */
	function GetToolBitmapSize(){}

	/**
	 * GetToolBorderPadding
	 * @return integer
	 */
	function GetToolBorderPadding(){}

	/**
	 * GetToolCount
	 * @return integer
	 */
	function GetToolCount(){}

	/**
	 * GetToolDropDown
	 * @param integer $tool_id
	 * @return bool
	 */
	function GetToolDropDown($tool_id){}

	/**
	 * GetToolEnabled
	 * @param integer $tool_id
	 * @return bool
	 */
	function GetToolEnabled($tool_id){}

	/**
	 * GetToolFits
	 * @param integer $tool_id
	 * @return bool
	 */
	function GetToolFits($tool_id){}

	/**
	 * GetToolFitsByIndex
	 * @param integer $tool_id
	 * @return bool
	 */
	function GetToolFitsByIndex($tool_id){}

	/**
	 * GetToolIndex
	 * @param integer $tool_id
	 * @return integer
	 */
	function GetToolIndex($tool_id){}

	/**
	 * GetToolLabel
	 * @param integer $tool_id
	 * @return string
	 */
	function GetToolLabel($tool_id){}

	/**
	 * GetToolLongHelp
	 * @param integer $tool_id
	 * @return string
	 */
	function GetToolLongHelp($tool_id){}

	/**
	 * GetToolPacking
	 * @return integer
	 */
	function GetToolPacking(){}

	/**
	 * GetToolPos
	 * @param integer $tool_id
	 * @return integer
	 */
	function GetToolPos($tool_id){}

	/**
	 * GetToolProportion
	 * @param integer $tool_id
	 * @return integer
	 */
	function GetToolProportion($tool_id){}

	/**
	 * GetToolRect
	 * @param integer $tool_id
	 * @return wxRect
	 */
	function GetToolRect($tool_id){}

	/**
	 * GetToolSeparation
	 * @return integer
	 */
	function GetToolSeparation(){}

	/**
	 * GetToolShortHelp
	 * @param integer $tool_id
	 * @return string
	 */
	function GetToolShortHelp($tool_id){}

	/**
	 * GetToolSticky
	 * @param integer $tool_id
	 * @return bool
	 */
	function GetToolSticky($tool_id){}

	/**
	 * GetToolTextOrientation
	 * @return integer
	 */
	function GetToolTextOrientation(){}

	/**
	 * GetToolToggled
	 * @param integer $tool_id
	 * @return bool
	 */
	function GetToolToggled($tool_id){}

	/**
	 * Gets the window style that was passed to the constructor or Create() method.
	 * @return integer
	 */
	function GetWindowStyleFlag(){}

	/**
	 * IsPaneValid
	 * @param wxAuiPaneInfo $pane
	 * @return bool
	 */
	function IsPaneValid(wxAuiPaneInfo $pane){}

	/**
	 * Realize
	 * @return bool
	 */
	function Realize(){}

	/**
	 * Sets the font for this window.
	 * @param wxFont $font
	 * @return bool
	 */
	function SetFont(wxFont $font){}

	/**
	 * SetGripperVisible
	 * @param bool $visible
	 */
	function SetGripperVisible($visible){}

	/**
	 * SetMargins
	 * @param integer $left
	 * @param integer $right
	 * @param integer $top
	 * @param integer $bottom
	 * @param integer $x
	 * @param integer $y
	 * @param wxSize $size
	 */
	function SetMargins($left, $right, $top, $bottom, $x, $y, wxSize $size){}

	/**
	 * SetOverflowVisible
	 * @param bool $visible
	 */
	function SetOverflowVisible($visible){}

	/**
	 * SetToolBitmap
	 * @param integer $tool_id
	 * @param wxBitmap $bitmap
	 */
	function SetToolBitmap($tool_id, wxBitmap $bitmap){}

	/**
	 * SetToolBitmapSize
	 * @param wxSize $size
	 */
	function SetToolBitmapSize(wxSize $size){}

	/**
	 * SetToolBorderPadding
	 * @param integer $padding
	 */
	function SetToolBorderPadding($padding){}

	/**
	 * SetToolDropDown
	 * @param integer $tool_id
	 * @param bool $dropdown
	 */
	function SetToolDropDown($tool_id, $dropdown){}

	/**
	 * SetToolLabel
	 * @param integer $tool_id
	 * @param string $label
	 */
	function SetToolLabel($tool_id, $label){}

	/**
	 * SetToolLongHelp
	 * @param integer $tool_id
	 * @param string $help_string
	 */
	function SetToolLongHelp($tool_id, $help_string){}

	/**
	 * SetToolPacking
	 * @param integer $packing
	 */
	function SetToolPacking($packing){}

	/**
	 * SetToolProportion
	 * @param integer $tool_id
	 * @param integer $proportion
	 */
	function SetToolProportion($tool_id, $proportion){}

	/**
	 * SetToolSeparation
	 * @param integer $separation
	 */
	function SetToolSeparation($separation){}

	/**
	 * SetToolShortHelp
	 * @param integer $tool_id
	 * @param string $help_string
	 */
	function SetToolShortHelp($tool_id, $help_string){}

	/**
	 * SetToolSticky
	 * @param integer $tool_id
	 * @param bool $sticky
	 */
	function SetToolSticky($tool_id, $sticky){}

	/**
	 * SetToolTextOrientation
	 * @param integer $orientation
	 */
	function SetToolTextOrientation($orientation){}

	/**
	 * Sets the style of the window.
	 * @param integer $style
	 */
	function SetWindowStyleFlag($style){}

	/**
	 * ToggleTool
	 * @param integer $tool_id
	 * @param bool $state
	 */
	function ToggleTool($tool_id, $state){}
}

class wxAuiToolBarArt
{
	/**
	 * Clone
	 * @return wxAuiToolBarArt
	 */
	function CloneMethod(){}

	/**
	 * DrawBackground
	 * @param wxDC $dc
	 * @param wxWindow $wnd
	 * @param wxRect $rect
	 */
	function DrawBackground(wxDC &$dc, wxWindow &$wnd, wxRect $rect){}

	/**
	 * DrawButton
	 * @param wxDC $dc
	 * @param wxWindow $wnd
	 * @param wxAuiToolBarItem $item
	 * @param wxRect $rect
	 */
	function DrawButton(wxDC &$dc, wxWindow &$wnd, wxAuiToolBarItem $item, wxRect $rect){}

	/**
	 * DrawControlLabel
	 * @param wxDC $dc
	 * @param wxWindow $wnd
	 * @param wxAuiToolBarItem $item
	 * @param wxRect $rect
	 */
	function DrawControlLabel(wxDC &$dc, wxWindow &$wnd, wxAuiToolBarItem $item, wxRect $rect){}

	/**
	 * DrawDropDownButton
	 * @param wxDC $dc
	 * @param wxWindow $wnd
	 * @param wxAuiToolBarItem $item
	 * @param wxRect $rect
	 */
	function DrawDropDownButton(wxDC &$dc, wxWindow &$wnd, wxAuiToolBarItem $item, wxRect $rect){}

	/**
	 * DrawGripper
	 * @param wxDC $dc
	 * @param wxWindow $wnd
	 * @param wxRect $rect
	 */
	function DrawGripper(wxDC &$dc, wxWindow &$wnd, wxRect $rect){}

	/**
	 * DrawLabel
	 * @param wxDC $dc
	 * @param wxWindow $wnd
	 * @param wxAuiToolBarItem $item
	 * @param wxRect $rect
	 */
	function DrawLabel(wxDC &$dc, wxWindow &$wnd, wxAuiToolBarItem $item, wxRect $rect){}

	/**
	 * DrawOverflowButton
	 * @param wxDC $dc
	 * @param wxWindow $wnd
	 * @param wxRect $rect
	 * @param integer $state
	 */
	function DrawOverflowButton(wxDC &$dc, wxWindow &$wnd, wxRect $rect, $state){}

	/**
	 * DrawSeparator
	 * @param wxDC $dc
	 * @param wxWindow $wnd
	 * @param wxRect $rect
	 */
	function DrawSeparator(wxDC &$dc, wxWindow &$wnd, wxRect $rect){}

	/**
	 * GetElementSize
	 * @param integer $element_id
	 * @return integer
	 */
	function GetElementSize($element_id){}

	/**
	 * GetFlags
	 * @return integer
	 */
	function GetFlags(){}

	/**
	 * GetFont
	 * @return wxFont
	 */
	function GetFont(){}

	/**
	 * GetLabelSize
	 * @param wxDC $dc
	 * @param wxWindow $wnd
	 * @param wxAuiToolBarItem $item
	 * @return wxSize
	 */
	function GetLabelSize(wxDC &$dc, wxWindow &$wnd, wxAuiToolBarItem $item){}

	/**
	 * GetTextOrientation
	 * @return integer
	 */
	function GetTextOrientation(){}

	/**
	 * GetToolSize
	 * @param wxDC $dc
	 * @param wxWindow $wnd
	 * @param wxAuiToolBarItem $item
	 * @return wxSize
	 */
	function GetToolSize(wxDC &$dc, wxWindow &$wnd, wxAuiToolBarItem $item){}

	/**
	 * SetElementSize
	 * @param integer $element_id
	 * @param integer $size
	 */
	function SetElementSize($element_id, $size){}

	/**
	 * SetFlags
	 * @param integer $flags
	 */
	function SetFlags($flags){}

	/**
	 * SetFont
	 * @param wxFont $font
	 */
	function SetFont(wxFont $font){}

	/**
	 * SetTextOrientation
	 * @param integer $orientation
	 */
	function SetTextOrientation($orientation){}
}

class wxAuiToolBarEvent extends wxNotifyEvent
{
	/**
	 * GetClickPoint
	 * @return wxPoint
	 */
	function GetClickPoint(){}

	/**
	 * GetItemRect
	 * @return wxRect
	 */
	function GetItemRect(){}

	/**
	 * GetToolId
	 * @return integer
	 */
	function GetToolId(){}

	/**
	 * IsDropDownClicked
	 * @return bool
	 */
	function IsDropDownClicked(){}
}

class wxAuiToolBarItem
{
	/**
	 * wxAuiToolBarItem
	 * @param wxAuiToolBarItem $c
	 */
	function __construct(wxAuiToolBarItem $c){}

	/**
	 * Assign
	 * @param wxAuiToolBarItem $c
	 */
	function Assign(wxAuiToolBarItem $c){}

	/**
	 * GetAlignment
	 * @return integer
	 */
	function GetAlignment(){}

	/**
	 * GetBitmap
	 * @return wxBitmap
	 */
	function GetBitmap(){}

	/**
	 * GetDisabledBitmap
	 * @return wxBitmap
	 */
	function GetDisabledBitmap(){}

	/**
	 * GetHoverBitmap
	 * @return wxBitmap
	 */
	function GetHoverBitmap(){}

	/**
	 * GetId
	 * @return integer
	 */
	function GetId(){}

	/**
	 * GetKind
	 * @return integer
	 */
	function GetKind(){}

	/**
	 * GetLabel
	 * @return string
	 */
	function GetLabel(){}

	/**
	 * GetLongHelp
	 * @return string
	 */
	function GetLongHelp(){}

	/**
	 * GetMinSize
	 * @return wxSize
	 */
	function GetMinSize(){}

	/**
	 * GetProportion
	 * @return integer
	 */
	function GetProportion(){}

	/**
	 * GetShortHelp
	 * @return string
	 */
	function GetShortHelp(){}

	/**
	 * GetSizerItem
	 * @return wxSizerItem
	 */
	function GetSizerItem(){}

	/**
	 * GetSpacerPixels
	 * @return integer
	 */
	function GetSpacerPixels(){}

	/**
	 * GetState
	 * @return integer
	 */
	function GetState(){}

	/**
	 * GetUserData
	 * @return integer
	 */
	function GetUserData(){}

	/**
	 * GetWindow
	 * @return wxWindow
	 */
	function GetWindow(){}

	/**
	 * HasDropDown
	 * @return bool
	 */
	function HasDropDown(){}

	/**
	 * IsActive
	 * @return bool
	 */
	function IsActive(){}

	/**
	 * IsSticky
	 * @return bool
	 */
	function IsSticky(){}

	/**
	 * SetActive
	 * @param bool $b
	 */
	function SetActive($b){}

	/**
	 * SetAlignment
	 * @param integer $l
	 */
	function SetAlignment($l){}

	/**
	 * SetBitmap
	 * @param wxBitmap $bmp
	 */
	function SetBitmap(wxBitmap $bmp){}

	/**
	 * SetDisabledBitmap
	 * @param wxBitmap $bmp
	 */
	function SetDisabledBitmap(wxBitmap $bmp){}

	/**
	 * SetHasDropDown
	 * @param bool $b
	 */
	function SetHasDropDown($b){}

	/**
	 * SetHoverBitmap
	 * @param wxBitmap $bmp
	 */
	function SetHoverBitmap(wxBitmap $bmp){}

	/**
	 * SetId
	 * @param integer $new_id
	 */
	function SetId($new_id){}

	/**
	 * SetKind
	 * @param integer $new_kind
	 */
	function SetKind($new_kind){}

	/**
	 * SetLabel
	 * @param string $s
	 */
	function SetLabel($s){}

	/**
	 * SetLongHelp
	 * @param string $s
	 */
	function SetLongHelp($s){}

	/**
	 * SetMinSize
	 * @param wxSize $s
	 */
	function SetMinSize(wxSize $s){}

	/**
	 * SetProportion
	 * @param integer $p
	 */
	function SetProportion($p){}

	/**
	 * SetShortHelp
	 * @param string $s
	 */
	function SetShortHelp($s){}

	/**
	 * SetSizerItem
	 * @param wxSizerItem $s
	 */
	function SetSizerItem(wxSizerItem &$s){}

	/**
	 * SetSpacerPixels
	 * @param integer $s
	 */
	function SetSpacerPixels($s){}

	/**
	 * SetState
	 * @param integer $new_state
	 */
	function SetState($new_state){}

	/**
	 * SetSticky
	 * @param bool $b
	 */
	function SetSticky($b){}

	/**
	 * SetUserData
	 * @param integer $l
	 */
	function SetUserData($l){}

	/**
	 * SetWindow
	 * @param wxWindow $w
	 */
	function SetWindow(wxWindow &$w){}
}

class wxAutoBufferedPaintDC extends wxBufferedPaintDC
{
	/**
	 * Constructor.
	 * @param wxWindow $window
	 */
	function __construct(wxWindow &$window){}
}

class wxBannerWindow extends wxWindow
{
	/**
	 * Default constructor, use Create() later.
	 * @param wxWindow $parent
	 * @param wxDirection $dir
	 * @param integer $winid
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param string $name
	 */
	function __construct(wxWindow &$parent, wxDirection $dir=null, wxWindow &$parent, $winid, wxDirection $dir=null, wxPoint $pos=null, wxSize $size=null, $style, $name=wxBannerWindowNameStr){}

	/**
	 * Really create the banner window for the objects created using the default constructor.
	 * @param wxWindow $parent
	 * @param integer $winid
	 * @param wxDirection $dir
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param string $name
	 * @return bool
	 */
	function Create(wxWindow &$parent, $winid, wxDirection $dir=null, wxPoint $pos=null, wxSize $size=null, $style, $name=wxBannerWindowNameStr){}

	/**
	 * Provide the bitmap to use as background.
	 * @param wxBitmap $bmp
	 */
	function SetBitmap(wxBitmap $bmp){}

	/**
	 * Set the colours between which the gradient runs.
	 * @param wxColour $start
	 * @param wxColour $end
	 */
	function SetGradient(wxColour $start, wxColour $end){}

	/**
	 * Set the text to display.
	 * @param string $title
	 * @param string $message
	 */
	function SetText($title, $message){}
}

class wxBitmap extends wxGDIObject
{
	/**
	 * Default constructor.
	 * @param wxBitmap $bitmap
	 * @param integer $width
	 * @param integer $height
	 * @param integer $depth
	 * @param wxSize $sz
	 * @param string $name
	 * @param wxBitmapType $type
	 * @param wxImage $img
	 */
	function __construct(wxBitmap $bitmap, $width, $height, $depth=wxBITMAP_SCREEN_DEPTH, wxSize $sz, $depth=wxBITMAP_SCREEN_DEPTH, $name, wxBitmapType $type=null, wxImage $img, $depth=wxBITMAP_SCREEN_DEPTH){}

	/**
	 * Adds a handler to the end of the static list of format handlers.
	 * @param wxBitmapHandler $handler
	 */
	function AddHandler(wxBitmapHandler &$handler){}

	/**
	 * Deletes all bitmap handlers.
	 */
	function CleanUpHandlers(){}

	/**
	 * Returns disabled (dimmed) version of the bitmap.
	 * @param integer $brightness
	 * @return wxBitmap
	 */
	function ConvertToDisabled($brightness=255){}

	/**
	 * Creates an image from a platform-dependent bitmap.
	 * @return wxImage
	 */
	function ConvertToImage(){}

	/**
	 * Creates the bitmap from an icon.
	 * @param wxIcon $icon
	 * @return bool
	 */
	function CopyFromIcon(wxIcon $icon){}

	/**
	 * Creates a fresh bitmap.
	 * @param integer $width
	 * @param integer $height
	 * @param integer $depth
	 * @param wxSize $sz
	 * @return bool
	 */
	function Create($width, $height, $depth=wxBITMAP_SCREEN_DEPTH, wxSize $sz, $depth=wxBITMAP_SCREEN_DEPTH){}

	/**
	 * Finds the handler with the given name.
	 * @param string $name
	 * @param string $extension
	 * @param wxBitmapType $bitmapType
	 * @return wxBitmapHandler
	 */
	function FindHandler($name, $extension, wxBitmapType $bitmapType, wxBitmapType $bitmapType){}

	/**
	 * Gets the colour depth of the bitmap.
	 * @return integer
	 */
	function GetDepth(){}

	/**
	 * Gets the height of the bitmap in pixels.
	 * @return integer
	 */
	function GetHeight(){}

	/**
	 * Gets the associated mask (if any) which may have been loaded from a file or set for the bitmap.
	 * @return wxMask
	 */
	function GetMask(){}

	/**
	 * Gets the associated palette (if any) which may have been loaded from a file or set for the bitmap.
	 * @return wxPalette
	 */
	function GetPalette(){}

	/**
	 * Returns the size of the bitmap in pixels.
	 * @return wxSize
	 */
	function GetSize(){}

	/**
	 * Returns a sub bitmap of the current one as long as the rect belongs entirely to the bitmap.
	 * @param wxRect $rect
	 * @return wxBitmap
	 */
	function GetSubBitmap(wxRect $rect){}

	/**
	 * Gets the width of the bitmap in pixels.
	 * @return integer
	 */
	function GetWidth(){}

	/**
	 * Adds the standard bitmap format handlers, which, depending on wxWidgets configuration, can be handlers for Windows bitmap, Windows bitmap resource, and XPM.
	 */
	function InitStandardHandlers(){}

	/**
	 * Adds a handler at the start of the static list of format handlers.
	 * @param wxBitmapHandler $handler
	 */
	function InsertHandler(wxBitmapHandler &$handler){}

	/**
	 * Returns true if bitmap data is present.
	 * @return bool
	 */
	function IsOk(){}

	/**
	 * Loads a bitmap from a file or resource.
	 * @param string $name
	 * @param wxBitmapType $type
	 * @return bool
	 */
	function LoadFile($name, wxBitmapType $type=null){}

	/**
	 * Finds the handler with the given name, and removes it.
	 * @param string $name
	 * @return bool
	 */
	function RemoveHandler($name){}

	/**
	 * Saves a bitmap in the named file.
	 * @param string $name
	 * @param wxBitmapType $type
	 * @param wxPalette $palette
	 * @return bool
	 */
	function SaveFile($name, wxBitmapType $type, wxPalette $palette=null){}

	/**
	 * Sets the depth member (does not affect the bitmap data).
	 * @param integer $depth
	 */
	function SetDepth($depth){}

	/**
	 * Sets the height member (does not affect the bitmap data).
	 * @param integer $height
	 */
	function SetHeight($height){}

	/**
	 * Sets the mask for this bitmap.
	 * @param wxMask $mask
	 */
	function SetMask(wxMask &$mask){}

	/**
	 * Sets the associated palette.
	 * @param wxPalette $palette
	 */
	function SetPalette(wxPalette $palette){}

	/**
	 * Sets the width member (does not affect the bitmap data).
	 * @param integer $width
	 */
	function SetWidth($width){}
}

class wxBitmapButton extends wxButton
{
	/**
	 * Default ctor.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param wxBitmap $bitmap
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param wxValidator $validator
	 * @param string $name
	 */
	function __construct(wxWindow &$parent, $id, wxBitmap $bitmap, wxPoint $pos=null, wxSize $size=null, $style=wxBU_AUTODRAW, wxValidator $validator=null, $name=wxButtonNameStr){}

	/**
	 * Button creation function for two-step creation.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param wxBitmap $bitmap
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param wxValidator $validator
	 * @param string $name
	 * @return bool
	 */
	function Create(wxWindow &$parent, $id, wxBitmap $bitmap, wxPoint $pos=null, wxSize $size=null, $style=wxBU_AUTODRAW, wxValidator $validator=null, $name=wxButtonNameStr){}
}

class wxBitmapComboBox extends wxComboBox
{
	/**
	 * Default ctor.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param string $value
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param array $choices
	 * @param integer $style
	 * @param wxValidator $validator
	 * @param string $name
	 */
	function __construct(wxWindow &$parent, $id, $value, wxPoint $pos, wxSize $size, array $choices, $style, wxValidator $validator=null, $name=wxBitmapComboBoxNameStr){}

	/**
	 * Adds the item to the end of the combo box.
	 * @param string $item
	 * @param wxBitmap $bitmap
	 * @return integer
	 */
	function Append($item, wxBitmap $bitmap=null){}

	/**
	 * Creates the combobox for two-step construction.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param string $value
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param array $choices
	 * @param integer $style
	 * @param wxValidator $validator
	 * @param string $name
	 * @param integer $n
	 * @return bool
	 */
	function Create(wxWindow &$parent, $id, $value, wxPoint $pos, wxSize $size, array $choices, $style, wxValidator $validator=null, $name=wxBitmapComboBoxNameStr, wxWindow &$parent, $id, $value, wxPoint $pos, wxSize $size, $n, $choices, $style, wxValidator $validator=null, $name=wxBitmapComboBoxNameStr){}

	/**
	 * Returns the size of the bitmaps used in the combo box.
	 * @return wxSize
	 */
	function GetBitmapSize(){}

	/**
	 * Returns the bitmap of the item with the given index.
	 * @param integer $n
	 * @return wxBitmap
	 */
	function GetItemBitmap($n){}

	/**
	 * Inserts the item into the list before pos.
	 * @param string $item
	 * @param wxBitmap $bitmap
	 * @param integer $pos
	 * @return integer
	 */
	function Insert($item, wxBitmap $bitmap, $pos){}

	/**
	 * Sets the bitmap for the given item.
	 * @param integer $n
	 * @param wxBitmap $bitmap
	 */
	function SetItemBitmap($n, wxBitmap $bitmap){}
}

class wxBitmapDataObject extends wxDataObjectSimple
{
	/**
	 * Constructor, optionally passing a bitmap (otherwise use SetBitmap() later).
	 * @param wxBitmap $bitmap
	 */
	function __construct(wxBitmap $bitmap=null){}

	/**
	 * Returns the bitmap associated with the data object.
	 * @return wxBitmap
	 */
	function GetBitmap(){}

	/**
	 * Sets the bitmap associated with the data object.
	 * @param wxBitmap $bitmap
	 */
	function SetBitmap(wxBitmap $bitmap){}
}

class wxBitmapHandler extends wxObject
{
	/**
	 * Default constructor.
	 */
	function __construct(){}

	/**
	 * Creates a bitmap from the given data, which can be of arbitrary type.
	 * @param wxBitmap $bitmap
	 * @param mixed $data
	 * @param wxBitmapType $type
	 * @param integer $width
	 * @param integer $height
	 * @param integer $depth
	 * @return bool
	 */
	function Create(wxBitmap &$bitmap, $data, wxBitmapType $type, $width, $height, $depth=1){}

	/**
	 * Gets the file extension associated with this handler.
	 * @return string
	 */
	function GetExtension(){}

	/**
	 * Gets the name of this handler.
	 * @return string
	 */
	function GetName(){}

	/**
	 * Gets the bitmap type associated with this handler.
	 * @return wxBitmapType
	 */
	function GetType(){}

	/**
	 * Loads a bitmap from a file or resource, putting the resulting data into bitmap.
	 * @param wxBitmap $bitmap
	 * @param string $name
	 * @param wxBitmapType $type
	 * @param integer $desiredWidth
	 * @param integer $desiredHeight
	 * @return bool
	 */
	function LoadFile(wxBitmap &$bitmap, $name, wxBitmapType $type, $desiredWidth, $desiredHeight){}

	/**
	 * Saves a bitmap in the named file.
	 * @param wxBitmap $bitmap
	 * @param string $name
	 * @param wxBitmapType $type
	 * @param wxPalette $palette
	 * @return bool
	 */
	function SaveFile(wxBitmap $bitmap, $name, wxBitmapType $type, wxPalette $palette=null){}

	/**
	 * Sets the handler extension.
	 * @param string $extension
	 */
	function SetExtension($extension){}

	/**
	 * Sets the handler name.
	 * @param string $name
	 */
	function SetName($name){}

	/**
	 * Sets the handler type.
	 * @param wxBitmapType $type
	 */
	function SetType(wxBitmapType $type){}
}

class wxBitmapToggleButton extends wxToggleButton
{
	/**
	 * Default constructor.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param wxBitmap $label
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param wxValidator $val
	 * @param string $name
	 */
	function __construct(wxWindow &$parent, $id, wxBitmap $label, wxPoint $pos=null, wxSize $size=null, $style, wxValidator $val=null, $name=wxCheckBoxNameStr){}

	/**
	 * Create method for two-step construction.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param wxBitmap $label
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param wxValidator $val
	 * @param string $name
	 * @return bool
	 */
	function Create(wxWindow &$parent, $id, wxBitmap $label, wxPoint $pos=null, wxSize $size=null, $style, wxValidator $val=null, $name=wxCheckBoxNameStr){}

	/**
	 * Gets the state of the toggle button.
	 * @return bool
	 */
	function GetValue(){}

	/**
	 * Sets the toggle button to the given state.
	 * @param bool $state
	 */
	function SetValue($state){}
}

class wxBookCtrlBase extends wxControl
{
	/**
	 * Constructs the book control with the given parameters.
	 * @param wxWindow $parent
	 * @param integer $winid
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param string $name
	 * @return bool
	 */
	function Create(wxWindow &$parent, $winid, wxPoint $pos=null, wxSize $size=null, $style, $name=wxEmptyString){}

	/**
	 * Adds a new page.
	 * @param wxWindow $page
	 * @param string $text
	 * @param bool $select
	 * @param integer $imageId
	 * @return bool
	 */
	function AddPage(wxWindow &$page, $text, $select=false, $imageId=NO_IMAGE){}

	/**
	 * Cycles through the tabs.
	 * @param bool $forward
	 */
	function AdvanceSelection($forward=true){}

	/**
	 * Deletes all pages.
	 * @return bool
	 */
	function DeleteAllPages(){}

	/**
	 * Deletes the specified page, and the associated window.
	 * @param integer $page
	 * @return bool
	 */
	function DeletePage($page){}

	/**
	 * Returns the currently selected page or NULL.
	 * @return wxWindow
	 */
	function GetCurrentPage(){}

	/**
	 * Returns the window at the given page position.
	 * @param integer $page
	 * @return wxWindow
	 */
	function GetPage($page){}

	/**
	 * Returns the number of pages in the control.
	 * @return integer
	 */
	function GetPageCount(){}

	/**
	 * Returns the index of the tab at the specified position or wxNOT_FOUND if none.
	 * @param wxPoint $pt
	 * @param integer $flags
	 * @return integer
	 */
	function HitTest(wxPoint $pt, &$flags=NULL){}

	/**
	 * Inserts a new page at the specified position.
	 * @param integer $index
	 * @param wxWindow $page
	 * @param string $text
	 * @param bool $select
	 * @param integer $imageId
	 * @return bool
	 */
	function InsertPage($index, wxWindow &$page, $text, $select=false, $imageId=NO_IMAGE){}

	/**
	 * Deletes the specified page, without deleting the associated window.
	 * @param integer $page
	 * @return bool
	 */
	function RemovePage($page){}

	/**
	 * Sets the image index for the given page.
	 * @param integer $page
	 * @param integer $image
	 * @return bool
	 */
	function SetPageImage($page, $image){}

	/**
	 * Sets the width and height of the pages.
	 * @param wxSize $size
	 */
	function SetPageSize(wxSize $size){}

	/**
	 * Sets the text for the given page.
	 * @param integer $page
	 * @param string $text
	 * @return bool
	 */
	function SetPageText($page, $text){}

	/**
	 * Sets the selection for the given page, returning the previous selection.
	 * @param integer $page
	 * @return integer
	 */
	function SetSelection($page){}

	/**
	 * Returns the currently selected page, or wxNOT_FOUND if none was selected.
	 * @return integer
	 */
	function GetSelection(){}

	/**
	 * Returns the string for the given page.
	 * @param integer $nPage
	 * @return string
	 */
	function GetPageText($nPage){}

	/**
	 * Returns the image index for the given page.
	 * @param integer $nPage
	 * @return integer
	 */
	function GetPageImage($nPage){}

	/**
	 * Changes the selection for the given page, returning the previous selection.
	 * @param integer $page
	 * @return integer
	 */
	function ChangeSelection($page){}
}

class wxBookCtrlEvent extends wxNotifyEvent
{
	/**
	 * Constructor (used internally by wxWidgets only).
	 * @param integer $eventType
	 * @param integer $id
	 * @param integer $sel
	 * @param integer $oldSel
	 */
	function __construct($eventType=wxEVT_NULL, $id, $sel=wxNOT_FOUND, $oldSel=wxNOT_FOUND){}

	/**
	 * Returns the page that was selected before the change, wxNOT_FOUND if none was selected.
	 * @return integer
	 */
	function GetOldSelection(){}

	/**
	 * Returns the currently selected page, or wxNOT_FOUND if none was selected.
	 * @return integer
	 */
	function GetSelection(){}

	/**
	 * Sets the id of the page selected before the change.
	 * @param integer $page
	 */
	function SetOldSelection($page){}

	/**
	 * Sets the selection member variable.
	 * @param integer $page
	 */
	function SetSelection($page){}
}

class wxBoxSizer extends wxSizer
{
	/**
	 * Constructor for a wxBoxSizer.
	 * @param integer $orient
	 */
	function __construct($orient){}

	/**
	 * Adds non-stretchable space to the main orientation of the sizer only.
	 * @param integer $size
	 * @return wxSizerItem
	 */
	function AddSpacer($size){}

	/**
	 * Implements the calculation of a box sizer's minimal.
	 * @return wxSize
	 */
	function CalcMin(){}

	/**
	 * Returns the orientation of the box sizer, either wxVERTICAL or wxHORIZONTAL.
	 * @return integer
	 */
	function GetOrientation(){}

	/**
	 * Implements the calculation of a box sizer's dimensions and then sets the size of its children (calling wxWindow::SetSize if the child is a window).
	 */
	function RecalcSizes(){}
}

class wxBrush extends wxGDIObject
{
	/**
	 * Default constructor.
	 * @param wxColour $colour
	 * @param wxBrushStyle $style
	 * @param wxBitmap $stippleBitmap
	 */
	function __construct(wxColour $colour, wxBrushStyle $style=null, wxBitmap $stippleBitmap){}

	/**
	 * Returns a reference to the brush colour.
	 * @return wxColour
	 */
	function GetColour(){}

	/**
	 * Gets a pointer to the stipple bitmap.
	 * @return wxBitmap
	 */
	function GetStipple(){}

	/**
	 * Returns the brush style, one of the wxBrushStyle values.
	 * @return wxBrushStyle
	 */
	function GetStyle(){}

	/**
	 * Returns true if the style of the brush is any of hatched fills.
	 * @return bool
	 */
	function IsHatch(){}

	/**
	 * Returns true if the brush is a valid non-transparent brush.
	 * @return bool
	 */
	function IsNonTransparent(){}

	/**
	 * Returns true if the brush is initialised.
	 * @return bool
	 */
	function IsOk(){}

	/**
	 * Returns true if the brush is transparent.
	 * @return bool
	 */
	function IsTransparent(){}

	/**
	 * Sets the brush colour using red, green and blue values.
	 * @param wxColour $colour
	 * @param integer $red
	 * @param integer $green
	 * @param integer $blue
	 */
	function SetColour(wxColour $colour, $red, $green, $blue){}

	/**
	 * Sets the stipple bitmap.
	 * @param wxBitmap $bitmap
	 */
	function SetStipple(wxBitmap $bitmap){}

	/**
	 * Sets the brush style.
	 * @param wxBrushStyle $style
	 */
	function SetStyle(wxBrushStyle $style){}
}

class wxBufferedDC extends wxMemoryDC
{
	/**
	 * Default constructor.
	 * @param wxDC $dc
	 * @param wxSize $area
	 * @param integer $style
	 * @param wxBitmap $buffer
	 */
	function __construct(wxDC &$dc, wxSize $area, $style=wxBUFFER_CLIENT_AREA, wxDC &$dc, wxBitmap &$buffer=null, $style=wxBUFFER_CLIENT_AREA){}

	/**
	 * Initializes the object created using the default constructor.
	 * @param wxDC $dc
	 * @param wxSize $area
	 * @param integer $style
	 * @param wxBitmap $buffer
	 */
	function Init(wxDC &$dc, wxSize $area, $style=wxBUFFER_CLIENT_AREA, wxDC &$dc, wxBitmap &$buffer=null, $style=wxBUFFER_CLIENT_AREA){}
}

class wxBufferedPaintDC extends wxBufferedDC
{
	/**
	 * As with wxBufferedDC, you may either provide the bitmap to be used for buffering or let this object create one internally (in the latter case, the size of the client part of the window is used).
	 * @param wxWindow $window
	 * @param wxBitmap $buffer
	 * @param integer $style
	 */
	function __construct(wxWindow &$window, wxBitmap &$buffer, $style=wxBUFFER_CLIENT_AREA, wxWindow &$window, $style=wxBUFFER_CLIENT_AREA){}
}

class wxBusyCursor
{
	/**
	 * Constructs a busy cursor object, calling wxBeginBusyCursor().
	 * @param wxCursor $cursor
	 */
	function __construct(wxCursor $cursor=null){}
}

class wxBusyInfo
{
	/**
	 * Constructs a busy info window as child of parent and displays msg in it.
	 * @param string $msg
	 * @param wxWindow $parent
	 */
	function __construct($msg, wxWindow &$parent=null){}
}

class wxButton extends wxAnyButton
{
	/**
	 * Constructor, creating and showing a button.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param string $label
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param wxValidator $validator
	 * @param string $name
	 */
	function __construct(wxWindow &$parent, $id, $label=wxEmptyString, wxPoint $pos=null, wxSize $size=null, $style, wxValidator $validator=null, $name=wxButtonNameStr){}

	/**
	 * Button creation function for two-step creation.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param string $label
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param wxValidator $validator
	 * @param string $name
	 * @return bool
	 */
	function Create(wxWindow &$parent, $id, $label=wxEmptyString, wxPoint $pos=null, wxSize $size=null, $style, wxValidator $validator=null, $name=wxButtonNameStr){}

	/**
	 * Returns true if an authentication needed symbol is displayed on the button.
	 * @return bool
	 */
	function GetAuthNeeded(){}

	/**
	 * Returns the default size for the buttons.
	 * @return wxSize
	 */
	function GetDefaultSize(){}

	/**
	 * Returns the string label for the button.
	 * @return string
	 */
	function GetLabel(){}

	/**
	 * Sets whether an authentication needed symbol should be displayed on the button.
	 * @param bool $needed
	 */
	function SetAuthNeeded($needed=true){}

	/**
	 * This sets the button to be the default item in its top-level window (e.g.
	 * @return wxWindow
	 */
	function SetDefault(){}

	/**
	 * Sets the string label for the button.
	 * @param string $label
	 */
	function SetLabel($label){}
}

class wxCalculateLayoutEvent extends wxEvent
{
	/**
	 * Constructor.
	 * @param integer $id
	 */
	function __construct($id){}

	/**
	 * Returns the flags associated with this event.
	 * @return integer
	 */
	function GetFlags(){}

	/**
	 * Before the event handler is entered, returns the remaining parent client area that the window could occupy.
	 * @return wxRect
	 */
	function GetRect(){}

	/**
	 * Sets the flags associated with this event.
	 * @param integer $flags
	 */
	function SetFlags($flags){}

	/**
	 * Call this to specify the new remaining parent client area, after the space occupied by the window has been subtracted.
	 * @param wxRect $rect
	 */
	function SetRect(wxRect $rect){}
}

class wxCalendarCtrl extends wxControl
{
	/**
	 * Default constructor.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param timestamp $date
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param string $name
	 */
	function __construct(wxWindow &$parent, $id, $date=wxDefaultDateTime, wxPoint $pos=null, wxSize $size=null, $style=wxCAL_SHOW_HOLIDAYS, $name=wxCalendarNameStr){}

	/**
	 * Creates the control.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param timestamp $date
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param string $name
	 * @return bool
	 */
	function Create(wxWindow &$parent, $id, $date=wxDefaultDateTime, wxPoint $pos=null, wxSize $size=null, $style=wxCAL_SHOW_HOLIDAYS, $name=wxCalendarNameStr){}

	/**
	 * This function should be used instead of changing wxCAL_SHOW_HOLIDAYS style bit directly.
	 * @param bool $display
	 */
	function EnableHolidayDisplay($display=true){}

	/**
	 * This function should be used instead of changing wxCAL_NO_MONTH_CHANGE style bit.
	 * @param bool $enable
	 * @return bool
	 */
	function EnableMonthChange($enable=true){}

	/**
	 * Returns the attribute for the given date (should be in the range 1...31).
	 * @param integer $day
	 * @return wxCalendarDateAttr
	 */
	function GetAttr($day){}

	/**
	 * Gets the currently selected date.
	 * @return timestamp
	 */
	function GetDate(){}

	/**
	 * Returns the limits currently being used.
	 * @param timestamp $lowerdate
	 * @param timestamp $upperdate
	 * @return bool
	 */
	function GetDateRange(&$lowerdate, &$upperdate){}

	/**
	 * Gets the background colour of the header part of the calendar window.
	 * @return wxColour
	 */
	function GetHeaderColourBg(){}

	/**
	 * Gets the foreground colour of the header part of the calendar window.
	 * @return wxColour
	 */
	function GetHeaderColourFg(){}

	/**
	 * Gets the background highlight colour.
	 * @return wxColour
	 */
	function GetHighlightColourBg(){}

	/**
	 * Gets the foreground highlight colour.
	 * @return wxColour
	 */
	function GetHighlightColourFg(){}

	/**
	 * Return the background colour currently used for holiday highlighting.
	 * @return wxColour
	 */
	function GetHolidayColourBg(){}

	/**
	 * Return the foreground colour currently used for holiday highlighting.
	 * @return wxColour
	 */
	function GetHolidayColourFg(){}

	/**
	 * Returns one of wxCalendarHitTestResult constants and fills either date or wd pointer with the corresponding value depending on the hit test code.
	 * @param wxPoint $pos
	 * @param timestamp $date
	 * @param wxDateTime::WeekDay $wd
	 * @return wxCalendarHitTestResult
	 */
	function HitTest(wxPoint $pos, &$date=NULL, &$wd=NULL){}

	/**
	 * Mark or unmark the day.
	 * @param integer $day
	 * @param bool $mark
	 */
	function Mark($day, $mark){}

	/**
	 * Clears any attributes associated with the given day (in the range 1...31).
	 * @param integer $day
	 */
	function ResetAttr($day){}

	/**
	 * Associates the attribute with the specified date (in the range 1...31).
	 * @param integer $day
	 * @param wxCalendarDateAttr $attr
	 */
	function SetAttr($day, wxCalendarDateAttr &$attr){}

	/**
	 * Sets the current date.
	 * @param timestamp $date
	 * @return bool
	 */
	function SetDate($date){}

	/**
	 * Restrict the dates that can be selected in the control to the specified range.
	 * @param timestamp $lowerdate
	 * @param timestamp $upperdate
	 * @return bool
	 */
	function SetDateRange($lowerdate=wxDefaultDateTime, $upperdate=wxDefaultDateTime){}

	/**
	 * Set the colours used for painting the weekdays at the top of the control.
	 * @param wxColour $colFg
	 * @param wxColour $colBg
	 */
	function SetHeaderColours(wxColour $colFg, wxColour $colBg){}

	/**
	 * Set the colours to be used for highlighting the currently selected date.
	 * @param wxColour $colFg
	 * @param wxColour $colBg
	 */
	function SetHighlightColours(wxColour $colFg, wxColour $colBg){}

	/**
	 * Marks the specified day as being a holiday in the current month.
	 * @param integer $day
	 */
	function SetHoliday($day){}

	/**
	 * Sets the colours to be used for the holidays highlighting.
	 * @param wxColour $colFg
	 * @param wxColour $colBg
	 */
	function SetHolidayColours(wxColour $colFg, wxColour $colBg){}
}

class wxCalendarDateAttr
{
	/**
	 * Constructor using default properties except the given border.
	 * @param integer $border
	 * @param wxColour $colBorder
	 * @param wxColour $colText
	 * @param wxColour $colBack
	 * @param wxFont $font
	 */
	function __construct($border, wxColour $colBorder=null, wxColour $colText=null, wxColour $colBack=null, wxColour $colBorder=null, wxFont $font=null, $border=wxCAL_BORDER_NONE){}

	/**
	 * Returns the background colour set for the calendar date.
	 * @return wxColour
	 */
	function GetBackgroundColour(){}

	/**
	 * Returns the border set for the calendar date.
	 * @return integer
	 */
	function GetBorder(){}

	/**
	 * Returns the border colour set for the calendar date.
	 * @return wxColour
	 */
	function GetBorderColour(){}

	/**
	 * Returns the font set for the calendar date.
	 * @return wxFont
	 */
	function GetFont(){}

	/**
	 * Used (internally) by the generic wxCalendarCtrl::Mark().
	 * @return wxCalendarDateAttr
	 */
	function GetMark(){}

	/**
	 * Returns the text colour set for the calendar date.
	 * @return wxColour
	 */
	function GetTextColour(){}

	/**
	 * Returns true if a non-default text background colour is set.
	 * @return bool
	 */
	function HasBackgroundColour(){}

	/**
	 * Returns true if a non-default (i.e.
	 * @return bool
	 */
	function HasBorder(){}

	/**
	 * Returns true if a non-default border colour is set.
	 * @return bool
	 */
	function HasBorderColour(){}

	/**
	 * Returns true if a non-default font is set.
	 * @return bool
	 */
	function HasFont(){}

	/**
	 * Returns true if a non-default text foreground colour is set.
	 * @return bool
	 */
	function HasTextColour(){}

	/**
	 * Returns true if this calendar day is displayed as a holiday.
	 * @return bool
	 */
	function IsHoliday(){}

	/**
	 * Sets the text background colour to use.
	 * @param wxColour $colBack
	 */
	function SetBackgroundColour(wxColour $colBack){}

	/**
	 * Sets the border to use.
	 * @param integer $border
	 */
	function SetBorder($border){}

	/**
	 * Sets the border colour to use.
	 * @param wxColour $col
	 */
	function SetBorderColour(wxColour $col){}

	/**
	 * Sets the font to use.
	 * @param wxFont $font
	 */
	function SetFont(wxFont $font){}

	/**
	 * If holiday is true, this calendar day will be displayed as a holiday.
	 * @param bool $holiday
	 */
	function SetHoliday($holiday){}

	/**
	 * Set the attributes that will be used to Mark() days on the generic wxCalendarCtrl.
	 * @param wxCalendarDateAttr $m
	 */
	function SetMark(wxCalendarDateAttr $m){}

	/**
	 * Sets the text (foreground) colour to use.
	 * @param wxColour $colText
	 */
	function SetTextColour(wxColour $colText){}
}

class wxCalendarEvent extends wxDateEvent
{
	/**
	 * Returns the week day on which the user clicked in EVT_CALENDAR_WEEKDAY_CLICKED handler.
	 * @return wxDateTime::WeekDay
	 */
	function GetWeekDay(){}

	/**
	 * Sets the week day carried by the event, normally only used by the library internally.
	 * @param wxDateTime::WeekDay $day
	 */
	function SetWeekDay($day){}
}

class wxCaret
{
	/**
	 * Default constructor.
	 * @param wxWindow $window
	 * @param integer $width
	 * @param integer $height
	 */
	function __construct(wxWindow &$window, $width, $height){}

	/**
	 * Returns the blink time which is measured in milliseconds and is the time elapsed between 2 inversions of the caret (blink time of the caret is the same for all carets, so this functions is static).
	 * @return integer
	 */
	function GetBlinkTime(){}

	/**
	 * Get the caret position (in pixels).
	 * @param integer $x
	 * @param integer $y
	 */
	function GetPosition(&$x, &$y){}

	/**
	 * Get the caret size.
	 * @param integer $width
	 * @param integer $height
	 */
	function GetSize(&$width, &$height){}

	/**
	 * Get the window the caret is associated with.
	 * @return wxWindow
	 */
	function GetWindow(){}

	/**
	 * Hides the caret, same as Show(false).
	 */
	function Hide(){}

	/**
	 * Returns true if the caret was created successfully.
	 * @return bool
	 */
	function IsOk(){}

	/**
	 * Returns true if the caret is visible and false if it is permanently hidden (if it is blinking and not shown currently but will be after the next blink, this method still returns true).
	 * @return bool
	 */
	function IsVisible(){}

	/**
	 * Move the caret to given position (in logical coordinates).
	 * @param wxPoint $pt
	 * @param integer $x
	 * @param integer $y
	 */
	function Move(wxPoint $pt, $x, $y){}

	/**
	 * Sets the blink time for all the carets.
	 * @param integer $milliseconds
	 */
	function SetBlinkTime($milliseconds){}

	/**
	 * Changes the size of the caret.
	 * @param wxSize $size
	 * @param integer $width
	 * @param integer $height
	 */
	function SetSize(wxSize $size, $width, $height){}

	/**
	 * Shows or hides the caret.
	 * @param bool $show
	 */
	function Show($show=true){}
}

class wxCheckBox extends wxControl
{
	/**
	 * Constructor, creating and showing a checkbox.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param string $label
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param wxValidator $validator
	 * @param string $name
	 */
	function __construct(wxWindow &$parent, $id, $label, wxPoint $pos=null, wxSize $size=null, $style, wxValidator $validator=null, $name=wxCheckBoxNameStr){}

	/**
	 * Creates the checkbox for two-step construction.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param string $label
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param wxValidator $validator
	 * @param string $name
	 * @return bool
	 */
	function Create(wxWindow &$parent, $id, $label, wxPoint $pos=null, wxSize $size=null, $style, wxValidator $validator=null, $name=wxCheckBoxNameStr){}

	/**
	 * Gets the state of a 3-state checkbox.
	 * @return wxCheckBoxState
	 */
	function Get3StateValue(){}

	/**
	 * Gets the state of a 2-state checkbox.
	 * @return bool
	 */
	function GetValue(){}

	/**
	 * Returns whether or not the checkbox is a 3-state checkbox.
	 * @return bool
	 */
	function Is3State(){}

	/**
	 * Returns whether or not the user can set the checkbox to the third state.
	 * @return bool
	 */
	function Is3rdStateAllowedForUser(){}

	/**
	 * This is just a maybe more readable synonym for GetValue(): just as the latter, it returns true if the checkbox is checked and false otherwise.
	 * @return bool
	 */
	function IsChecked(){}

	/**
	 * Sets the checkbox to the given state.
	 * @param wxCheckBoxState $state
	 */
	function Set3StateValue(wxCheckBoxState $state){}

	/**
	 * Sets the checkbox to the given state.
	 * @param bool $state
	 */
	function SetValue($state){}
}

class wxCheckListBox extends wxListBox
{
	/**
	 * Default constructor.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param array $choices
	 * @param integer $style
	 * @param wxValidator $validator
	 * @param string $name
	 */
	function __construct(wxWindow &$parent, $id, wxPoint $pos, wxSize $size, array $choices, $style, wxValidator $validator=null, $name="listBox"){}

	/**
	 * Checks the given item.
	 * @param integer $item
	 * @param bool $check
	 */
	function Check($item, $check=true){}

	/**
	 * Creates the listbox for two-step construction.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $n
	 * @param string $choices
	 * @param integer $style
	 * @param wxValidator $validator
	 * @param string $name
	 * @return bool
	 */
	function Create(wxWindow &$parent, $id, wxPoint $pos=null, wxSize $size=null, $n, $choices=NULL, $style, wxValidator $validator=null, $name=wxListBoxNameStr, wxWindow &$parent, $id, wxPoint $pos, wxSize $size, array $choices, $style, wxValidator $validator=null, $name=wxListBoxNameStr){}

	/**
	 * Returns true if the given item is checked, false otherwise.
	 * @param integer $item
	 * @return bool
	 */
	function IsChecked($item){}
}

class wxChildFocusEvent extends wxCommandEvent
{
	/**
	 * Constructor.
	 * @param wxWindow $win
	 */
	function __construct(wxWindow &$win=null){}

	/**
	 * Returns the direct child which receives the focus, or a (grand-)parent of the control receiving the focus.
	 * @return wxWindow
	 */
	function GetWindow(){}
}

class wxChoice extends wxControlWithItems
{
	/**
	 * Default constructor.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param array $choices
	 * @param integer $style
	 * @param wxValidator $validator
	 * @param string $name
	 */
	function __construct(wxWindow &$parent, $id, wxPoint $pos, wxSize $size, array $choices, $style, wxValidator $validator=null, $name=wxChoiceNameStr){}

	/**
	 * Creates the choice for two-step construction.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param array $choices
	 * @param integer $style
	 * @param wxValidator $validator
	 * @param string $name
	 * @param integer $n
	 * @return bool
	 */
	function Create(wxWindow &$parent, $id, wxPoint $pos, wxSize $size, array $choices, $style, wxValidator $validator=null, $name=wxChoiceNameStr, wxWindow &$parent, $id, wxPoint $pos=null, wxSize $size=null, $n, $choices=NULL, $style, wxValidator $validator=null, $name=wxChoiceNameStr){}

	/**
	 * Finds an item whose label matches the given string.
	 * @param string $string
	 * @param bool $caseSensitive
	 * @return integer
	 */
	function FindString($string, $caseSensitive=false){}

	/**
	 * Gets the number of columns in this choice item.
	 * @return integer
	 */
	function GetColumns(){}

	/**
	 * Returns the number of items in the control.
	 * @return integer
	 */
	function GetCount(){}

	/**
	 * Unlike wxControlWithItems::GetSelection() which only returns the accepted selection value, i.e.
	 * @return integer
	 */
	function GetCurrentSelection(){}

	/**
	 * Returns the index of the selected item or wxNOT_FOUND if no item is selected.
	 * @return integer
	 */
	function GetSelection(){}

	/**
	 * Returns the label of the item with the given index.
	 * @param integer $n
	 * @return string
	 */
	function GetString($n){}

	/**
	 * IsSorted
	 * @return bool
	 */
	function IsSorted(){}

	/**
	 * Sets the number of columns in this choice item.
	 * @param integer $n
	 */
	function SetColumns($n=1){}

	/**
	 * Sets the selection to the given item n or removes the selection entirely if n == wxNOT_FOUND.
	 * @param integer $n
	 */
	function SetSelection($n){}

	/**
	 * Sets the label for the given item.
	 * @param integer $n
	 * @param string $string
	 */
	function SetString($n, $string){}
}

class wxChoicebook extends wxBookCtrlBase
{
	/**
	 * Constructs a choicebook control.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param string $name
	 */
	function __construct(wxWindow &$parent, $id, wxPoint $pos=null, wxSize $size=null, $style, $name=wxEmptyString){}

	/**
	 * Returns the wxChoice associated with the control.
	 * @return wxChoice
	 */
	function GetChoiceCtrl(){}
}

class wxClassInfo
{
	/**
	 * Creates an object of the appropriate kind.
	 * @return wxObject
	 */
	function CreateObject(){}

	/**
	 * Finds the wxClassInfo object for a class with the given name.
	 * @param string $className
	 * @return wxClassInfo
	 */
	function FindClass($className){}

	/**
	 * Returns the size of the class.
	 * @return integer
	 */
	function GetSize(){}

	/**
	 * Returns true if this class info can create objects of the associated class.
	 * @return bool
	 */
	function IsDynamic(){}

	/**
	 * Returns true if this class is a kind of (inherits from) the given class.
	 * @param wxClassInfo $info
	 * @return bool
	 */
	function IsKindOf(wxClassInfo $info){}
}

class wxClientDC extends wxWindowDC
{
	/**
	 * Constructor.
	 * @param wxWindow $window
	 */
	function __construct(wxWindow &$window){}
}

class wxClientData
{
	/**
	 * Constructor.
	 */
	function __construct(){}
}

class wxClipboard extends wxObject
{
	/**
	 * Default constructor.
	 */
	function __construct(){}

	/**
	 * Call this function to add the data object to the clipboard.
	 * @param wxDataObject $data
	 * @return bool
	 */
	function AddData(wxDataObject &$data){}

	/**
	 * Clears the global clipboard object and the system's clipboard if possible.
	 */
	function Clear(){}

	/**
	 * Call this function to close the clipboard, having opened it with Open().
	 */
	function Close(){}

	/**
	 * Flushes the clipboard: this means that the data which is currently on clipboard will stay available even after the application exits (possibly eating memory), otherwise the clipboard will be emptied on exit.
	 * @return bool
	 */
	function Flush(){}

	/**
	 * Call this function to fill data with data on the clipboard, if available in the required format.
	 * @param wxDataObject $data
	 * @return bool
	 */
	function GetData(wxDataObject &$data){}

	/**
	 * Returns true if the clipboard has been opened.
	 * @return bool
	 */
	function IsOpened(){}

	/**
	 * Returns true if there is data which matches the data format of the given data object currently available on the clipboard.
	 * @param wxDataFormat $format
	 * @return bool
	 */
	function IsSupported(wxDataFormat $format){}

	/**
	 * Returns true if we are using the primary selection, false if clipboard one.
	 * @return bool
	 */
	function IsUsingPrimarySelection(){}

	/**
	 * Call this function to open the clipboard before calling SetData() and GetData().
	 * @return bool
	 */
	function Open(){}

	/**
	 * Call this function to set the data object to the clipboard.
	 * @param wxDataObject $data
	 * @return bool
	 */
	function SetData(wxDataObject &$data){}

	/**
	 * On platforms supporting it (all X11-based ports), wxClipboard uses the CLIPBOARD X11 selection by default.
	 * @param bool $primary
	 */
	function UsePrimarySelection($primary=false){}
}

class wxClipboardTextEvent extends wxCommandEvent
{
	/**
	 * Constructor.
	 * @param integer $commandType
	 * @param integer $id
	 */
	function __construct($commandType=wxEVT_NULL, $id){}
}

class wxCloseEvent extends wxEvent
{
	/**
	 * Constructor.
	 * @param integer $commandEventType
	 * @param integer $id
	 */
	function __construct($commandEventType=wxEVT_NULL, $id){}

	/**
	 * Returns true if you can veto a system shutdown or a window close event.
	 * @return bool
	 */
	function CanVeto(){}

	/**
	 * Returns true if the user is just logging off or false if the system is shutting down.
	 * @return bool
	 */
	function GetLoggingOff(){}

	/**
	 * Sets the 'can veto' flag.
	 * @param bool $canVeto
	 */
	function SetCanVeto($canVeto){}

	/**
	 * Sets the 'logging off' flag.
	 * @param bool $loggingOff
	 */
	function SetLoggingOff($loggingOff){}

	/**
	 * Call this from your event handler to veto a system shutdown or to signal to the calling application that a window close did not happen.
	 * @param bool $veto
	 */
	function Veto($veto=true){}
}

class wxCollapsiblePane extends wxControl
{
	/**
	 * Initializes the object and calls Create() with all the parameters.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param string $label
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param wxValidator $validator
	 * @param string $name
	 */
	function __construct(wxWindow &$parent, $id, $label, wxPoint $pos=null, wxSize $size=null, $style=wxCP_DEFAULT_STYLE, wxValidator $validator=null, $name=wxCollapsiblePaneNameStr){}

	/**
	 * Collapses or expands the pane window.
	 * @param bool $collapse
	 */
	function Collapse($collapse=true){}

	/**
	 * Create
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param string $label
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param wxValidator $validator
	 * @param string $name
	 * @return bool
	 */
	function Create(wxWindow &$parent, $id, $label, wxPoint $pos=null, wxSize $size=null, $style=wxCP_DEFAULT_STYLE, wxValidator $validator=null, $name=wxCollapsiblePaneNameStr){}

	/**
	 * Same as calling Collapse(false).
	 */
	function Expand(){}

	/**
	 * Returns a pointer to the pane window.
	 * @return wxWindow
	 */
	function GetPane(){}

	/**
	 * Returns true if the pane window is currently hidden.
	 * @return bool
	 */
	function IsCollapsed(){}

	/**
	 * Returns true if the pane window is currently shown.
	 * @return bool
	 */
	function IsExpanded(){}
}

class wxCollapsiblePaneEvent extends wxCommandEvent
{
	/**
	 * The constructor is not normally used by the user code.
	 * @param wxObject $generator
	 * @param integer $id
	 * @param bool $collapsed
	 */
	function __construct(wxObject &$generator, $id, $collapsed){}

	/**
	 * Returns true if the pane has been collapsed.
	 * @return bool
	 */
	function GetCollapsed(){}

	/**
	 * Sets this as a collapsed pane event (if collapsed is true) or as an expanded pane event (if collapsed is false).
	 * @param bool $collapsed
	 */
	function SetCollapsed($collapsed){}
}

class wxColour extends wxObject
{
	/**
	 * wxColour
	 * @param integer $red
	 * @param integer $green
	 * @param integer $blue
	 * @param integer $alpha
	 * @param string $colourName
	 * @param integer $colRGB
	 * @param wxColour $colour
	 */
	function __construct($red, $green, $blue, $alpha=wxALPHA_OPAQUE, $colourName, $colRGB, wxColour $colour){}

	/**
	 * Returns the alpha value, on platforms where alpha is not yet supported, this always returns wxALPHA_OPAQUE.
	 * @return integer
	 */
	function Alpha(){}

	/**
	 * Returns the blue intensity.
	 * @return integer
	 */
	function Blue(){}

	/**
	 * Gets the RGB or RGBA colour values as a single 32 bit value.
	 * @return integer
	 */
	function GetRGB(){}

	/**
	 * Gets the RGB or RGBA colour values as a single 32 bit value.
	 * @return integer
	 */
	function GetRGBA(){}

	/**
	 * Returns the green intensity.
	 * @return integer
	 */
	function Green(){}

	/**
	 * Returns the red intensity.
	 * @return integer
	 */
	function Red(){}

	/**
	 * Sets the RGB intensity values using the given values (first overload), extracting them from the packed long (second overload), using the given string (third overload).
	 * @param integer $RGB
	 * @param integer $red
	 * @param integer $green
	 * @param integer $blue
	 * @param integer $alpha
	 * @param string $str
	 * @return bool
	 */
	function Set($RGB, $red, $green, $blue, $alpha=wxALPHA_OPAQUE, $str){}

	/**
	 * Sets the RGB or RGBA colour values from a single 32 bit value.
	 * @param integer $colRGB
	 */
	function SetRGB($colRGB){}

	/**
	 * Sets the RGB or RGBA colour values from a single 32 bit value.
	 * @param integer $colRGBA
	 */
	function SetRGBA($colRGBA){}
}

class wxColourData extends wxObject
{
	/**
	 * Constructor.
	 */
	function __construct(){}

	/**
	 * Decodes the given string, which should be in the same format returned by ToString(), and sets the internal colours.
	 * @param string $str
	 * @return bool
	 */
	function FromString($str){}

	/**
	 * Under Windows, determines whether the Windows colour dialog will display the full dialog with custom colour selection controls.
	 * @return bool
	 */
	function GetChooseFull(){}

	/**
	 * Gets the current colour associated with the colour dialog.
	 * @return wxColour
	 */
	function GetColour(){}

	/**
	 * Returns custom colours associated with the colour dialog.
	 * @param integer $i
	 * @return wxColour
	 */
	function GetCustomColour($i){}

	/**
	 * Under Windows, tells the Windows colour dialog to display the full dialog with custom colour selection controls.
	 * @param bool $flag
	 */
	function SetChooseFull($flag){}

	/**
	 * Sets the default colour for the colour dialog.
	 * @param wxColour $colour
	 */
	function SetColour(wxColour $colour){}

	/**
	 * Sets custom colours for the colour dialog.
	 * @param integer $i
	 * @param wxColour $colour
	 */
	function SetCustomColour($i, wxColour $colour){}

	/**
	 * Converts the colours saved in this class in a string form, separating the various colours with a comma.
	 * @return string
	 */
	function ToString(){}
}

class wxColourDatabase
{
	/**
	 * Constructs the colour database.
	 */
	function __construct(){}

	/**
	 * Adds a colour to the database.
	 * @param string $colourName
	 * @param wxColour $colour
	 */
	function AddColour($colourName, wxColour $colour){}

	/**
	 * Finds a colour given the name.
	 * @param string $colourName
	 * @return wxColour
	 */
	function Find($colourName){}

	/**
	 * Finds a colour name given the colour.
	 * @param wxColour $colour
	 * @return string
	 */
	function FindName(wxColour $colour){}
}

class wxColourDialog extends wxDialog
{
	/**
	 * Constructor.
	 * @param wxWindow $parent
	 * @param wxColourData $data
	 */
	function __construct(wxWindow &$parent, wxColourData &$data=null){}

	/**
	 * Same as wxColourDialog().
	 * @param wxWindow $parent
	 * @param wxColourData $data
	 * @return bool
	 */
	function Create(wxWindow &$parent, wxColourData &$data=null){}

	/**
	 * Returns the colour data associated with the colour dialog.
	 * @return wxColourData
	 */
	function GetColourData(){}

	/**
	 * Shows the dialog, returning wxID_OK if the user pressed OK, and wxID_CANCEL otherwise.
	 * @return integer
	 */
	function ShowModal(){}
}

class wxColourPickerCtrl extends wxPickerBase
{
	/**
	 * Initializes the object and calls Create() with all the parameters.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param wxColour $colour
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param wxValidator $validator
	 * @param string $name
	 */
	function __construct(wxWindow &$parent, $id, wxColour $colour=null, wxPoint $pos=null, wxSize $size=null, $style=wxCLRP_DEFAULT_STYLE, wxValidator $validator=null, $name=wxColourPickerCtrlNameStr){}

	/**
	 * Creates a colour picker with the given arguments.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param wxColour $colour
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param wxValidator $validator
	 * @param string $name
	 * @return bool
	 */
	function Create(wxWindow &$parent, $id, wxColour $colour=null, wxPoint $pos=null, wxSize $size=null, $style=wxCLRP_DEFAULT_STYLE, wxValidator $validator=null, $name=wxColourPickerCtrlNameStr){}

	/**
	 * Returns the currently selected colour.
	 * @return wxColour
	 */
	function GetColour(){}

	/**
	 * Sets the currently selected colour.
	 * @param wxColour $col
	 * @param string $colname
	 */
	function SetColour(wxColour $col, $colname){}
}

class wxColourPickerEvent extends wxCommandEvent
{
	/**
	 * The constructor is not normally used by the user code.
	 * @param wxObject $generator
	 * @param integer $id
	 * @param wxColour $colour
	 */
	function __construct(wxObject &$generator, $id, wxColour $colour){}

	/**
	 * Retrieve the colour the user has just selected.
	 * @return wxColour
	 */
	function GetColour(){}

	/**
	 * Set the colour associated with the event.
	 * @param wxColour $pos
	 */
	function SetColour(wxColour $pos){}
}

class wxComboBox extends wxControl
{
	/**
	 * Constructor, creating and showing a combobox.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param string $value
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param array $choices
	 * @param integer $style
	 * @param wxValidator $validator
	 * @param string $name
	 */
	function __construct(wxWindow &$parent, $id, $value, wxPoint $pos, wxSize $size, array $choices, $style, wxValidator $validator=null, $name=wxComboBoxNameStr){}

	/**
	 * Creates the combobox for two-step construction.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param string $value
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $n
	 * @param string $choices
	 * @param integer $style
	 * @param wxValidator $validator
	 * @param string $name
	 * @return bool
	 */
	function Create(wxWindow &$parent, $id, $value=wxEmptyString, wxPoint $pos=null, wxSize $size=null, $n, $choices=null, $style, wxValidator $validator=null, $name=wxComboBoxNameStr, wxWindow &$parent, $id, $value, wxPoint $pos, wxSize $size, array $choices, $style, wxValidator $validator=null, $name=wxComboBoxNameStr){}

	/**
	 * Hides the list box portion of the combo box.
	 */
	function Dismiss(){}

	/**
	 * Finds an item whose label matches the given string.
	 * @param string $string
	 * @param bool $caseSensitive
	 * @return integer
	 */
	function FindString($string, $caseSensitive=false){}

	/**
	 * Returns the number of items in the control.
	 * @return integer
	 */
	function GetCount(){}

	/**
	 * Returns the item being selected right now.
	 * @return integer
	 */
	function GetCurrentSelection(){}

	/**
	 * Same as wxTextEntry::GetInsertionPoint().
	 * @return integer
	 */
	function GetInsertionPoint(){}

	/**
	 * Returns the index of the selected item or wxNOT_FOUND if no item is selected.
	 * @param integer $from
	 * @param integer $to
	 */
	function GetSelection(&$from, &$to){}

	/**
	 * Returns the label of the item with the given index.
	 * @param integer $n
	 * @return string
	 */
	function GetString($n){}

	/**
	 * Gets the text currently selected in the control.
	 * @return string
	 */
	function GetStringSelection(){}

	/**
	 * Returns true if the list of combobox choices is empty.
	 * @return bool
	 */
	function IsListEmpty(){}

	/**
	 * Returns true if the text of the combobox is empty.
	 * @return bool
	 */
	function IsTextEmpty(){}

	/**
	 * Shows the list box portion of the combo box.
	 */
	function Popup(){}

	/**
	 * Sets the selection to the given item n or removes the selection entirely if n == wxNOT_FOUND.
	 * @param integer $n
	 * @param integer $from
	 * @param integer $to
	 */
	function SetSelection($n, $from, $to){}

	/**
	 * Changes the text of the specified combobox item.
	 * @param integer $n
	 * @param string $text
	 */
	function SetString($n, $text){}

	/**
	 * Sets the text for the combobox text field.
	 * @param string $text
	 */
	function SetValue($text){}
}

class wxComboCtrl extends wxTextEntry
{
	/**
	 * Default constructor.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param string $value
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param wxValidator $validator
	 * @param string $name
	 */
	function __construct(wxWindow &$parent, $id=wxID_ANY, $value=wxEmptyString, wxPoint $pos=null, wxSize $size=null, $style, wxValidator $validator=null, $name=wxComboBoxNameStr){}

	/**
	 * This member function is not normally called in application code.
	 * @param wxRect $rect
	 * @param integer $flags
	 * @return bool
	 */
	function AnimateShow(wxRect $rect, $flags){}

	/**
	 * Copies the selected text to the clipboard.
	 */
	function Copy(){}

	/**
	 * Creates the combo control for two-step construction.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param string $value
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param wxValidator $validator
	 * @param string $name
	 * @return bool
	 */
	function Create(wxWindow &$parent, $id=wxID_ANY, $value=wxEmptyString, wxPoint $pos=null, wxSize $size=null, $style, wxValidator $validator=null, $name=wxComboBoxNameStr){}

	/**
	 * Copies the selected text to the clipboard and removes the selection.
	 */
	function Cut(){}

	/**
	 * Dismisses the popup window.
	 */
	function Dismiss(){}

	/**
	 * This member function is not normally called in application code.
	 * @param wxComboPopup $popup
	 */
	function DoSetPopupControl(wxComboPopup &$popup){}

	/**
	 * This member function is not normally called in application code.
	 * @param wxRect $rect
	 * @param integer $flags
	 */
	function DoShowPopup(wxRect $rect, $flags){}

	/**
	 * Enables or disables popup animation, if any, depending on the value of the argument.
	 * @param bool $enable
	 */
	function EnablePopupAnimation($enable=true){}

	/**
	 * Returns disabled button bitmap that has been set with SetButtonBitmaps().
	 * @return wxBitmap
	 */
	function GetBitmapDisabled(){}

	/**
	 * Returns button mouse hover bitmap that has been set with SetButtonBitmaps().
	 * @return wxBitmap
	 */
	function GetBitmapHover(){}

	/**
	 * Returns default button bitmap that has been set with SetButtonBitmaps().
	 * @return wxBitmap
	 */
	function GetBitmapNormal(){}

	/**
	 * Returns depressed button bitmap that has been set with SetButtonBitmaps().
	 * @return wxBitmap
	 */
	function GetBitmapPressed(){}

	/**
	 * Returns current size of the dropdown button.
	 * @return wxSize
	 */
	function GetButtonSize(){}

	/**
	 * Returns custom painted area in control.
	 * @return integer
	 */
	function GetCustomPaintWidth(){}

	/**
	 * Returns features supported by wxComboCtrl.
	 * @return integer
	 */
	function GetFeatures(){}

	/**
	 * Returns the current hint string.
	 * @return string
	 */
	function GetHint(){}

	/**
	 * Returns the insertion point for the combo control's text field.
	 * @return integer
	 */
	function GetInsertionPoint(){}

	/**
	 * Returns the last position in the combo control text field.
	 * @return integer
	 */
	function GetLastPosition(){}

	/**
	 * Returns the margins used by the control.
	 * @return wxPoint
	 */
	function GetMargins(){}

	/**
	 * Returns current popup interface that has been set with SetPopupControl().
	 * @return wxComboPopup
	 */
	function GetPopupControl(){}

	/**
	 * Returns popup window containing the popup control.
	 * @return wxWindow
	 */
	function GetPopupWindow(){}

	/**
	 * Get the text control which is part of the combo control.
	 * @return wxTextCtrl
	 */
	function GetTextCtrl(){}

	/**
	 * Returns actual indentation in pixels.
	 * @return integer
	 */
	function GetTextIndent(){}

	/**
	 * Returns area covered by the text field (includes everything except borders and the dropdown button).
	 * @return wxRect
	 */
	function GetTextRect(){}

	/**
	 * Returns text representation of the current value.
	 * @return string
	 */
	function GetValue(){}

	/**
	 * Dismisses the popup window.
	 * @param bool $generateEvent
	 */
	function HidePopup($generateEvent=false){}

	/**
	 * Returns true if the popup is currently shown.
	 * @return bool
	 */
	function IsPopupShown(){}

	/**
	 * Returns true if the popup window is in the given state.
	 * @param integer $state
	 * @return bool
	 */
	function IsPopupWindowState($state){}

	/**
	 * Implement in a derived class to define what happens on dropdown button click.
	 */
	function OnButtonClick(){}

	/**
	 * Pastes text from the clipboard to the text field.
	 */
	function Paste(){}

	/**
	 * Shows the popup portion of the combo control.
	 */
	function Popup(){}

	/**
	 * Removes the text between the two positions in the combo control text field.
	 * @param integer $from
	 * @param integer $to
	 */
	function Remove($from, $to){}

	/**
	 * Replaces the text between two positions with the given text, in the combo control text field.
	 * @param integer $from
	 * @param integer $to
	 * @param string $text
	 */
	function Replace($from, $to, $text){}

	/**
	 * Sets custom dropdown button graphics.
	 * @param wxBitmap $bmpNormal
	 * @param bool $pushButtonBg
	 * @param wxBitmap $bmpPressed
	 * @param wxBitmap $bmpHover
	 * @param wxBitmap $bmpDisabled
	 */
	function SetButtonBitmaps(wxBitmap $bmpNormal, $pushButtonBg=false, wxBitmap $bmpPressed=null, wxBitmap $bmpHover=null, wxBitmap $bmpDisabled=null){}

	/**
	 * Sets size and position of dropdown button.
	 * @param integer $width
	 * @param integer $height
	 * @param integer $side
	 * @param integer $spacingX
	 */
	function SetButtonPosition($width=-1, $height=-1, $side=wxRIGHT, $spacingX){}

	/**
	 * Set width, in pixels, of custom painted area in control without wxCB_READONLY style.
	 * @param integer $width
	 */
	function SetCustomPaintWidth($width){}

	/**
	 * Sets a hint shown in an empty unfocused combo control.
	 * @param string $hint
	 * @return bool
	 */
	function SetHint($hint){}

	/**
	 * Sets the insertion point in the text field.
	 * @param integer $pos
	 */
	function SetInsertionPoint($pos){}

	/**
	 * Sets the insertion point at the end of the combo control text field.
	 */
	function SetInsertionPointEnd(){}

	/**
	 * Attempts to set the control margins.
	 * @param integer $left
	 * @param integer $top
	 * @param wxPoint $pt
	 * @return bool
	 */
	function SetMargins($left, $top=-1, wxPoint $pt){}

	/**
	 * Set side of the control to which the popup will align itself.
	 * @param integer $anchorSide
	 */
	function SetPopupAnchor($anchorSide){}

	/**
	 * Set popup interface class derived from wxComboPopup.
	 * @param wxComboPopup $popup
	 */
	function SetPopupControl(wxComboPopup &$popup){}

	/**
	 * Extends popup size horizontally, relative to the edges of the combo control.
	 * @param integer $extLeft
	 * @param integer $extRight
	 */
	function SetPopupExtents($extLeft, $extRight){}

	/**
	 * Sets preferred maximum height of the popup.
	 * @param integer $height
	 */
	function SetPopupMaxHeight($height){}

	/**
	 * Sets minimum width of the popup.
	 * @param integer $width
	 */
	function SetPopupMinWidth($width){}

	/**
	 * Selects the text between the two positions, in the combo control text field.
	 * @param integer $from
	 * @param integer $to
	 */
	function SetSelection($from, $to){}

	/**
	 * Sets the text for the text field without affecting the popup.
	 * @param string $value
	 */
	function SetText($value){}

	/**
	 * Set a custom window style for the embedded wxTextCtrl.
	 * @param integer $style
	 */
	function SetTextCtrlStyle($style){}

	/**
	 * This will set the space in pixels between left edge of the control and the text, regardless whether control is read-only or not.
	 * @param integer $indent
	 */
	function SetTextIndent($indent){}

	/**
	 * Sets the text for the combo control text field.
	 * @param string $value
	 */
	function SetValue($value){}

	/**
	 * Show the popup.
	 */
	function ShowPopup(){}

	/**
	 * Undoes the last edit in the text field.
	 */
	function Undo(){}

	/**
	 * Enable or disable usage of an alternative popup window, which guarantees ability to focus the popup control, and allows common native controls to function normally.
	 * @param bool $enable
	 */
	function UseAltPopupWindow($enable=true){}
}

class wxComboPopup
{
	/**
	 * Default constructor.
	 */
	function __construct(){}

	/**
	 * The derived class must implement this to create the popup control.
	 * @param wxWindow $parent
	 * @return bool
	 */
	function Create(wxWindow &$parent){}

	/**
	 * You only need to implement this member function if you create your popup class in non-standard way.
	 */
	function DestroyPopup(){}

	/**
	 * Utility function that hides the popup.
	 */
	function Dismiss(){}

	/**
	 * Implement to customize matching of value string to an item container entry.
	 * @param string $item
	 * @param string $trueItem
	 * @return bool
	 */
	function FindItem($item, &$trueItem=NULL){}

	/**
	 * The derived class may implement this to return adjusted size for the popup control, according to the variables given.
	 * @param integer $minWidth
	 * @param integer $prefHeight
	 * @param integer $maxHeight
	 * @return wxSize
	 */
	function GetAdjustedSize($minWidth, $prefHeight, $maxHeight){}

	/**
	 * Returns pointer to the associated parent wxComboCtrl.
	 * @return wxComboCtrl
	 */
	function GetComboCtrl(){}

	/**
	 * The derived class must implement this to return pointer to the associated control created in Create().
	 * @return wxWindow
	 */
	function GetControl(){}

	/**
	 * The derived class must implement this to return string representation of the value.
	 * @return string
	 */
	function GetStringValue(){}

	/**
	 * The derived class must implement this to initialize its internal variables.
	 */
	function Init(){}

	/**
	 * Utility method that returns true if Create has been called.
	 * @return bool
	 */
	function IsCreated(){}

	/**
	 * The derived class may implement this to return true if it wants to delay call to Create() until the popup is shown for the first time.
	 * @return bool
	 */
	function LazyCreate(){}

	/**
	 * The derived class may implement this to do something when the parent wxComboCtrl gets double-clicked.
	 */
	function OnComboDoubleClick(){}

	/**
	 * The derived class may implement this to receive key events from the parent wxComboCtrl.
	 * @param wxKeyEvent $event
	 */
	function OnComboKeyEvent(wxKeyEvent &$event){}

	/**
	 * The derived class may implement this to do special processing when popup is hidden.
	 */
	function OnDismiss(){}

	/**
	 * The derived class may implement this to do special processing when popup is shown.
	 */
	function OnPopup(){}

	/**
	 * The derived class may implement this to paint the parent wxComboCtrl.
	 * @param wxDC $dc
	 * @param wxRect $rect
	 */
	function PaintComboControl(wxDC &$dc, wxRect $rect){}

	/**
	 * The derived class must implement this to receive string value changes from wxComboCtrl.
	 * @param string $value
	 */
	function SetStringValue($value){}
}

class wxCommandEvent extends wxEvent
{
	/**
	 * Constructor.
	 * @param integer $commandEventType
	 * @param integer $id
	 */
	function __construct($commandEventType=wxEVT_NULL, $id){}

	/**
	 * Returns extra information dependent on the event objects type.
	 * @return integer
	 */
	function GetExtraLong(){}

	/**
	 * Returns the integer identifier corresponding to a listbox, choice or radiobox selection (only if the event was a selection, not a deselection), or a boolean value representing the value of a checkbox.
	 * @return integer
	 */
	function GetInt(){}

	/**
	 * Returns item index for a listbox or choice selection event (not valid for a deselection).
	 * @return integer
	 */
	function GetSelection(){}

	/**
	 * Returns item string for a listbox or choice selection event.
	 * @return string
	 */
	function GetString(){}

	/**
	 * This method can be used with checkbox and menu events: for the checkboxes, the method returns true for a selection event and false for a deselection one.
	 * @return bool
	 */
	function IsChecked(){}

	/**
	 * For a listbox or similar event, returns true if it is a selection, false if it is a deselection.
	 * @return bool
	 */
	function IsSelection(){}

	/**
	 * Sets the m_extraLong member.
	 * @param integer $extraLong
	 */
	function SetExtraLong($extraLong){}

	/**
	 * Sets the m_commandInt member.
	 * @param integer $intCommand
	 */
	function SetInt($intCommand){}

	/**
	 * Sets the m_commandString member.
	 * @param string $string
	 */
	function SetString($string){}
}

class wxCondition
{
	/**
	 * Default and only constructor.
	 * @param wxMutex $mutex
	 */
	function __construct(wxMutex &$mutex){}

	/**
	 * Broadcasts to all waiting threads, waking all of them up.
	 * @return wxCondError
	 */
	function Broadcast(){}

	/**
	 * Returns true if the object had been initialized successfully, false if an error occurred.
	 * @return bool
	 */
	function IsOk(){}

	/**
	 * Signals the object waking up at most one thread.
	 * @return wxCondError
	 */
	function Signal(){}

	/**
	 * Waits until the condition is signalled.
	 * @return wxCondError
	 */
	function Wait(){}

	/**
	 * Waits until the condition is signalled or the timeout has elapsed.
	 * @param integer $milliseconds
	 * @return wxCondError
	 */
	function WaitTimeout($milliseconds){}
}

class wxConfigBase extends wxObject
{
	const Type_Unknown = 1;
	const Type_String = 1;
	const Type_Boolean = 1;
	const Type_Integer = 1;
	const Type_Float = 1;

	/**
	 * Create a new config object and sets it as the current one.
	 * @return wxConfigBase
	 */
	function Create(){}

	/**
	 * Delete the whole underlying object (disk file, registry key, ...).
	 * @return bool
	 */
	function DeleteAll(){}

	/**
	 * Deletes the specified entry and the group it belongs to if it was the last key in it and the second parameter is true.
	 * @param string $key
	 * @param bool $bDeleteGroupIfEmpty
	 * @return bool
	 */
	function DeleteEntry($key, $bDeleteGroupIfEmpty=true){}

	/**
	 * Delete the group (with all subgroups).
	 * @param string $key
	 * @return bool
	 */
	function DeleteGroup($key){}

	/**
	 * Calling this function will prevent Get() from automatically creating a new config object if the current one is NULL.
	 */
	function DontCreateOnDemand(){}

	/**
	 * Exists
	 * @param string $strName
	 * @return bool
	 */
	function Exists($strName){}

	/**
	 * Permanently writes all changes (otherwise, they're only written from object's destructor).
	 * @param bool $bCurrentOnly
	 * @return bool
	 */
	function Flush($bCurrentOnly=false){}

	/**
	 * Get the current config object.
	 * @param bool $CreateOnDemand
	 * @return wxConfigBase
	 */
	function Get($CreateOnDemand=true){}

	/**
	 * Returns the application name.
	 * @return string
	 */
	function GetAppName(){}

	/**
	 * Returns the type of the given entry or Unknown if the entry doesn't exist.
	 * @param string $name
	 * @return wxConfigBase::EntryType
	 */
	function GetEntryType($name){}

	/**
	 * Gets the first entry.
	 * @param string $str
	 * @param integer $index
	 * @return bool
	 */
	function GetFirstEntry(&$str, &$index){}

	/**
	 * Gets the first group.
	 * @param string $str
	 * @param integer $index
	 * @return bool
	 */
	function GetFirstGroup(&$str, &$index){}

	/**
	 * Gets the next entry.
	 * @param string $str
	 * @param integer $index
	 * @return bool
	 */
	function GetNextEntry(&$str, &$index){}

	/**
	 * Gets the next group.
	 * @param string $str
	 * @param integer $index
	 * @return bool
	 */
	function GetNextGroup(&$str, &$index){}

	/**
	 * Get number of entries in the current group.
	 * @param bool $bRecursive
	 * @return integer
	 */
	function GetNumberOfEntries($bRecursive=false){}

	/**
	 * Get number of entries/subgroups in the current group, with or without its subgroups.
	 * @param bool $bRecursive
	 * @return integer
	 */
	function GetNumberOfGroups($bRecursive=false){}

	/**
	 * Retrieve the current path (always as absolute path).
	 * @return string
	 */
	function GetPath(){}

	/**
	 * Returns the vendor name.
	 * @return string
	 */
	function GetVendorName(){}

	/**
	 * HasEntry
	 * @param string $strName
	 * @return bool
	 */
	function HasEntry($strName){}

	/**
	 * HasGroup
	 * @param string $strName
	 * @return bool
	 */
	function HasGroup($strName){}

	/**
	 * Returns true if we are expanding environment variables in key values.
	 * @return bool
	 */
	function IsExpandingEnvVars(){}

	/**
	 * Returns true if we are writing defaults back to the config file.
	 * @return bool
	 */
	function IsRecordingDefaults(){}

	/**
	 * Read a string from the key, returning true if the value was read.
	 * @param string $key
	 * @param string $str
	 * @param string $defaultVal
	 * @param integer $l
	 * @param float $d
	 * @param float $f
	 * @param bool $b
	 * @return bool
	 */
	function Read($key, &$str, $key, &$str, $defaultVal, $key, $defaultVal, $key, &$l, $key, &$l, $defaultVal, $key, &$d, $key, &$d, $defaultVal, $key, &$f, $key, &$f, $defaultVal, $key, &$b, $key, &$d, $defaultVal){}

	/**
	 * Reads a bool value from the key and returns it.
	 * @param string $key
	 * @param bool $defaultVal
	 * @return bool
	 */
	function ReadBool($key, $defaultVal){}

	/**
	 * Reads a double value from the key and returns it.
	 * @param string $key
	 * @param float $defaultVal
	 * @return float
	 */
	function ReadDouble($key, $defaultVal){}

	/**
	 * Reads a long value from the key and returns it.
	 * @param string $key
	 * @param integer $defaultVal
	 * @return integer
	 */
	function ReadLong($key, $defaultVal){}

	/**
	 * Renames an entry in the current group.
	 * @param string $oldName
	 * @param string $newName
	 * @return bool
	 */
	function RenameEntry($oldName, $newName){}

	/**
	 * Renames a subgroup of the current group.
	 * @param string $oldName
	 * @param string $newName
	 * @return bool
	 */
	function RenameGroup($oldName, $newName){}

	/**
	 * Sets the config object as the current one, returns the pointer to the previous current object (both the parameter and returned value may be NULL).
	 * @param wxConfigBase $pConfig
	 * @return wxConfigBase
	 */
	function Set(wxConfigBase &$pConfig){}

	/**
	 * Determine whether we wish to expand environment variables in key values.
	 * @param bool $bDoIt
	 */
	function SetExpandEnvVars($bDoIt=true){}

	/**
	 * Set current path: if the first character is '/', it is the absolute path, otherwise it is a relative path.
	 * @param string $strPath
	 */
	function SetPath($strPath){}

	/**
	 * Sets whether defaults are recorded to the config file whenever an attempt to read the value which is not present in it is done.
	 * @param bool $bDoIt
	 */
	function SetRecordDefaults($bDoIt=true){}

	/**
	 * Writes the wxString value to the config file and returns true on success.
	 * @param string $key
	 * @param string $value
	 * @return bool
	 */
	function Write($key, $value, $key, $value, $key, $value, $key, $value){}
}

class wxContextMenuEvent extends wxCommandEvent
{
	/**
	 * Constructor.
	 * @param integer $type
	 * @param integer $id
	 * @param wxPoint $pos
	 */
	function __construct($type=wxEVT_NULL, $id, wxPoint $pos=null){}

	/**
	 * Returns the position in screen coordinates at which the menu should be shown.
	 * @return wxPoint
	 */
	function GetPosition(){}

	/**
	 * Sets the position at which the menu should be shown.
	 * @param wxPoint $point
	 */
	function SetPosition(wxPoint $point){}
}

class wxControl extends wxWindow
{
	/**
	 * Default constructor to allow 2-phase creation.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param wxValidator $validator
	 * @param string $name
	 */
	function __construct(wxWindow &$parent, $id, wxPoint $pos=null, wxSize $size=null, $style, wxValidator $validator=null, $name=wxControlNameStr){}

	/**
	 * Simulates the effect of the user issuing a command to the item.
	 * @param wxCommandEvent $event
	 */
	function Command(wxCommandEvent &$event){}

	/**
	 * Create
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param wxValidator $validator
	 * @param string $name
	 * @return bool
	 */
	function Create(wxWindow &$parent, $id, wxPoint $pos=null, wxSize $size=null, $style, wxValidator $validator=null, $name=wxControlNameStr){}

	/**
	 * Escapes the special mnemonics characters ("&") in the given string.
	 * @param string $text
	 * @return string
	 */
	function EscapeMnemonics($text){}

	/**
	 * Returns the control's label, as it was passed to SetLabel().
	 * @return string
	 */
	function GetLabel(){}

	/**
	 * Returns the control's label without mnemonics.
	 * @param string $label
	 * @return string
	 */
	function GetLabelText($label){}

	/**
	 * Returns the given str string without mnemonics ("&" characters).
	 * @param string $str
	 * @return string
	 */
	function RemoveMnemonics($str){}

	/**
	 * Sets the control's label.
	 * @param string $label
	 */
	function SetLabel($label){}

	/**
	 * Sets the controls label to a string using markup.
	 * @param string $markup
	 * @return bool
	 */
	function SetLabelMarkup($markup){}

	/**
	 * Sets the control's label to exactly the given string.
	 * @param string $text
	 */
	function SetLabelText($text){}
}

class wxControlWithItems extends wxControl
{
}

class wxCriticalSection
{
	/**
	 * Default constructor initializes critical section object.
	 * @param wxCriticalSectionType $critSecType
	 */
	function __construct(wxCriticalSectionType $critSecType=null){}

	/**
	 * Enter the critical section (same as locking a mutex): if another thread has already entered it, this call will block until the other thread calls Leave().
	 */
	function Enter(){}

	/**
	 * Leave the critical section allowing other threads use the global data protected by it.
	 */
	function Leave(){}

	/**
	 * Try to enter the critical section (same as trying to lock a mutex).
	 * @return bool
	 */
	function TryEnter(){}
}

class wxCriticalSectionLocker
{
	/**
	 * Constructs a wxCriticalSectionLocker object associated with given criticalsection and enters it.
	 * @param wxCriticalSection $criticalsection
	 */
	function __construct(wxCriticalSection &$criticalsection){}
}

class wxCursor extends wxGDIObject
{
	/**
	 * Default constructor.
	 * @param wxImage $image
	 * @param wxCursor $cursor
	 * @param string $cursorName
	 * @param wxBitmapType $type
	 * @param integer $hotSpotX
	 * @param integer $hotSpotY
	 */
	function __construct(wxImage $image, wxCursor $cursor, $cursorName, wxBitmapType $type=null, $hotSpotX, $hotSpotY){}

	/**
	 * Returns true if cursor data is present.
	 * @return bool
	 */
	function IsOk(){}
}

class wxCustomDataObject extends wxDataObjectSimple
{
	/**
	 * The constructor accepts a format argument which specifies the (single) format supported by this object.
	 * @param wxDataFormat $format
	 */
	function __construct(wxDataFormat $format=null){}

	/**
	 * This function is called to allocate size bytes of memory from SetData().
	 * @param integer $size
	 * @return mixed
	 */
	function Alloc($size){}

	/**
	 * This function is called when the data is freed, you may override it to anything you want (or may be nothing at all).
	 */
	function Free(){}

	/**
	 * Returns a pointer to the data.
	 * @return mixed
	 */
	function GetData(){}

	/**
	 * Returns the data size in bytes.
	 * @return integer
	 */
	function GetSize(){}

	/**
	 * Set the data.
	 * @param integer $size
	 * @param mixed $data
	 * @return bool
	 */
	function SetData($size, $data){}

	/**
	 * Like SetData(), but doesn't copy the data - instead the object takes ownership of the pointer.
	 * @param integer $size
	 * @param mixed $data
	 */
	function TakeData($size, $data){}
}

class wxDC extends wxObject
{
	/**
	 * Starts a document page (only relevant when outputting to a printer).
	 */
	function StartPage(){}

	/**
	 * Starts a document (only relevant when outputting to a printer).
	 * @param string $message
	 * @return bool
	 */
	function StartDoc($message){}

	/**
	 * Sets the user scaling factor, useful for applications which require 'zooming'.
	 * @param float $xScale
	 * @param float $yScale
	 */
	function SetUserScale($xScale, $yScale){}

	/**
	 * Sets the current text foreground colour for the DC.
	 * @param wxColour $colour
	 */
	function SetTextForeground(wxColour $colour){}

	/**
	 * Sets the current text background colour for the DC.
	 * @param wxColour $colour
	 */
	function SetTextBackground(wxColour $colour){}

	/**
	 * Adds the specified point to the bounding box which can be retrieved with MinX(), MaxX() and MinY(), MaxY() functions.
	 * @param integer $x
	 * @param integer $y
	 */
	function CalcBoundingBox($x, $y){}

	/**
	 * Check if the use of transformation matrix is supported by the current system.
	 * @return bool
	 */
	function CanUseTransformMatrix(){}

	/**
	 * Clears the device context using the current background brush.
	 */
	function Clear(){}

	/**
	 * Copy attributes from another DC.
	 * @param wxDC $dc
	 */
	function CopyAttributes(wxDC $dc){}

	/**
	 * Displays a cross hair using the current pen.
	 * @param integer $x
	 * @param integer $y
	 * @param wxPoint $pt
	 */
	function CrossHair($x, $y, wxPoint $pt){}

	/**
	 * Destroys the current clipping region so that none of the DC is clipped.
	 */
	function DestroyClippingRegion(){}

	/**
	 * Convert device X coordinate to logical coordinate, using the current mapping mode, user scale factor, device origin and axis orientation.
	 * @param integer $x
	 * @return integer
	 */
	function DeviceToLogicalX($x){}

	/**
	 * Convert device X coordinate to relative logical coordinate, using the current mapping mode and user scale factor but ignoring the axis orientation.
	 * @param integer $x
	 * @return integer
	 */
	function DeviceToLogicalXRel($x){}

	/**
	 * Converts device Y coordinate to logical coordinate, using the current mapping mode, user scale factor, device origin and axis orientation.
	 * @param integer $y
	 * @return integer
	 */
	function DeviceToLogicalY($y){}

	/**
	 * Convert device Y coordinate to relative logical coordinate, using the current mapping mode and user scale factor but ignoring the axis orientation.
	 * @param integer $y
	 * @return integer
	 */
	function DeviceToLogicalYRel($y){}

	/**
	 * Draws an arc of a circle, centred on (xc, yc), with starting point (xStart, yStart) and ending at (xEnd, yEnd).
	 * @param integer $xStart
	 * @param integer $yStart
	 * @param integer $xEnd
	 * @param integer $yEnd
	 * @param integer $xc
	 * @param integer $yc
	 * @param wxPoint $ptStart
	 * @param wxPoint $ptEnd
	 * @param wxPoint $centre
	 */
	function DrawArc($xStart, $yStart, $xEnd, $yEnd, $xc, $yc, wxPoint $ptStart, wxPoint $ptEnd, wxPoint $centre){}

	/**
	 * Draw a bitmap on the device context at the specified point.
	 * @param wxBitmap $bitmap
	 * @param integer $x
	 * @param integer $y
	 * @param bool $useMask
	 * @param wxBitmap $bmp
	 * @param wxPoint $pt
	 */
	function DrawBitmap(wxBitmap $bitmap, $x, $y, $useMask=false, wxBitmap $bmp, wxPoint $pt, $useMask=false){}

	/**
	 * Draws a check mark inside the given rectangle.
	 * @param integer $x
	 * @param integer $y
	 * @param integer $width
	 * @param integer $height
	 * @param wxRect $rect
	 */
	function DrawCheckMark($x, $y, $width, $height, wxRect $rect){}

	/**
	 * Draws a circle with the given centre and radius.
	 * @param integer $x
	 * @param integer $y
	 * @param integer $radius
	 * @param wxPoint $pt
	 */
	function DrawCircle($x, $y, $radius, wxPoint $pt, $radius){}

	/**
	 * Draws an ellipse contained in the rectangle specified either with the given top left corner and the given size or directly.
	 * @param integer $x
	 * @param integer $y
	 * @param integer $width
	 * @param integer $height
	 * @param wxPoint $pt
	 * @param wxSize $size
	 * @param wxRect $rect
	 */
	function DrawEllipse($x, $y, $width, $height, wxPoint $pt, wxSize $size, wxRect $rect){}

	/**
	 * Draws an arc of an ellipse.
	 * @param integer $x
	 * @param integer $y
	 * @param integer $width
	 * @param integer $height
	 * @param float $start
	 * @param float $end
	 * @param wxPoint $pt
	 * @param wxSize $sz
	 * @param float $sa
	 * @param float $ea
	 */
	function DrawEllipticArc($x, $y, $width, $height, $start, $end, wxPoint $pt, wxSize $sz, $sa, $ea){}

	/**
	 * Draw an icon on the display (does nothing if the device context is PostScript).
	 * @param wxIcon $icon
	 * @param integer $x
	 * @param integer $y
	 * @param wxPoint $pt
	 */
	function DrawIcon(wxIcon $icon, $x, $y, wxIcon $icon, wxPoint $pt){}

	/**
	 * Draw optional bitmap and the text into the given rectangle and aligns it as specified by alignment parameter; it also will emphasize the character with the given index if it is != -1 and return the bounding rectangle if required.
	 * @param string $text
	 * @param wxBitmap $bitmap
	 * @param wxRect $rect
	 * @param integer $alignment
	 * @param integer $indexAccel
	 * @param wxRect $rectBounding
	 */
	function DrawLabel($text, wxBitmap $bitmap, wxRect $rect, $alignment=null, $indexAccel=-1, wxRect &$rectBounding=null, $text, wxRect $rect, $alignment=null, $indexAccel=-1){}

	/**
	 * Draws a line from the first point to the second.
	 * @param integer $x1
	 * @param integer $y1
	 * @param integer $x2
	 * @param integer $y2
	 * @param wxPoint $pt1
	 * @param wxPoint $pt2
	 */
	function DrawLine($x1, $y1, $x2, $y2, wxPoint $pt1, wxPoint $pt2){}

	/**
	 * Draws a point using the color of the current pen.
	 * @param integer $x
	 * @param integer $y
	 * @param wxPoint $pt
	 */
	function DrawPoint($x, $y, wxPoint $pt){}

	/**
	 * Draws a rectangle with the given top left corner, and with the given size.
	 * @param integer $x
	 * @param integer $y
	 * @param integer $width
	 * @param integer $height
	 * @param wxPoint $pt
	 * @param wxSize $sz
	 * @param wxRect $rect
	 */
	function DrawRectangle($x, $y, $width, $height, wxPoint $pt, wxSize $sz, wxRect $rect){}

	/**
	 * Draws the text rotated by angle degrees (positive angles are counterclockwise; the full angle is 360 degrees).
	 * @param string $text
	 * @param integer $x
	 * @param integer $y
	 * @param float $angle
	 * @param wxPoint $point
	 */
	function DrawRotatedText($text, $x, $y, $angle, $text, wxPoint $point, $angle){}

	/**
	 * Draws a rectangle with the given top left corner, and with the given size.
	 * @param integer $x
	 * @param integer $y
	 * @param integer $width
	 * @param integer $height
	 * @param float $radius
	 * @param wxPoint $pt
	 * @param wxSize $sz
	 * @param wxRect $rect
	 */
	function DrawRoundedRectangle($x, $y, $width, $height, $radius, wxPoint $pt, wxSize $sz, $radius, wxRect $rect, $radius){}

	/**
	 * This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.
	 * @param integer $x1
	 * @param integer $y1
	 * @param integer $x2
	 * @param integer $y2
	 * @param integer $x3
	 * @param integer $y3
	 */
	function DrawSpline($x1, $y1, $x2, $y2, $x3, $y3){}

	/**
	 * Draws a text string at the specified point, using the current text font, and the current text foreground and background colours.
	 * @param string $text
	 * @param integer $x
	 * @param integer $y
	 * @param wxPoint $pt
	 */
	function DrawText($text, $x, $y, $text, wxPoint $pt){}

	/**
	 * Ends a document (only relevant when outputting to a printer).
	 */
	function EndDoc(){}

	/**
	 * Ends a document page (only relevant when outputting to a printer).
	 */
	function EndPage(){}

	/**
	 * Flood fills the device context starting from the given point, using the current brush colour, and using a style:
	 * @param integer $x
	 * @param integer $y
	 * @param wxColour $colour
	 * @param wxFloodFillStyle $style
	 * @param wxPoint $pt
	 * @param wxColour $col
	 * @return bool
	 */
	function FloodFill($x, $y, wxColour $colour, wxFloodFillStyle $style=null, wxPoint $pt, wxColour $col, wxFloodFillStyle $style=null){}

	/**
	 * Gets the brush used for painting the background.
	 * @return wxBrush
	 */
	function GetBackground(){}

	/**
	 * Returns the current background mode: wxSOLID or wxTRANSPARENT.
	 * @return integer
	 */
	function GetBackgroundMode(){}

	/**
	 * Gets the current brush.
	 * @return wxBrush
	 */
	function GetBrush(){}

	/**
	 * Gets the character height of the currently set font.
	 * @return integer
	 */
	function GetCharHeight(){}

	/**
	 * Gets the average character width of the currently set font.
	 * @return integer
	 */
	function GetCharWidth(){}

	/**
	 * Gets the rectangle surrounding the current clipping region.
	 * @param integer $x
	 * @param integer $y
	 * @param integer $width
	 * @param integer $height
	 */
	function GetClippingBox($x, $y, $width, $height){}

	/**
	 * Returns the depth (number of bits/pixel) of this DC.
	 * @return integer
	 */
	function GetDepth(){}

	/**
	 * Returns the current device origin.
	 * @return wxPoint
	 */
	function GetDeviceOrigin(){}

	/**
	 * Gets the current font.
	 * @return wxFont
	 */
	function GetFont(){}

	/**
	 * Gets the current layout direction of the device context.
	 * @return wxLayoutDirection
	 */
	function GetLayoutDirection(){}

	/**
	 * Gets the current logical function.
	 * @return wxRasterOperationMode
	 */
	function GetLogicalFunction(){}

	/**
	 * GetLogicalOrigin
	 * @param integer $x
	 * @param integer $y
	 * @return wxPoint
	 */
	function GetLogicalOrigin($x, $y){}

	/**
	 * GetLogicalScale
	 * @param float $x
	 * @param float $y
	 */
	function GetLogicalScale(&$x, &$y){}

	/**
	 * Gets the current mapping mode for the device context.
	 * @return wxMappingMode
	 */
	function GetMapMode(){}

	/**
	 * Gets the dimensions of the string using the currently selected font.
	 * @param string $string
	 * @param integer $w
	 * @param integer $h
	 * @param integer $heightLine
	 * @param wxFont $font
	 * @return wxSize
	 */
	function GetMultiLineTextExtent($string, $w, $h, $heightLine=NULL, wxFont $font=null, $string){}

	/**
	 * Returns the resolution of the device in pixels per inch.
	 * @return wxSize
	 */
	function GetPPI(){}

	/**
	 * Gets the current pen.
	 * @return wxPen
	 */
	function GetPen(){}

	/**
	 * Gets in colour the colour at the specified location.
	 * @param integer $x
	 * @param integer $y
	 * @param wxColour $colour
	 * @return bool
	 */
	function GetPixel($x, $y, wxColour &$colour){}

	/**
	 * Gets the horizontal and vertical extent of this device context in device units.
	 * @param integer $width
	 * @param integer $height
	 * @return wxSize
	 */
	function GetSize($width, $height){}

	/**
	 * Returns the horizontal and vertical resolution in millimetres.
	 * @param integer $width
	 * @param integer $height
	 * @return wxSize
	 */
	function GetSizeMM($width, $height){}

	/**
	 * Gets the current text background colour.
	 * @return wxColour
	 */
	function GetTextBackground(){}

	/**
	 * Gets the dimensions of the string using the currently selected font.
	 * @param string $string
	 * @param integer $w
	 * @param integer $h
	 * @param integer $descent
	 * @param integer $externalLeading
	 * @param wxFont $font
	 * @return wxSize
	 */
	function GetTextExtent($string, $w, $h, $descent=NULL, $externalLeading=NULL, wxFont $font=null, $string){}

	/**
	 * Gets the current text foreground colour.
	 * @return wxColour
	 */
	function GetTextForeground(){}

	/**
	 * Gets the current user scale factor.
	 * @param float $x
	 * @param float $y
	 */
	function GetUserScale(&$x, &$y){}

	/**
	 * Fill the area specified by rect with a radial gradient, starting from initialColour at the centre of the circle and fading to destColour on the circle outside.
	 * @param wxRect $rect
	 * @param wxColour $initialColour
	 * @param wxColour $destColour
	 * @param wxPoint $circleCenter
	 */
	function GradientFillConcentric(wxRect $rect, wxColour $initialColour, wxColour $destColour, wxRect $rect, wxColour $initialColour, wxColour $destColour, wxPoint $circleCenter){}

	/**
	 * Fill the area specified by rect with a linear gradient, starting from initialColour and eventually fading to destColour.
	 * @param wxRect $rect
	 * @param wxColour $initialColour
	 * @param wxColour $destColour
	 * @param wxDirection $nDirection
	 */
	function GradientFillLinear(wxRect $rect, wxColour $initialColour, wxColour $destColour, wxDirection $nDirection=null){}

	/**
	 * Returns true if the DC is ok to use.
	 * @return bool
	 */
	function IsOk(){}

	/**
	 * Converts logical X coordinate to device coordinate, using the current mapping mode, user scale factor, device origin and axis orientation.
	 * @param integer $x
	 * @return integer
	 */
	function LogicalToDeviceX($x){}

	/**
	 * Converts logical Y coordinate to device coordinate, using the current mapping mode, user scale factor, device origin and axis orientation.
	 * @param integer $y
	 * @return integer
	 */
	function LogicalToDeviceY($y){}

	/**
	 * Converts logical X coordinate to relative device coordinate, using the current mapping mode and user scale factor but ignoring the axis orientation.
	 * @param integer $x
	 * @return integer
	 */
	function LogicalToDeviceXRel($x){}

	/**
	 * Converts logical Y coordinate to relative device coordinate, using the current mapping mode and user scale factor but ignoring the axis orientation.
	 * @param integer $y
	 * @return integer
	 */
	function LogicalToDeviceYRel($y){}

	/**
	 * Gets the maximum horizontal extent used in drawing commands so far.
	 * @return integer
	 */
	function MaxX(){}

	/**
	 * Gets the maximum vertical extent used in drawing commands so far.
	 * @return integer
	 */
	function MaxY(){}

	/**
	 * Gets the minimum horizontal extent used in drawing commands so far.
	 * @return integer
	 */
	function MinX(){}

	/**
	 * Gets the minimum vertical extent used in drawing commands so far.
	 * @return integer
	 */
	function MinY(){}

	/**
	 * Resets the bounding box: after a call to this function, the bounding box doesn't contain anything.
	 */
	function ResetBoundingBox(){}

	/**
	 * Revert the transformation matrix to identity matrix.
	 */
	function ResetTransformMatrix(){}

	/**
	 * Sets the x and y axis orientation (i.e., the direction from lowest to highest values on the axis).
	 * @param bool $xLeftRight
	 * @param bool $yBottomUp
	 */
	function SetAxisOrientation($xLeftRight, $yBottomUp){}

	/**
	 * Sets the current background brush for the DC.
	 * @param wxBrush $brush
	 */
	function SetBackground(wxBrush $brush){}

	/**
	 * mode may be one of wxSOLID and wxTRANSPARENT.
	 * @param integer $mode
	 */
	function SetBackgroundMode($mode){}

	/**
	 * Sets the current brush for the DC.
	 * @param wxBrush $brush
	 */
	function SetBrush(wxBrush $brush){}

	/**
	 * Sets the clipping region for this device context to the intersection of the given region described by the parameters of this method and the previously set clipping region.
	 * @param integer $x
	 * @param integer $y
	 * @param integer $width
	 * @param integer $height
	 * @param wxPoint $pt
	 * @param wxSize $sz
	 * @param wxRect $rect
	 */
	function SetClippingRegion($x, $y, $width, $height, wxPoint $pt, wxSize $sz, wxRect $rect){}

	/**
	 * Sets the clipping region for this device context.
	 * @param wxRegion $region
	 */
	function SetDeviceClippingRegion(wxRegion $region){}

	/**
	 * Sets the device origin (i.e., the origin in pixels after scaling has been applied).
	 * @param integer $x
	 * @param integer $y
	 */
	function SetDeviceOrigin($x, $y){}

	/**
	 * Sets the current font for the DC.
	 * @param wxFont $font
	 */
	function SetFont(wxFont $font){}

	/**
	 * Sets the current layout direction for the device context.
	 * @param wxLayoutDirection $dir
	 */
	function SetLayoutDirection(wxLayoutDirection $dir){}

	/**
	 * Sets the current logical function for the device context.
	 * @param wxRasterOperationMode $function
	 */
	function SetLogicalFunction(wxRasterOperationMode $function){}

	/**
	 * SetLogicalOrigin
	 * @param integer $x
	 * @param integer $y
	 */
	function SetLogicalOrigin($x, $y){}

	/**
	 * SetLogicalScale
	 * @param float $x
	 * @param float $y
	 */
	function SetLogicalScale($x, $y){}

	/**
	 * The mapping mode of the device context defines the unit of measurement used to convert logical units to device units.
	 * @param wxMappingMode $mode
	 */
	function SetMapMode(wxMappingMode $mode){}

	/**
	 * If this is a window DC or memory DC, assigns the given palette to the window or bitmap associated with the DC.
	 * @param wxPalette $palette
	 */
	function SetPalette(wxPalette $palette){}

	/**
	 * Sets the current pen for the DC.
	 * @param wxPen $pen
	 */
	function SetPen(wxPen $pen){}

	/**
	 * Copy from a source DC to this DC possibly changing the scale.
	 * @param integer $xdest
	 * @param integer $ydest
	 * @param integer $dstWidth
	 * @param integer $dstHeight
	 * @param wxDC $source
	 * @param integer $xsrc
	 * @param integer $ysrc
	 * @param integer $srcWidth
	 * @param integer $srcHeight
	 * @param wxRasterOperationMode $logicalFunc
	 * @param bool $useMask
	 * @param integer $xsrcMask
	 * @param integer $ysrcMask
	 * @return bool
	 */
	function StretchBlit($xdest, $ydest, $dstWidth, $dstHeight, wxDC &$source, $xsrc, $ysrc, $srcWidth, $srcHeight, wxRasterOperationMode $logicalFunc=null, $useMask=false, $xsrcMask=wxDefaultCoord, $ysrcMask=wxDefaultCoord){}

	/**
	 * Copy from a source DC to this DC.
	 * @param integer $xdest
	 * @param integer $ydest
	 * @param integer $width
	 * @param integer $height
	 * @param wxDC $source
	 * @param integer $xsrc
	 * @param integer $ysrc
	 * @param wxRasterOperationMode $logicalFunc
	 * @param bool $useMask
	 * @param integer $xsrcMask
	 * @param integer $ysrcMask
	 * @return bool
	 */
	function Blit($xdest, $ydest, $width, $height, wxDC &$source, $xsrc, $ysrc, wxRasterOperationMode $logicalFunc=null, $useMask=false, $xsrcMask=wxDefaultCoord, $ysrcMask=wxDefaultCoord){}
}

class wxDCClipper
{
	/**
	 * Sets the clipping region to the specified region/coordinates.
	 * @param wxDC $dc
	 * @param wxRegion $region
	 * @param wxRect $rect
	 * @param integer $x
	 * @param integer $y
	 * @param integer $w
	 * @param integer $h
	 */
	function __construct(wxDC &$dc, wxRegion $region, wxDC &$dc, wxRect $rect, wxDC &$dc, $x, $y, $w, $h){}
}

class wxDataFormat
{
	/**
	 * Constructs a data format object for one of the standard data formats or an empty data object (use SetType() or SetId() later in this case).
	 * @param wxDataFormatId $format
	 */
	function __construct(wxDataFormatId $format=null, $format){}

	/**
	 * Returns the name of a custom format (this function will fail for a standard format).
	 * @return string
	 */
	function GetId(){}

	/**
	 * Returns the platform-specific number identifying the format.
	 * @return wxDataFormatId
	 */
	function GetType(){}

	/**
	 * Sets the format to be the custom format identified by the given name.
	 * @param string $format
	 */
	function SetId($format){}

	/**
	 * Sets the format to the given value, which should be one of wxDF_XXX constants.
	 * @param wxDataFormatId $type
	 */
	function SetType(wxDataFormatId $type){}
}

class wxDataInputStream
{
	/**
	 * Reads a string from a stream.
	 * @return string
	 */
	function ReadString(){}

	/**
	 * Reads double data (IEEE encoded) from the stream in a specified buffer.
	 * @param float $buffer
	 * @param integer $size
	 * @return float
	 */
	function ReadDouble(&$buffer, $size){}

	/**
	 * Reads bytes from the stream in a specified buffer.
	 * @param integer $buffer
	 * @param integer $size
	 * @return integer
	 */
	function Read8($buffer, $size){}

	/**
	 * Reads 32 bit unsigned integers from the stream in a specified buffer.
	 * @param integer $buffer
	 * @param integer $size
	 * @return integer
	 */
	function Read32($buffer, $size){}

	/**
	 * Reads 16 bit unsigned integers from the stream in a specified buffer.
	 * @param integer $buffer
	 * @param integer $size
	 * @return integer
	 */
	function Read16($buffer, $size){}

	/**
	 * If be_order is true, all data will be read in big-endian order, such as written by programs on a big endian architecture (e.g.
	 * @param bool $be_order
	 */
	function BigEndianOrdered($be_order){}
}

class wxDataObject
{
	const Get = 1;
	const Set = 1;
	const Both = 1;

	/**
	 * Constructor.
	 */
	function __construct(){}

	/**
	 * Copies all formats supported in the given direction dir to the array pointed to by formats.
	 * @param wxDataFormat $formats
	 * @param Direction $dir
	 */
	function GetAllFormats(wxDataFormat &$formats, $dir=Get){}

	/**
	 * The method will write the data of the format format in the buffer buf and return true on success, false on failure.
	 * @param wxDataFormat $format
	 * @param mixed $buf
	 * @return bool
	 */
	function GetDataHere(wxDataFormat $format, $buf){}

	/**
	 * Returns the data size of the given format format.
	 * @param wxDataFormat $format
	 * @return integer
	 */
	function GetDataSize(wxDataFormat $format){}

	/**
	 * Returns the number of available formats for rendering or setting the data.
	 * @param Direction $dir
	 * @return integer
	 */
	function GetFormatCount($dir=Get){}

	/**
	 * Returns the preferred format for either rendering the data (if dir is Get, its default value) or for setting it.
	 * @param Direction $dir
	 * @return wxDataFormat
	 */
	function GetPreferredFormat($dir=Get){}

	/**
	 * Returns true if this format is supported.
	 * @param wxDataFormat $format
	 * @param Direction $dir
	 * @return bool
	 */
	function IsSupported(wxDataFormat $format, $dir=Get){}

	/**
	 * Set the data in the format format of the length len provided in the buffer buf.
	 * @param wxDataFormat $format
	 * @param integer $len
	 * @param mixed $buf
	 * @return bool
	 */
	function SetData(wxDataFormat $format, $len, $buf){}
}

class wxDataObjectComposite extends wxDataObject
{
	/**
	 * The default constructor.
	 */
	function __construct(){}

	/**
	 * Adds the dataObject to the list of supported objects and it becomes the preferred object if preferred is true.
	 * @param wxDataObjectSimple $dataObject
	 * @param bool $preferred
	 */
	function Add(wxDataObjectSimple &$dataObject, $preferred=false){}

	/**
	 * Report the format passed to the SetData() method.
	 * @return wxDataFormat
	 */
	function GetReceivedFormat(){}
}

class wxDataObjectSimple extends wxDataObject
{
	/**
	 * Constructor accepts the supported format (none by default) which may also be set later with SetFormat().
	 * @param wxDataFormat $format
	 */
	function __construct(wxDataFormat $format=null){}

	/**
	 * Copy the data to the buffer, return true on success.
	 * @param mixed $buf
	 * @return bool
	 */
	function GetDataHere($buf){}

	/**
	 * Gets the size of our data.
	 * @return integer
	 */
	function GetDataSize(){}

	/**
	 * Returns the (one and only one) format supported by this object.
	 * @return wxDataFormat
	 */
	function GetFormat(){}

	/**
	 * Copy the data from the buffer, return true on success.
	 * @param integer $len
	 * @param mixed $buf
	 * @return bool
	 */
	function SetData($len, $buf){}

	/**
	 * Sets the supported format.
	 * @param wxDataFormat $format
	 */
	function SetFormat(wxDataFormat $format){}
}

class wxDataOutputStream
{
	/**
	 * If be_order is true, all data will be written in big-endian order, e.g.
	 * @param bool $be_order
	 */
	function BigEndianOrdered($be_order){}

	/**
	 * Writes the 16 bit unsigned integer i16 to the stream.
	 * @param integer $i16
	 * @param integer $buffer
	 * @param integer $size
	 */
	function Write16($i16, $buffer, $size){}

	/**
	 * Writes the 32 bit unsigned integer i32 to the stream.
	 * @param integer $i32
	 * @param integer $buffer
	 * @param integer $size
	 */
	function Write32($i32, $buffer, $size){}

	/**
	 * Writes the single byte i8 to the stream.
	 * @param integer $i8
	 * @param integer $buffer
	 * @param integer $size
	 */
	function Write8($i8, $buffer, $size){}

	/**
	 * Writes the double f to the stream using the IEEE format.
	 * @param float $f
	 * @param array $buffer
	 * @param integer $size
	 */
	function WriteDouble($f, array $buffer, $size){}

	/**
	 * Writes string to the stream.
	 * @param string $string
	 */
	function WriteString($string){}
}

class wxDataViewBitmapRenderer extends wxDataViewRenderer
{
	/**
	 * The ctor.
	 * @param string $varianttype
	 * @param wxDataViewCellMode $mode
	 * @param integer $align
	 */
	function __construct($varianttype="wxBitmap", wxDataViewCellMode $mode=null, $align=wxDVR_DEFAULT_ALIGNMENT){}
}

class wxDataViewChoiceRenderer extends wxDataViewRenderer
{
	/**
	 * The ctor.
	 * @param array $choices
	 * @param wxDataViewCellMode $mode
	 * @param integer $alignment
	 */
	function __construct(array $choices, wxDataViewCellMode $mode=null, $alignment=wxDVR_DEFAULT_ALIGNMENT){}

	/**
	 * Returns the choice referred to by index.
	 * @param integer $index
	 * @return string
	 */
	function GetChoice($index){}

	/**
	 * Returns all choices.
	 * @return array
	 */
	function GetChoices(){}
}

class wxDataViewColumn extends wxSettableHeaderColumn
{
	/**
	 * Constructs a text column.
	 * @param string $title
	 * @param wxDataViewRenderer $renderer
	 * @param integer $model_column
	 * @param integer $width
	 * @param wxAlignment $align
	 * @param integer $flags
	 * @param wxBitmap $bitmap
	 */
	function __construct($title, wxDataViewRenderer &$renderer, $model_column, $width=wxDVC_DEFAULT_WIDTH, wxAlignment $align=null, $flags=wxDATAVIEW_COL_RESIZABLE, wxBitmap $bitmap, wxDataViewRenderer &$renderer, $model_column, $width=wxDVC_DEFAULT_WIDTH, wxAlignment $align=null, $flags=wxDATAVIEW_COL_RESIZABLE){}

	/**
	 * Returns the index of the column of the model, which this wxDataViewColumn is displaying.
	 * @return integer
	 */
	function GetModelColumn(){}

	/**
	 * Returns the owning wxDataViewCtrl.
	 * @return wxDataViewCtrl
	 */
	function GetOwner(){}

	/**
	 * Returns the renderer of this wxDataViewColumn.
	 * @return wxDataViewRenderer
	 */
	function GetRenderer(){}
}

class wxDataViewCtrl extends wxControl
{
	/**
	 * Constructor.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param wxValidator $validator
	 * @param string $name
	 */
	function __construct(wxWindow &$parent, $id, wxPoint $pos=null, wxSize $size=null, $style, wxValidator $validator=null, $name=wxDataViewCtrlNameStr){}

	/**
	 * Appends a column for rendering a bitmap.
	 * @param string $label
	 * @param integer $model_column
	 * @param wxDataViewCellMode $mode
	 * @param integer $width
	 * @param wxAlignment $align
	 * @param integer $flags
	 * @return wxDataViewColumn
	 */
	function AppendBitmapColumn($label, $model_column, wxDataViewCellMode $mode=null, $width=-1, wxAlignment $align=null, $flags=wxDATAVIEW_COL_RESIZABLE, wxBitmap $label, $model_column, wxDataViewCellMode $mode=null, $width=-1, wxAlignment $align=null, $flags=wxDATAVIEW_COL_RESIZABLE){}

	/**
	 * Appends a wxDataViewColumn to the control.
	 * @param wxDataViewColumn $col
	 * @return bool
	 */
	function AppendColumn(wxDataViewColumn &$col){}

	/**
	 * Appends a column for rendering a date.
	 * @param string $label
	 * @param integer $model_column
	 * @param wxDataViewCellMode $mode
	 * @param integer $width
	 * @param wxAlignment $align
	 * @param integer $flags
	 * @return wxDataViewColumn
	 */
	function AppendDateColumn($label, $model_column, wxDataViewCellMode $mode=null, $width=-1, wxAlignment $align=null, $flags=wxDATAVIEW_COL_RESIZABLE, wxBitmap $label, $model_column, wxDataViewCellMode $mode=null, $width=-1, wxAlignment $align=null, $flags=wxDATAVIEW_COL_RESIZABLE){}

	/**
	 * Appends a column for rendering text with an icon.
	 * @param string $label
	 * @param integer $model_column
	 * @param wxDataViewCellMode $mode
	 * @param integer $width
	 * @param wxAlignment $align
	 * @param integer $flags
	 * @return wxDataViewColumn
	 */
	function AppendIconTextColumn($label, $model_column, wxDataViewCellMode $mode=null, $width=-1, wxAlignment $align=null, $flags=wxDATAVIEW_COL_RESIZABLE, wxBitmap $label, $model_column, wxDataViewCellMode $mode=null, $width=-1, wxAlignment $align=null, $flags=wxDATAVIEW_COL_RESIZABLE){}

	/**
	 * Appends a column for rendering a progress indicator.
	 * @param string $label
	 * @param integer $model_column
	 * @param wxDataViewCellMode $mode
	 * @param integer $width
	 * @param wxAlignment $align
	 * @param integer $flags
	 * @return wxDataViewColumn
	 */
	function AppendProgressColumn($label, $model_column, wxDataViewCellMode $mode=null, $width=80, wxAlignment $align=null, $flags=wxDATAVIEW_COL_RESIZABLE, wxBitmap $label, $model_column, wxDataViewCellMode $mode=null, $width=80, wxAlignment $align=null, $flags=wxDATAVIEW_COL_RESIZABLE){}

	/**
	 * Appends a column for rendering text.
	 * @param string $label
	 * @param integer $model_column
	 * @param wxDataViewCellMode $mode
	 * @param integer $width
	 * @param wxAlignment $align
	 * @param integer $flags
	 * @return wxDataViewColumn
	 */
	function AppendTextColumn($label, $model_column, wxDataViewCellMode $mode=null, $width=-1, wxAlignment $align=null, $flags=wxDATAVIEW_COL_RESIZABLE, wxBitmap $label, $model_column, wxDataViewCellMode $mode=null, $width=-1, wxAlignment $align=null, $flags=wxDATAVIEW_COL_RESIZABLE){}

	/**
	 * Appends a column for rendering a toggle.
	 * @param string $label
	 * @param integer $model_column
	 * @param wxDataViewCellMode $mode
	 * @param integer $width
	 * @param wxAlignment $align
	 * @param integer $flags
	 * @return wxDataViewColumn
	 */
	function AppendToggleColumn($label, $model_column, wxDataViewCellMode $mode=null, $width=30, wxAlignment $align=null, $flags=wxDATAVIEW_COL_RESIZABLE, wxBitmap $label, $model_column, wxDataViewCellMode $mode=null, $width=30, wxAlignment $align=null, $flags=wxDATAVIEW_COL_RESIZABLE){}

	/**
	 * Associates a wxDataViewModel with the control.
	 * @param wxDataViewModel $model
	 * @return bool
	 */
	function AssociateModel(wxDataViewModel &$model){}

	/**
	 * Removes all columns.
	 * @return bool
	 */
	function ClearColumns(){}

	/**
	 * Collapses the item.
	 * @param wxDataViewItem $item
	 */
	function Collapse(wxDataViewItem $item){}

	/**
	 * Create the control.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param wxValidator $validator
	 * @param string $name
	 * @return bool
	 */
	function Create(wxWindow &$parent, $id, wxPoint $pos=null, wxSize $size=null, $style, wxValidator $validator=null, $name=wxDataViewCtrlNameStr){}

	/**
	 * Deletes given column.
	 * @param wxDataViewColumn $column
	 * @return bool
	 */
	function DeleteColumn(wxDataViewColumn &$column){}

	/**
	 * Enable drag operations using the given format.
	 * @param wxDataFormat $format
	 * @return bool
	 */
	function EnableDragSource(wxDataFormat $format){}

	/**
	 * Enable drop operations using the given format.
	 * @param wxDataFormat $format
	 * @return bool
	 */
	function EnableDropTarget(wxDataFormat $format){}

	/**
	 * Call this to ensure that the given item is visible.
	 * @param wxDataViewItem $item
	 * @param wxDataViewColumn $column
	 */
	function EnsureVisible(wxDataViewItem $item, wxDataViewColumn $column=null){}

	/**
	 * Expands the item.
	 * @param wxDataViewItem $item
	 */
	function Expand(wxDataViewItem $item){}

	/**
	 * Expands all ancestors of the item.
	 * @param wxDataViewItem $item
	 */
	function ExpandAncestors(wxDataViewItem $item){}

	/**
	 * Returns pointer to the column.
	 * @param integer $pos
	 * @return wxDataViewColumn
	 */
	function GetColumn($pos){}

	/**
	 * Returns the number of columns.
	 * @return integer
	 */
	function GetColumnCount(){}

	/**
	 * Returns the position of the column or -1 if not found in the control.
	 * @param wxDataViewColumn $column
	 * @return integer
	 */
	function GetColumnPosition(wxDataViewColumn $column){}

	/**
	 * Returns the currently focused item.
	 * @return wxDataViewItem
	 */
	function GetCurrentItem(){}

	/**
	 * Returns column containing the expanders.
	 * @return wxDataViewColumn
	 */
	function GetExpanderColumn(){}

	/**
	 * Returns indentation.
	 * @return integer
	 */
	function GetIndent(){}

	/**
	 * Returns item rectangle.
	 * @param wxDataViewItem $item
	 * @param wxDataViewColumn $col
	 * @return wxRect
	 */
	function GetItemRect(wxDataViewItem $item, wxDataViewColumn $col=null){}

	/**
	 * Returns pointer to the data model associated with the control (if any).
	 * @return wxDataViewModel
	 */
	function GetModel(){}

	/**
	 * Returns the number of currently selected items.
	 * @return integer
	 */
	function GetSelectedItemsCount(){}

	/**
	 * Returns first selected item or an invalid item if none is selected.
	 * @return wxDataViewItem
	 */
	function GetSelection(){}

	/**
	 * Returns the wxDataViewColumn currently responsible for sorting or NULL if none has been selected.
	 * @return wxDataViewColumn
	 */
	function GetSortingColumn(){}

	/**
	 * Returns true if any items are currently selected.
	 * @return bool
	 */
	function HasSelection(){}

	/**
	 * Hittest.
	 * @param wxPoint $point
	 * @param wxDataViewItem $item
	 * @param wxDataViewColumn $col
	 */
	function HitTest(wxPoint $point, wxDataViewItem &$item, wxDataViewColumn &$col){}

	/**
	 * Inserts a wxDataViewColumn to the control.
	 * @param integer $pos
	 * @param wxDataViewColumn $col
	 * @return bool
	 */
	function InsertColumn($pos, wxDataViewColumn &$col){}

	/**
	 * Return true if the item is expanded.
	 * @param wxDataViewItem $item
	 * @return bool
	 */
	function IsExpanded(wxDataViewItem $item){}

	/**
	 * Return true if the item is selected.
	 * @param wxDataViewItem $item
	 * @return bool
	 */
	function IsSelected(wxDataViewItem $item){}

	/**
	 * Prepends a wxDataViewColumn to the control.
	 * @param wxDataViewColumn $col
	 * @return bool
	 */
	function PrependColumn(wxDataViewColumn &$col){}

	/**
	 * Select the given item.
	 * @param wxDataViewItem $item
	 */
	function Select(wxDataViewItem $item){}

	/**
	 * Select all items.
	 */
	function SelectAll(){}

	/**
	 * Changes the currently focused item.
	 * @param wxDataViewItem $item
	 */
	function SetCurrentItem(wxDataViewItem $item){}

	/**
	 * Set which column shall contain the tree-like expanders.
	 * @param wxDataViewColumn $col
	 */
	function SetExpanderColumn(wxDataViewColumn &$col){}

	/**
	 * Sets the indentation.
	 * @param integer $indent
	 */
	function SetIndent($indent){}

	/**
	 * Sets the row height.
	 * @param integer $rowHeight
	 * @return bool
	 */
	function SetRowHeight($rowHeight){}

	/**
	 * Unselect the given item.
	 * @param wxDataViewItem $item
	 */
	function Unselect(wxDataViewItem $item){}

	/**
	 * Unselect all item.
	 */
	function UnselectAll(){}
}

class wxDataViewCustomRenderer extends wxDataViewRenderer
{
	/**
	 * Override this to react to cell activation.
	 * @param wxRect $cell
	 * @param wxDataViewModel $model
	 * @param wxDataViewItem $item
	 * @param integer $col
	 * @param wxMouseEvent $mouseEvent
	 * @return bool
	 */
	function ActivateCell(wxRect $cell, wxDataViewModel &$model, wxDataViewItem $item, $col, wxMouseEvent $mouseEvent){}

	/**
	 * Override this to create the actual editor control once editing is about to start.
	 * @param wxWindow $parent
	 * @param wxRect $labelRect
	 * @param wxVariant $value
	 * @return wxWindow
	 */
	function CreateEditorCtrl(wxWindow &$parent, wxRect $labelRect, wxVariant $value){}

	/**
	 * Return the attribute to be used for rendering.
	 * @return wxDataViewItemAttr
	 */
	function GetAttr(){}

	/**
	 * Return size required to show content.
	 * @return wxSize
	 */
	function GetSize(){}

	/**
	 * Override this so that the renderer can get the value from the editor control (pointed to by editor):
	 * @param wxWindow $editor
	 * @param wxVariant $value
	 * @return bool
	 */
	function GetValueFromEditorCtrl(wxWindow &$editor, wxVariant &$value){}

	/**
	 * Override this and make it return true in order to indicate that this renderer supports in-place editing.
	 * @return bool
	 */
	function HasEditorCtrl(){}

	/**
	 * Override this to react to a left click.
	 * @param wxPoint $cursor
	 * @param wxRect $cell
	 * @param wxDataViewModel $model
	 * @param wxDataViewItem $item
	 * @param integer $col
	 * @return bool
	 */
	function LeftClick(wxPoint $cursor, wxRect $cell, wxDataViewModel &$model, wxDataViewItem $item, $col){}

	/**
	 * Override this to render the cell.
	 * @param wxRect $cell
	 * @param wxDC $dc
	 * @param integer $state
	 * @return bool
	 */
	function Render(wxRect $cell, wxDC &$dc, $state){}

	/**
	 * This method should be called from within Render() whenever you need to render simple text.
	 * @param string $text
	 * @param integer $xoffset
	 * @param wxRect $cell
	 * @param wxDC $dc
	 * @param integer $state
	 */
	function RenderText($text, $xoffset, wxRect $cell, wxDC &$dc, $state){}

	/**
	 * Override this to start a drag operation.
	 * @param wxPoint $cursor
	 * @param wxRect $cell
	 * @param wxDataViewModel $model
	 * @param wxDataViewItem $item
	 * @param integer $col
	 * @return bool
	 */
	function StartDrag(wxPoint $cursor, wxRect $cell, wxDataViewModel &$model, wxDataViewItem $item, $col){}
}

class wxDataViewDateRenderer extends wxDataViewRenderer
{
	/**
	 * The ctor.
	 * @param string $varianttype
	 * @param wxDataViewCellMode $mode
	 * @param integer $align
	 */
	function __construct($varianttype="datetime", wxDataViewCellMode $mode=null, $align=wxDVR_DEFAULT_ALIGNMENT){}
}

class wxDataViewEvent extends wxNotifyEvent
{
	/**
	 * Constructor.
	 * @param integer $commandType
	 * @param integer $winid
	 */
	function __construct($commandType=wxEVT_NULL, $winid){}

	/**
	 * Return the first row that will be displayed.
	 * @return integer
	 */
	function GetCacheFrom(){}

	/**
	 * Return the last row that will be displayed.
	 * @return integer
	 */
	function GetCacheTo(){}

	/**
	 * Returns the position of the column in the control or -1 if no column field was set by the event emitter.
	 * @return integer
	 */
	function GetColumn(){}

	/**
	 * Gets the data buffer for a drop data transfer.
	 * @return mixed
	 */
	function GetDataBuffer(){}

	/**
	 * Gets the wxDataFormat during a drop operation.
	 * @return wxDataFormat
	 */
	function GetDataFormat(){}

	/**
	 * Gets the data size for a drop data transfer.
	 * @return integer
	 */
	function GetDataSize(){}

	/**
	 * Returns a pointer to the wxDataViewColumn from which the event was emitted or NULL.
	 * @return wxDataViewColumn
	 */
	function GetDataViewColumn(){}

	/**
	 * Returns the wxDataViewModel associated with the event.
	 * @return wxDataViewModel
	 */
	function GetModel(){}

	/**
	 * Returns the position of a context menu event in screen coordinates.
	 * @return wxPoint
	 */
	function GetPosition(){}

	/**
	 * Returns a reference to a value.
	 * @return wxVariant
	 */
	function GetValue(){}

	/**
	 * Can be used to determine whether the new value is going to be accepted in wxEVT_COMMAND_DATAVIEW_ITEM_EDITING_DONE handler.
	 * @return bool
	 */
	function IsEditCancelled(){}

	/**
	 * Sets the column index associated with this event.
	 * @param integer $col
	 */
	function SetColumn($col){}

	/**
	 * Set wxDataObject for data transfer within a drag operation.
	 * @param wxDataObject $obj
	 */
	function SetDataObject(wxDataObject &$obj){}

	/**
	 * For wxEVT_DATAVIEW_COLUMN_HEADER_CLICK only.
	 * @param wxDataViewColumn $col
	 */
	function SetDataViewColumn(wxDataViewColumn &$col){}

	/**
	 * Sets the dataview model associated with this event.
	 * @param wxDataViewModel $model
	 */
	function SetModel(wxDataViewModel &$model){}

	/**
	 * Sets the value associated with this event.
	 * @param wxVariant $value
	 */
	function SetValue(wxVariant $value){}
}

class wxDataViewIconText extends wxObject
{
	/**
	 * Constructor.
	 * @param string $text
	 * @param wxIcon $icon
	 * @param wxDataViewIconText $other
	 */
	function __construct($text=wxEmptyString, wxIcon $icon=null, wxDataViewIconText $other){}

	/**
	 * Gets the icon.
	 * @return wxIcon
	 */
	function GetIcon(){}

	/**
	 * Gets the text.
	 * @return string
	 */
	function GetText(){}

	/**
	 * Set the icon.
	 * @param wxIcon $icon
	 */
	function SetIcon(wxIcon $icon){}

	/**
	 * Set the text.
	 * @param string $text
	 */
	function SetText($text){}
}

class wxDataViewIconTextRenderer extends wxDataViewRenderer
{
	/**
	 * The ctor.
	 * @param string $varianttype
	 * @param wxDataViewCellMode $mode
	 * @param integer $align
	 */
	function __construct($varianttype="wxDataViewIconText", wxDataViewCellMode $mode=null, $align=wxDVR_DEFAULT_ALIGNMENT){}
}

class wxDataViewIndexListModel extends wxDataViewListModel
{
}

class wxDataViewItem
{
	/**
	 * Constructor.
	 * @param wxDataViewItem $item
	 * @param mixed $id
	 */
	function __construct(wxDataViewItem $item, $id){}

	/**
	 * Returns the ID.
	 * @return mixed
	 */
	function GetID(){}

	/**
	 * Returns true if the ID is not NULL.
	 * @return bool
	 */
	function IsOk(){}
}

class wxDataViewItemAttr
{
	/**
	 * Constructor.
	 */
	function __construct(){}

	/**
	 * Call this to indicate that the item shall be displayed in bold text.
	 * @param bool $set
	 */
	function SetBold($set){}

	/**
	 * Call this to indicate that the item shall be displayed with that colour.
	 * @param wxColour $colour
	 */
	function SetColour(wxColour $colour){}

	/**
	 * Call this to indicate that the item shall be displayed in italic text.
	 * @param bool $set
	 */
	function SetItalic($set){}
}

class wxDataViewListCtrl extends wxDataViewCtrl
{
	/**
	 * Default ctor.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param wxValidator $validator
	 */
	function __construct(wxWindow &$parent, $id, wxPoint $pos=null, wxSize $size=null, $style=wxDV_ROW_LINES, wxValidator $validator=null){}

	/**
	 * Appends a column to the control and additionally appends a column to the list store with the type varianttype.
	 * @param wxDataViewColumn $column
	 * @param string $varianttype
	 */
	function AppendColumn(wxDataViewColumn &$column, $varianttype){}

	/**
	 * Appends an icon-and-text column to the control and the store.
	 * @param string $label
	 * @param wxDataViewCellMode $mode
	 * @param integer $width
	 * @param wxAlignment $align
	 * @param integer $flags
	 * @return wxDataViewColumn
	 */
	function AppendIconTextColumn($label, wxDataViewCellMode $mode=null, $width=-1, wxAlignment $align=null, $flags=wxDATAVIEW_COL_RESIZABLE){}

	/**
	 * Appends a progress column to the control and the store.
	 * @param string $label
	 * @param wxDataViewCellMode $mode
	 * @param integer $width
	 * @param wxAlignment $align
	 * @param integer $flags
	 * @return wxDataViewColumn
	 */
	function AppendProgressColumn($label, wxDataViewCellMode $mode=null, $width=-1, wxAlignment $align=null, $flags=wxDATAVIEW_COL_RESIZABLE){}

	/**
	 * Appends a text column to the control and the store.
	 * @param string $label
	 * @param wxDataViewCellMode $mode
	 * @param integer $width
	 * @param wxAlignment $align
	 * @param integer $flags
	 * @return wxDataViewColumn
	 */
	function AppendTextColumn($label, wxDataViewCellMode $mode=null, $width=-1, wxAlignment $align=null, $flags=wxDATAVIEW_COL_RESIZABLE){}

	/**
	 * Appends a toggle column to the control and the store.
	 * @param string $label
	 * @param wxDataViewCellMode $mode
	 * @param integer $width
	 * @param wxAlignment $align
	 * @param integer $flags
	 * @return wxDataViewColumn
	 */
	function AppendToggleColumn($label, wxDataViewCellMode $mode=null, $width=-1, wxAlignment $align=null, $flags=wxDATAVIEW_COL_RESIZABLE){}

	/**
	 * Creates the control and a wxDataViewListStore as its internal model.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param wxValidator $validator
	 * @return bool
	 */
	function Create(wxWindow &$parent, $id, wxPoint $pos=null, wxSize $size=null, $style=wxDV_ROW_LINES, wxValidator $validator=null){}

	/**
	 * Delete all items (= all rows).
	 */
	function DeleteAllItems(){}

	/**
	 * Delete the row at position row.
	 * @param integer $row
	 */
	function DeleteItem($row){}

	/**
	 * Returns index of the selected row or wxNOT_FOUND.
	 * @return integer
	 */
	function GetSelectedRow(){}

	/**
	 * Returns the store.
	 * @return wxDataViewListStore
	 */
	function GetStore(){}

	/**
	 * Returns the value from the store.
	 * @param integer $row
	 * @param integer $col
	 * @return string
	 */
	function GetTextValue($row, $col){}

	/**
	 * Returns the value from the store.
	 * @param integer $row
	 * @param integer $col
	 * @return bool
	 */
	function GetToggleValue($row, $col){}

	/**
	 * Returns the value from the store.
	 * @param wxVariant $value
	 * @param integer $row
	 * @param integer $col
	 */
	function GetValue(wxVariant &$value, $row, $col){}

	/**
	 * Inserts a column to the control and additionally inserts a column to the list store with the type varianttype.
	 * @param integer $pos
	 * @param wxDataViewColumn $column
	 * @param string $varianttype
	 */
	function InsertColumn($pos, wxDataViewColumn &$column, $varianttype){}

	/**
	 * Returns true if row is selected.
	 * @param integer $row
	 * @return bool
	 */
	function IsRowSelected($row){}

	/**
	 * Returns the position of given item or wxNOT_FOUND if it's not a valid item.
	 * @param wxDataViewItem $item
	 * @return integer
	 */
	function ItemToRow(wxDataViewItem $item){}

	/**
	 * Prepends a column to the control and additionally prepends a column to the list store with the type varianttype.
	 * @param wxDataViewColumn $column
	 * @param string $varianttype
	 */
	function PrependColumn(wxDataViewColumn &$column, $varianttype){}

	/**
	 * Returns the wxDataViewItem at the given row.
	 * @param integer $row
	 * @return wxDataViewItem
	 */
	function RowToItem($row){}

	/**
	 * Selects given row.
	 * @param integer $row
	 */
	function SelectRow($row){}

	/**
	 * Sets the value in the store and update the control.
	 * @param string $value
	 * @param integer $row
	 * @param integer $col
	 */
	function SetTextValue($value, $row, $col){}

	/**
	 * Sets the value in the store and update the control.
	 * @param bool $value
	 * @param integer $row
	 * @param integer $col
	 */
	function SetToggleValue($value, $row, $col){}

	/**
	 * Sets the value in the store and update the control.
	 * @param wxVariant $value
	 * @param integer $row
	 * @param integer $col
	 */
	function SetValue(wxVariant $value, $row, $col){}

	/**
	 * Unselects given row.
	 * @param integer $row
	 */
	function UnselectRow($row){}
}

class wxDataViewListModel extends wxDataViewModel
{
	/**
	 * Override this to indicate that the row has special font attributes.
	 * @param integer $row
	 * @param integer $col
	 * @param wxDataViewItemAttr $attr
	 * @return bool
	 */
	function GetAttrByRow($row, $col, wxDataViewItemAttr &$attr){}

	/**
	 * Returns the number of items (or rows) in the list.
	 * @return integer
	 */
	function GetCount(){}

	/**
	 * Returns the position of given item.
	 * @param wxDataViewItem $item
	 * @return integer
	 */
	function GetRow(wxDataViewItem $item){}

	/**
	 * Override this to allow getting values from the model.
	 * @param wxVariant $variant
	 * @param integer $row
	 * @param integer $col
	 */
	function GetValueByRow(wxVariant &$variant, $row, $col){}

	/**
	 * Override this if you want to disable specific items.
	 * @param integer $row
	 * @param integer $col
	 * @return bool
	 */
	function IsEnabledByRow($row, $col){}

	/**
	 * Called in order to set a value in the model.
	 * @param wxVariant $variant
	 * @param integer $row
	 * @param integer $col
	 * @return bool
	 */
	function SetValueByRow(wxVariant $variant, $row, $col){}
}

class wxDataViewListStore extends wxDataViewIndexListModel
{
	/**
	 * Constructor.
	 */
	function __construct(){}

	/**
	 * Appends a data column.
	 * @param string $varianttype
	 */
	function AppendColumn($varianttype){}

	/**
	 * Delete all item (=all rows) in the store.
	 */
	function DeleteAllItems(){}

	/**
	 * Delete the item (=row) at position pos.
	 * @param integer $pos
	 */
	function DeleteItem($pos){}

	/**
	 * Overridden from wxDataViewModel.
	 * @return integer
	 */
	function GetColumnCount(){}

	/**
	 * Overridden from wxDataViewModel.
	 * @param integer $col
	 * @return string
	 */
	function GetColumnType($col){}

	/**
	 * Overridden from wxDataViewIndexListModel.
	 * @param wxVariant $value
	 * @param integer $row
	 * @param integer $col
	 */
	function GetValueByRow(wxVariant &$value, $row, $col){}

	/**
	 * Inserts a data column before pos.
	 * @param integer $pos
	 * @param string $varianttype
	 */
	function InsertColumn($pos, $varianttype){}

	/**
	 * Prepends a data column.
	 * @param string $varianttype
	 */
	function PrependColumn($varianttype){}

	/**
	 * Overridden from wxDataViewIndexListModel.
	 * @param wxVariant $value
	 * @param integer $row
	 * @param integer $col
	 * @return bool
	 */
	function SetValueByRow(wxVariant $value, $row, $col){}
}

class wxDataViewModel extends wxRefCounter
{
	/**
	 * Adds a wxDataViewModelNotifier to the model.
	 * @param wxDataViewModelNotifier $notifier
	 */
	function AddNotifier(wxDataViewModelNotifier &$notifier){}

	/**
	 * Change the value of the given item and update the control to reflect it.
	 * @param wxVariant $variant
	 * @param wxDataViewItem $item
	 * @param integer $col
	 * @return bool
	 */
	function ChangeValue(wxVariant $variant, wxDataViewItem $item, $col){}

	/**
	 * Called to inform the model that all data has been cleared.
	 * @return bool
	 */
	function Cleared(){}

	/**
	 * The compare function to be used by control.
	 * @param wxDataViewItem $item1
	 * @param wxDataViewItem $item2
	 * @param integer $column
	 * @param bool $ascending
	 * @return integer
	 */
	function Compare(wxDataViewItem $item1, wxDataViewItem $item2, $column, $ascending){}

	/**
	 * Override this to indicate that the item has special font attributes.
	 * @param wxDataViewItem $item
	 * @param integer $col
	 * @param wxDataViewItemAttr $attr
	 * @return bool
	 */
	function GetAttr(wxDataViewItem $item, $col, wxDataViewItemAttr &$attr){}

	/**
	 * Override this to indicate the number of columns in the model.
	 * @return integer
	 */
	function GetColumnCount(){}

	/**
	 * Override this to indicate what type of data is stored in the column specified by col.
	 * @param integer $col
	 * @return string
	 */
	function GetColumnType($col){}

	/**
	 * Override this to indicate which wxDataViewItem representing the parent of item or an invalid wxDataViewItem if the root item is the parent item.
	 * @param wxDataViewItem $item
	 * @return wxDataViewItem
	 */
	function GetParent(wxDataViewItem $item){}

	/**
	 * Override this to indicate the value of item.
	 * @param wxVariant $variant
	 * @param wxDataViewItem $item
	 * @param integer $col
	 */
	function GetValue(wxVariant &$variant, wxDataViewItem $item, $col){}

	/**
	 * Override this method to indicate if a container item merely acts as a headline (or for categorisation) or if it also acts a normal item with entries for further columns.
	 * @param wxDataViewItem $item
	 * @return bool
	 */
	function HasContainerColumns(wxDataViewItem $item){}

	/**
	 * Override this to indicate that the model provides a default compare function that the control should use if no wxDataViewColumn has been chosen for sorting.
	 * @return bool
	 */
	function HasDefaultCompare(){}

	/**
	 * Return true if there is a value in the given column of this item.
	 * @param wxDataViewItem $item
	 * @param integer $col
	 * @return bool
	 */
	function HasValue(wxDataViewItem $item, $col){}

	/**
	 * Override this to indicate of item is a container, i.e.
	 * @param wxDataViewItem $item
	 * @return bool
	 */
	function IsContainer(wxDataViewItem $item){}

	/**
	 * Override this to indicate that the item should be disabled.
	 * @param wxDataViewItem $item
	 * @param integer $col
	 * @return bool
	 */
	function IsEnabled(wxDataViewItem $item, $col){}

	/**
	 * Call this to inform the model that an item has been added to the data.
	 * @param wxDataViewItem $parent
	 * @param wxDataViewItem $item
	 * @return bool
	 */
	function ItemAdded(wxDataViewItem $parent, wxDataViewItem $item){}

	/**
	 * Call this to inform the model that an item has changed.
	 * @param wxDataViewItem $item
	 * @return bool
	 */
	function ItemChanged(wxDataViewItem $item){}

	/**
	 * Call this to inform the model that an item has been deleted from the data.
	 * @param wxDataViewItem $parent
	 * @param wxDataViewItem $item
	 * @return bool
	 */
	function ItemDeleted(wxDataViewItem $parent, wxDataViewItem $item){}

	/**
	 * Remove the notifier from the list of notifiers.
	 * @param wxDataViewModelNotifier $notifier
	 */
	function RemoveNotifier(wxDataViewModelNotifier &$notifier){}

	/**
	 * Call this to initiate a resort after the sort function has been changed.
	 */
	function Resort(){}

	/**
	 * This gets called in order to set a value in the data model.
	 * @param wxVariant $variant
	 * @param wxDataViewItem $item
	 * @param integer $col
	 * @return bool
	 */
	function SetValue(wxVariant $variant, wxDataViewItem $item, $col){}

	/**
	 * Call this to inform this model that a value in the model has been changed.
	 * @param wxDataViewItem $item
	 * @param integer $col
	 * @return bool
	 */
	function ValueChanged(wxDataViewItem $item, $col){}
}

class wxDataViewModelNotifier
{
	/**
	 * Constructor.
	 */
	function __construct(){}

	/**
	 * Called by owning model.
	 * @return bool
	 */
	function Cleared(){}

	/**
	 * Get owning wxDataViewModel.
	 * @return wxDataViewModel
	 */
	function GetOwner(){}

	/**
	 * Called by owning model.
	 * @param wxDataViewItem $parent
	 * @param wxDataViewItem $item
	 * @return bool
	 */
	function ItemAdded(wxDataViewItem $parent, wxDataViewItem $item){}

	/**
	 * Called by owning model.
	 * @param wxDataViewItem $item
	 * @return bool
	 */
	function ItemChanged(wxDataViewItem $item){}

	/**
	 * Called by owning model.
	 * @param wxDataViewItem $parent
	 * @param wxDataViewItem $item
	 * @return bool
	 */
	function ItemDeleted(wxDataViewItem $parent, wxDataViewItem $item){}

	/**
	 * Called by owning model.
	 */
	function Resort(){}

	/**
	 * Set owner of this notifier.
	 * @param wxDataViewModel $owner
	 */
	function SetOwner(wxDataViewModel &$owner){}

	/**
	 * Called by owning model.
	 * @param wxDataViewItem $item
	 * @param integer $col
	 * @return bool
	 */
	function ValueChanged(wxDataViewItem $item, $col){}
}

class wxDataViewProgressRenderer extends wxDataViewRenderer
{
	/**
	 * The ctor.
	 * @param string $label
	 * @param string $varianttype
	 * @param wxDataViewCellMode $mode
	 * @param integer $align
	 */
	function __construct($label=wxEmptyString, $varianttype="long", wxDataViewCellMode $mode=null, $align=wxDVR_DEFAULT_ALIGNMENT){}
}

class wxDataViewRenderer extends wxObject
{
	/**
	 * Enable or disable replacing parts of the item text with ellipsis to make it fit the column width.
	 * @param wxEllipsizeMode $mode
	 */
	function EnableEllipsize(wxEllipsizeMode $mode=null){}

	/**
	 * Disable replacing parts of the item text with ellipsis.
	 */
	function DisableEllipsize(){}

	/**
	 * Returns the alignment.
	 * @return integer
	 */
	function GetAlignment(){}

	/**
	 * Returns the ellipsize mode used by the renderer.
	 * @return wxEllipsizeMode
	 */
	function GetEllipsizeMode(){}

	/**
	 * Returns the cell mode.
	 * @return wxDataViewCellMode
	 */
	function GetMode(){}

	/**
	 * Returns pointer to the owning wxDataViewColumn.
	 * @return wxDataViewColumn
	 */
	function GetOwner(){}

	/**
	 * This methods retrieves the value from the renderer in order to transfer the value back to the data model.
	 * @param wxVariant $value
	 * @return bool
	 */
	function GetValue(wxVariant &$value){}

	/**
	 * Returns a string with the type of the wxVariant supported by this renderer.
	 * @return string
	 */
	function GetVariantType(){}

	/**
	 * Sets the alignment of the renderer's content.
	 * @param integer $align
	 */
	function SetAlignment($align){}

	/**
	 * Sets the owning wxDataViewColumn.
	 * @param wxDataViewColumn $owner
	 */
	function SetOwner(wxDataViewColumn &$owner){}

	/**
	 * Set the value of the renderer (and thus its cell) to value.
	 * @param wxVariant $value
	 * @return bool
	 */
	function SetValue(wxVariant $value){}

	/**
	 * Before data is committed to the data model, it is passed to this method where it can be checked for validity.
	 * @param wxVariant $value
	 * @return bool
	 */
	function Validate(wxVariant &$value){}
}

class wxDataViewSpinRenderer extends wxDataViewCustomRenderer
{
	/**
	 * Constructor.
	 * @param integer $min
	 * @param integer $max
	 * @param wxDataViewCellMode $mode
	 * @param integer $align
	 */
	function __construct($min, $max, wxDataViewCellMode $mode=null, $align=wxDVR_DEFAULT_ALIGNMENT){}
}

class wxDataViewTextRenderer extends wxDataViewRenderer
{
	/**
	 * The ctor.
	 * @param string $varianttype
	 * @param wxDataViewCellMode $mode
	 * @param integer $align
	 */
	function __construct($varianttype="string", wxDataViewCellMode $mode=null, $align=wxDVR_DEFAULT_ALIGNMENT){}
}

class wxDataViewToggleRenderer extends wxDataViewRenderer
{
	/**
	 * The ctor.
	 * @param string $varianttype
	 * @param wxDataViewCellMode $mode
	 * @param integer $align
	 */
	function __construct($varianttype="bool", wxDataViewCellMode $mode=null, $align=wxDVR_DEFAULT_ALIGNMENT){}
}

class wxDataViewTreeCtrl extends wxDataViewCtrl
{
	/**
	 * Default ctor.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param wxValidator $validator
	 */
	function __construct(wxWindow &$parent, $id, wxPoint $pos=null, wxSize $size=null, $style=null, wxValidator $validator=null){}

	/**
	 * Appends a container to the given parent.
	 * @param wxDataViewItem $parent
	 * @param string $text
	 * @param integer $icon
	 * @param integer $expanded
	 * @param wxClientData $data
	 * @return wxDataViewItem
	 */
	function AppendContainer(wxDataViewItem $parent, $text, $icon=-1, $expanded=-1, wxClientData &$data=null){}

	/**
	 * Appends an item to the given parent.
	 * @param wxDataViewItem $parent
	 * @param string $text
	 * @param integer $icon
	 * @param wxClientData $data
	 * @return wxDataViewItem
	 */
	function AppendItem(wxDataViewItem $parent, $text, $icon=-1, wxClientData &$data=null){}

	/**
	 * Creates the control and a wxDataViewTreeStore as its internal model.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param wxValidator $validator
	 * @return bool
	 */
	function Create(wxWindow &$parent, $id, wxPoint $pos=null, wxSize $size=null, $style=null, wxValidator $validator=null){}

	/**
	 * Calls the identical method from wxDataViewTreeStore.
	 */
	function DeleteAllItems(){}

	/**
	 * Calls the identical method from wxDataViewTreeStore.
	 * @param wxDataViewItem $item
	 */
	function DeleteChildren(wxDataViewItem $item){}

	/**
	 * Calls the identical method from wxDataViewTreeStore.
	 * @param wxDataViewItem $item
	 */
	function DeleteItem(wxDataViewItem $item){}

	/**
	 * Calls the identical method from wxDataViewTreeStore.
	 * @param wxDataViewItem $parent
	 * @return integer
	 */
	function GetChildCount(wxDataViewItem $parent){}

	/**
	 * Returns the image list.
	 * @return wxImageList
	 */
	function GetImageList(){}

	/**
	 * Calls the identical method from wxDataViewTreeStore.
	 * @param wxDataViewItem $item
	 * @return wxClientData
	 */
	function GetItemData(wxDataViewItem $item){}

	/**
	 * Calls the identical method from wxDataViewTreeStore.
	 * @param wxDataViewItem $item
	 * @return wxIcon
	 */
	function GetItemExpandedIcon(wxDataViewItem $item){}

	/**
	 * Calls the identical method from wxDataViewTreeStore.
	 * @param wxDataViewItem $item
	 * @return wxIcon
	 */
	function GetItemIcon(wxDataViewItem $item){}

	/**
	 * Calls the identical method from wxDataViewTreeStore.
	 * @param wxDataViewItem $item
	 * @return string
	 */
	function GetItemText(wxDataViewItem $item){}

	/**
	 * Calls the identical method from wxDataViewTreeStore.
	 * @param wxDataViewItem $parent
	 * @param integer $pos
	 * @return wxDataViewItem
	 */
	function GetNthChild(wxDataViewItem $parent, $pos){}

	/**
	 * Returns the store.
	 * @return wxDataViewTreeStore
	 */
	function GetStore(){}

	/**
	 * Calls the same method from wxDataViewTreeStore but uses an index position in the image list instead of a wxIcon.
	 * @param wxDataViewItem $parent
	 * @param wxDataViewItem $previous
	 * @param string $text
	 * @param integer $icon
	 * @param integer $expanded
	 * @param wxClientData $data
	 * @return wxDataViewItem
	 */
	function InsertContainer(wxDataViewItem $parent, wxDataViewItem $previous, $text, $icon=-1, $expanded=-1, wxClientData &$data=null){}

	/**
	 * Calls the same method from wxDataViewTreeStore but uses an index position in the image list instead of a wxIcon.
	 * @param wxDataViewItem $parent
	 * @param wxDataViewItem $previous
	 * @param string $text
	 * @param integer $icon
	 * @param wxClientData $data
	 * @return wxDataViewItem
	 */
	function InsertItem(wxDataViewItem $parent, wxDataViewItem $previous, $text, $icon=-1, wxClientData &$data=null){}

	/**
	 * Returns true if item is a container.
	 * @param wxDataViewItem $item
	 * @return bool
	 */
	function IsContainer(wxDataViewItem $item){}

	/**
	 * Calls the same method from wxDataViewTreeStore but uses an index position in the image list instead of a wxIcon.
	 * @param wxDataViewItem $parent
	 * @param string $text
	 * @param integer $icon
	 * @param integer $expanded
	 * @param wxClientData $data
	 * @return wxDataViewItem
	 */
	function PrependContainer(wxDataViewItem $parent, $text, $icon=-1, $expanded=-1, wxClientData &$data=null){}

	/**
	 * Calls the same method from wxDataViewTreeStore but uses an index position in the image list instead of a wxIcon.
	 * @param wxDataViewItem $parent
	 * @param string $text
	 * @param integer $icon
	 * @param wxClientData $data
	 * @return wxDataViewItem
	 */
	function PrependItem(wxDataViewItem $parent, $text, $icon=-1, wxClientData &$data=null){}

	/**
	 * Sets the image list.
	 * @param wxImageList $imagelist
	 */
	function SetImageList(wxImageList &$imagelist){}

	/**
	 * Calls the identical method from wxDataViewTreeStore.
	 * @param wxDataViewItem $item
	 * @param wxClientData $data
	 */
	function SetItemData(wxDataViewItem $item, wxClientData &$data){}

	/**
	 * Calls the identical method from wxDataViewTreeStore.
	 * @param wxDataViewItem $item
	 * @param wxIcon $icon
	 */
	function SetItemExpandedIcon(wxDataViewItem $item, wxIcon $icon){}

	/**
	 * Calls the identical method from wxDataViewTreeStore.
	 * @param wxDataViewItem $item
	 * @param wxIcon $icon
	 */
	function SetItemIcon(wxDataViewItem $item, wxIcon $icon){}

	/**
	 * Calls the identical method from wxDataViewTreeStore.
	 * @param wxDataViewItem $item
	 * @param string $text
	 */
	function SetItemText(wxDataViewItem $item, $text){}
}

class wxDataViewTreeStore extends wxDataViewModel
{
	/**
	 * Constructor.
	 */
	function __construct(){}

	/**
	 * Append a container.
	 * @param wxDataViewItem $parent
	 * @param string $text
	 * @param wxIcon $icon
	 * @param wxIcon $expanded
	 * @param wxClientData $data
	 * @return wxDataViewItem
	 */
	function AppendContainer(wxDataViewItem $parent, $text, wxIcon $icon=null, wxIcon $expanded=null, wxClientData &$data=null){}

	/**
	 * Append an item.
	 * @param wxDataViewItem $parent
	 * @param string $text
	 * @param wxIcon $icon
	 * @param wxClientData $data
	 * @return wxDataViewItem
	 */
	function AppendItem(wxDataViewItem $parent, $text, wxIcon $icon=null, wxClientData &$data=null){}

	/**
	 * Delete all item in the model.
	 */
	function DeleteAllItems(){}

	/**
	 * Delete all children of the item, but not the item itself.
	 * @param wxDataViewItem $item
	 */
	function DeleteChildren(wxDataViewItem $item){}

	/**
	 * Delete this item.
	 * @param wxDataViewItem $item
	 */
	function DeleteItem(wxDataViewItem $item){}

	/**
	 * Return the number of children of item.
	 * @param wxDataViewItem $parent
	 * @return integer
	 */
	function GetChildCount(wxDataViewItem $parent){}

	/**
	 * Returns the client data associated with the item.
	 * @param wxDataViewItem $item
	 * @return wxClientData
	 */
	function GetItemData(wxDataViewItem $item){}

	/**
	 * Returns the icon to display in expanded containers.
	 * @param wxDataViewItem $item
	 * @return wxIcon
	 */
	function GetItemExpandedIcon(wxDataViewItem $item){}

	/**
	 * Returns the icon of the item.
	 * @param wxDataViewItem $item
	 * @return wxIcon
	 */
	function GetItemIcon(wxDataViewItem $item){}

	/**
	 * Returns the text of the item.
	 * @param wxDataViewItem $item
	 * @return string
	 */
	function GetItemText(wxDataViewItem $item){}

	/**
	 * Returns the nth child item of item.
	 * @param wxDataViewItem $parent
	 * @param integer $pos
	 * @return wxDataViewItem
	 */
	function GetNthChild(wxDataViewItem $parent, $pos){}

	/**
	 * Inserts a container after previous.
	 * @param wxDataViewItem $parent
	 * @param wxDataViewItem $previous
	 * @param string $text
	 * @param wxIcon $icon
	 * @param wxIcon $expanded
	 * @param wxClientData $data
	 * @return wxDataViewItem
	 */
	function InsertContainer(wxDataViewItem $parent, wxDataViewItem $previous, $text, wxIcon $icon=null, wxIcon $expanded=null, wxClientData &$data=null){}

	/**
	 * Inserts an item after previous.
	 * @param wxDataViewItem $parent
	 * @param wxDataViewItem $previous
	 * @param string $text
	 * @param wxIcon $icon
	 * @param wxClientData $data
	 * @return wxDataViewItem
	 */
	function InsertItem(wxDataViewItem $parent, wxDataViewItem $previous, $text, wxIcon $icon=null, wxClientData &$data=null){}

	/**
	 * Inserts a container before the first child item or parent.
	 * @param wxDataViewItem $parent
	 * @param string $text
	 * @param wxIcon $icon
	 * @param wxIcon $expanded
	 * @param wxClientData $data
	 * @return wxDataViewItem
	 */
	function PrependContainer(wxDataViewItem $parent, $text, wxIcon $icon=null, wxIcon $expanded=null, wxClientData &$data=null){}

	/**
	 * Inserts an item before the first child item or parent.
	 * @param wxDataViewItem $parent
	 * @param string $text
	 * @param wxIcon $icon
	 * @param wxClientData $data
	 * @return wxDataViewItem
	 */
	function PrependItem(wxDataViewItem $parent, $text, wxIcon $icon=null, wxClientData &$data=null){}

	/**
	 * Sets the client data associated with the item.
	 * @param wxDataViewItem $item
	 * @param wxClientData $data
	 */
	function SetItemData(wxDataViewItem $item, wxClientData &$data){}

	/**
	 * Sets the expanded icon for the item.
	 * @param wxDataViewItem $item
	 * @param wxIcon $icon
	 */
	function SetItemExpandedIcon(wxDataViewItem $item, wxIcon $icon){}

	/**
	 * Sets the icon for the item.
	 * @param wxDataViewItem $item
	 * @param wxIcon $icon
	 */
	function SetItemIcon(wxDataViewItem $item, wxIcon $icon){}
}

class wxDataViewVirtualListModel extends wxDataViewListModel
{
}

class wxDateEvent extends wxCommandEvent
{
	/**
	 * Returns the date.
	 * @return timestamp
	 */
	function GetDate(){}

	/**
	 * Sets the date carried by the event, normally only used by the library internally.
	 * @param timestamp $date
	 */
	function SetDate($date){}
}

class wxDatePickerCtrl extends wxControl
{
	/**
	 * Initializes the object and calls Create() with all the parameters.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param timestamp $dt
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param wxValidator $validator
	 * @param string $name
	 */
	function __construct(wxWindow &$parent, $id, $dt=wxDefaultDateTime, wxPoint $pos=null, wxSize $size=null, $style=null, wxValidator $validator=null, $name="datectrl"){}

	/**
	 * Create the control window.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param timestamp $dt
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param wxValidator $validator
	 * @param string $name
	 * @return bool
	 */
	function Create(wxWindow &$parent, $id, $dt=wxDefaultDateTime, wxPoint $pos=null, wxSize $size=null, $style=null, wxValidator $validator=null, $name="datectrl"){}

	/**
	 * If the control had been previously limited to a range of dates using SetRange(), returns the lower and upper bounds of this range.
	 * @param timestamp $dt1
	 * @param timestamp $dt2
	 * @return bool
	 */
	function GetRange(&$dt1, &$dt2){}

	/**
	 * Returns the currently entered date.
	 * @return timestamp
	 */
	function GetValue(){}

	/**
	 * Sets the valid range for the date selection.
	 * @param timestamp $dt1
	 * @param timestamp $dt2
	 */
	function SetRange($dt1, $dt2){}

	/**
	 * Changes the current value of the control.
	 * @param timestamp $dt
	 */
	function SetValue($dt){}
}

class wxDialog extends wxTopLevelWindow
{
	/**
	 * Constructor.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param string $title
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param string $name
	 */
	function __construct(wxWindow &$parent, $id, $title, wxPoint $pos=null, wxSize $size=null, $style=wxDEFAULT_DIALOG_STYLE, $name=wxDialogNameStr){}

	/**
	 * Adds an identifier to be regarded as a main button for the non-scrolling area of a dialog.
	 * @param integer $id
	 */
	function AddMainButtonId($id){}

	/**
	 * Returns true if this dialog can and should perform layout adaptation using DoLayoutAdaptation(), usually if the dialog is too large to fit on the display.
	 * @return bool
	 */
	function CanDoLayoutAdaptation(){}

	/**
	 * Centres the dialog box on the display.
	 * @param integer $direction
	 */
	function Centre($direction=wxBOTH){}

	/**
	 * Used for two-step dialog box construction.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param string $title
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param string $name
	 * @return bool
	 */
	function Create(wxWindow &$parent, $id, $title, wxPoint $pos=null, wxSize $size=null, $style=wxDEFAULT_DIALOG_STYLE, $name=wxDialogNameStr){}

	/**
	 * Creates a sizer with standard buttons.
	 * @param integer $flags
	 * @return wxSizer
	 */
	function CreateButtonSizer($flags){}

	/**
	 * Creates a sizer with standard buttons using CreateButtonSizer() separated from the rest of the dialog contents by a horizontal wxStaticLine.
	 * @param integer $flags
	 * @return wxSizer
	 */
	function CreateSeparatedButtonSizer($flags){}

	/**
	 * Returns the sizer containing the given one with a separating wxStaticLine if necessarily.
	 * @param wxSizer $sizer
	 * @return wxSizer
	 */
	function CreateSeparatedSizer(wxSizer &$sizer){}

	/**
	 * Creates a wxStdDialogButtonSizer with standard buttons.
	 * @param integer $flags
	 * @return wxStdDialogButtonSizer
	 */
	function CreateStdDialogButtonSizer($flags){}

	/**
	 * Performs layout adaptation, usually if the dialog is too large to fit on the display.
	 * @return bool
	 */
	function DoLayoutAdaptation(){}

	/**
	 * A static function enabling or disabling layout adaptation for all dialogs.
	 * @param bool $enable
	 */
	function EnableLayoutAdaptation($enable){}

	/**
	 * Ends a modal dialog, passing a value to be returned from the ShowModal() invocation.
	 * @param integer $retCode
	 */
	function EndModal($retCode){}

	/**
	 * Gets the identifier of the button which works like standard OK button in this dialog.
	 * @return integer
	 */
	function GetAffirmativeId(){}

	/**
	 * Override this to return a window containing the main content of the dialog.
	 * @return wxWindow
	 */
	function GetContentWindow(){}

	/**
	 * Gets the identifier of the button to map presses of ESC button to.
	 * @return integer
	 */
	function GetEscapeId(){}

	/**
	 * Returns true if the dialog has been adapted, usually by making it scrollable to work with a small display.
	 * @return bool
	 */
	function GetLayoutAdaptationDone(){}

	/**
	 * Gets a value representing the aggressiveness of search for buttons and sizers to be in the non-scrolling part of a layout-adapted dialog.
	 * @return integer
	 */
	function GetLayoutAdaptationLevel(){}

	/**
	 * Gets the return code for this window.
	 * @return integer
	 */
	function GetReturnCode(){}

	/**
	 * Iconizes or restores the dialog.
	 * @param bool $iconize
	 */
	function Iconize($iconize=true){}

	/**
	 * Returns true if the dialog box is iconized.
	 * @return bool
	 */
	function IsIconized(){}

	/**
	 * A static function returning true if layout adaptation is enabled for all dialogs.
	 * @return bool
	 */
	function IsLayoutAdaptationEnabled(){}

	/**
	 * Returns true if the dialog box is modal, false otherwise.
	 * @return bool
	 */
	function IsModal(){}

	/**
	 * Sets the identifier to be used as OK button.
	 * @param integer $id
	 */
	function SetAffirmativeId($id){}

	/**
	 * Sets the identifier of the button which should work like the standard "Cancel" button in this dialog.
	 * @param integer $id
	 */
	function SetEscapeId($id){}

	/**
	 * Sets the icon for this dialog.
	 * @param wxIcon $icon
	 */
	function SetIcon(wxIcon $icon){}

	/**
	 * Sets the icons for this dialog.
	 * @param wxIconBundle $icons
	 */
	function SetIcons(wxIconBundle $icons){}

	/**
	 * Marks the dialog as having been adapted, usually by making it scrollable to work with a small display.
	 * @param bool $done
	 */
	function SetLayoutAdaptationDone($done){}

	/**
	 * Sets the aggressiveness of search for buttons and sizers to be in the non-scrolling part of a layout-adapted dialog.
	 * @param integer $level
	 */
	function SetLayoutAdaptationLevel($level){}

	/**
	 * Sets the adaptation mode, overriding the global adaptation flag.
	 * @param wxDialogLayoutAdaptationMode $mode
	 */
	function SetLayoutAdaptationMode(wxDialogLayoutAdaptationMode $mode){}

	/**
	 * Sets the return code for this window.
	 * @param integer $retCode
	 */
	function SetReturnCode($retCode){}

	/**
	 * Hides or shows the dialog.
	 * @param bool $show
	 * @return bool
	 */
	function Show($show=1){}

	/**
	 * Shows an application-modal dialog.
	 * @return integer
	 */
	function ShowModal(){}

	/**
	 * Shows a dialog modal to the parent top level window only.
	 */
	function ShowWindowModal(){}
}

class wxDirDialog extends wxDialog
{
	/**
	 * Constructor.
	 * @param wxWindow $parent
	 * @param string $message
	 * @param string $defaultPath
	 * @param integer $style
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param string $name
	 */
	function __construct(wxWindow &$parent, $message=wxDirSelectorPromptStr, $defaultPath=wxEmptyString, $style=wxDD_DEFAULT_STYLE, wxPoint $pos=null, wxSize $size=null, $name=wxDirDialogNameStr){}

	/**
	 * Returns the message that will be displayed on the dialog.
	 * @return string
	 */
	function GetMessage(){}

	/**
	 * Returns the default or user-selected path.
	 * @return string
	 */
	function GetPath(){}

	/**
	 * Sets the message that will be displayed on the dialog.
	 * @param string $message
	 */
	function SetMessage($message){}

	/**
	 * Sets the default path.
	 * @param string $path
	 */
	function SetPath($path){}

	/**
	 * Shows the dialog, returning wxID_OK if the user pressed OK, and wxID_CANCEL otherwise.
	 * @return integer
	 */
	function ShowModal(){}
}

class wxDirPickerCtrl extends wxPickerBase
{
	/**
	 * Initializes the object and calls Create() with all the parameters.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param string $path
	 * @param string $message
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param wxValidator $validator
	 * @param string $name
	 */
	function __construct(wxWindow &$parent, $id, $path=wxEmptyString, $message=wxDirSelectorPromptStr, wxPoint $pos=null, wxSize $size=null, $style=wxDIRP_DEFAULT_STYLE, wxValidator $validator=null, $name=wxDirPickerCtrlNameStr){}

	/**
	 * Creates the widgets with the given parameters.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param string $path
	 * @param string $message
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param wxValidator $validator
	 * @param string $name
	 * @return bool
	 */
	function Create(wxWindow &$parent, $id, $path=wxEmptyString, $message=wxDirSelectorPromptStr, wxPoint $pos=null, wxSize $size=null, $style=wxDIRP_DEFAULT_STYLE, wxValidator $validator=null, $name=wxDirPickerCtrlNameStr){}

	/**
	 * Returns the absolute path of the currently selected directory as a wxFileName object.
	 * @return wxFileName
	 */
	function GetDirName(){}

	/**
	 * Returns the absolute path of the currently selected directory.
	 * @return string
	 */
	function GetPath(){}

	/**
	 * Just like SetPath() but this function takes a wxFileName object.
	 * @param wxFileName $dirname
	 */
	function SetDirName(wxFileName $dirname){}

	/**
	 * Sets the absolute path of (the default converter uses current locale's charset)the currently selected directory.
	 * @param string $dirname
	 */
	function SetPath($dirname){}
}

class wxDisplay
{
	/**
	 * Constructor, setting up a wxDisplay instance with the specified display.
	 * @param integer $index
	 */
	function __construct($index){}

	/**
	 * Changes the video mode of this display to the mode specified in the mode parameter.
	 * @param wxVideoMode $mode
	 * @return bool
	 */
	function ChangeMode(wxVideoMode $mode=null){}

	/**
	 * Returns the client area of the display.
	 * @return wxRect
	 */
	function GetClientArea(){}

	/**
	 * Returns the number of connected displays.
	 * @return integer
	 */
	function GetCount(){}

	/**
	 * Returns the current video mode that this display is in.
	 * @return wxVideoMode
	 */
	function GetCurrentMode(){}

	/**
	 * Returns the index of the display on which the given point lies, or wxNOT_FOUND if the point is not on any connected display.
	 * @param wxPoint $pt
	 * @return integer
	 */
	function GetFromPoint(wxPoint $pt){}

	/**
	 * Returns the index of the display on which the given window lies.
	 * @param wxWindow $win
	 * @return integer
	 */
	function GetFromWindow(wxWindow $win){}

	/**
	 * Returns the bounding rectangle of the display whose index was passed to the constructor.
	 * @return wxRect
	 */
	function GetGeometry(){}

	/**
	 * Returns the display's name.
	 * @return string
	 */
	function GetName(){}

	/**
	 * Returns true if the display is the primary display.
	 * @return bool
	 */
	function IsPrimary(){}
}

class wxDisplayChangedEvent extends wxEvent
{
	/**
	 * wxDisplayChangedEvent
	 */
	function __construct(){}
}

class wxDropTarget
{
	/**
	 * Constructor.
	 * @param wxDataObject $data
	 */
	function __construct(wxDataObject &$data=null){}

	/**
	 * This method may only be called from within OnData().
	 * @return bool
	 */
	function GetData(){}

	/**
	 * Called after OnDrop() returns true.
	 * @param integer $x
	 * @param integer $y
	 * @param wxDragResult $defResult
	 * @return wxDragResult
	 */
	function OnData($x, $y, wxDragResult $defResult){}

	/**
	 * Called when the mouse is being dragged over the drop target.
	 * @param integer $x
	 * @param integer $y
	 * @param wxDragResult $defResult
	 * @return wxDragResult
	 */
	function OnDragOver($x, $y, wxDragResult $defResult){}

	/**
	 * Called when the user drops a data object on the target.
	 * @param integer $x
	 * @param integer $y
	 * @return bool
	 */
	function OnDrop($x, $y){}

	/**
	 * Called when the mouse enters the drop target.
	 * @param integer $x
	 * @param integer $y
	 * @param wxDragResult $defResult
	 * @return wxDragResult
	 */
	function OnEnter($x, $y, wxDragResult $defResult){}

	/**
	 * Called when the mouse leaves the drop target.
	 */
	function OnLeave(){}

	/**
	 * Sets the data wxDataObject associated with the drop target and deletes any previously associated data object.
	 * @param wxDataObject $data
	 */
	function SetDataObject(wxDataObject &$data){}
}

class wxEditableListBox extends wxPanel
{
	/**
	 * Default ctor.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param string $label
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param string $name
	 */
	function __construct(wxWindow &$parent, $id, $label, wxPoint $pos=null, wxSize $size=null, $style=wxEL_DEFAULT_STYLE, $name=wxEditableListBoxNameStr){}

	/**
	 * Creates the editable listbox for two-step construction.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param string $label
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param string $name
	 * @return bool
	 */
	function Create(wxWindow &$parent, $id, $label, wxPoint $pos=null, wxSize $size=null, $style=wxEL_DEFAULT_STYLE, $name=wxEditableListBoxNameStr){}

	/**
	 * Returns in the given array the current contents of the control (the array will be erased before control's contents are appended).
	 * @param array $strings
	 */
	function GetStrings(array &$strings){}

	/**
	 * Replaces current contents with given strings.
	 * @param array $strings
	 */
	function SetStrings(array $strings){}
}

class wxEraseEvent extends wxEvent
{
	/**
	 * Constructor.
	 * @param integer $id
	 * @param wxDC $dc
	 */
	function __construct($id, wxDC &$dc=null){}

	/**
	 * Returns the device context associated with the erase event to draw on.
	 * @return wxDC
	 */
	function GetDC(){}
}

class wxEvent extends wxObject
{
	/**
	 * Constructor.
	 * @param integer $id
	 * @param integer $eventType
	 */
	function __construct($id, $eventType=wxEVT_NULL){}

	/**
	 * Returns a copy of the event.
	 * @return wxEvent
	 */
	function CloneMethod(){}

	/**
	 * Returns a generic category for this event.
	 * @return wxEventCategory
	 */
	function GetEventCategory(){}

	/**
	 * Returns the object (usually a window) associated with the event, if any.
	 * @return wxObject
	 */
	function GetEventObject(){}

	/**
	 * Returns the identifier of the given event type, such as wxEVT_COMMAND_BUTTON_CLICKED.
	 * @return integer
	 */
	function GetEventType(){}

	/**
	 * Returns the identifier associated with this event, such as a button command id.
	 * @return integer
	 */
	function GetId(){}

	/**
	 * Returns true if the event handler should be skipped, false otherwise.
	 * @return bool
	 */
	function GetSkipped(){}

	/**
	 * Gets the timestamp for the event.
	 * @return integer
	 */
	function GetTimestamp(){}

	/**
	 * Returns true if the event is or is derived from wxCommandEvent else it returns false.
	 * @return bool
	 */
	function IsCommandEvent(){}

	/**
	 * Sets the propagation level to the given value (for example returned from an earlier call to wxEvent::StopPropagation).
	 * @param integer $propagationLevel
	 */
	function ResumePropagation($propagationLevel){}

	/**
	 * Sets the originating object.
	 * @param wxObject $object
	 */
	function SetEventObject(wxObject &$object){}

	/**
	 * Sets the event type.
	 * @param integer $type
	 */
	function SetEventType($type){}

	/**
	 * Sets the identifier associated with this event, such as a button command id.
	 * @param integer $id
	 */
	function SetId($id){}

	/**
	 * Sets the timestamp for the event.
	 * @param integer $timeStamp
	 */
	function SetTimestamp($timeStamp){}

	/**
	 * Test if this event should be propagated or not, i.e.
	 * @return bool
	 */
	function ShouldPropagate(){}

	/**
	 * This method can be used inside an event handler to control whether further event handlers bound to this event will be called after the current one returns.
	 * @param bool $skip
	 */
	function Skip($skip=true){}

	/**
	 * Stop the event from propagating to its parent window.
	 * @return integer
	 */
	function StopPropagation(){}
}

class wxEventBlocker extends wxEvtHandler
{
	/**
	 * Constructs the blocker for the given window and for the given event type.
	 * @param wxWindow $win
	 * @param integer $type
	 */
	function __construct(wxWindow &$win, $type=-1){}

	/**
	 * Adds to the list of event types which should be blocked the given eventType.
	 * @param integer $eventType
	 */
	function Block($eventType){}
}

class wxEventFilter
{
	/**
	 * Default constructor.
	 */
	function __construct(){}

	/**
	 * Override this method to implement event pre-processing.
	 * @param wxEvent $event
	 * @return integer
	 */
	function FilterEvent(wxEvent &$event){}
}

class wxEventLoopActivator
{
	/**
	 * Makes the loop passed as the parameter currently active.
	 * @param wxEventLoopBase $loop
	 */
	function __construct(wxEventLoopBase &$loop){}
}

class wxEventLoopBase
{
	/**
	 * Dispatches the next event in the windowing system event queue.
	 * @return bool
	 */
	function Dispatch(){}

	/**
	 * Dispatch an event but not wait longer than the specified timeout for it.
	 * @param integer $timeout
	 * @return integer
	 */
	function DispatchTimeout($timeout){}

	/**
	 * Exit from the loop with the given exit code.
	 * @param integer $rc
	 */
	function ExitMethod($rc){}

	/**
	 * Return the currently active (running) event loop.
	 * @return wxEventLoopBase
	 */
	function GetActive(){}

	/**
	 * Returns true if the given event category is allowed inside a YieldFor() call (i.e.
	 * @param wxEventCategory $cat
	 * @return bool
	 */
	function IsEventAllowedInsideYield(wxEventCategory $cat){}

	/**
	 * Returns true if this is the main loop executed by wxApp::OnRun().
	 * @return bool
	 */
	function IsMain(){}

	/**
	 * Use this to check whether the event loop was successfully created before using it.
	 * @return bool
	 */
	function IsOk(){}

	/**
	 * Return true if this event loop is currently running.
	 * @return bool
	 */
	function IsRunning(){}

	/**
	 * Returns true if called from inside Yield() or from inside YieldFor().
	 * @return bool
	 */
	function IsYielding(){}

	/**
	 * This function is called before the event loop terminates, whether this happens normally (because of Exit() call) or abnormally (because of an exception thrown from inside the loop).
	 */
	function OnExit(){}

	/**
	 * Return true if any events are available.
	 * @return bool
	 */
	function Pending(){}

	/**
	 * This virtual function is called when the application becomes idle and normally just sends wxIdleEvent to all interested parties.
	 * @return bool
	 */
	function ProcessIdle(){}

	/**
	 * Start the event loop, return the exit code when it is finished.
	 * @return integer
	 */
	function Run(){}

	/**
	 * Set currently active (running) event loop.
	 * @param wxEventLoopBase $loop
	 */
	function SetActive(wxEventLoopBase &$loop){}

	/**
	 * Called by wxWidgets to wake up the event loop even if it is currently blocked inside Dispatch().
	 */
	function WakeUp(){}

	/**
	 * Makes sure that idle events are sent again.
	 */
	function WakeUpIdle(){}

	/**
	 * Yields control to pending messages in the windowing system.
	 * @param bool $onlyIfNeeded
	 * @return bool
	 */
	function Yield($onlyIfNeeded=false){}

	/**
	 * Works like Yield() with onlyIfNeeded == true, except that it allows the caller to specify a mask of the wxEventCategory values which indicates which events should be processed and which should instead be "delayed" (i.e.
	 * @param integer $eventsToProcess
	 * @return bool
	 */
	function YieldFor($eventsToProcess){}
}

class wxEvtHandler extends wxObject
{
	/**
	 * Constructor.
	 */
	function __construct(){}

	/**
	 * Add an event filter whose FilterEvent() method will be called for each and every event processed by wxWidgets.
	 * @param wxEventFilter $filter
	 */
	function AddFilter(wxEventFilter &$filter){}

	/**
	 * Post an event to be processed later.
	 * @param wxEvent $event
	 */
	function AddPendingEvent(wxEvent $event){}

	/**
	 * Connects the given function dynamically with the event handler, id and event type.
	 * @param integer $id
	 * @param integer $lastId
	 * @param integer $eventType
	 * @param wxObject $userData
	 * @param wxEvtHandler $eventSink
	 */
	function Connect($id, $lastId, $eventType, wxObject &$userData=null, wxEvtHandler &$eventSink=null){}

	/**
	 * Deletes all events queued on this event handler using QueueEvent() or AddPendingEvent().
	 */
	function DeletePendingEvents(){}

	/**
	 * Returns true if the event handler is enabled, false otherwise.
	 * @return bool
	 */
	function GetEvtHandlerEnabled(){}

	/**
	 * Returns the pointer to the next handler in the chain.
	 * @return wxEvtHandler
	 */
	function GetNextHandler(){}

	/**
	 * Returns the pointer to the previous handler in the chain.
	 * @return wxEvtHandler
	 */
	function GetPreviousHandler(){}

	/**
	 * Returns true if the next and the previous handler pointers of this event handler instance are NULL.
	 * @return bool
	 */
	function IsUnlinked(){}

	/**
	 * Processes an event, searching event tables and calling zero or more suitable event handler function(s).
	 * @param wxEvent $event
	 * @return bool
	 */
	function ProcessEvent(wxEvent &$event){}

	/**
	 * Try to process the event in this handler and all those chained to it.
	 * @param wxEvent $event
	 * @return bool
	 */
	function ProcessEventLocally(wxEvent &$event){}

	/**
	 * Processes the pending events previously queued using QueueEvent() or AddPendingEvent(); you must call this function only if you are sure there are pending events for this handler, otherwise a wxCHECK will fail.
	 */
	function ProcessPendingEvents(){}

	/**
	 * Queue event for a later processing.
	 * @param wxEvent $event
	 */
	function QueueEvent(wxEvent &$event){}

	/**
	 * Remove a filter previously installed with AddFilter().
	 * @param wxEventFilter $filter
	 */
	function RemoveFilter(wxEventFilter &$filter){}

	/**
	 * Processes an event by calling ProcessEvent() and handles any exceptions that occur in the process.
	 * @param wxEvent $event
	 * @return bool
	 */
	function SafelyProcessEvent(wxEvent &$event){}

	/**
	 * Enables or disables the event handler.
	 * @param bool $enabled
	 */
	function SetEvtHandlerEnabled($enabled){}

	/**
	 * Sets the pointer to the next handler.
	 * @param wxEvtHandler $handler
	 */
	function SetNextHandler(wxEvtHandler &$handler){}

	/**
	 * Sets the pointer to the previous handler.
	 * @param wxEvtHandler $handler
	 */
	function SetPreviousHandler(wxEvtHandler &$handler){}

	/**
	 * Method called by ProcessEvent() as last resort.
	 * @param wxEvent $event
	 * @return bool
	 */
	function TryAfter(wxEvent &$event){}

	/**
	 * Method called by ProcessEvent() before examining this object event tables.
	 * @param wxEvent $event
	 * @return bool
	 */
	function TryBefore(wxEvent &$event){}

	/**
	 * Unlinks this event handler from the chain it's part of (if any); then links the "previous" event handler to the "next" one (so that the chain won't be interrupted).
	 */
	function Unlink(){}
}

class wxFFile
{
	/**
	 * Opens a file with the given mode.
	 * @param string $filename
	 * @param string $mode
	 */
	function __construct($filename, $mode="r"){}

	/**
	 * Closes the file and returns true on success.
	 * @return bool
	 */
	function Close(){}

	/**
	 * Get back a file pointer from wxFFile object -- the caller is responsible for closing the file if this descriptor is opened.
	 */
	function Detach(){}

	/**
	 * Returns true if an attempt has been made to read past the end of the file.
	 * @return bool
	 */
	function Eof(){}

	/**
	 * Returns true if an error has occurred on this file, similar to the standard ferror() function.
	 * @return bool
	 */
	function Error(){}

	/**
	 * Flushes the file and returns true on success.
	 * @return bool
	 */
	function Flush(){}

	/**
	 * Returns the type of the file.
	 * @return wxFileKind
	 */
	function GetKind(){}

	/**
	 * Returns true if the file is opened.
	 * @return bool
	 */
	function IsOpened(){}

	/**
	 * Returns the length of the file.
	 * @return integer
	 */
	function Length(){}

	/**
	 * Opens the file, returning true if successful.
	 * @param string $filename
	 * @param string $mode
	 * @return bool
	 */
	function Open($filename, $mode="r"){}

	/**
	 * Reads the specified number of bytes into a buffer, returning the actual number read.
	 * @param mixed $buffer
	 * @param integer $count
	 * @return integer
	 */
	function Read($buffer, $count){}

	/**
	 * Seeks to the specified position and returns true on success.
	 * @param integer $ofs
	 * @param wxSeekMode $mode
	 * @return bool
	 */
	function Seek($ofs, wxSeekMode $mode=null){}

	/**
	 * Moves the file pointer to the specified number of bytes before the end of the file and returns true on success.
	 * @param integer $ofs
	 * @return bool
	 */
	function SeekEnd($ofs){}

	/**
	 * Returns the current position.
	 * @return integer
	 */
	function Tell(){}

	/**
	 * Writes the specified number of bytes from a buffer.
	 * @param mixed $buffer
	 * @param integer $count
	 * @return integer
	 */
	function Write($buffer, $count){}
}

class wxFFileInputStream extends wxInputStream
{
	/**
	 * Initializes a file stream in read-only mode using the file I/O object file.
	 * @param wxFFile $file
	 * @param string $filename
	 * @param string $mode
	 */
	function __construct(wxFFile &$file, $filename, $mode="rb"){}

	/**
	 * Returns true if the stream is initialized and ready.
	 * @return bool
	 */
	function IsOk(){}
}

class wxFFileOutputStream extends wxOutputStream
{
	/**
	 * Open the given file filename with mode mode.
	 * @param string $filename
	 * @param string $mode
	 * @param wxFFile $file
	 */
	function __construct($filename, $mode="wb", wxFFile &$file){}

	/**
	 * Returns true if the stream is initialized and ready.
	 * @return bool
	 */
	function IsOk(){}
}

class wxFFileStream extends wxFFileInputStream
{
	/**
	 * Initializes a new file stream in the given mode using the specified iofileName name.
	 * @param string $iofileName
	 * @param string $mode
	 */
	function __construct($iofileName, $mode="w+b"){}

	/**
	 * Returns true if the stream is initialized and ready.
	 * @return bool
	 */
	function IsOk(){}
}

class wxFSFile extends wxObject
{
	/**
	 * Constructor.
	 * @param wxInputStream $stream
	 * @param string $location
	 * @param string $mimetype
	 * @param string $anchor
	 * @param timestamp $modif
	 */
	function __construct(wxInputStream &$stream, $location, $mimetype, $anchor, $modif){}

	/**
	 * Detaches the stream from the wxFSFile object.
	 * @return wxInputStream
	 */
	function DetachStream(){}

	/**
	 * Returns anchor (if present).
	 * @return string
	 */
	function GetAnchor(){}

	/**
	 * Returns full location of the file, including path and protocol.
	 * @return string
	 */
	function GetLocation(){}

	/**
	 * Returns the MIME type of the content of this file.
	 * @return string
	 */
	function GetMimeType(){}

	/**
	 * Returns time when this file was modified.
	 * @return timestamp
	 */
	function GetModificationTime(){}

	/**
	 * Returns pointer to the stream.
	 * @return wxInputStream
	 */
	function GetStream(){}
}

class wxFile
{
	const read = 1;
	const write = 1;
	const read_write = 1;
	const write_append = 1;
	const write_excl = 1;

	/**
	 * Default constructor.
	 * @param string $filename
	 * @param wxFile::OpenMode $mode
	 * @param integer $fd
	 */
	function __construct($filename, $mode=wxFile::read, $fd){}

	/**
	 * This function verifies if we may access the given file in specified mode.
	 * @param string $name
	 * @param wxFile::OpenMode $mode
	 * @return bool
	 */
	function Access($name, $mode){}

	/**
	 * Attaches an existing file descriptor to the wxFile object.
	 * @param integer $fd
	 */
	function Attach($fd){}

	/**
	 * Resets the error code.
	 */
	function ClearLastError(){}

	/**
	 * Closes the file.
	 * @return bool
	 */
	function Close(){}

	/**
	 * Creates a file for writing.
	 * @param string $filename
	 * @param bool $overwrite
	 * @param integer $access
	 * @return bool
	 */
	function Create($filename, $overwrite=false, $access=wxS_DEFAULT){}

	/**
	 * Get back a file descriptor from wxFile object - the caller is responsible for closing the file if this descriptor is opened.
	 */
	function Detach(){}

	/**
	 * Returns true if the end of the file has been reached.
	 * @return bool
	 */
	function Eof(){}

	/**
	 * Returns true if the given name specifies an existing regular file (not a directory or a link).
	 * @param string $filename
	 * @return bool
	 */
	function Exists($filename){}

	/**
	 * Flushes the file descriptor.
	 * @return bool
	 */
	function Flush(){}

	/**
	 * Returns the type of the file.
	 * @return wxFileKind
	 */
	function GetKind(){}

	/**
	 * Returns the error code for the last unsuccessful operation.
	 * @return integer
	 */
	function GetLastError(){}

	/**
	 * Returns true if the file has been opened.
	 * @return bool
	 */
	function IsOpened(){}

	/**
	 * Returns the length of the file.
	 * @return integer
	 */
	function Length(){}

	/**
	 * Opens the file, returning true if successful.
	 * @param string $filename
	 * @param wxFile::OpenMode $mode
	 * @param integer $access
	 * @return bool
	 */
	function Open($filename, $mode=wxFile::read, $access=wxS_DEFAULT){}

	/**
	 * Seeks to the specified position.
	 * @param integer $ofs
	 * @param wxSeekMode $mode
	 * @return integer
	 */
	function Seek($ofs, wxSeekMode $mode=null){}

	/**
	 * Moves the file pointer to the specified number of bytes relative to the end of the file.
	 * @param integer $ofs
	 * @return integer
	 */
	function SeekEnd($ofs){}

	/**
	 * Returns the current position or wxInvalidOffset if file is not opened or if another error occurred.
	 * @return integer
	 */
	function Tell(){}

	/**
	 * Write data to the file (descriptor).
	 * @param mixed $buffer
	 * @param integer $count
	 * @return integer
	 */
	function Write($buffer, $count){}

	/**
	 * Returns the file descriptor associated with the file.
	 * @return integer
	 */
	function fd(){}
}

class wxFileConfig extends wxConfigBase
{
	/**
	 * Delete the whole underlying object (disk file, registry key, ...).
	 * @return bool
	 */
	function DeleteAll(){}

	/**
	 * Deletes the specified entry and the group it belongs to if it was the last key in it and the second parameter is true.
	 * @param string $key
	 * @param bool $bDeleteGroupIfEmpty
	 * @return bool
	 */
	function DeleteEntry($key, $bDeleteGroupIfEmpty=true){}

	/**
	 * Delete the group (with all subgroups).
	 * @param string $key
	 * @return bool
	 */
	function DeleteGroup($key){}

	/**
	 * Permanently writes all changes (otherwise, they're only written from object's destructor).
	 * @param bool $bCurrentOnly
	 * @return bool
	 */
	function Flush($bCurrentOnly=false){}

	/**
	 * Gets the first entry.
	 * @param string $str
	 * @param integer $index
	 * @return bool
	 */
	function GetFirstEntry(&$str, &$index){}

	/**
	 * Gets the first group.
	 * @param string $str
	 * @param integer $index
	 * @return bool
	 */
	function GetFirstGroup(&$str, &$index){}

	/**
	 * Return the full path to the file which would be used by wxFileConfig as global, system-wide, file if it were constructed with basename as "global filename" parameter in the constructor.
	 * @param string $basename
	 * @return wxFileName
	 */
	function GetGlobalFile($basename){}

	/**
	 * GetGlobalFileName
	 * @param string $szFile
	 * @return string
	 */
	function GetGlobalFileName($szFile){}

	/**
	 * Return the full path to the file which would be used by wxFileConfig as local, user-specific, file if it were constructed with basename as "local filename" parameter in the constructor.
	 * @param string $basename
	 * @param integer $style
	 * @return wxFileName
	 */
	function GetLocalFile($basename, $style){}

	/**
	 * GetLocalFileName
	 * @param string $szFile
	 * @param integer $style
	 * @return string
	 */
	function GetLocalFileName($szFile, $style){}

	/**
	 * Gets the next entry.
	 * @param string $str
	 * @param integer $index
	 * @return bool
	 */
	function GetNextEntry(&$str, &$index){}

	/**
	 * Gets the next group.
	 * @param string $str
	 * @param integer $index
	 * @return bool
	 */
	function GetNextGroup(&$str, &$index){}

	/**
	 * Get number of entries in the current group.
	 * @param bool $bRecursive
	 * @return integer
	 */
	function GetNumberOfEntries($bRecursive=false){}

	/**
	 * Get number of entries/subgroups in the current group, with or without its subgroups.
	 * @param bool $bRecursive
	 * @return integer
	 */
	function GetNumberOfGroups($bRecursive=false){}

	/**
	 * Retrieve the current path (always as absolute path).
	 * @return string
	 */
	function GetPath(){}

	/**
	 * HasEntry
	 * @param string $strName
	 * @return bool
	 */
	function HasEntry($strName){}

	/**
	 * HasGroup
	 * @param string $strName
	 * @return bool
	 */
	function HasGroup($strName){}

	/**
	 * Renames an entry in the current group.
	 * @param string $oldName
	 * @param string $newName
	 * @return bool
	 */
	function RenameEntry($oldName, $newName){}

	/**
	 * Renames a subgroup of the current group.
	 * @param string $oldName
	 * @param string $newName
	 * @return bool
	 */
	function RenameGroup($oldName, $newName){}

	/**
	 * Set current path: if the first character is '/', it is the absolute path, otherwise it is a relative path.
	 * @param string $strPath
	 */
	function SetPath($strPath){}

	/**
	 * Allows to set the mode to be used for the config file creation.
	 * @param integer $mode
	 */
	function SetUmask($mode){}
}

class wxFileCtrl extends wxControl
{
	/**
	 * wxFileCtrl
	 */
	function __construct(){}

	/**
	 * Create function for two-step construction.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param string $defaultDirectory
	 * @param string $defaultFilename
	 * @param string $wildCard
	 * @param integer $style
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param string $name
	 * @return bool
	 */
	function Create(wxWindow &$parent, $id, $defaultDirectory=wxEmptyString, $defaultFilename=wxEmptyString, $wildCard=wxFileSelectorDefaultWildcardStr, $style=wxFC_DEFAULT_STYLE, wxPoint $pos=null, wxSize $size=null, $name=wxFileCtrlNameStr){}

	/**
	 * Returns the current directory of the file control (i.e.
	 * @return string
	 */
	function GetDirectory(){}

	/**
	 * Returns the currently selected filename.
	 * @return string
	 */
	function GetFilename(){}

	/**
	 * Fills the array filenames with the filenames only of selected items.
	 * @param array $filenames
	 */
	function GetFilenames(array &$filenames){}

	/**
	 * Returns the zero-based index of the currently selected filter.
	 * @return integer
	 */
	function GetFilterIndex(){}

	/**
	 * Returns the full path (directory and filename) of the currently selected file.
	 * @return string
	 */
	function GetPath(){}

	/**
	 * Fills the array paths with the full paths of the files chosen.
	 * @param array $paths
	 */
	function GetPaths(array &$paths){}

	/**
	 * Returns the current wildcard.
	 * @return string
	 */
	function GetWildcard(){}

	/**
	 * Sets(changes) the current directory displayed in the control.
	 * @param string $directory
	 * @return bool
	 */
	function SetDirectory($directory){}

	/**
	 * Selects a certain file.
	 * @param string $filename
	 * @return bool
	 */
	function SetFilename($filename){}

	/**
	 * Sets the current filter index, starting from zero.
	 * @param integer $filterIndex
	 */
	function SetFilterIndex($filterIndex){}

	/**
	 * Sets the wildcard, which can contain multiple file types, for example: "BMP files (*.bmp)|*.bmp|GIF files (*.gif)|*.gif".
	 * @param string $wildCard
	 */
	function SetWildcard($wildCard){}

	/**
	 * Sets whether hidden files and folders are shown or not.
	 * @param bool $show
	 */
	function ShowHidden($show){}
}

class wxFileCtrlEvent extends wxCommandEvent
{
	/**
	 * Constructor.
	 * @param integer $type
	 * @param wxObject $evtObject
	 * @param integer $id
	 */
	function __construct($type, wxObject &$evtObject, $id){}

	/**
	 * Returns the current directory.
	 * @return string
	 */
	function GetDirectory(){}

	/**
	 * Returns the file selected (assuming it is only one file).
	 * @return string
	 */
	function GetFile(){}

	/**
	 * Returns the files selected.
	 * @return array
	 */
	function GetFiles(){}

	/**
	 * Returns the current file filter index.
	 * @return integer
	 */
	function GetFilterIndex(){}

	/**
	 * Sets the directory of this event.
	 * @param string $directory
	 */
	function SetDirectory($directory){}

	/**
	 * Sets the files changed by this event.
	 * @param array $files
	 */
	function SetFiles(array $files){}

	/**
	 * Sets the filter index changed by this event.
	 * @param integer $index
	 */
	function SetFilterIndex($index){}
}

class wxFileDataObject extends wxDataObjectSimple
{
	/**
	 * Constructor.
	 */
	function __construct(){}

	/**
	 * Adds a file to the file list represented by this data object (Windows only).
	 * @param string $file
	 */
	function AddFile($file){}

	/**
	 * Returns the array of file names.
	 * @return array
	 */
	function GetFilenames(){}
}

class wxFileDialog extends wxDialog
{
	/**
	 * Constructor.
	 * @param wxWindow $parent
	 * @param string $message
	 * @param string $defaultDir
	 * @param string $defaultFile
	 * @param string $wildcard
	 * @param integer $style
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param string $name
	 */
	function __construct(wxWindow &$parent, $message=wxFileSelectorPromptStr, $defaultDir=wxEmptyString, $defaultFile=wxEmptyString, $wildcard=wxFileSelectorDefaultWildcardStr, $style=wxFD_DEFAULT_STYLE, wxPoint $pos=null, wxSize $size=null, $name=wxFileDialogNameStr){}

	/**
	 * Returns the default directory.
	 * @return string
	 */
	function GetDirectory(){}

	/**
	 * If functions SetExtraControlCreator() and ShowModal() were called, returns the extra window.
	 * @return wxWindow
	 */
	function GetExtraControl(){}

	/**
	 * Returns the default filename.
	 * @return string
	 */
	function GetFilename(){}

	/**
	 * Fills the array filenames with the names of the files chosen.
	 * @param array $filenames
	 */
	function GetFilenames(array &$filenames){}

	/**
	 * Returns the index into the list of filters supplied, optionally, in the wildcard parameter.
	 * @return integer
	 */
	function GetFilterIndex(){}

	/**
	 * Returns the message that will be displayed on the dialog.
	 * @return string
	 */
	function GetMessage(){}

	/**
	 * Returns the full path (directory and filename) of the selected file.
	 * @return string
	 */
	function GetPath(){}

	/**
	 * Fills the array paths with the full paths of the files chosen.
	 * @param array $paths
	 */
	function GetPaths(array &$paths){}

	/**
	 * Returns the file dialog wildcard.
	 * @return string
	 */
	function GetWildcard(){}

	/**
	 * Sets the default directory.
	 * @param string $directory
	 */
	function SetDirectory($directory){}

	/**
	 * Sets the default filename.
	 * @param string $setfilename
	 */
	function SetFilename($setfilename){}

	/**
	 * Sets the default filter index, starting from zero.
	 * @param integer $filterIndex
	 */
	function SetFilterIndex($filterIndex){}

	/**
	 * Sets the message that will be displayed on the dialog.
	 * @param string $message
	 */
	function SetMessage($message){}

	/**
	 * Sets the path (the combined directory and filename that will be returned when the dialog is dismissed).
	 * @param string $path
	 */
	function SetPath($path){}

	/**
	 * Sets the wildcard, which can contain multiple file types, for example: "BMP files (*.bmp)|*.bmp|GIF files (*.gif)|*.gif".
	 * @param string $wildCard
	 */
	function SetWildcard($wildCard){}

	/**
	 * Shows the dialog, returning wxID_OK if the user pressed OK, and wxID_CANCEL otherwise.
	 * @return integer
	 */
	function ShowModal(){}
}

class wxFileDirPickerEvent extends wxCommandEvent
{
	/**
	 * The constructor is not normally used by the user code.
	 * @param integer $type
	 * @param wxObject $generator
	 * @param integer $id
	 * @param string $path
	 */
	function __construct($type, wxObject &$generator, $id, $path){}

	/**
	 * Retrieve the absolute path of the file/directory the user has just selected.
	 * @return string
	 */
	function GetPath(){}

	/**
	 * Set the absolute path of the file/directory associated with the event.
	 * @param string $path
	 */
	function SetPath($path){}
}

class wxFileDropTarget extends wxDropTarget
{
	/**
	 * Constructor.
	 */
	function __construct(){}

	/**
	 * See wxDropTarget::OnDrop().
	 * @param integer $x
	 * @param integer $y
	 * @return bool
	 */
	function OnDrop($x, $y){}

	/**
	 * Override this function to receive dropped files.
	 * @param integer $x
	 * @param integer $y
	 * @param array $filenames
	 * @return bool
	 */
	function OnDropFiles($x, $y, array $filenames){}
}

class wxFileHistory extends wxObject
{
	/**
	 * Constructor.
	 * @param integer $maxFiles
	 * @param integer $idBase
	 */
	function __construct($maxFiles=9, $idBase=wxID_FILE1){}

	/**
	 * Adds a file to the file history list, if the object has a pointer to an appropriate file menu.
	 * @param string $filename
	 */
	function AddFileToHistory($filename){}

	/**
	 * Appends the files in the history list, to all menus managed by the file history object.
	 * @param wxMenu $menu
	 */
	function AddFilesToMenu(wxMenu &$menu){}

	/**
	 * Returns the base identifier for the range used for appending items.
	 * @return integer
	 */
	function GetBaseId(){}

	/**
	 * Returns the number of files currently stored in the file history.
	 * @return integer
	 */
	function GetCount(){}

	/**
	 * Returns the file at this index (zero-based).
	 * @param integer $index
	 * @return string
	 */
	function GetHistoryFile($index){}

	/**
	 * Returns the maximum number of files that can be stored.
	 * @return integer
	 */
	function GetMaxFiles(){}

	/**
	 * Loads the file history from the given config object.
	 * @param wxConfigBase $config
	 */
	function Load(wxConfigBase $config){}

	/**
	 * Removes the specified file from the history.
	 * @param integer $i
	 */
	function RemoveFileFromHistory($i){}

	/**
	 * Removes this menu from the list of those managed by this object.
	 * @param wxMenu $menu
	 */
	function RemoveMenu(wxMenu &$menu){}

	/**
	 * Saves the file history into the given config object.
	 * @param wxConfigBase $config
	 */
	function Save(wxConfigBase &$config){}

	/**
	 * Sets the base identifier for the range used for appending items.
	 * @param integer $baseId
	 */
	function SetBaseId($baseId){}

	/**
	 * Adds this menu to the list of those menus that are managed by this file history object.
	 * @param wxMenu $menu
	 */
	function UseMenu(wxMenu &$menu){}
}

class wxFileInputStream extends wxInputStream
{
	/**
	 * Opens the specified file using its ifileName name in read-only mode.
	 * @param string $ifileName
	 * @param wxFile $file
	 * @param integer $fd
	 */
	function __construct($ifileName, wxFile &$file, $fd){}

	/**
	 * Returns true if the stream is initialized and ready.
	 * @return bool
	 */
	function IsOk(){}
}

class wxFileName
{
	/**
	 * Copy constructor.
	 * @param wxFileName $filename
	 * @param string $fullpath
	 * @param wxPathFormat $format
	 * @param string $path
	 * @param string $name
	 * @param string $ext
	 * @param string $volume
	 */
	function __construct(wxFileName $filename, $fullpath, wxPathFormat $format=null, $path, $name, wxPathFormat $format=null, $path, $name, $ext, wxPathFormat $format=null, $volume, $path, $name, $ext, wxPathFormat $format=null){}

	/**
	 * Appends a directory component to the path.
	 * @param string $dir
	 */
	function AppendDir($dir){}

	/**
	 * Creates the file name from another filename object.
	 * @param wxFileName $filepath
	 * @param string $fullpath
	 * @param wxPathFormat $format
	 * @param string $volume
	 * @param string $path
	 * @param string $name
	 * @param string $ext
	 * @param bool $hasExt
	 */
	function Assign(wxFileName $filepath, $fullpath, wxPathFormat $format=null, $volume, $path, $name, $ext, $hasExt, wxPathFormat $format=null, $volume, $path, $name, $ext, wxPathFormat $format=null, $path, $name, wxPathFormat $format=null, $path, $name, $ext, wxPathFormat $format=null){}

	/**
	 * Makes this object refer to the current working directory on the specified volume (or current volume if volume is empty).
	 * @param string $volume
	 */
	function AssignCwd($volume=wxEmptyString){}

	/**
	 * Sets this file name object to the given directory name.
	 * @param string $dir
	 * @param wxPathFormat $format
	 */
	function AssignDir($dir, wxPathFormat $format=null){}

	/**
	 * Sets this file name object to the home directory.
	 */
	function AssignHomeDir(){}

	/**
	 * The function calls CreateTempFileName() to create a temporary file and sets this object to the name of the file.
	 * @param string $prefix
	 * @param wxFile $fileTemp
	 */
	function AssignTempFileName($prefix, $prefix, wxFile &$fileTemp, $prefix, wxFFile &$fileTemp){}

	/**
	 * Reset all components to default, uninitialized state.
	 */
	function Clear(){}

	/**
	 * Removes the extension from the file name resulting in a file name with no trailing dot.
	 */
	function ClearExt(){}

	/**
	 * Returns a temporary file name starting with the given prefix.
	 * @param string $prefix
	 * @param wxFile $fileTemp
	 * @return string
	 */
	function CreateTempFileName($prefix, wxFile &$fileTemp=null, $prefix, wxFFile &$fileTemp=null){}

	/**
	 * Returns true if the directory with this name exists.
	 * @param string $dir
	 * @return bool
	 */
	function DirExists($dir){}

	/**
	 * Returns the object corresponding to the directory with the given name.
	 * @param string $dir
	 * @param wxPathFormat $format
	 * @return wxFileName
	 */
	function DirName($dir, wxPathFormat $format=null){}

	/**
	 * Returns true if the file with this name exists.
	 * @param string $file
	 * @return bool
	 */
	function FileExists($file){}

	/**
	 * Returns the file name object corresponding to the given file.
	 * @param string $file
	 * @param wxPathFormat $format
	 * @return wxFileName
	 */
	function FileName($file, wxPathFormat $format=null){}

	/**
	 * Retrieves the value of the current working directory on the specified volume.
	 * @param string $volume
	 * @return string
	 */
	function GetCwd($volume=wxEmptyString){}

	/**
	 * Returns the number of directories in the file name.
	 * @return integer
	 */
	function GetDirCount(){}

	/**
	 * Returns the directories in string array form.
	 * @return array
	 */
	function GetDirs(){}

	/**
	 * Returns the file name extension.
	 * @return string
	 */
	function GetExt(){}

	/**
	 * Returns the characters that can't be used in filenames and directory names for the specified format.
	 * @param wxPathFormat $format
	 * @return string
	 */
	function GetForbiddenChars(wxPathFormat $format=null){}

	/**
	 * Returns the canonical path format for this platform.
	 * @param wxPathFormat $format
	 * @return wxPathFormat
	 */
	function GetFormat(wxPathFormat $format=null){}

	/**
	 * Returns the full name (including extension but excluding directories).
	 * @return string
	 */
	function GetFullName(){}

	/**
	 * Returns the full path with name and extension.
	 * @param wxPathFormat $format
	 * @return string
	 */
	function GetFullPath(wxPathFormat $format=null){}

	/**
	 * Returns the home directory.
	 * @return string
	 */
	function GetHomeDir(){}

	/**
	 * Returns the representation of the file size in a human-readable form.
	 * @param string $failmsg
	 * @param integer $precision
	 * @param wxSizeConvention $conv
	 * @return string
	 */
	function GetHumanReadableSize($failmsg="Not available", $precision=1, wxSizeConvention $conv=null){}

	/**
	 * Return the long form of the path (returns identity on non-Windows platforms).
	 * @return string
	 */
	function GetLongPath(){}

	/**
	 * Returns the last time the file was last modified.
	 * @return timestamp
	 */
	function GetModificationTime(){}

	/**
	 * Returns the name part of the filename (without extension).
	 * @return string
	 */
	function GetName(){}

	/**
	 * Returns the path part of the filename (without the name or extension).
	 * @param integer $flags
	 * @param wxPathFormat $format
	 * @return string
	 */
	function GetPath($flags=wxPATH_GET_VOLUME, wxPathFormat $format=null){}

	/**
	 * Returns the string containing all the path separators for this format.
	 * @param wxPathFormat $format
	 * @return string
	 */
	function GetPathSeparators(wxPathFormat $format=null){}

	/**
	 * Returns the string of characters which may terminate the path part.
	 * @param wxPathFormat $format
	 * @return string
	 */
	function GetPathTerminators(wxPathFormat $format=null){}

	/**
	 * Returns the path with the trailing separator, useful for appending the name to the given path.
	 * @param wxPathFormat $format
	 * @return string
	 */
	function GetPathWithSep(wxPathFormat $format=null){}

	/**
	 * Return the short form of the path (returns identity on non-Windows platforms).
	 * @return string
	 */
	function GetShortPath(){}

	/**
	 * Returns the directory used for temporary files.
	 * @return string
	 */
	function GetTempDir(){}

	/**
	 * Returns the string containing the volume for this file name, empty if it doesn't have one or if the file system doesn't support volumes at all (for example, Unix).
	 * @return string
	 */
	function GetVolume(){}

	/**
	 * Returns the string separating the volume from the path for this format.
	 * @param wxPathFormat $format
	 * @return string
	 */
	function GetVolumeSeparator(wxPathFormat $format=null){}

	/**
	 * Returns true if an extension is present.
	 * @return bool
	 */
	function HasExt(){}

	/**
	 * Returns true if a name is present.
	 * @return bool
	 */
	function HasName(){}

	/**
	 * Returns true if a volume specifier is present.
	 * @return bool
	 */
	function HasVolume(){}

	/**
	 * Inserts a directory component before the zero-based position in the directory list.
	 * @param integer $before
	 * @param string $dir
	 */
	function InsertDir($before, $dir){}

	/**
	 * Returns true if this filename is absolute.
	 * @param wxPathFormat $format
	 * @return bool
	 */
	function IsAbsolute(wxPathFormat $format=null){}

	/**
	 * Returns true if the file names of this type are case-sensitive.
	 * @param wxPathFormat $format
	 * @return bool
	 */
	function IsCaseSensitive(wxPathFormat $format=null){}

	/**
	 * Returns true if this object represents a directory, false otherwise (i.e.
	 * @return bool
	 */
	function IsDir(){}

	/**
	 * Returns true if the directory component of this instance is an existing directory and this process has read permissions on it.
	 * @param string $dir
	 * @return bool
	 */
	function IsDirReadable($dir){}

	/**
	 * Returns true if the directory component of this instance is an existing directory and this process has write permissions on it.
	 * @param string $dir
	 * @return bool
	 */
	function IsDirWritable($dir){}

	/**
	 * Returns true if a file with this name exists and if this process has execute permissions on it.
	 * @param string $file
	 * @return bool
	 */
	function IsFileExecutable($file){}

	/**
	 * Returns true if a file with this name exists and if this process has read permissions on it.
	 * @param string $file
	 * @return bool
	 */
	function IsFileReadable($file){}

	/**
	 * Returns true if a file with this name exists and if this process has write permissions on it.
	 * @param string $file
	 * @return bool
	 */
	function IsFileWritable($file){}

	/**
	 * Returns true if the volume part of the path is a unique volume name.
	 * @param string $path
	 * @param wxPathFormat $format
	 * @return bool
	 */
	function IsMSWUniqueVolumeNamePath($path, wxPathFormat $format=null){}

	/**
	 * Returns true if the filename is valid, false if it is not initialized yet.
	 * @return bool
	 */
	function IsOk(){}

	/**
	 * Returns true if this filename is not absolute.
	 * @param wxPathFormat $format
	 * @return bool
	 */
	function IsRelative(wxPathFormat $format=null){}

	/**
	 * Make the file name absolute.
	 * @param string $cwd
	 * @param wxPathFormat $format
	 * @return bool
	 */
	function MakeAbsolute($cwd=wxEmptyString, wxPathFormat $format=null){}

	/**
	 * This function tries to put this file name in a form relative to pathBase.
	 * @param string $pathBase
	 * @param wxPathFormat $format
	 * @return bool
	 */
	function MakeRelativeTo($pathBase=wxEmptyString, wxPathFormat $format=null){}

	/**
	 * Creates a directory.
	 * @param integer $perm
	 * @param integer $flags
	 * @param string $dir
	 * @return bool
	 */
	function Mkdir($perm=wxS_DIR_DEFAULT, $flags, $dir, $perm=wxS_DIR_DEFAULT, $flags){}

	/**
	 * Normalize the path.
	 * @param integer $flags
	 * @param string $cwd
	 * @param wxPathFormat $format
	 * @return bool
	 */
	function Normalize($flags=wxPATH_NORM_ALL, $cwd=wxEmptyString, wxPathFormat $format=null){}

	/**
	 * Prepends a directory to the file path.
	 * @param string $dir
	 */
	function PrependDir($dir){}

	/**
	 * Removes the specified directory component from the path.
	 * @param integer $pos
	 */
	function RemoveDir($pos){}

	/**
	 * Removes last directory component from the path.
	 */
	function RemoveLastDir(){}

	/**
	 * If the path contains the value of the environment variable named envname then this function replaces it with the string obtained from wxString::Format(replacementFmtString, value_of_envname_variable).
	 * @param string $envname
	 * @param string $replacementFmtString
	 * @param wxPathFormat $format
	 * @return bool
	 */
	function ReplaceEnvVariable($envname, $replacementFmtString="$%s", wxPathFormat $format=null){}

	/**
	 * Replaces, if present in the path, the home directory for the given user (see wxGetHomeDir) with a tilde (~).
	 * @param wxPathFormat $format
	 * @return bool
	 */
	function ReplaceHomeDir(wxPathFormat $format=null){}

	/**
	 * Deletes the specified directory from the file system.
	 * @param string $dir
	 * @param integer $flags
	 * @return bool
	 */
	function Rmdir($dir, $flags, $flags){}

	/**
	 * Compares the filename using the rules of this platform.
	 * @param wxFileName $filepath
	 * @param wxPathFormat $format
	 * @return bool
	 */
	function SameAs(wxFileName $filepath, wxPathFormat $format=null){}

	/**
	 * Changes the current working directory.
	 * @param string $cwd
	 * @return bool
	 */
	function SetCwd($cwd){}

	/**
	 * Sets the extension of the file name to be an empty extension.
	 */
	function SetEmptyExt(){}

	/**
	 * Sets the extension of the file name.
	 * @param string $ext
	 */
	function SetExt($ext){}

	/**
	 * The full name is the file name and extension (but without the path).
	 * @param string $fullname
	 */
	function SetFullName($fullname){}

	/**
	 * Sets the name part (without extension).
	 * @param string $name
	 */
	function SetName($name){}

	/**
	 * Sets the path.
	 * @param string $path
	 * @param wxPathFormat $format
	 */
	function SetPath($path, wxPathFormat $format=null){}

	/**
	 * Sets the file creation and last access/modification times (any of the pointers may be NULL).
	 * @param array $dtAccess
	 * @param array $dtMod
	 * @param array $dtCreate
	 * @return bool
	 */
	function SetTimes(array $dtAccess, array $dtMod, array $dtCreate){}

	/**
	 * Sets the volume specifier.
	 * @param string $volume
	 */
	function SetVolume($volume){}

	/**
	 * This function splits a full file name into components: the volume (with the first version) path (including the volume in the second version), the base name and the extension.
	 * @param string $fullpath
	 * @param string $path
	 * @param string $name
	 * @param string $ext
	 * @param wxPathFormat $format
	 * @param string $volume
	 * @param bool $hasExt
	 */
	function SplitPath($fullpath, &$path, &$name, &$ext, wxPathFormat $format=null, $fullpath, &$volume, &$path, &$name, &$ext, wxPathFormat $format, $fullpath, &$volume, &$path, &$name, &$ext, &$hasExt=NULL, wxPathFormat $format=null){}

	/**
	 * Splits the given fullpath into the volume part (which may be empty) and the pure path part, not containing any volume.
	 * @param string $fullpath
	 * @param string $volume
	 * @param string $path
	 * @param wxPathFormat $format
	 */
	function SplitVolume($fullpath, &$volume, &$path, wxPathFormat $format=null){}

	/**
	 * Strip the file extension.
	 * @param string $fullname
	 * @return string
	 */
	function StripExtension($fullname){}

	/**
	 * Sets the access and modification times to the current moment.
	 * @return bool
	 */
	function Touch(){}
}

class wxFileOutputStream extends wxOutputStream
{
	/**
	 * Creates a new file with ofileName name and initializes the stream in write-only mode.
	 * @param string $ofileName
	 * @param wxFile $file
	 * @param integer $fd
	 */
	function __construct($ofileName, wxFile &$file, $fd){}

	/**
	 * Returns true if the stream is initialized and ready.
	 * @return bool
	 */
	function IsOk(){}
}

class wxFilePickerCtrl extends wxPickerBase
{
	/**
	 * Initializes the object and calls Create() with all the parameters.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param string $path
	 * @param string $message
	 * @param string $wildcard
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param wxValidator $validator
	 * @param string $name
	 */
	function __construct(wxWindow &$parent, $id, $path=wxEmptyString, $message=wxFileSelectorPromptStr, $wildcard=wxFileSelectorDefaultWildcardStr, wxPoint $pos=null, wxSize $size=null, $style=wxFLP_DEFAULT_STYLE, wxValidator $validator=null, $name=wxFilePickerCtrlNameStr){}

	/**
	 * Creates this widget with the given parameters.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param string $path
	 * @param string $message
	 * @param string $wildcard
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param wxValidator $validator
	 * @param string $name
	 * @return bool
	 */
	function Create(wxWindow &$parent, $id, $path=wxEmptyString, $message=wxFileSelectorPromptStr, $wildcard=wxFileSelectorDefaultWildcardStr, wxPoint $pos=null, wxSize $size=null, $style=wxFLP_DEFAULT_STYLE, wxValidator $validator=null, $name=wxFilePickerCtrlNameStr){}

	/**
	 * Similar to GetPath() but returns the path of the currently selected file as a wxFileName object.
	 * @return wxFileName
	 */
	function GetFileName(){}

	/**
	 * Returns the absolute path of the currently selected file.
	 * @return string
	 */
	function GetPath(){}

	/**
	 * This method does the same thing as SetPath() but takes a wxFileName object instead of a string.
	 * @param wxFileName $filename
	 */
	function SetFileName(wxFileName $filename){}

	/**
	 * Sets the absolute path of the currently selected file.
	 * @param string $filename
	 */
	function SetPath($filename){}
}

class wxFileStream extends wxFileOutputStream
{
	/**
	 * Initializes a new file stream in read-write mode using the specified iofileName name.
	 * @param string $iofileName
	 */
	function __construct($iofileName){}

	/**
	 * Returns true if the stream is initialized and ready.
	 * @return bool
	 */
	function IsOk(){}
}

class wxFileSystem extends wxObject
{
	/**
	 * Constructor.
	 */
	function __construct(){}

	/**
	 * This static function adds new handler into the list of handlers (see wxFileSystemHandler) which provide access to virtual FS.
	 * @param wxFileSystemHandler $handler
	 */
	function AddHandler(wxFileSystemHandler &$handler){}

	/**
	 * Sets the current location.
	 * @param string $location
	 * @param bool $is_dir
	 */
	function ChangePathTo($location, $is_dir=false){}

	/**
	 * Converts a wxFileName into an URL.
	 * @param wxFileName $filename
	 * @return string
	 */
	function FileNameToURL(wxFileName $filename){}

	/**
	 * Looks for the file with the given name file in a colon or semi-colon (depending on the current platform) separated list of directories in path.
	 * @param string $pStr
	 * @param string $path
	 * @param string $file
	 * @return bool
	 */
	function FindFileInPath(&$pStr, $path, $file){}

	/**
	 * Works like wxFindFirstFile().
	 * @param string $wildcard
	 * @param integer $flags
	 * @return string
	 */
	function FindFirst($wildcard, $flags){}

	/**
	 * Returns the next filename that matches the parameters passed to FindFirst().
	 * @return string
	 */
	function FindNext(){}

	/**
	 * Returns the actual path (set by wxFileSystem::ChangePathTo).
	 * @return string
	 */
	function GetPath(){}

	/**
	 * This static function returns true if there is a registered handler which can open the given location.
	 * @param string $location
	 * @return bool
	 */
	function HasHandlerForPath($location){}

	/**
	 * Opens the file and returns a pointer to a wxFSFile object or NULL if failed.
	 * @param string $location
	 * @param integer $flags
	 * @return wxFSFile
	 */
	function OpenFile($location, $flags=wxFS_READ){}

	/**
	 * Converts URL into a well-formed filename.
	 * @param string $url
	 * @return wxFileName
	 */
	function URLToFileName($url){}
}

class wxFileSystemHandler extends wxObject
{
	/**
	 * Constructor.
	 */
	function __construct(){}

	/**
	 * Returns true if the handler is able to open this file.
	 * @param string $location
	 * @return bool
	 */
	function CanOpen($location){}

	/**
	 * Works like wxFindFirstFile().
	 * @param string $wildcard
	 * @param integer $flags
	 * @return string
	 */
	function FindFirst($wildcard, $flags){}

	/**
	 * Returns next filename that matches parameters passed to wxFileSystem::FindFirst.
	 * @return string
	 */
	function FindNext(){}

	/**
	 * Returns the MIME type based on extension of location.
	 * @param string $location
	 * @return string
	 */
	function GetMimeTypeFromExt($location){}

	/**
	 * Opens the file and returns wxFSFile pointer or NULL if failed.
	 * @param wxFileSystem $fs
	 * @param string $location
	 * @return wxFSFile
	 */
	function OpenFile(wxFileSystem &$fs, $location){}
}

class wxFileSystemWatcher extends wxEvtHandler
{
	/**
	 * Default constructor.
	 */
	function __construct(){}

	/**
	 * Adds path to currently watched files.
	 * @param wxFileName $path
	 * @param integer $events
	 * @return bool
	 */
	function Add(wxFileName $path, $events=wxFSW_EVENT_ALL){}

	/**
	 * This is the same as Add(), but recursively adds every file/directory in the tree rooted at path.
	 * @param wxFileName $path
	 * @param integer $events
	 * @param string $filter
	 * @return bool
	 */
	function AddTree(wxFileName $path, $events=wxFSW_EVENT_ALL, $filter=wxEmptyString){}

	/**
	 * Returns the number of currently watched paths.
	 * @return integer
	 */
	function GetWatchedPathsCount(){}

	/**
	 * Removes path from the list of watched paths.
	 * @param wxFileName $path
	 * @return bool
	 */
	function Remove(wxFileName $path){}

	/**
	 * Clears the list of currently watched paths.
	 * @return bool
	 */
	function RemoveAll(){}

	/**
	 * Same as Remove(), but also removes every file/directory belonging to the tree rooted at path.
	 * @param wxFileName $path
	 * @return bool
	 */
	function RemoveTree(wxFileName $path){}

	/**
	 * Associates the file system watcher with the given handler object.
	 * @param wxEvtHandler $handler
	 */
	function SetOwner(wxEvtHandler &$handler){}
}

class wxFileSystemWatcherEvent extends wxEvent
{
	/**
	 * Returns the type of file system change that occurred.
	 * @return integer
	 */
	function GetChangeType(){}

	/**
	 * Return a description of the warning or error if this is an error event.
	 * @return string
	 */
	function GetErrorDescription(){}

	/**
	 * Returns the new path of the renamed file/directory if this is a rename event.
	 * @return wxFileName
	 */
	function GetNewPath(){}

	/**
	 * Returns the path at which the event occurred.
	 * @return wxFileName
	 */
	function GetPath(){}

	/**
	 * Returns true if this error is an error event.
	 * @return bool
	 */
	function IsError(){}

	/**
	 * Returns a wxString describing an event, useful for logging, debugging or testing.
	 * @return string
	 */
	function ToString(){}
}

class wxFileType
{
	/**
	 * Copy ctor.
	 * @param wxFileTypeInfo $ftInfo
	 */
	function __construct(wxFileTypeInfo $ftInfo){}

	/**
	 * If the function returns true, the string pointed to by desc is filled with a brief description for this file type: for example, "text document" for the "text/plain" MIME type.
	 * @param string $desc
	 * @return bool
	 */
	function GetDescription(&$desc){}

	/**
	 * If the function returns true, the array extensions is filled with all extensions associated with this file type: for example, it may contain the following two elements for the MIME type "text/html" (notice the absence of the leading dot): "html" and "htm".
	 * @param array $extensions
	 * @return bool
	 */
	function GetExtensions(array &$extensions){}

	/**
	 * If the function returns true, the string pointed to by mimeType is filled with full MIME type specification for this file type: for example, "text/plain".
	 * @param string $mimeType
	 * @return bool
	 */
	function GetMimeType(&$mimeType){}

	/**
	 * Same as GetMimeType() but returns array of MIME types.
	 * @param array $mimeTypes
	 * @return bool
	 */
	function GetMimeTypes(array &$mimeTypes){}

	/**
	 * With the first version of this method, if the true is returned, the string pointed to by command is filled with the command which must be executed (see wxExecute()) in order to open the file of the given type.
	 * @param string $filename
	 * @return string
	 */
	function GetOpenCommand($filename){}
}

class wxFileTypeInfo
{
	/**
	 * Default constructor creates an invalid file type info object.
	 * @param string $mimeType
	 */
	function __construct($mimeType){}

	/**
	 * Add another extension associated with this file type.
	 * @param string $ext
	 */
	function AddExtension($ext){}

	/**
	 * Set the file type description.
	 * @param string $description
	 */
	function SetDescription($description){}

	/**
	 * Set the command to be used for opening files of this type.
	 * @param string $command
	 */
	function SetOpenCommand($command){}

	/**
	 * Set the command to be used for printing files of this type.
	 * @param string $command
	 */
	function SetPrintCommand($command){}

	/**
	 * Set the short description for the files of this type.
	 * @param string $shortDesc
	 */
	function SetShortDesc($shortDesc){}
}

class wxFindReplaceData extends wxObject
{
	/**
	 * Constructor initializes the flags to default value (0).
	 * @param integer $flags
	 */
	function __construct($flags){}

	/**
	 * Get the string to find.
	 * @return string
	 */
	function GetFindString(){}

	/**
	 * Get the combination of wxFindReplaceFlags values.
	 * @return integer
	 */
	function GetFlags(){}

	/**
	 * Get the replacement string.
	 * @return string
	 */
	function GetReplaceString(){}

	/**
	 * Set the string to find (used as initial value by the dialog).
	 * @param string $str
	 */
	function SetFindString($str){}

	/**
	 * Set the flags to use to initialize the controls of the dialog.
	 * @param integer $flags
	 */
	function SetFlags($flags){}

	/**
	 * Set the replacement string (used as initial value by the dialog).
	 * @param string $str
	 */
	function SetReplaceString($str){}
}

class wxFindReplaceDialog extends wxDialog
{
	/**
	 * After using default constructor Create() must be called.
	 * @param wxWindow $parent
	 * @param wxFindReplaceData $data
	 * @param string $title
	 * @param integer $style
	 */
	function __construct(wxWindow &$parent, wxFindReplaceData &$data, $title, $style){}

	/**
	 * Creates the dialog; use wxWindow::Show to show it on screen.
	 * @param wxWindow $parent
	 * @param wxFindReplaceData $data
	 * @param string $title
	 * @param integer $style
	 * @return bool
	 */
	function Create(wxWindow &$parent, wxFindReplaceData &$data, $title, $style){}

	/**
	 * Get the wxFindReplaceData object used by this dialog.
	 * @return wxFindReplaceData
	 */
	function GetData(){}
}

class wxFlexGridSizer extends wxGridSizer
{
	/**
	 * wxFlexGridSizer constructors.
	 * @param integer $cols
	 * @param integer $vgap
	 * @param integer $hgap
	 * @param wxSize $gap
	 * @param integer $rows
	 */
	function __construct($cols, $vgap, $hgap, $cols, wxSize $gap=null, $rows, $cols, $vgap, $hgap, $rows, $cols, wxSize $gap){}

	/**
	 * Specifies that column idx (starting from zero) should be grown if there is extra space available to the sizer.
	 * @param integer $idx
	 * @param integer $proportion
	 */
	function AddGrowableCol($idx, $proportion){}

	/**
	 * Specifies that row idx (starting from zero) should be grown if there is extra space available to the sizer.
	 * @param integer $idx
	 * @param integer $proportion
	 */
	function AddGrowableRow($idx, $proportion){}

	/**
	 * This method is abstract and has to be overwritten by any derived class.
	 * @return wxSize
	 */
	function CalcMin(){}

	/**
	 * Returns a wxOrientation value that specifies whether the sizer flexibly resizes its columns, rows, or both (default).
	 * @return integer
	 */
	function GetFlexibleDirection(){}

	/**
	 * Returns the value that specifies how the sizer grows in the "non-flexible" direction if there is one.
	 * @return wxFlexSizerGrowMode
	 */
	function GetNonFlexibleGrowMode(){}

	/**
	 * Returns true if column idx is growable.
	 * @param integer $idx
	 * @return bool
	 */
	function IsColGrowable($idx){}

	/**
	 * Returns true if row idx is growable.
	 * @param integer $idx
	 * @return bool
	 */
	function IsRowGrowable($idx){}

	/**
	 * This method is abstract and has to be overwritten by any derived class.
	 */
	function RecalcSizes(){}

	/**
	 * Specifies that the idx column index is no longer growable.
	 * @param integer $idx
	 */
	function RemoveGrowableCol($idx){}

	/**
	 * Specifies that the idx row index is no longer growable.
	 * @param integer $idx
	 */
	function RemoveGrowableRow($idx){}

	/**
	 * Specifies whether the sizer should flexibly resize its columns, rows, or both.
	 * @param integer $direction
	 */
	function SetFlexibleDirection($direction){}

	/**
	 * Specifies how the sizer should grow in the non-flexible direction if there is one (so SetFlexibleDirection() must have been called previously).
	 * @param wxFlexSizerGrowMode $mode
	 */
	function SetNonFlexibleGrowMode(wxFlexSizerGrowMode $mode){}
}

class wxFocusEvent extends wxEvent
{
	/**
	 * Constructor.
	 * @param integer $eventType
	 * @param integer $id
	 */
	function __construct($eventType=wxEVT_NULL, $id){}

	/**
	 * Returns the window associated with this event, that is the window which had the focus before for the wxEVT_SET_FOCUS event and the window which is going to receive focus for the wxEVT_KILL_FOCUS one.
	 * @return wxWindow
	 */
	function GetWindow(){}

	/**
	 * SetWindow
	 * @param wxWindow $win
	 */
	function SetWindow(wxWindow &$win){}
}

class wxFont extends wxGDIObject
{
	/**
	 * Default ctor.
	 * @param wxFont $font
	 * @param integer $pointSize
	 * @param wxFontFamily $family
	 * @param wxFontStyle $style
	 * @param wxFontWeight $weight
	 * @param bool $underline
	 * @param string $faceName
	 * @param wxFontEncoding $encoding
	 * @param wxSize $pixelSize
	 * @param string $nativeInfoString
	 * @param wxNativeFontInfo $nativeInfo
	 */
	function __construct(wxFont $font, $pointSize, wxFontFamily $family, wxFontStyle $style, wxFontWeight $weight, $underline=false, $faceName=wxEmptyString, wxFontEncoding $encoding=null, wxSize $pixelSize, wxFontFamily $family, wxFontStyle $style, wxFontWeight $weight, $underline=false, $faceName=wxEmptyString, wxFontEncoding $encoding=null, $nativeInfoString, wxNativeFontInfo $nativeInfo){}

	/**
	 * Returns a bold version of this font.
	 * @return wxFont
	 */
	function Bold(){}

	/**
	 * Returns the current application's default encoding.
	 * @return wxFontEncoding
	 */
	function GetDefaultEncoding(){}

	/**
	 * Returns the encoding of this font.
	 * @return wxFontEncoding
	 */
	function GetEncoding(){}

	/**
	 * Returns the face name associated with the font, or the empty string if there is no face information.
	 * @return string
	 */
	function GetFaceName(){}

	/**
	 * Gets the font family if possible.
	 * @return wxFontFamily
	 */
	function GetFamily(){}

	/**
	 * Returns the encoding of this font.
	 * @return wxNativeFontInfo
	 */
	function GetNativeFontInfo(){}

	/**
	 * Returns the platform-dependent string completely describing this font.
	 * @return string
	 */
	function GetNativeFontInfoDesc(){}

	/**
	 * Returns a user-friendly string for this font object.
	 * @return string
	 */
	function GetNativeFontInfoUserDesc(){}

	/**
	 * Gets the pixel size.
	 * @return wxSize
	 */
	function GetPixelSize(){}

	/**
	 * Gets the point size.
	 * @return integer
	 */
	function GetPointSize(){}

	/**
	 * Gets the font style.
	 * @return wxFontStyle
	 */
	function GetStyle(){}

	/**
	 * Returns true if the font is underlined, false otherwise.
	 * @return bool
	 */
	function GetUnderlined(){}

	/**
	 * Gets the font weight.
	 * @return wxFontWeight
	 */
	function GetWeight(){}

	/**
	 * Returns true if the font is a fixed width (or monospaced) font, false if it is a proportional one or font is invalid.
	 * @return bool
	 */
	function IsFixedWidth(){}

	/**
	 * Returns true if this object is a valid font, false otherwise.
	 * @return bool
	 */
	function IsOk(){}

	/**
	 * Returns an italic version of this font.
	 * @return wxFont
	 */
	function Italic(){}

	/**
	 * Returns a larger version of this font.
	 * @return wxFont
	 */
	function Larger(){}

	/**
	 * Changes this font to be bold.
	 * @return wxFont
	 */
	function MakeBold(){}

	/**
	 * Changes this font to be italic.
	 * @return wxFont
	 */
	function MakeItalic(){}

	/**
	 * Changes this font to be larger.
	 * @return wxFont
	 */
	function MakeLarger(){}

	/**
	 * Changes this font to be smaller.
	 * @return wxFont
	 */
	function MakeSmaller(){}

	/**
	 * Changes this font to be underlined.
	 * @return wxFont
	 */
	function MakeUnderlined(){}

	/**
	 * This function takes the same parameters as the relative wxFont constructor and returns a new font object allocated on the heap.
	 * @param integer $pointSize
	 * @param wxFontFamily $family
	 * @param wxFontStyle $style
	 * @param wxFontWeight $weight
	 * @param bool $underline
	 * @param string $faceName
	 * @param wxFontEncoding $encoding
	 * @param integer $flags
	 * @param wxSize $pixelSize
	 * @param string $nativeInfoString
	 * @param wxNativeFontInfo $nativeInfo
	 * @return wxFont
	 */
	function NewMethod($pointSize, wxFontFamily $family, wxFontStyle $style, wxFontWeight $weight, $underline=false, $faceName=wxEmptyString, wxFontEncoding $encoding=null, $pointSize, wxFontFamily $family, $flags=wxFONTFLAG_DEFAULT, $faceName=wxEmptyString, wxFontEncoding $encoding=null, wxSize $pixelSize, wxFontFamily $family, wxFontStyle $style, wxFontWeight $weight, $underline=false, $faceName=wxEmptyString, wxFontEncoding $encoding=null, wxSize $pixelSize, wxFontFamily $family, $flags=wxFONTFLAG_DEFAULT, $faceName=wxEmptyString, wxFontEncoding $encoding=null, $nativeInfoString, wxNativeFontInfo $nativeInfo){}

	/**
	 * Changes the size of this font.
	 * @param float $x
	 * @return wxFont
	 */
	function Scale($x){}

	/**
	 * Returns a scaled version of this font.
	 * @param float $x
	 * @return wxFont
	 */
	function Scaled($x){}

	/**
	 * Sets the default font encoding.
	 * @param wxFontEncoding $encoding
	 */
	function SetDefaultEncoding(wxFontEncoding $encoding){}

	/**
	 * Sets the encoding for this font.
	 * @param wxFontEncoding $encoding
	 */
	function SetEncoding(wxFontEncoding $encoding){}

	/**
	 * Sets the facename for the font.
	 * @param string $faceName
	 * @return bool
	 */
	function SetFaceName($faceName){}

	/**
	 * Sets the font family.
	 * @param wxFontFamily $family
	 */
	function SetFamily(wxFontFamily $family){}

	/**
	 * Creates the font corresponding to the given native font description string which must have been previously returned by GetNativeFontInfoDesc().
	 * @param string $info
	 */
	function SetNativeFontInfo($info, wxNativeFontInfo $info){}

	/**
	 * Creates the font corresponding to the given native font description string and returns true if the creation was successful.
	 * @param string $info
	 * @return bool
	 */
	function SetNativeFontInfoUserDesc($info){}

	/**
	 * Sets the pixel size.
	 * @param wxSize $pixelSize
	 */
	function SetPixelSize(wxSize $pixelSize){}

	/**
	 * Sets the point size.
	 * @param integer $pointSize
	 */
	function SetPointSize($pointSize){}

	/**
	 * Sets the font style.
	 * @param wxFontStyle $style
	 */
	function SetStyle(wxFontStyle $style){}

	/**
	 * Sets the font size using a predefined symbolic size name.
	 * @param wxFontSymbolicSize $size
	 */
	function SetSymbolicSize(wxFontSymbolicSize $size){}

	/**
	 * Sets the font size compared to the base font size.
	 * @param wxFontSymbolicSize $size
	 * @param integer $base
	 */
	function SetSymbolicSizeRelativeTo(wxFontSymbolicSize $size, $base){}

	/**
	 * Sets underlining.
	 * @param bool $underlined
	 */
	function SetUnderlined($underlined){}

	/**
	 * Sets the font weight.
	 * @param wxFontWeight $weight
	 */
	function SetWeight(wxFontWeight $weight){}

	/**
	 * Returns a smaller version of this font.
	 * @return wxFont
	 */
	function Smaller(){}

	/**
	 * Returns underlined version of this font.
	 * @return wxFont
	 */
	function Underlined(){}
}

class wxFontData extends wxObject
{
	/**
	 * Constructor.
	 */
	function __construct(){}

	/**
	 * Enables or disables "effects" under Windows or generic only.
	 * @param bool $enable
	 */
	function EnableEffects($enable){}

	/**
	 * Under Windows, returns a flag determining whether symbol fonts can be selected.
	 * @return bool
	 */
	function GetAllowSymbols(){}

	/**
	 * Gets the font chosen by the user if the user pressed OK (wxFontDialog::ShowModal() returned wxID_OK).
	 * @return wxFont
	 */
	function GetChosenFont(){}

	/**
	 * Gets the colour associated with the font dialog.
	 * @return wxColour
	 */
	function GetColour(){}

	/**
	 * Determines whether "effects" are enabled under Windows.
	 * @return bool
	 */
	function GetEnableEffects(){}

	/**
	 * Gets the font that will be initially used by the font dialog.
	 * @return wxFont
	 */
	function GetInitialFont(){}

	/**
	 * Returns true if the Help button will be shown (Windows only).
	 * @return bool
	 */
	function GetShowHelp(){}

	/**
	 * Under Windows, determines whether symbol fonts can be selected.
	 * @param bool $allowSymbols
	 */
	function SetAllowSymbols($allowSymbols){}

	/**
	 * Sets the font that will be returned to the user (for internal use only).
	 * @param wxFont $font
	 */
	function SetChosenFont(wxFont $font){}

	/**
	 * Sets the colour that will be used for the font foreground colour.
	 * @param wxColour $colour
	 */
	function SetColour(wxColour $colour){}

	/**
	 * Sets the font that will be initially used by the font dialog.
	 * @param wxFont $font
	 */
	function SetInitialFont(wxFont $font){}

	/**
	 * Sets the valid range for the font point size (Windows only).
	 * @param integer $min
	 * @param integer $max
	 */
	function SetRange($min, $max){}

	/**
	 * Determines whether the Help button will be displayed in the font dialog (Windows only).
	 * @param bool $showHelp
	 */
	function SetShowHelp($showHelp){}
}

class wxFontDialog extends wxDialog
{
	/**
	 * Default ctor.
	 * @param wxWindow $parent
	 * @param wxFontData $data
	 */
	function __construct(wxWindow &$parent, wxWindow &$parent, wxFontData $data){}

	/**
	 * Creates the dialog if the wxFontDialog object had been initialized using the default constructor.
	 * @param wxWindow $parent
	 * @param wxFontData $data
	 * @return bool
	 */
	function Create(wxWindow &$parent, wxWindow &$parent, wxFontData $data){}

	/**
	 * Returns the font data associated with the font dialog.
	 * @return wxFontData
	 */
	function GetFontData(){}

	/**
	 * Shows the dialog, returning wxID_OK if the user pressed Ok, and wxID_CANCEL otherwise.
	 * @return integer
	 */
	function ShowModal(){}
}

class wxFontEnumerator
{
	/**
	 * Called by EnumerateEncodings() for each match.
	 * @param string $font
	 * @param string $encoding
	 * @return bool
	 */
	function OnFontEncoding($font, $encoding){}

	/**
	 * Called by EnumerateFacenames() for each match.
	 * @param string $font
	 * @return bool
	 */
	function OnFacename($font){}

	/**
	 * Returns true if the given string is valid face name, i.e.
	 * @param string $facename
	 * @return bool
	 */
	function IsValidFacename($facename){}

	/**
	 * Return array of strings containing all facenames found by EnumerateFacenames().
	 * @param wxFontEncoding $encoding
	 * @param bool $fixedWidthOnly
	 * @return array
	 */
	function GetFacenames(wxFontEncoding $encoding=null, $fixedWidthOnly=false){}

	/**
	 * Return array of strings containing all encodings found by EnumerateEncodings().
	 * @param string $facename
	 * @return array
	 */
	function GetEncodings($facename=wxEmptyString){}

	/**
	 * Call OnFacename() for each font which supports given encoding (only if it is not wxFONTENCODING_SYSTEM) and is of fixed width (if fixedWidthOnly is true).
	 * @param wxFontEncoding $encoding
	 * @param bool $fixedWidthOnly
	 * @return bool
	 */
	function EnumerateFacenames(wxFontEncoding $encoding=null, $fixedWidthOnly=false){}

	/**
	 * Call OnFontEncoding() for each encoding supported by the given font - or for each encoding supported by at least some font if font is not specified.
	 * @param string $font
	 * @return bool
	 */
	function EnumerateEncodings($font=wxEmptyString){}
}

class wxFontList
{
	/**
	 * Constructor.
	 */
	function __construct(){}

	/**
	 * Finds a font of the given specification, or creates one and adds it to the list.
	 * @param integer $point_size
	 * @param wxFontFamily $family
	 * @param wxFontStyle $style
	 * @param wxFontWeight $weight
	 * @param bool $underline
	 * @param string $facename
	 * @param wxFontEncoding $encoding
	 * @return wxFont
	 */
	function FindOrCreateFont($point_size, wxFontFamily $family, wxFontStyle $style, wxFontWeight $weight, $underline=false, $facename=wxEmptyString, wxFontEncoding $encoding=null){}
}

class wxFontMapper
{
	/**
	 * Default ctor.
	 */
	function __construct(){}

	/**
	 * Returns the encoding for the given charset (in the form of RFC 2046) or wxFONTENCODING_SYSTEM if couldn't decode it.
	 * @param string $charset
	 * @param bool $interactive
	 * @return wxFontEncoding
	 */
	function CharsetToEncoding($charset, $interactive=true){}

	/**
	 * Get the current font mapper object.
	 * @return wxFontMapper
	 */
	function Get(){}

	/**
	 * Find an alternative for the given encoding (which is supposed to not be available on this system).
	 * @param wxFontEncoding $encoding
	 * @param wxFontEncoding $alt_encoding
	 * @param string $facename
	 * @param bool $interactive
	 * @return bool
	 */
	function GetAltForEncoding(wxFontEncoding $encoding, wxFontEncoding &$alt_encoding, $facename=wxEmptyString, $interactive=true){}

	/**
	 * Returns the n-th supported encoding.
	 * @param integer $n
	 * @return wxFontEncoding
	 */
	function GetEncoding($n){}

	/**
	 * Return user-readable string describing the given encoding.
	 * @param wxFontEncoding $encoding
	 * @return string
	 */
	function GetEncodingDescription(wxFontEncoding $encoding){}

	/**
	 * Return the encoding corresponding to the given internal name.
	 * @param string $encoding
	 * @return wxFontEncoding
	 */
	function GetEncodingFromName($encoding){}

	/**
	 * Return internal string identifier for the encoding (see also wxFontMapper::GetEncodingDescription).
	 * @param wxFontEncoding $encoding
	 * @return string
	 */
	function GetEncodingName(wxFontEncoding $encoding){}

	/**
	 * Returns the number of the font encodings supported by this class.
	 * @return integer
	 */
	function GetSupportedEncodingsCount(){}

	/**
	 * Check whether given encoding is available in given face or not.
	 * @param wxFontEncoding $encoding
	 * @param string $facename
	 * @return bool
	 */
	function IsEncodingAvailable(wxFontEncoding $encoding, $facename=wxEmptyString){}

	/**
	 * Set the current font mapper object and return previous one (may be NULL).
	 * @param wxFontMapper $mapper
	 * @return wxFontMapper
	 */
	function Set(wxFontMapper &$mapper){}

	/**
	 * Set the root config path to use (should be an absolute path).
	 * @param string $prefix
	 */
	function SetConfigPath($prefix){}

	/**
	 * The parent window for modal dialogs.
	 * @param wxWindow $parent
	 */
	function SetDialogParent(wxWindow &$parent){}

	/**
	 * The title for the dialogs (note that default is quite reasonable).
	 * @param string $title
	 */
	function SetDialogTitle($title){}
}

class wxFontPickerCtrl extends wxPickerBase
{
	/**
	 * Initializes the object and calls Create() with all the parameters.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param wxFont $font
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param wxValidator $validator
	 * @param string $name
	 */
	function __construct(wxWindow &$parent, $id, wxFont $font=null, wxPoint $pos=null, wxSize $size=null, $style=wxFNTP_DEFAULT_STYLE, wxValidator $validator=null, $name=wxFontPickerCtrlNameStr){}

	/**
	 * Creates this widget with given parameters.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param wxFont $font
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param wxValidator $validator
	 * @param string $name
	 * @return bool
	 */
	function Create(wxWindow &$parent, $id, wxFont $font=null, wxPoint $pos=null, wxSize $size=null, $style=wxFNTP_DEFAULT_STYLE, wxValidator $validator=null, $name=wxFontPickerCtrlNameStr){}

	/**
	 * Returns the maximum point size value allowed for the user-chosen font.
	 * @return integer
	 */
	function GetMaxPointSize(){}

	/**
	 * Returns the currently selected font.
	 * @return wxFont
	 */
	function GetSelectedFont(){}

	/**
	 * Sets the maximum point size value allowed for the user-chosen font.
	 * @param integer $max
	 */
	function SetMaxPointSize($max){}

	/**
	 * Sets the currently selected font.
	 * @param wxFont $font
	 */
	function SetSelectedFont(wxFont $font){}
}

class wxFontPickerEvent extends wxCommandEvent
{
	/**
	 * The constructor is not normally used by the user code.
	 * @param wxObject $generator
	 * @param integer $id
	 * @param wxFont $font
	 */
	function __construct(wxObject &$generator, $id, wxFont $font){}

	/**
	 * Retrieve the font the user has just selected.
	 * @return wxFont
	 */
	function GetFont(){}

	/**
	 * Set the font associated with the event.
	 * @param wxFont $f
	 */
	function SetFont(wxFont $f){}
}

class wxFrame extends wxTopLevelWindow
{
	/**
	 * Default constructor.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param string $title
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param string $name
	 */
	function __construct(wxWindow &$parent, $id, $title, wxPoint $pos=null, wxSize $size=null, $style=wxDEFAULT_FRAME_STYLE, $name=wxFrameNameStr){}

	/**
	 * Centres the frame on the display.
	 * @param integer $direction
	 */
	function Centre($direction=wxBOTH){}

	/**
	 * Used in two-step frame construction.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param string $title
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param string $name
	 * @return bool
	 */
	function Create(wxWindow &$parent, $id, $title, wxPoint $pos=null, wxSize $size=null, $style=wxDEFAULT_FRAME_STYLE, $name=wxFrameNameStr){}

	/**
	 * Creates a status bar at the bottom of the frame.
	 * @param integer $number
	 * @param integer $style
	 * @param integer $id
	 * @param string $name
	 * @return wxStatusBar
	 */
	function CreateStatusBar($number=1, $style=wxSTB_DEFAULT_STYLE, $id, $name=wxStatusBarNameStr){}

	/**
	 * Creates a toolbar at the top or left of the frame.
	 * @param integer $style
	 * @param integer $id
	 * @param string $name
	 * @return wxToolBar
	 */
	function CreateToolBar($style=null, $id=wxID_ANY, $name=wxToolBarNameStr){}

	/**
	 * Returns the origin of the frame client area (in client coordinates).
	 * @return wxPoint
	 */
	function GetClientAreaOrigin(){}

	/**
	 * Returns a pointer to the menubar currently associated with the frame (if any).
	 * @return wxMenuBar
	 */
	function GetMenuBar(){}

	/**
	 * Returns a pointer to the status bar currently associated with the frame (if any).
	 * @return wxStatusBar
	 */
	function GetStatusBar(){}

	/**
	 * Returns the status bar pane used to display menu and toolbar help.
	 * @return integer
	 */
	function GetStatusBarPane(){}

	/**
	 * Returns a pointer to the toolbar currently associated with the frame (if any).
	 * @return wxToolBar
	 */
	function GetToolBar(){}

	/**
	 * Virtual function called when a status bar is requested by CreateStatusBar().
	 * @param integer $number
	 * @param integer $style
	 * @param integer $id
	 * @param string $name
	 * @return wxStatusBar
	 */
	function OnCreateStatusBar($number, $style, $id, $name){}

	/**
	 * Virtual function called when a toolbar is requested by CreateToolBar().
	 * @param integer $style
	 * @param integer $id
	 * @param string $name
	 * @return wxToolBar
	 */
	function OnCreateToolBar($style, $id, $name){}

	/**
	 * PopStatusText
	 * @param integer $number
	 */
	function PopStatusText($number){}

	/**
	 * Simulate a menu command.
	 * @param integer $id
	 * @return bool
	 */
	function ProcessCommand($id){}

	/**
	 * PushStatusText
	 * @param string $text
	 * @param integer $number
	 */
	function PushStatusText($text, $number){}

	/**
	 * Tells the frame to show the given menu bar.
	 * @param wxMenuBar $menuBar
	 */
	function SetMenuBar(wxMenuBar &$menuBar){}

	/**
	 * Associates a status bar with the frame.
	 * @param wxStatusBar $statusBar
	 */
	function SetStatusBar(wxStatusBar &$statusBar){}

	/**
	 * Set the status bar pane used to display menu and toolbar help.
	 * @param integer $n
	 */
	function SetStatusBarPane($n){}

	/**
	 * Sets the status bar text and redraws the status bar.
	 * @param string $text
	 * @param integer $number
	 */
	function SetStatusText($text, $number){}

	/**
	 * Sets the widths of the fields in the status bar.
	 * @param integer $n
	 * @param array $widths_field
	 */
	function SetStatusWidths($n, array $widths_field){}

	/**
	 * Associates a toolbar with the frame.
	 * @param wxToolBar $toolBar
	 */
	function SetToolBar(wxToolBar &$toolBar){}
}

class wxGBPosition
{
	/**
	 * Default constructor, setting the row and column to (0,0).
	 * @param integer $row
	 * @param integer $col
	 */
	function __construct($row, $col){}

	/**
	 * Get the current column value.
	 * @return integer
	 */
	function GetCol(){}

	/**
	 * Get the current row value.
	 * @return integer
	 */
	function GetRow(){}

	/**
	 * Set a new column value.
	 * @param integer $col
	 */
	function SetCol($col){}

	/**
	 * Set a new row value.
	 * @param integer $row
	 */
	function SetRow($row){}
}

class wxGBSizerItem extends wxSizerItem
{
	/**
	 * Construct a sizer item for tracking a spacer.
	 * @param integer $width
	 * @param integer $height
	 * @param wxGBPosition $pos
	 * @param wxGBSpan $span
	 * @param integer $flag
	 * @param integer $border
	 * @param wxObject $userData
	 * @param wxWindow $window
	 * @param wxSizer $sizer
	 */
	function __construct($width, $height, wxGBPosition $pos, wxGBSpan $span=null, $flag, $border, wxObject &$userData=null, wxWindow &$window, wxGBPosition $pos, wxGBSpan $span=null, $flag, $border, wxObject &$userData=null, wxSizer &$sizer, wxGBPosition $pos, wxGBSpan $span=null, $flag, $border, wxObject &$userData=null){}

	/**
	 * Get the row and column of the endpoint of this item.
	 * @param integer $row
	 * @param integer $col
	 */
	function GetEndPos(&$row, &$col){}

	/**
	 * GetGBSizer
	 * @return wxGridBagSizer
	 */
	function GetGBSizer(){}

	/**
	 * Get the grid position of the item.
	 * @param integer $row
	 * @param integer $col
	 * @return wxGBPosition
	 */
	function GetPos(&$row, &$col){}

	/**
	 * Get the row and column spanning of the item.
	 * @param integer $rowspan
	 * @param integer $colspan
	 * @return wxGBSpan
	 */
	function GetSpan(&$rowspan, &$colspan){}

	/**
	 * Returns true if the given pos/span would intersect with this item.
	 * @param wxGBPosition $pos
	 * @param wxGBSpan $span
	 * @param wxGBSizerItem $other
	 * @return bool
	 */
	function Intersects(wxGBPosition $pos, wxGBSpan $span, wxGBSizerItem $other){}

	/**
	 * SetGBSizer
	 * @param wxGridBagSizer $sizer
	 */
	function SetGBSizer(wxGridBagSizer &$sizer){}

	/**
	 * If the item is already a member of a sizer then first ensure that there is no other item that would intersect with this one at the new position, then set the new position.
	 * @param wxGBPosition $pos
	 * @return bool
	 */
	function SetPos(wxGBPosition $pos){}

	/**
	 * If the item is already a member of a sizer then first ensure that there is no other item that would intersect with this one with its new spanning size, then set the new spanning.
	 * @param wxGBSpan $span
	 * @return bool
	 */
	function SetSpan(wxGBSpan $span){}
}

class wxGBSpan
{
	/**
	 * Default constructor, setting the rowspan and colspan to (1,1) meaning that the item occupies one cell in each direction.
	 * @param integer $rowspan
	 * @param integer $colspan
	 */
	function __construct($rowspan, $colspan){}

	/**
	 * Get the current colspan value.
	 * @return integer
	 */
	function GetColspan(){}

	/**
	 * Get the current rowspan value.
	 * @return integer
	 */
	function GetRowspan(){}

	/**
	 * Set a new colspan value.
	 * @param integer $colspan
	 */
	function SetColspan($colspan){}

	/**
	 * Set a new rowspan value.
	 * @param integer $rowspan
	 */
	function SetRowspan($rowspan){}
}

class wxGDIObject extends wxObject
{
}

class wxGauge extends wxControl
{
	/**
	 * Default constructor.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param integer $range
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param wxValidator $validator
	 * @param string $name
	 */
	function __construct(wxWindow &$parent, $id, $range, wxPoint $pos=null, wxSize $size=null, $style=wxGA_HORIZONTAL, wxValidator $validator=null, $name=wxGaugeNameStr){}

	/**
	 * Creates the gauge for two-step construction.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param integer $range
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param wxValidator $validator
	 * @param string $name
	 * @return bool
	 */
	function Create(wxWindow &$parent, $id, $range, wxPoint $pos=null, wxSize $size=null, $style=wxGA_HORIZONTAL, wxValidator $validator=null, $name=wxGaugeNameStr){}

	/**
	 * Returns the width of the 3D bezel face.
	 * @return integer
	 */
	function GetBezelFace(){}

	/**
	 * Returns the maximum position of the gauge.
	 * @return integer
	 */
	function GetRange(){}

	/**
	 * Returns the 3D shadow margin width.
	 * @return integer
	 */
	function GetShadowWidth(){}

	/**
	 * Returns the current position of the gauge.
	 * @return integer
	 */
	function GetValue(){}

	/**
	 * Returns true if the gauge is vertical (has wxGA_VERTICAL style) and false otherwise.
	 * @return bool
	 */
	function IsVertical(){}

	/**
	 * Switch the gauge to indeterminate mode (if required) and makes the gauge move a bit to indicate the user that some progress has been made.
	 */
	function Pulse(){}

	/**
	 * Sets the 3D bezel face width.
	 * @param integer $width
	 */
	function SetBezelFace($width){}

	/**
	 * Sets the range (maximum value) of the gauge.
	 * @param integer $range
	 */
	function SetRange($range){}

	/**
	 * Sets the 3D shadow width.
	 * @param integer $width
	 */
	function SetShadowWidth($width){}

	/**
	 * Sets the position of the gauge.
	 * @param integer $pos
	 */
	function SetValue($pos){}
}

class wxGenericDirCtrl extends wxControl
{
	/**
	 * Default constructor.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param string $dir
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param string $filter
	 * @param integer $defaultFilter
	 * @param string $name
	 */
	function __construct(wxWindow &$parent, $id=wxID_ANY, $dir=wxDirDialogDefaultFolderStr, wxPoint $pos=null, wxSize $size=null, $style=wxDIRCTRL_3D_INTERNAL, $filter=wxEmptyString, $defaultFilter, $name=wxTreeCtrlNameStr){}

	/**
	 * Collapse the given path.
	 * @param string $path
	 * @return bool
	 */
	function CollapsePath($path){}

	/**
	 * Collapses the entire tree.
	 */
	function CollapseTree(){}

	/**
	 * Create function for two-step construction.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param string $dir
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param string $filter
	 * @param integer $defaultFilter
	 * @param string $name
	 * @return bool
	 */
	function Create(wxWindow &$parent, $id=wxID_ANY, $dir=wxDirDialogDefaultFolderStr, wxPoint $pos=null, wxSize $size=null, $style=wxDIRCTRL_3D_INTERNAL, $filter=wxEmptyString, $defaultFilter, $name=wxTreeCtrlNameStr){}

	/**
	 * Tries to expand as much of the given path as possible, so that the filename or directory is visible in the tree control.
	 * @param string $path
	 * @return bool
	 */
	function ExpandPath($path){}

	/**
	 * Gets the default path.
	 * @return string
	 */
	function GetDefaultPath(){}

	/**
	 * Gets selected filename path only (else empty string).
	 * @return string
	 */
	function GetFilePath(){}

	/**
	 * Fills the array paths with the currently selected filepaths.
	 * @param array $paths
	 */
	function GetFilePaths(array &$paths){}

	/**
	 * Returns the filter string.
	 * @return string
	 */
	function GetFilter(){}

	/**
	 * Returns the current filter index (zero-based).
	 * @return integer
	 */
	function GetFilterIndex(){}

	/**
	 * Gets the currently-selected directory or filename.
	 * @return string
	 */
	function GetPath(){}

	/**
	 * Fills the array paths with the selected directories and filenames.
	 * @param array $paths
	 */
	function GetPaths(array &$paths){}

	/**
	 * Returns the root id for the tree control.
	 * @return wxTreeItemId
	 */
	function GetRootId(){}

	/**
	 * Returns a pointer to the tree control.
	 * @return wxTreeCtrl
	 */
	function GetTreeCtrl(){}

	/**
	 * Initializes variables.
	 */
	function Init(){}

	/**
	 * Collapse and expand the tree, thus re-creating it from scratch.
	 */
	function ReCreateTree(){}

	/**
	 * Selects the given item.
	 * @param string $path
	 * @param bool $select
	 */
	function SelectPath($path, $select=true){}

	/**
	 * Selects only the specified paths, clearing any previous selection.
	 * @param array $paths
	 */
	function SelectPaths(array $paths){}

	/**
	 * Sets the default path.
	 * @param string $path
	 */
	function SetDefaultPath($path){}

	/**
	 * Sets the filter string.
	 * @param string $filter
	 */
	function SetFilter($filter){}

	/**
	 * Sets the current filter index (zero-based).
	 * @param integer $n
	 */
	function SetFilterIndex($n){}

	/**
	 * Sets the current path.
	 * @param string $path
	 */
	function SetPath($path){}

	/**
	 * ShowHidden
	 * @param bool $show
	 */
	function ShowHidden($show){}

	/**
	 * Removes the selection from all currently selected items.
	 */
	function UnselectAll(){}
}

class wxGenericProgressDialog extends wxDialog
{
	/**
	 * Constructor.
	 * @param string $title
	 * @param string $message
	 * @param integer $maximum
	 * @param wxWindow $parent
	 * @param integer $style
	 */
	function __construct($title, $message, $maximum=100, wxWindow &$parent=null, $style=null){}

	/**
	 * Returns the last message passed to the Update() function; if you always passed wxEmptyString to Update() then the message set through the constructor is returned.
	 * @return string
	 */
	function GetMessage(){}

	/**
	 * Returns the maximum value of the progress meter, as passed to the constructor or wxNOT_FOUND if the dialog has no progress bar.
	 * @return integer
	 */
	function GetRange(){}

	/**
	 * Returns the last value passed to the Update() function or wxNOT_FOUND if the dialog has no progress bar.
	 * @return integer
	 */
	function GetValue(){}

	/**
	 * Like Update() but makes the gauge control run in indeterminate mode.
	 * @param string $newmsg
	 * @param bool $skip
	 * @return bool
	 */
	function Pulse($newmsg=wxEmptyString, &$skip=NULL){}

	/**
	 * Can be used to continue with the dialog, after the user had clicked the "Abort" button.
	 */
	function Resume(){}

	/**
	 * Changes the maximum value of the progress meter given in the constructor.
	 * @param integer $maximum
	 */
	function SetRange($maximum){}

	/**
	 * Updates the dialog, setting the progress bar to the new value and updating the message if new one is specified.
	 * @param integer $value
	 * @param string $newmsg
	 * @param bool $skip
	 * @return bool
	 */
	function Update($value, $newmsg=wxEmptyString, &$skip=NULL){}

	/**
	 * Returns true if the "Cancel" button was pressed.
	 * @return bool
	 */
	function WasCancelled(){}

	/**
	 * Returns true if the "Skip" button was pressed.
	 * @return bool
	 */
	function WasSkipped(){}
}

class wxGenericValidator extends wxValidator
{
	/**
	 * Constructor taking a bool pointer.
	 * @param bool $valPtr
	 */
	function __construct(&$valPtr, &$valPtr, &$valPtr, &$valPtr, wxFileName &$valPtr, &$valPtr, &$valPtr){}

	/**
	 * Clones the generic validator using the copy constructor.
	 * @return wxObject
	 */
	function CloneMethod(){}

	/**
	 * Transfers the value from the window to the appropriate data type.
	 * @return bool
	 */
	function TransferFromWindow(){}

	/**
	 * Transfers the value to the window.
	 * @return bool
	 */
	function TransferToWindow(){}
}

class wxGraphicsGradientStop
{
	/**
	 * Creates a stop with the given colour and position.
	 * @param wxColour $col
	 * @param float $pos
	 */
	function __construct(wxColour $col=null, $pos=0.){}

	/**
	 * Return the stop colour.
	 * @return wxColour
	 */
	function GetColour(){}

	/**
	 * Return the stop position.
	 * @return float
	 */
	function GetPosition(){}

	/**
	 * Change the stop colour.
	 * @param wxColour $col
	 */
	function SetColour(wxColour $col){}

	/**
	 * Change the stop position.
	 * @param float $pos
	 */
	function SetPosition($pos){}
}

class wxGraphicsGradientStops
{
	/**
	 * Initializes the gradient stops with the given boundary colours.
	 * @param wxColour $startCol
	 * @param wxColour $endCol
	 */
	function __construct(wxColour $startCol=null, wxColour $endCol=null){}

	/**
	 * Add a new stop.
	 * @param wxGraphicsGradientStop $stop
	 * @param wxColour $col
	 * @param float $pos
	 */
	function Add(wxGraphicsGradientStop $stop, wxColour $col, $pos){}

	/**
	 * Returns the number of stops.
	 * @return integer
	 */
	function GetCount(){}

	/**
	 * Returns the end colour.
	 * @return wxColour
	 */
	function GetEndColour(){}

	/**
	 * Returns the start colour.
	 * @return wxColour
	 */
	function GetStartColour(){}

	/**
	 * Returns the stop at the given index.
	 * @param integer $n
	 * @return wxGraphicsGradientStop
	 */
	function Item($n){}

	/**
	 * Set the end colour to col.
	 * @param wxColour $col
	 */
	function SetEndColour(wxColour $col){}

	/**
	 * Set the start colour to col.
	 * @param wxColour $col
	 */
	function SetStartColour(wxColour $col){}
}

class wxGraphicsMatrix extends wxGraphicsObject
{
}

class wxGraphicsRenderer extends wxObject
{
}

class wxGrid extends wxScrolledWindow
{
	const wxGridSelectCells = 1;
	const wxGridSelectRows = 1;
	const wxGridSelectColumns = 1;
	const wxGridSelectRowsOrColumns = 1;
	const CellSpan_Inside = 1;
	const CellSpan_None = 1;
	const CellSpan_Main = 1;

	/**
	 * Default constructor.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param string $name
	 */
	function __construct(wxWindow &$parent, $id, wxPoint $pos=null, wxSize $size=null, $style=wxWANTS_CHARS, $name=wxGridNameStr){}

	/**
	 * Appends one or more new columns to the right of the grid.
	 * @param integer $numCols
	 * @param bool $updateLabels
	 * @return bool
	 */
	function AppendCols($numCols=1, $updateLabels=true){}

	/**
	 * Appends one or more new rows to the bottom of the grid.
	 * @param integer $numRows
	 * @param bool $updateLabels
	 * @return bool
	 */
	function AppendRows($numRows=1, $updateLabels=true){}

	/**
	 * Return true if the horizontal grid lines stop at the last column boundary or false if they continue to the end of the window.
	 * @return bool
	 */
	function AreHorzGridLinesClipped(){}

	/**
	 * Return true if the vertical grid lines stop at the last row boundary or false if they continue to the end of the window.
	 * @return bool
	 */
	function AreVertGridLinesClipped(){}

	/**
	 * Automatically sets the height and width of all rows and columns to fit their contents.
	 */
	function AutoSize(){}

	/**
	 * Automatically adjusts width of the column to fit its label.
	 * @param integer $col
	 */
	function AutoSizeColLabelSize($col){}

	/**
	 * Automatically sizes the column to fit its contents.
	 * @param integer $col
	 * @param bool $setAsMin
	 */
	function AutoSizeColumn($col, $setAsMin=true){}

	/**
	 * Automatically sizes all columns to fit their contents.
	 * @param bool $setAsMin
	 */
	function AutoSizeColumns($setAsMin=true){}

	/**
	 * Automatically sizes the row to fit its contents.
	 * @param integer $row
	 * @param bool $setAsMin
	 */
	function AutoSizeRow($row, $setAsMin=true){}

	/**
	 * Automatically adjusts height of the row to fit its label.
	 * @param integer $col
	 */
	function AutoSizeRowLabelSize($col){}

	/**
	 * Automatically sizes all rows to fit their contents.
	 * @param bool $setAsMin
	 */
	function AutoSizeRows($setAsMin=true){}

	/**
	 * Increments the grid's batch count.
	 */
	function BeginBatch(){}

	/**
	 * Return true if the dragging of cells is enabled or false otherwise.
	 * @return bool
	 */
	function CanDragCell(){}

	/**
	 * Returns true if columns can be moved by dragging with the mouse.
	 * @return bool
	 */
	function CanDragColMove(){}

	/**
	 * Returns true if the given column can be resized by dragging with the mouse.
	 * @param integer $col
	 * @return bool
	 */
	function CanDragColSize($col){}

	/**
	 * Return true if the dragging of grid lines to resize rows and columns is enabled or false otherwise.
	 * @return bool
	 */
	function CanDragGridSize(){}

	/**
	 * Returns true if the given row can be resized by dragging with the mouse.
	 * @param integer $row
	 * @return bool
	 */
	function CanDragRowSize($row){}

	/**
	 * Returns true if the in-place edit control for the current grid cell can be used and false otherwise.
	 * @return bool
	 */
	function CanEnableCellControl(){}

	/**
	 * Return the rectangle corresponding to the grid cell's size and position in logical coordinates.
	 * @param integer $row
	 * @param integer $col
	 * @return wxRect
	 */
	function CellToRect($row, $col){}

	/**
	 * Clears all data in the underlying grid table and repaints the grid.
	 */
	function ClearGrid(){}

	/**
	 * Deselects all cells that are currently selected.
	 */
	function ClearSelection(){}

	/**
	 * Change whether the horizontal grid lines are clipped by the end of the last column.
	 * @param bool $clip
	 */
	function ClipHorzGridLines($clip){}

	/**
	 * Change whether the vertical grid lines are clipped by the end of the last row.
	 * @param bool $clip
	 */
	function ClipVertGridLines($clip){}

	/**
	 * Creates the grid window for an object initialized using the default constructor.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param string $name
	 * @return bool
	 */
	function Create(wxWindow &$parent, $id, wxPoint $pos=null, wxSize $size=null, $style=wxWANTS_CHARS, $name=wxGridNameStr){}

	/**
	 * Creates a grid with the specified initial number of rows and columns.
	 * @param integer $numRows
	 * @param integer $numCols
	 * @param wxGridSelectionModes $selmode
	 * @return bool
	 */
	function CreateGrid($numRows, $numCols, $selmode=wxGridSelectCells){}

	/**
	 * Deletes one or more columns from a grid starting at the specified position.
	 * @param integer $pos
	 * @param integer $numCols
	 * @param bool $updateLabels
	 * @return bool
	 */
	function DeleteCols($pos, $numCols=1, $updateLabels=true){}

	/**
	 * Deletes one or more rows from a grid starting at the specified position.
	 * @param integer $pos
	 * @param integer $numRows
	 * @param bool $updateLabels
	 * @return bool
	 */
	function DeleteRows($pos, $numRows=1, $updateLabels=true){}

	/**
	 * Disables in-place editing of grid cells.
	 */
	function DisableCellEditControl(){}

	/**
	 * Disable interactive resizing of the specified column.
	 * @param integer $col
	 */
	function DisableColResize($col){}

	/**
	 * Disables column moving by dragging with the mouse.
	 */
	function DisableDragColMove(){}

	/**
	 * Disables column sizing by dragging with the mouse.
	 */
	function DisableDragColSize(){}

	/**
	 * Disable mouse dragging of grid lines to resize rows and columns.
	 */
	function DisableDragGridSize(){}

	/**
	 * Disables row sizing by dragging with the mouse.
	 */
	function DisableDragRowSize(){}

	/**
	 * Disable interactive resizing of the specified row.
	 * @param integer $row
	 */
	function DisableRowResize($row){}

	/**
	 * Enables or disables in-place editing of grid cell data.
	 * @param bool $enable
	 */
	function EnableCellEditControl($enable=true){}

	/**
	 * Enables or disables cell dragging with the mouse.
	 * @param bool $enable
	 */
	function EnableDragCell($enable=true){}

	/**
	 * Enables or disables column moving by dragging with the mouse.
	 * @param bool $enable
	 */
	function EnableDragColMove($enable=true){}

	/**
	 * Enables or disables column sizing by dragging with the mouse.
	 * @param bool $enable
	 */
	function EnableDragColSize($enable=true){}

	/**
	 * Enables or disables row and column resizing by dragging gridlines with the mouse.
	 * @param bool $enable
	 */
	function EnableDragGridSize($enable=true){}

	/**
	 * Enables or disables row sizing by dragging with the mouse.
	 * @param bool $enable
	 */
	function EnableDragRowSize($enable=true){}

	/**
	 * Makes the grid globally editable or read-only.
	 * @param bool $edit
	 */
	function EnableEditing($edit){}

	/**
	 * Turns the drawing of grid lines on or off.
	 * @param bool $enable
	 */
	function EnableGridLines($enable=true){}

	/**
	 * Decrements the grid's batch count.
	 */
	function EndBatch(){}

	/**
	 * Overridden wxWindow method.
	 */
	function Fit(){}

	/**
	 * Causes immediate repainting of the grid.
	 */
	function ForceRefresh(){}

	/**
	 * Returns the number of times that BeginBatch() has been called without (yet) matching calls to EndBatch().
	 * @return integer
	 */
	function GetBatchCount(){}

	/**
	 * Sets the arguments to the horizontal and vertical text alignment values for the grid cell at the specified location.
	 * @param integer $row
	 * @param integer $col
	 * @param integer $horiz
	 * @param integer $vert
	 */
	function GetCellAlignment($row, $col, &$horiz, &$vert){}

	/**
	 * Returns the background colour of the cell at the specified location.
	 * @param integer $row
	 * @param integer $col
	 * @return wxColour
	 */
	function GetCellBackgroundColour($row, $col){}

	/**
	 * Returns a pointer to the editor for the cell at the specified location.
	 * @param integer $row
	 * @param integer $col
	 * @return wxGridCellEditor
	 */
	function GetCellEditor($row, $col){}

	/**
	 * Returns the font for text in the grid cell at the specified location.
	 * @param integer $row
	 * @param integer $col
	 * @return wxFont
	 */
	function GetCellFont($row, $col){}

	/**
	 * Returns a pointer to the renderer for the grid cell at the specified location.
	 * @param integer $row
	 * @param integer $col
	 * @return wxGridCellRenderer
	 */
	function GetCellRenderer($row, $col){}

	/**
	 * Get the size of the cell in number of cells covered by it.
	 * @param integer $row
	 * @param integer $col
	 * @param integer $num_rows
	 * @param integer $num_cols
	 * @return CellSpan
	 */
	function GetCellSize($row, $col, &$num_rows, &$num_cols){}

	/**
	 * Returns the text colour for the grid cell at the specified location.
	 * @param integer $row
	 * @param integer $col
	 * @return wxColour
	 */
	function GetCellTextColour($row, $col){}

	/**
	 * Returns the string contained in the cell at the specified location.
	 * @param integer $row
	 * @param integer $col
	 * @return string
	 */
	function GetCellValue($row, $col){}

	/**
	 * Returns the column ID of the specified column position.
	 * @param integer $colPos
	 * @return integer
	 */
	function GetColAt($colPos){}

	/**
	 * Returns the pen used for vertical grid lines.
	 * @param integer $col
	 * @return wxPen
	 */
	function GetColGridLinePen($col){}

	/**
	 * Sets the arguments to the current column label alignment values.
	 * @param integer $horiz
	 * @param integer $vert
	 */
	function GetColLabelAlignment(&$horiz, &$vert){}

	/**
	 * Returns the current height of the column labels.
	 * @return integer
	 */
	function GetColLabelSize(){}

	/**
	 * Returns the orientation of the column labels (either wxHORIZONTAL or wxVERTICAL).
	 * @return integer
	 */
	function GetColLabelTextOrientation(){}

	/**
	 * Returns the specified column label.
	 * @param integer $col
	 * @return string
	 */
	function GetColLabelValue($col){}

	/**
	 * Returns the minimal width to which a column may be resized.
	 * @return integer
	 */
	function GetColMinimalAcceptableWidth(){}

	/**
	 * Returns the position of the specified column.
	 * @param integer $colID
	 * @return integer
	 */
	function GetColPos($colID){}

	/**
	 * Returns the width of the specified column.
	 * @param integer $col
	 * @return integer
	 */
	function GetColSize($col){}

	/**
	 * Get size information for all columns at once.
	 * @return wxGridSizesInfo
	 */
	function GetColSizes(){}

	/**
	 * Returns the default cell alignment.
	 * @param integer $horiz
	 * @param integer $vert
	 */
	function GetDefaultCellAlignment(&$horiz, &$vert){}

	/**
	 * Returns the current default background colour for grid cells.
	 * @return wxColour
	 */
	function GetDefaultCellBackgroundColour(){}

	/**
	 * Returns the current default font for grid cell text.
	 * @return wxFont
	 */
	function GetDefaultCellFont(){}

	/**
	 * Returns the current default colour for grid cell text.
	 * @return wxColour
	 */
	function GetDefaultCellTextColour(){}

	/**
	 * Returns the default height for column labels.
	 * @return integer
	 */
	function GetDefaultColLabelSize(){}

	/**
	 * Returns the current default width for grid columns.
	 * @return integer
	 */
	function GetDefaultColSize(){}

	/**
	 * Returns a pointer to the current default grid cell editor.
	 * @return wxGridCellEditor
	 */
	function GetDefaultEditor(){}

	/**
	 * Returns the default editor for the cells containing values of the given type.
	 * @param string $typeName
	 * @return wxGridCellEditor
	 */
	function GetDefaultEditorForType($typeName){}

	/**
	 * Returns the pen used for grid lines.
	 * @return wxPen
	 */
	function GetDefaultGridLinePen(){}

	/**
	 * Returns a pointer to the current default grid cell renderer.
	 * @return wxGridCellRenderer
	 */
	function GetDefaultRenderer(){}

	/**
	 * Returns the default renderer for the given cell.
	 * @param integer $row
	 * @param integer $col
	 * @return wxGridCellRenderer
	 */
	function GetDefaultRendererForCell($row, $col){}

	/**
	 * Returns the default renderer for the cell containing values of the given type.
	 * @param string $typeName
	 * @return wxGridCellRenderer
	 */
	function GetDefaultRendererForType($typeName){}

	/**
	 * Returns the default width for the row labels.
	 * @return integer
	 */
	function GetDefaultRowLabelSize(){}

	/**
	 * Returns the current default height for grid rows.
	 * @return integer
	 */
	function GetDefaultRowSize(){}

	/**
	 * Return the header control used for column labels display.
	 * @return wxHeaderCtrl
	 */
	function GetGridColHeader(){}

	/**
	 * Return the column labels window.
	 * @return wxWindow
	 */
	function GetGridColLabelWindow(){}

	/**
	 * Return the window in the top left grid corner.
	 * @return wxWindow
	 */
	function GetGridCornerLabelWindow(){}

	/**
	 * Returns the current grid cell column position.
	 * @return integer
	 */
	function GetGridCursorCol(){}

	/**
	 * Returns the current grid cell row position.
	 * @return integer
	 */
	function GetGridCursorRow(){}

	/**
	 * Returns the colour used for grid lines.
	 * @return wxColour
	 */
	function GetGridLineColour(){}

	/**
	 * Return the row labels window.
	 * @return wxWindow
	 */
	function GetGridRowLabelWindow(){}

	/**
	 * Return the main grid window containing the grid cells.
	 * @return wxWindow
	 */
	function GetGridWindow(){}

	/**
	 * Returns the colour used for the background of row and column labels.
	 * @return wxColour
	 */
	function GetLabelBackgroundColour(){}

	/**
	 * Returns the font used for row and column labels.
	 * @return wxFont
	 */
	function GetLabelFont(){}

	/**
	 * Returns the colour used for row and column label text.
	 * @return wxColour
	 */
	function GetLabelTextColour(){}

	/**
	 * Returns the total number of grid columns.
	 * @return integer
	 */
	function GetNumberCols(){}

	/**
	 * Returns the total number of grid rows.
	 * @return integer
	 */
	function GetNumberRows(){}

	/**
	 * Returns the attribute for the given cell creating one if necessary.
	 * @param integer $row
	 * @param integer $col
	 * @return wxGridCellAttr
	 */
	function GetOrCreateCellAttr($row, $col){}

	/**
	 * Returns the pen used for horizontal grid lines.
	 * @param integer $row
	 * @return wxPen
	 */
	function GetRowGridLinePen($row){}

	/**
	 * Returns the alignment used for row labels.
	 * @param integer $horiz
	 * @param integer $vert
	 */
	function GetRowLabelAlignment(&$horiz, &$vert){}

	/**
	 * Returns the current width of the row labels.
	 * @return integer
	 */
	function GetRowLabelSize(){}

	/**
	 * Returns the specified row label.
	 * @param integer $row
	 * @return string
	 */
	function GetRowLabelValue($row){}

	/**
	 * Returns the minimal size to which rows can be resized.
	 * @return integer
	 */
	function GetRowMinimalAcceptableHeight(){}

	/**
	 * Returns the height of the specified row.
	 * @param integer $row
	 * @return integer
	 */
	function GetRowSize($row){}

	/**
	 * Get size information for all row at once.
	 * @return wxGridSizesInfo
	 */
	function GetRowSizes(){}

	/**
	 * Returns the number of pixels per horizontal scroll increment.
	 * @return integer
	 */
	function GetScrollLineX(){}

	/**
	 * Returns the number of pixels per vertical scroll increment.
	 * @return integer
	 */
	function GetScrollLineY(){}

	/**
	 * Returns the colour used for drawing the selection background.
	 * @return wxColour
	 */
	function GetSelectionBackground(){}

	/**
	 * Returns the colour used for drawing the selection foreground.
	 * @return wxColour
	 */
	function GetSelectionForeground(){}

	/**
	 * Returns the current selection mode.
	 * @return wxGridSelectionModes
	 */
	function GetSelectionMode(){}

	/**
	 * Return the column in which the sorting indicator is currently displayed.
	 * @return integer
	 */
	function GetSortingColumn(){}

	/**
	 * Returns a base pointer to the current table object.
	 * @return wxGridTableBase
	 */
	function GetTable(){}

	/**
	 * Make the given cell current and ensure it is visible.
	 * @param integer $row
	 * @param integer $col
	 */
	function GoToCell($row, $col){}

	/**
	 * Returns true if drawing of grid lines is turned on, false otherwise.
	 * @return bool
	 */
	function GridLinesEnabled(){}

	/**
	 * Hides the in-place cell edit control.
	 */
	function HideCellEditControl(){}

	/**
	 * Hides the specified column.
	 * @param integer $col
	 */
	function HideCol($col){}

	/**
	 * Hides the column labels by calling SetColLabelSize() with a size of 0.
	 */
	function HideColLabels(){}

	/**
	 * Hides the specified row.
	 * @param integer $col
	 */
	function HideRow($col){}

	/**
	 * Hides the row labels by calling SetRowLabelSize() with a size of 0.
	 */
	function HideRowLabels(){}

	/**
	 * Inserts one or more new columns into a grid with the first new column at the specified position.
	 * @param integer $pos
	 * @param integer $numCols
	 * @param bool $updateLabels
	 * @return bool
	 */
	function InsertCols($pos, $numCols=1, $updateLabels=true){}

	/**
	 * Inserts one or more new rows into a grid with the first new row at the specified position.
	 * @param integer $pos
	 * @param integer $numRows
	 * @param bool $updateLabels
	 * @return bool
	 */
	function InsertRows($pos, $numRows=1, $updateLabels=true){}

	/**
	 * Returns true if the in-place edit control is currently enabled.
	 * @return bool
	 */
	function IsCellEditControlEnabled(){}

	/**
	 * Returns true if the specified column is not currently hidden.
	 * @param integer $col
	 * @return bool
	 */
	function IsColShown($col){}

	/**
	 * Returns true if the current cell is read-only.
	 * @return bool
	 */
	function IsCurrentCellReadOnly(){}

	/**
	 * Returns false if the whole grid has been set as read-only or true otherwise.
	 * @return bool
	 */
	function IsEditable(){}

	/**
	 * Returns true if the given cell is selected.
	 * @param integer $row
	 * @param integer $col
	 * @return bool
	 */
	function IsInSelection($row, $col){}

	/**
	 * Returns true if the cell at the specified location can't be edited.
	 * @param integer $row
	 * @param integer $col
	 * @return bool
	 */
	function IsReadOnly($row, $col){}

	/**
	 * Returns true if the specified row is not currently hidden.
	 * @param integer $row
	 * @return bool
	 */
	function IsRowShown($row){}

	/**
	 * Returns true if there are currently any selected cells, rows, columns or blocks.
	 * @return bool
	 */
	function IsSelection(){}

	/**
	 * Return true if the current sorting order is ascending or false if it is descending.
	 * @return bool
	 */
	function IsSortOrderAscending(){}

	/**
	 * Return true if this column is currently used for sorting.
	 * @param integer $col
	 * @return bool
	 */
	function IsSortingBy($col){}

	/**
	 * Returns true if a cell is either entirely or at least partially visible in the grid window.
	 * @param integer $row
	 * @param integer $col
	 * @param bool $wholeCellVisible
	 * @return bool
	 */
	function IsVisible($row, $col, $wholeCellVisible=true){}

	/**
	 * Brings the specified cell into the visible grid cell area with minimal scrolling.
	 * @param integer $row
	 * @param integer $col
	 */
	function MakeCellVisible($row, $col){}

	/**
	 * Moves the grid cursor down by one row.
	 * @param bool $expandSelection
	 * @return bool
	 */
	function MoveCursorDown($expandSelection){}

	/**
	 * Moves the grid cursor down in the current column such that it skips to the beginning or end of a block of non-empty cells.
	 * @param bool $expandSelection
	 * @return bool
	 */
	function MoveCursorDownBlock($expandSelection){}

	/**
	 * Moves the grid cursor left by one column.
	 * @param bool $expandSelection
	 * @return bool
	 */
	function MoveCursorLeft($expandSelection){}

	/**
	 * Moves the grid cursor left in the current row such that it skips to the beginning or end of a block of non-empty cells.
	 * @param bool $expandSelection
	 * @return bool
	 */
	function MoveCursorLeftBlock($expandSelection){}

	/**
	 * Moves the grid cursor right by one column.
	 * @param bool $expandSelection
	 * @return bool
	 */
	function MoveCursorRight($expandSelection){}

	/**
	 * Moves the grid cursor right in the current row such that it skips to the beginning or end of a block of non-empty cells.
	 * @param bool $expandSelection
	 * @return bool
	 */
	function MoveCursorRightBlock($expandSelection){}

	/**
	 * Moves the grid cursor up by one row.
	 * @param bool $expandSelection
	 * @return bool
	 */
	function MoveCursorUp($expandSelection){}

	/**
	 * Moves the grid cursor up in the current column such that it skips to the beginning or end of a block of non-empty cells.
	 * @param bool $expandSelection
	 * @return bool
	 */
	function MoveCursorUpBlock($expandSelection){}

	/**
	 * Moves the grid cursor down by some number of rows so that the previous bottom visible row becomes the top visible row.
	 * @return bool
	 */
	function MovePageDown(){}

	/**
	 * Moves the grid cursor up by some number of rows so that the previous top visible row becomes the bottom visible row.
	 * @return bool
	 */
	function MovePageUp(){}

	/**
	 * Invalidates the cached attribute for the given cell.
	 * @param integer $row
	 * @param integer $col
	 */
	function RefreshAttr($row, $col){}

	/**
	 * Register a new data type.
	 * @param string $typeName
	 * @param wxGridCellRenderer $renderer
	 * @param wxGridCellEditor $editor
	 */
	function RegisterDataType($typeName, wxGridCellRenderer &$renderer, wxGridCellEditor &$editor){}

	/**
	 * Resets the position of the columns to the default.
	 */
	function ResetColPos(){}

	/**
	 * Sets the value of the current grid cell to the current in-place edit control value.
	 */
	function SaveEditControlValue(){}

	/**
	 * Selects all cells in the grid.
	 */
	function SelectAll(){}

	/**
	 * Selects a rectangular block of cells.
	 * @param integer $topRow
	 * @param integer $leftCol
	 * @param integer $bottomRow
	 * @param integer $rightCol
	 * @param bool $addToSelected
	 */
	function SelectBlock($topRow, $leftCol, $bottomRow, $rightCol, $addToSelected=false){}

	/**
	 * Selects the specified column.
	 * @param integer $col
	 * @param bool $addToSelected
	 */
	function SelectCol($col, $addToSelected=false){}

	/**
	 * Selects the specified row.
	 * @param integer $row
	 * @param bool $addToSelected
	 */
	function SelectRow($row, $addToSelected=false){}

	/**
	 * Sets the horizontal and vertical alignment for grid cell text at the specified location.
	 * @param integer $row
	 * @param integer $col
	 * @param integer $horiz
	 * @param integer $vert
	 * @param integer $align
	 */
	function SetCellAlignment($row, $col, $horiz, $vert, $align, $row, $col){}

	/**
	 * Set the background colour for the given cell or all cells by default.
	 * @param integer $row
	 * @param integer $col
	 * @param wxColour $colour
	 */
	function SetCellBackgroundColour($row, $col, wxColour $colour){}

	/**
	 * Sets the editor for the grid cell at the specified location.
	 * @param integer $row
	 * @param integer $col
	 * @param wxGridCellEditor $editor
	 */
	function SetCellEditor($row, $col, wxGridCellEditor &$editor){}

	/**
	 * Sets the font for text in the grid cell at the specified location.
	 * @param integer $row
	 * @param integer $col
	 * @param wxFont $font
	 */
	function SetCellFont($row, $col, wxFont $font){}

	/**
	 * Sets the renderer for the grid cell at the specified location.
	 * @param integer $row
	 * @param integer $col
	 * @param wxGridCellRenderer $renderer
	 */
	function SetCellRenderer($row, $col, wxGridCellRenderer &$renderer){}

	/**
	 * Set the size of the cell.
	 * @param integer $row
	 * @param integer $col
	 * @param integer $num_rows
	 * @param integer $num_cols
	 */
	function SetCellSize($row, $col, $num_rows, $num_cols){}

	/**
	 * Sets the text colour for the given cell.
	 * @param integer $row
	 * @param integer $col
	 * @param wxColour $colour
	 * @param wxColour $val
	 */
	function SetCellTextColour($row, $col, wxColour $colour, wxColour $val, $row, $col, wxColour $colour){}

	/**
	 * Sets the string value for the cell at the specified location.
	 * @param integer $row
	 * @param integer $col
	 * @param string $s
	 * @param string $val
	 */
	function SetCellValue($row, $col, $s, $val, $row, $col){}

	/**
	 * Sets the cell attributes for all cells in the specified column.
	 * @param integer $col
	 * @param wxGridCellAttr $attr
	 */
	function SetColAttr($col, wxGridCellAttr &$attr){}

	/**
	 * Sets the specified column to display boolean values.
	 * @param integer $col
	 */
	function SetColFormatBool($col){}

	/**
	 * Sets the specified column to display data in a custom format.
	 * @param integer $col
	 * @param string $typeName
	 */
	function SetColFormatCustom($col, $typeName){}

	/**
	 * Sets the specified column to display floating point values with the given width and precision.
	 * @param integer $col
	 * @param integer $width
	 * @param integer $precision
	 */
	function SetColFormatFloat($col, $width=-1, $precision=-1){}

	/**
	 * Sets the specified column to display integer values.
	 * @param integer $col
	 */
	function SetColFormatNumber($col){}

	/**
	 * Sets the horizontal and vertical alignment of column label text.
	 * @param integer $horiz
	 * @param integer $vert
	 */
	function SetColLabelAlignment($horiz, $vert){}

	/**
	 * Sets the height of the column labels.
	 * @param integer $height
	 */
	function SetColLabelSize($height){}

	/**
	 * Sets the orientation of the column labels (either wxHORIZONTAL or wxVERTICAL).
	 * @param integer $textOrientation
	 */
	function SetColLabelTextOrientation($textOrientation){}

	/**
	 * Set the value for the given column label.
	 * @param integer $col
	 * @param string $value
	 */
	function SetColLabelValue($col, $value){}

	/**
	 * Sets the minimal width to which the user can resize columns.
	 * @param integer $width
	 */
	function SetColMinimalAcceptableWidth($width){}

	/**
	 * Sets the minimal width for the specified column col.
	 * @param integer $col
	 * @param integer $width
	 */
	function SetColMinimalWidth($col, $width){}

	/**
	 * Sets the position of the specified column.
	 * @param integer $colID
	 * @param integer $newPos
	 */
	function SetColPos($colID, $newPos){}

	/**
	 * Sets the width of the specified column.
	 * @param integer $col
	 * @param integer $width
	 */
	function SetColSize($col, $width){}

	/**
	 * Restore all columns sizes.
	 * @param wxGridSizesInfo $sizeInfo
	 */
	function SetColSizes(wxGridSizesInfo $sizeInfo){}

	/**
	 * Sets the default horizontal and vertical alignment for grid cell text.
	 * @param integer $horiz
	 * @param integer $vert
	 */
	function SetDefaultCellAlignment($horiz, $vert){}

	/**
	 * Sets the default background colour for grid cells.
	 * @param wxColour $colour
	 */
	function SetDefaultCellBackgroundColour(wxColour $colour){}

	/**
	 * Sets the default font to be used for grid cell text.
	 * @param wxFont $font
	 */
	function SetDefaultCellFont(wxFont $font){}

	/**
	 * Sets the current default colour for grid cell text.
	 * @param wxColour $colour
	 */
	function SetDefaultCellTextColour(wxColour $colour){}

	/**
	 * Sets the default width for columns in the grid.
	 * @param integer $width
	 * @param bool $resizeExistingCols
	 */
	function SetDefaultColSize($width, $resizeExistingCols=false){}

	/**
	 * Sets the default editor for grid cells.
	 * @param wxGridCellEditor $editor
	 */
	function SetDefaultEditor(wxGridCellEditor &$editor){}

	/**
	 * Sets the default renderer for grid cells.
	 * @param wxGridCellRenderer $renderer
	 */
	function SetDefaultRenderer(wxGridCellRenderer &$renderer){}

	/**
	 * Sets the default height for rows in the grid.
	 * @param integer $height
	 * @param bool $resizeExistingRows
	 */
	function SetDefaultRowSize($height, $resizeExistingRows=false){}

	/**
	 * Set the grid cursor to the specified cell.
	 * @param integer $row
	 * @param integer $col
	 */
	function SetGridCursor($row, $col){}

	/**
	 * Sets the colour used to draw grid lines.
	 * @param wxColour $colour
	 */
	function SetGridLineColour(wxColour $colour){}

	/**
	 * Sets the background colour for row and column labels.
	 * @param wxColour $colour
	 */
	function SetLabelBackgroundColour(wxColour $colour){}

	/**
	 * Sets the font for row and column labels.
	 * @param wxFont $font
	 */
	function SetLabelFont(wxFont $font){}

	/**
	 * Sets the colour for row and column label text.
	 * @param wxColour $colour
	 */
	function SetLabelTextColour(wxColour $colour){}

	/**
	 * Sets the extra margins used around the grid area.
	 * @param integer $extraWidth
	 * @param integer $extraHeight
	 */
	function SetMargins($extraWidth, $extraHeight){}

	/**
	 * Makes the cell at the specified location read-only or editable.
	 * @param integer $row
	 * @param integer $col
	 * @param bool $isReadOnly
	 */
	function SetReadOnly($row, $col, $isReadOnly=true){}

	/**
	 * Sets the cell attributes for all cells in the specified row.
	 * @param integer $row
	 * @param wxGridCellAttr $attr
	 */
	function SetRowAttr($row, wxGridCellAttr &$attr){}

	/**
	 * Sets the horizontal and vertical alignment of row label text.
	 * @param integer $horiz
	 * @param integer $vert
	 */
	function SetRowLabelAlignment($horiz, $vert){}

	/**
	 * Sets the width of the row labels.
	 * @param integer $width
	 */
	function SetRowLabelSize($width){}

	/**
	 * Sets the value for the given row label.
	 * @param integer $row
	 * @param string $value
	 */
	function SetRowLabelValue($row, $value){}

	/**
	 * Sets the minimal row height used by default.
	 * @param integer $height
	 */
	function SetRowMinimalAcceptableHeight($height){}

	/**
	 * Sets the minimal height for the specified row.
	 * @param integer $row
	 * @param integer $height
	 */
	function SetRowMinimalHeight($row, $height){}

	/**
	 * Sets the height of the specified row.
	 * @param integer $row
	 * @param integer $height
	 */
	function SetRowSize($row, $height){}

	/**
	 * Restore all rows sizes.
	 * @param wxGridSizesInfo $sizeInfo
	 */
	function SetRowSizes(wxGridSizesInfo $sizeInfo){}

	/**
	 * Sets the number of pixels per horizontal scroll increment.
	 * @param integer $x
	 */
	function SetScrollLineX($x){}

	/**
	 * Sets the number of pixels per vertical scroll increment.
	 * @param integer $y
	 */
	function SetScrollLineY($y){}

	/**
	 * Set the colour to be used for drawing the selection background.
	 * @param wxColour $c
	 */
	function SetSelectionBackground(wxColour $c){}

	/**
	 * Set the colour to be used for drawing the selection foreground.
	 * @param wxColour $c
	 */
	function SetSelectionForeground(wxColour $c){}

	/**
	 * Set the selection behaviour of the grid.
	 * @param wxGridSelectionModes $selmode
	 */
	function SetSelectionMode($selmode){}

	/**
	 * Set the column to display the sorting indicator in and its direction.
	 * @param integer $col
	 * @param bool $ascending
	 */
	function SetSortingColumn($col, $ascending=true){}

	/**
	 * Passes a pointer to a custom grid table to be used by the grid.
	 * @param wxGridTableBase $table
	 * @param bool $takeOwnership
	 * @param wxGridSelectionModes $selmode
	 * @return bool
	 */
	function SetTable(wxGridTableBase &$table, $takeOwnership=false, $selmode=wxGridSelectCells){}

	/**
	 * Call this in order to make the column labels use a native look by using wxRendererNative::DrawHeaderButton() internally.
	 * @param bool $native
	 */
	function SetUseNativeColLabels($native=true){}

	/**
	 * Displays the in-place cell edit control for the current cell.
	 */
	function ShowCellEditControl(){}

	/**
	 * Shows the previously hidden column by resizing it to non-0 size.
	 * @param integer $col
	 */
	function ShowCol($col){}

	/**
	 * Shows the previously hidden row by resizing it to non-0 size.
	 * @param integer $col
	 */
	function ShowRow($col){}

	/**
	 * Remove any currently shown sorting indicator.
	 */
	function UnsetSortingColumn(){}

	/**
	 * Enable the use of native header window for column labels.
	 * @param bool $native
	 */
	function UseNativeColHeader($native=true){}

	/**
	 * Returns the column at the given pixel position.
	 * @param integer $x
	 * @param bool $clipToMinMax
	 * @return integer
	 */
	function XToCol($x, $clipToMinMax=false){}

	/**
	 * Returns the column whose right hand edge is close to the given logical x position.
	 * @param integer $x
	 * @return integer
	 */
	function XToEdgeOfCol($x){}

	/**
	 * Returns the row whose bottom edge is close to the given logical y position.
	 * @param integer $y
	 * @return integer
	 */
	function YToEdgeOfRow($y){}

	/**
	 * Returns the grid row that corresponds to the logical y coordinate.
	 * @param integer $y
	 * @param bool $clipToMinMax
	 * @return integer
	 */
	function YToRow($y, $clipToMinMax=false){}
}

class wxGridBagSizer extends wxFlexGridSizer
{
	/**
	 * Constructor, with optional parameters to specify the gap between the rows and columns.
	 * @param integer $vgap
	 * @param integer $hgap
	 */
	function __construct($vgap, $hgap){}

	/**
	 * Adds the given item to the given position.
	 * @param wxWindow $window
	 * @param wxGBPosition $pos
	 * @param wxGBSpan $span
	 * @param integer $flag
	 * @param integer $border
	 * @param wxObject $userData
	 * @param wxSizer $sizer
	 * @param integer $width
	 * @param integer $height
	 * @param wxGBSizerItem $item
	 * @return wxSizerItem
	 */
	function Add(wxWindow &$window, wxGBPosition $pos, wxGBSpan $span=null, $flag, $border, wxObject &$userData=null, wxSizer &$sizer, wxGBPosition $pos, wxGBSpan $span=null, $flag, $border, wxObject &$userData=null, $width, $height, wxGBPosition $pos, wxGBSpan $span=null, $flag, $border, wxObject &$userData=null, wxGBSizerItem &$item){}

	/**
	 * Called when the managed size of the sizer is needed or when layout needs done.
	 * @return wxSize
	 */
	function CalcMin(){}

	/**
	 * Look at all items and see if any intersect (or would overlap) the given item.
	 * @param wxGBSizerItem $item
	 * @param wxGBSizerItem $excludeItem
	 * @param wxGBPosition $pos
	 * @param wxGBSpan $span
	 * @return bool
	 */
	function CheckForIntersection(wxGBSizerItem &$item, wxGBSizerItem &$excludeItem=null, wxGBPosition $pos, wxGBSpan $span, wxGBSizerItem &$excludeItem=null){}

	/**
	 * Find the sizer item for the given window or subsizer, returns NULL if not found.
	 * @param wxWindow $window
	 * @param wxSizer $sizer
	 * @return wxGBSizerItem
	 */
	function FindItem(wxWindow &$window, wxSizer &$sizer){}

	/**
	 * Return the sizer item located at the point given in pt, or NULL if there is no item at that point.
	 * @param wxPoint $pt
	 * @return wxGBSizerItem
	 */
	function FindItemAtPoint(wxPoint $pt){}

	/**
	 * Return the sizer item for the given grid cell, or NULL if there is no item at that position.
	 * @param wxGBPosition $pos
	 * @return wxGBSizerItem
	 */
	function FindItemAtPosition(wxGBPosition $pos){}

	/**
	 * Return the sizer item that has a matching user data (it only compares pointer values) or NULL if not found.
	 * @param wxObject $userData
	 * @return wxGBSizerItem
	 */
	function FindItemWithData(wxObject $userData){}

	/**
	 * Get the size of the specified cell, including hgap and vgap.
	 * @param integer $row
	 * @param integer $col
	 * @return wxSize
	 */
	function GetCellSize($row, $col){}

	/**
	 * Get the size used for cells in the grid with no item.
	 * @return wxSize
	 */
	function GetEmptyCellSize(){}

	/**
	 * Get the grid position of the specified item.
	 * @param wxWindow $window
	 * @param wxSizer $sizer
	 * @param integer $index
	 * @return wxGBPosition
	 */
	function GetItemPosition(wxWindow &$window, wxSizer &$sizer, $index){}

	/**
	 * Get the row/col spanning of the specified item.
	 * @param wxWindow $window
	 * @param wxSizer $sizer
	 * @param integer $index
	 * @return wxGBSpan
	 */
	function GetItemSpan(wxWindow &$window, wxSizer &$sizer, $index){}

	/**
	 * Called when the managed size of the sizer is needed or when layout needs done.
	 */
	function RecalcSizes(){}

	/**
	 * Set the size used for cells in the grid with no item.
	 * @param wxSize $sz
	 */
	function SetEmptyCellSize(wxSize $sz){}

	/**
	 * Set the grid position of the specified item.
	 * @param wxWindow $window
	 * @param wxGBPosition $pos
	 * @param wxSizer $sizer
	 * @param integer $index
	 * @return bool
	 */
	function SetItemPosition(wxWindow &$window, wxGBPosition $pos, wxSizer &$sizer, wxGBPosition $pos, $index, wxGBPosition $pos){}

	/**
	 * Set the row/col spanning of the specified item.
	 * @param wxWindow $window
	 * @param wxGBSpan $span
	 * @param wxSizer $sizer
	 * @param integer $index
	 * @return bool
	 */
	function SetItemSpan(wxWindow &$window, wxGBSpan $span, wxSizer &$sizer, wxGBSpan $span, $index, wxGBSpan $span){}
}

class wxGridCellAttr
{
	const Any = 1;
	const Cell = 1;
	const Row = 1;
	const Col = 1;

	/**
	 * Default constructor.
	 * @param wxGridCellAttr $attrDefault
	 * @param wxColour $colText
	 * @param wxColour $colBack
	 * @param wxFont $font
	 * @param integer $hAlign
	 * @param integer $vAlign
	 */
	function __construct(wxGridCellAttr &$attrDefault=null, wxColour $colText, wxColour $colBack, wxFont $font, $hAlign, $vAlign){}

	/**
	 * Creates a new copy of this object.
	 * @return wxGridCellAttr
	 */
	function CloneMethod(){}

	/**
	 * This class is reference counted: it is created with ref count of 1, so calling DecRef() once will delete it.
	 */
	function DecRef(){}

	/**
	 * Get the alignment to use for the cell with the given attribute.
	 * @param integer $hAlign
	 * @param integer $vAlign
	 */
	function GetAlignment(&$hAlign, &$vAlign){}

	/**
	 * Returns the background colour.
	 * @return wxColour
	 */
	function GetBackgroundColour(){}

	/**
	 * Returns the cell editor.
	 * @param wxGrid $grid
	 * @param integer $row
	 * @param integer $col
	 * @return wxGridCellEditor
	 */
	function GetEditor(wxGrid $grid, $row, $col){}

	/**
	 * Returns the font.
	 * @return wxFont
	 */
	function GetFont(){}

	/**
	 * Get the alignment defined by this attribute.
	 * @param integer $hAlign
	 * @param integer $vAlign
	 */
	function GetNonDefaultAlignment(&$hAlign, &$vAlign){}

	/**
	 * Returns the cell renderer.
	 * @param wxGrid $grid
	 * @param integer $row
	 * @param integer $col
	 * @return wxGridCellRenderer
	 */
	function GetRenderer(wxGrid $grid, $row, $col){}

	/**
	 * Returns the text colour.
	 * @return wxColour
	 */
	function GetTextColour(){}

	/**
	 * Returns true if this attribute has a valid alignment set.
	 * @return bool
	 */
	function HasAlignment(){}

	/**
	 * Returns true if this attribute has a valid background colour set.
	 * @return bool
	 */
	function HasBackgroundColour(){}

	/**
	 * Returns true if this attribute has a valid cell editor set.
	 * @return bool
	 */
	function HasEditor(){}

	/**
	 * Returns true if this attribute has a valid font set.
	 * @return bool
	 */
	function HasFont(){}

	/**
	 * Returns true if this attribute has a valid cell renderer set.
	 * @return bool
	 */
	function HasRenderer(){}

	/**
	 * Returns true if this attribute has a valid text colour set.
	 * @return bool
	 */
	function HasTextColour(){}

	/**
	 * This class is reference counted: it is created with ref count of 1, so calling DecRef() once will delete it.
	 */
	function IncRef(){}

	/**
	 * Returns true if this cell is set as read-only.
	 * @return bool
	 */
	function IsReadOnly(){}

	/**
	 * Sets the alignment.
	 * @param integer $hAlign
	 * @param integer $vAlign
	 */
	function SetAlignment($hAlign, $vAlign){}

	/**
	 * Sets the background colour.
	 * @param wxColour $colBack
	 */
	function SetBackgroundColour(wxColour $colBack){}

	/**
	 * SetDefAttr
	 * @param wxGridCellAttr $defAttr
	 */
	function SetDefAttr(wxGridCellAttr &$defAttr){}

	/**
	 * Sets the editor to be used with the cells with this attribute.
	 * @param wxGridCellEditor $editor
	 */
	function SetEditor(wxGridCellEditor &$editor){}

	/**
	 * Sets the font.
	 * @param wxFont $font
	 */
	function SetFont(wxFont $font){}

	/**
	 * Sets the cell as read-only.
	 * @param bool $isReadOnly
	 */
	function SetReadOnly($isReadOnly=true){}

	/**
	 * Sets the renderer to be used for cells with this attribute.
	 * @param wxGridCellRenderer $renderer
	 */
	function SetRenderer(wxGridCellRenderer &$renderer){}

	/**
	 * Sets the text colour.
	 * @param wxColour $colText
	 */
	function SetTextColour(wxColour $colText){}
}

class wxGridCellAttrProvider
{
	/**
	 * Trivial default constructor.
	 */
	function __construct(){}

	/**
	 * Get the attribute to use for the specified cell.
	 * @param integer $row
	 * @param integer $col
	 * @param wxGridCellAttr::wxAttrKind $kind
	 * @return wxGridCellAttr
	 */
	function GetAttr($row, $col, $kind){}

	/**
	 * Getting header renderers.
	 * @param integer $col
	 * @return wxGridColumnHeaderRenderer
	 */
	function GetColumnHeaderRenderer($col){}

	/**
	 * Return the renderer used for drawing the corner window.
	 * @return wxGridCornerHeaderRenderer
	 */
	function GetCornerRenderer(){}

	/**
	 * Return the renderer used for drawing row headers.
	 * @param integer $row
	 * @return wxGridRowHeaderRenderer
	 */
	function GetRowHeaderRenderer($row){}

	/**
	 * Setting attributes.
	 * @param wxGridCellAttr $attr
	 * @param integer $row
	 * @param integer $col
	 */
	function SetAttr(wxGridCellAttr &$attr, $row, $col){}

	/**
	 * Set attribute for the specified column.
	 * @param wxGridCellAttr $attr
	 * @param integer $col
	 */
	function SetColAttr(wxGridCellAttr &$attr, $col){}

	/**
	 * Set attribute for the specified row.
	 * @param wxGridCellAttr $attr
	 * @param integer $row
	 */
	function SetRowAttr(wxGridCellAttr &$attr, $row){}
}

class wxGridCellAutoWrapStringEditor extends wxGridCellTextEditor
{
	/**
	 * wxGridCellAutoWrapStringEditor
	 */
	function __construct(){}
}

class wxGridCellAutoWrapStringRenderer extends wxGridCellStringRenderer
{
	/**
	 * Default constructor.
	 */
	function __construct(){}
}

class wxGridCellBoolEditor extends wxGridCellEditor
{
	/**
	 * Default constructor.
	 */
	function __construct(){}

	/**
	 * Returns true if the given value is equal to the string representation of the truth value we currently use (see UseStringValues()).
	 * @param string $value
	 * @return bool
	 */
	function IsTrueValue($value){}

	/**
	 * This method allows you to customize the values returned by GetValue() for the cell using this editor.
	 * @param string $valueTrue
	 * @param string $valueFalse
	 */
	function UseStringValues($valueTrue="1", $valueFalse=wxEmptyString){}
}

class wxGridCellBoolRenderer extends wxGridCellRenderer
{
	/**
	 * Default constructor.
	 */
	function __construct(){}
}

class wxGridCellChoiceEditor extends wxGridCellEditor
{
	/**
	 * Choice cell renderer ctor.
	 * @param array $choices
	 * @param bool $allowOthers
	 */
	function __construct(array $choices, $allowOthers=false){}

	/**
	 * Parameters string format is "item1[,item2[...,itemN]]".
	 * @param string $params
	 */
	function SetParameters($params){}
}

class wxGridCellDateTimeRenderer extends wxGridCellStringRenderer
{
	/**
	 * Date/time renderer constructor.
	 * @param string $outformat
	 * @param string $informat
	 */
	function __construct($outformat=wxDefaultDateTimeFormat, $informat=wxDefaultDateTimeFormat){}

	/**
	 * Sets the strptime()-like format string which will be used to parse the date/time.
	 * @param string $params
	 */
	function SetParameters($params){}
}

class wxGridCellEditor
{
	/**
	 * Effectively save the changes in the grid.
	 * @param integer $row
	 * @param integer $col
	 * @param wxGrid $grid
	 */
	function ApplyEdit($row, $col, wxGrid &$grid){}

	/**
	 * Fetch the value from the table and prepare the edit control to begin editing.
	 * @param integer $row
	 * @param integer $col
	 * @param wxGrid $grid
	 */
	function BeginEdit($row, $col, wxGrid &$grid){}

	/**
	 * Create a new object which is the copy of this one.
	 * @return wxGridCellEditor
	 */
	function CloneMethod(){}

	/**
	 * Creates the actual edit control.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param wxEvtHandler $evtHandler
	 */
	function Create(wxWindow &$parent, $id, wxEvtHandler &$evtHandler){}

	/**
	 * Final cleanup.
	 */
	function Destroy(){}

	/**
	 * End editing the cell.
	 * @param integer $row
	 * @param integer $col
	 * @param wxGrid $grid
	 * @param string $oldval
	 * @param string $newval
	 * @return bool
	 */
	function EndEdit($row, $col, wxGrid $grid, $oldval, &$newval){}

	/**
	 * Some types of controls on some platforms may need some help with the Return key.
	 * @param wxKeyEvent $event
	 */
	function HandleReturn(wxKeyEvent &$event){}

	/**
	 * Returns true if the edit control has been created.
	 * @return bool
	 */
	function IsCreated(){}

	/**
	 * Draws the part of the cell not occupied by the control: the base class version just fills it with background colour from the attribute.
	 * @param wxRect $rectCell
	 * @param wxGridCellAttr $attr
	 */
	function PaintBackground(wxRect $rectCell, wxGridCellAttr &$attr){}

	/**
	 * Size and position the edit control.
	 * @param wxRect $rect
	 */
	function SetSize(wxRect $rect){}

	/**
	 * Reset the value in the control back to its starting value.
	 */
	function Reset(){}

	/**
	 * Show or hide the edit control, use the specified attributes to set colours/fonts for it.
	 * @param bool $show
	 * @param wxGridCellAttr $attr
	 */
	function Show($show, wxGridCellAttr &$attr=null){}

	/**
	 * If the editor is enabled by clicking on the cell, this method will be called.
	 */
	function StartingClick(){}

	/**
	 * If the editor is enabled by pressing keys on the grid, this will be called to let the editor do something about that first key if desired.
	 * @param wxKeyEvent $event
	 */
	function StartingKey(wxKeyEvent &$event){}
}

class wxGridCellEnumEditor extends wxGridCellChoiceEditor
{
	/**
	 * Enum cell editor ctor.
	 * @param string $choices
	 */
	function __construct($choices=wxEmptyString){}
}

class wxGridCellEnumRenderer extends wxGridCellStringRenderer
{
	/**
	 * Enum renderer ctor.
	 * @param string $choices
	 */
	function __construct($choices=wxEmptyString){}

	/**
	 * Sets the comma separated string content of the enum.
	 * @param string $params
	 */
	function SetParameters($params){}
}

class wxGridCellFloatEditor
{
	/**
	 * Float cell editor ctor.
	 * @param integer $width
	 * @param integer $precision
	 * @param integer $format
	 */
	function __construct($width=-1, $precision=-1, $format=wxGRID_FLOAT_FORMAT_DEFAULT){}

	/**
	 * The parameters string format is "width[,precision[,format]]" where format should be chosen between f|e|g|E|G (f is used by default)
	 * @param string $params
	 */
	function SetParameters($params){}
}

class wxGridCellFloatRenderer extends wxGridCellStringRenderer
{
	/**
	 * Float cell renderer ctor.
	 * @param integer $width
	 * @param integer $precision
	 * @param integer $format
	 */
	function __construct($width=-1, $precision=-1, $format=wxGRID_FLOAT_FORMAT_DEFAULT){}

	/**
	 * Returns the specifier used to format the data to string.
	 * @return integer
	 */
	function GetFormat(){}

	/**
	 * Returns the precision.
	 * @return integer
	 */
	function GetPrecision(){}

	/**
	 * Returns the width.
	 * @return integer
	 */
	function GetWidth(){}

	/**
	 * Set the format to use for display the number.
	 * @param integer $format
	 */
	function SetFormat($format){}

	/**
	 * The parameters string format is "width[,precision[,format]]" where format should be chosen between f|e|g|E|G (f is used by default)
	 * @param string $params
	 */
	function SetParameters($params){}

	/**
	 * Sets the precision.
	 * @param integer $precision
	 */
	function SetPrecision($precision){}

	/**
	 * Sets the width.
	 * @param integer $width
	 */
	function SetWidth($width){}
}

class wxGridCellNumberEditor extends wxGridCellTextEditor
{
	/**
	 * Allows you to specify the range for acceptable data.
	 * @param integer $min
	 * @param integer $max
	 */
	function __construct($min=-1, $max=-1){}

	/**
	 * Parameters string format is "min,max".
	 * @param string $params
	 */
	function SetParameters($params){}
}

class wxGridCellNumberRenderer extends wxGridCellStringRenderer
{
	/**
	 * Default constructor.
	 */
	function __construct(){}
}

class wxGridCellRenderer
{
	/**
	 * Get the preferred size of the cell for its contents.
	 * @param wxGrid $grid
	 * @param wxGridCellAttr $attr
	 * @param wxDC $dc
	 * @param integer $row
	 * @param integer $col
	 * @return wxSize
	 */
	function GetBestSize(wxGrid &$grid, wxGridCellAttr &$attr, wxDC &$dc, $row, $col){}

	/**
	 * Draw the given cell on the provided DC inside the given rectangle using the style specified by the attribute and the default or selected state corresponding to the isSelected value.
	 * @param wxGrid $grid
	 * @param wxGridCellAttr $attr
	 * @param wxDC $dc
	 * @param wxRect $rect
	 * @param integer $row
	 * @param integer $col
	 * @param bool $isSelected
	 */
	function Draw(wxGrid &$grid, wxGridCellAttr &$attr, wxDC &$dc, wxRect $rect, $row, $col, $isSelected){}

	/**
	 * This function must be implemented in derived classes to return a copy of itself.
	 * @return wxGridCellRenderer
	 */
	function CloneMethod(){}
}

class wxGridCellStringRenderer extends wxGridCellRenderer
{
	/**
	 * Default constructor.
	 */
	function __construct(){}
}

class wxGridCellTextEditor extends wxGridCellEditor
{
	/**
	 * Default constructor.
	 */
	function __construct(){}

	/**
	 * The parameters string format is "n" where n is a number representing the maximum width.
	 * @param string $params
	 */
	function SetParameters($params){}
}

class wxGridColumnHeaderRenderer extends wxGridHeaderLabelsRenderer
{
}

class wxGridColumnHeaderRendererDefault extends wxGridColumnHeaderRenderer
{
	/**
	 * Implement border drawing for the column labels.
	 * @param wxGrid $grid
	 * @param wxDC $dc
	 * @param wxRect $rect
	 */
	function DrawBorder(wxGrid $grid, wxDC &$dc, wxRect &$rect){}
}

class wxGridCornerHeaderRenderer
{
	/**
	 * Called by the grid to draw the corner window border.
	 * @param wxGrid $grid
	 * @param wxDC $dc
	 * @param wxRect $rect
	 */
	function DrawBorder(wxGrid $grid, wxDC &$dc, wxRect &$rect){}
}

class wxGridCornerHeaderRendererDefault extends wxGridCornerHeaderRenderer
{
	/**
	 * Implement border drawing for the corner window.
	 * @param wxGrid $grid
	 * @param wxDC $dc
	 * @param wxRect $rect
	 */
	function DrawBorder(wxGrid $grid, wxDC &$dc, wxRect &$rect){}
}

class wxGridEditorCreatedEvent extends wxCommandEvent
{
	/**
	 * Default constructor.
	 * @param integer $id
	 * @param integer $type
	 * @param wxObject $obj
	 * @param integer $row
	 * @param integer $col
	 * @param wxControl $ctrl
	 */
	function __construct($id, $type, wxObject &$obj, $row, $col, wxControl &$ctrl){}

	/**
	 * Returns the column at which the event occurred.
	 * @return integer
	 */
	function GetCol(){}

	/**
	 * Returns the edit control.
	 * @return wxControl
	 */
	function GetControl(){}

	/**
	 * Returns the row at which the event occurred.
	 * @return integer
	 */
	function GetRow(){}

	/**
	 * Sets the column at which the event occurred.
	 * @param integer $col
	 */
	function SetCol($col){}

	/**
	 * Sets the edit control.
	 * @param wxControl $ctrl
	 */
	function SetControl(wxControl &$ctrl){}

	/**
	 * Sets the row at which the event occurred.
	 * @param integer $row
	 */
	function SetRow($row){}
}

class wxGridEvent extends wxNotifyEvent
{
	/**
	 * Default constructor.
	 * @param integer $id
	 * @param integer $type
	 * @param wxObject $obj
	 * @param integer $row
	 * @param integer $col
	 * @param integer $x
	 * @param integer $y
	 * @param bool $sel
	 * @param wxKeyboardState $kbd
	 */
	function __construct($id, $type, wxObject &$obj, $row=-1, $col=-1, $x=-1, $y=-1, $sel=true, wxKeyboardState $kbd=null){}

	/**
	 * Returns true if the Alt key was down at the time of the event.
	 * @return bool
	 */
	function AltDown(){}

	/**
	 * Returns true if the Control key was down at the time of the event.
	 * @return bool
	 */
	function ControlDown(){}

	/**
	 * Column at which the event occurred.
	 * @return integer
	 */
	function GetCol(){}

	/**
	 * Position in pixels at which the event occurred.
	 * @return wxPoint
	 */
	function GetPosition(){}

	/**
	 * Row at which the event occurred.
	 * @return integer
	 */
	function GetRow(){}

	/**
	 * Returns true if the Meta key was down at the time of the event.
	 * @return bool
	 */
	function MetaDown(){}

	/**
	 * Returns true if the user is selecting grid cells, or false if deselecting.
	 * @return bool
	 */
	function Selecting(){}

	/**
	 * Returns true if the Shift key was down at the time of the event.
	 * @return bool
	 */
	function ShiftDown(){}
}

class wxGridHeaderLabelsRenderer extends wxGridCornerHeaderRenderer
{
	/**
	 * Called by the grid to draw the specified label.
	 * @param wxGrid $grid
	 * @param wxDC $dc
	 * @param string $value
	 * @param wxRect $rect
	 * @param integer $horizAlign
	 * @param integer $vertAlign
	 * @param integer $textOrientation
	 */
	function DrawLabel(wxGrid $grid, wxDC &$dc, $value, wxRect $rect, $horizAlign, $vertAlign, $textOrientation){}
}

class wxGridRangeSelectEvent extends wxNotifyEvent
{
	/**
	 * Default constructor.
	 */
	function __construct(){}

	/**
	 * Returns true if the Alt key was down at the time of the event.
	 * @return bool
	 */
	function AltDown(){}

	/**
	 * Returns true if the Control key was down at the time of the event.
	 * @return bool
	 */
	function ControlDown(){}

	/**
	 * Bottom row of the rectangular area that was (de)selected.
	 * @return integer
	 */
	function GetBottomRow(){}

	/**
	 * Left column of the rectangular area that was (de)selected.
	 * @return integer
	 */
	function GetLeftCol(){}

	/**
	 * Right column of the rectangular area that was (de)selected.
	 * @return integer
	 */
	function GetRightCol(){}

	/**
	 * Top row of the rectangular area that was (de)selected.
	 * @return integer
	 */
	function GetTopRow(){}

	/**
	 * Returns true if the Meta key was down at the time of the event.
	 * @return bool
	 */
	function MetaDown(){}

	/**
	 * Returns true if the area was selected, false otherwise.
	 * @return bool
	 */
	function Selecting(){}

	/**
	 * Returns true if the Shift key was down at the time of the event.
	 * @return bool
	 */
	function ShiftDown(){}
}

class wxGridRowHeaderRenderer extends wxGridHeaderLabelsRenderer
{
}

class wxGridRowHeaderRendererDefault extends wxGridRowHeaderRenderer
{
	/**
	 * Implement border drawing for the row labels.
	 * @param wxGrid $grid
	 * @param wxDC $dc
	 * @param wxRect $rect
	 */
	function DrawBorder(wxGrid $grid, wxDC &$dc, wxRect &$rect){}
}

class wxGridSizeEvent extends wxNotifyEvent
{
	/**
	 * Default constructor.
	 * @param integer $id
	 * @param integer $type
	 * @param wxObject $obj
	 * @param integer $rowOrCol
	 * @param integer $x
	 * @param integer $y
	 * @param wxKeyboardState $kbd
	 */
	function __construct($id, $type, wxObject &$obj, $rowOrCol=-1, $x=-1, $y=-1, wxKeyboardState $kbd=null){}

	/**
	 * Returns true if the Alt key was down at the time of the event.
	 * @return bool
	 */
	function AltDown(){}

	/**
	 * Returns true if the Control key was down at the time of the event.
	 * @return bool
	 */
	function ControlDown(){}

	/**
	 * Position in pixels at which the event occurred.
	 * @return wxPoint
	 */
	function GetPosition(){}

	/**
	 * Row or column at that was resized.
	 * @return integer
	 */
	function GetRowOrCol(){}

	/**
	 * Returns true if the Meta key was down at the time of the event.
	 * @return bool
	 */
	function MetaDown(){}

	/**
	 * Returns true if the Shift key was down at the time of the event.
	 * @return bool
	 */
	function ShiftDown(){}
}

class wxGridSizer extends wxSizer
{
	/**
	 * wxGridSizer constructors.
	 * @param integer $cols
	 * @param integer $vgap
	 * @param integer $hgap
	 * @param wxSize $gap
	 * @param integer $rows
	 */
	function __construct($cols, $vgap, $hgap, $cols, wxSize $gap=null, $rows, $cols, $vgap, $hgap, $rows, $cols, wxSize $gap){}

	/**
	 * This method is abstract and has to be overwritten by any derived class.
	 * @return wxSize
	 */
	function CalcMin(){}

	/**
	 * Returns the number of columns that has been specified for the sizer.
	 * @return integer
	 */
	function GetCols(){}

	/**
	 * Returns the number of columns currently used by the sizer.
	 * @return integer
	 */
	function GetEffectiveColsCount(){}

	/**
	 * Returns the number of rows currently used by the sizer.
	 * @return integer
	 */
	function GetEffectiveRowsCount(){}

	/**
	 * Returns the horizontal gap (in pixels) between cells in the sizer.
	 * @return integer
	 */
	function GetHGap(){}

	/**
	 * Returns the number of rows that has been specified for the sizer.
	 * @return integer
	 */
	function GetRows(){}

	/**
	 * Returns the vertical gap (in pixels) between the cells in the sizer.
	 * @return integer
	 */
	function GetVGap(){}

	/**
	 * This method is abstract and has to be overwritten by any derived class.
	 */
	function RecalcSizes(){}

	/**
	 * Sets the number of columns in the sizer.
	 * @param integer $cols
	 */
	function SetCols($cols){}

	/**
	 * Sets the horizontal gap (in pixels) between cells in the sizer.
	 * @param integer $gap
	 */
	function SetHGap($gap){}

	/**
	 * Sets the number of rows in the sizer.
	 * @param integer $rows
	 */
	function SetRows($rows){}

	/**
	 * Sets the vertical gap (in pixels) between the cells in the sizer.
	 * @param integer $gap
	 */
	function SetVGap($gap){}
}

class wxGridSizesInfo
{
	/**
	 * Default constructor.
	 */
	function __construct(){}

	/**
	 * Get the element size.
	 * @param integer $pos
	 * @return integer
	 */
	function GetSize($pos){}
}

class wxGridTableBase extends wxObject
{
	/**
	 * Default constructor.
	 */
	function __construct(){}

	/**
	 * Exactly the same as AppendRows() but for columns.
	 * @param integer $numCols
	 * @return bool
	 */
	function AppendCols($numCols=1){}

	/**
	 * Append additional rows at the end of the table.
	 * @param integer $numRows
	 * @return bool
	 */
	function AppendRows($numRows=1){}

	/**
	 * Returns true if the value of the given cell can be accessed as if it were of the specified type.
	 * @param integer $row
	 * @param integer $col
	 * @param string $typeName
	 * @return bool
	 */
	function CanGetValueAs($row, $col, $typeName){}

	/**
	 * Returns true if this table supports attributes or false otherwise.
	 * @return bool
	 */
	function CanHaveAttributes(){}

	/**
	 * Returns true if the value of the given cell can be set as if it were of the specified type.
	 * @param integer $row
	 * @param integer $col
	 * @param string $typeName
	 * @return bool
	 */
	function CanSetValueAs($row, $col, $typeName){}

	/**
	 * Clear the table contents.
	 */
	function Clear(){}

	/**
	 * Exactly the same as DeleteRows() but for columns.
	 * @param integer $pos
	 * @param integer $numCols
	 * @return bool
	 */
	function DeleteCols($pos, $numCols=1){}

	/**
	 * Delete rows from the table.
	 * @param integer $pos
	 * @param integer $numRows
	 * @return bool
	 */
	function DeleteRows($pos, $numRows=1){}

	/**
	 * Return the attribute for the given cell.
	 * @param integer $row
	 * @param integer $col
	 * @param wxGridCellAttr::wxAttrKind $kind
	 * @return wxGridCellAttr
	 */
	function GetAttr($row, $col, $kind){}

	/**
	 * Returns the attribute provider currently being used.
	 * @return wxGridCellAttrProvider
	 */
	function GetAttrProvider(){}

	/**
	 * Return the label of the specified column.
	 * @param integer $col
	 * @return string
	 */
	function GetColLabelValue($col){}

	/**
	 * Return the number of columns in the table.
	 * @return integer
	 */
	function GetColsCount(){}

	/**
	 * Must be overridden to return the number of columns in the table.
	 * @return integer
	 */
	function GetNumberCols(){}

	/**
	 * Must be overridden to return the number of rows in the table.
	 * @return integer
	 */
	function GetNumberRows(){}

	/**
	 * Return the label of the specified row.
	 * @param integer $row
	 * @return string
	 */
	function GetRowLabelValue($row){}

	/**
	 * Return the number of rows in the table.
	 * @return integer
	 */
	function GetRowsCount(){}

	/**
	 * Returns the type of the value in the given cell.
	 * @param integer $row
	 * @param integer $col
	 * @return string
	 */
	function GetTypeName($row, $col){}

	/**
	 * Must be overridden to implement accessing the table values as text.
	 * @param integer $row
	 * @param integer $col
	 * @return string
	 */
	function GetValue($row, $col){}

	/**
	 * Returns the value of the given cell as a boolean.
	 * @param integer $row
	 * @param integer $col
	 * @return bool
	 */
	function GetValueAsBool($row, $col){}

	/**
	 * Returns the value of the given cell as a user-defined type.
	 * @param integer $row
	 * @param integer $col
	 * @param string $typeName
	 * @return mixed
	 */
	function GetValueAsCustom($row, $col, $typeName){}

	/**
	 * Returns the value of the given cell as a double.
	 * @param integer $row
	 * @param integer $col
	 * @return float
	 */
	function GetValueAsDouble($row, $col){}

	/**
	 * Returns the value of the given cell as a long.
	 * @param integer $row
	 * @param integer $col
	 * @return integer
	 */
	function GetValueAsLong($row, $col){}

	/**
	 * Returns the last grid passed to SetView().
	 * @return wxGrid
	 */
	function GetView(){}

	/**
	 * Exactly the same as InsertRows() but for columns.
	 * @param integer $pos
	 * @param integer $numCols
	 * @return bool
	 */
	function InsertCols($pos, $numCols=1){}

	/**
	 * Insert additional rows into the table.
	 * @param integer $pos
	 * @param integer $numRows
	 * @return bool
	 */
	function InsertRows($pos, $numRows=1){}

	/**
	 * May be overridden to implement testing for empty cells.
	 * @param integer $row
	 * @param integer $col
	 * @return bool
	 */
	function IsEmptyCell($row, $col){}

	/**
	 * Set attribute of the specified cell.
	 * @param wxGridCellAttr $attr
	 * @param integer $row
	 * @param integer $col
	 */
	function SetAttr(wxGridCellAttr &$attr, $row, $col){}

	/**
	 * Associate this attributes provider with the table.
	 * @param wxGridCellAttrProvider $attrProvider
	 */
	function SetAttrProvider(wxGridCellAttrProvider &$attrProvider){}

	/**
	 * Set attribute of the specified column.
	 * @param wxGridCellAttr $attr
	 * @param integer $col
	 */
	function SetColAttr(wxGridCellAttr &$attr, $col){}

	/**
	 * Exactly the same as SetRowLabelValue() but for columns.
	 * @param integer $col
	 * @param string $label
	 */
	function SetColLabelValue($col, $label){}

	/**
	 * Set attribute of the specified row.
	 * @param wxGridCellAttr $attr
	 * @param integer $row
	 */
	function SetRowAttr(wxGridCellAttr &$attr, $row){}

	/**
	 * Set the given label for the specified row.
	 * @param integer $row
	 * @param string $label
	 */
	function SetRowLabelValue($row, $label){}

	/**
	 * Must be overridden to implement setting the table values as text.
	 * @param integer $row
	 * @param integer $col
	 * @param string $value
	 */
	function SetValue($row, $col, $value){}

	/**
	 * Sets the value of the given cell as a boolean.
	 * @param integer $row
	 * @param integer $col
	 * @param bool $value
	 */
	function SetValueAsBool($row, $col, $value){}

	/**
	 * Sets the value of the given cell as a user-defined type.
	 * @param integer $row
	 * @param integer $col
	 * @param string $typeName
	 * @param mixed $value
	 */
	function SetValueAsCustom($row, $col, $typeName, $value){}

	/**
	 * Sets the value of the given cell as a double.
	 * @param integer $row
	 * @param integer $col
	 * @param float $value
	 */
	function SetValueAsDouble($row, $col, $value){}

	/**
	 * Sets the value of the given cell as a long.
	 * @param integer $row
	 * @param integer $col
	 * @param integer $value
	 */
	function SetValueAsLong($row, $col, $value){}

	/**
	 * Called by the grid when the table is associated with it.
	 * @param wxGrid $grid
	 */
	function SetView(wxGrid &$grid){}
}

class wxGridUpdateLocker
{
	/**
	 * Creates an object preventing the updates of the specified grid.
	 * @param wxGrid $grid
	 */
	function __construct(wxGrid &$grid=null){}

	/**
	 * This method can be called if the object had been constructed using the default constructor.
	 * @param wxGrid $grid
	 */
	function Create(wxGrid &$grid){}
}

class wxHScrolledWindow extends wxPanel
{
	/**
	 * Same as the non-default constructor, but returns a status code: true if ok, false if the window couldn't be created.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param string $name
	 * @return bool
	 */
	function Create(wxWindow &$parent, $id=wxID_ANY, wxPoint $pos=null, wxSize $size=null, $style, $name=wxPanelNameStr){}
}

class wxHeaderColumn
{
	/**
	 * Returns the current column alignment.
	 * @return wxAlignment
	 */
	function GetAlignment(){}

	/**
	 * Returns the bitmap in the header of the column, if any.
	 * @return wxBitmap
	 */
	function GetBitmap(){}

	/**
	 * Get the column flags.
	 * @return integer
	 */
	function GetFlags(){}

	/**
	 * Return the minimal column width.
	 * @return integer
	 */
	function GetMinWidth(){}

	/**
	 * Get the text shown in the column header.
	 * @return string
	 */
	function GetTitle(){}

	/**
	 * Returns the current width of the column.
	 * @return integer
	 */
	function GetWidth(){}

	/**
	 * Return true if the specified flag is currently set for this column.
	 * @param integer $flag
	 * @return bool
	 */
	function HasFlag($flag){}

	/**
	 * Returns true if the column is currently hidden.
	 * @return bool
	 */
	function IsHidden(){}

	/**
	 * Returns true if the column can be dragged by user to change its order.
	 * @return bool
	 */
	function IsReorderable(){}

	/**
	 * Return true if the column can be resized by the user.
	 * @return bool
	 */
	function IsResizeable(){}

	/**
	 * Returns true if the column is currently shown.
	 * @return bool
	 */
	function IsShown(){}

	/**
	 * Returns true if the column is currently used for sorting.
	 * @return bool
	 */
	function IsSortKey(){}

	/**
	 * Returns true, if the sort order is ascending.
	 * @return bool
	 */
	function IsSortOrderAscending(){}

	/**
	 * Returns true if the column can be clicked by user to sort the control contents by the field in this column.
	 * @return bool
	 */
	function IsSortable(){}
}

class wxHeaderColumnSimple extends wxSettableHeaderColumn
{
	/**
	 * Constructor for a column header.
	 * @param string $title
	 * @param integer $width
	 * @param wxAlignment $align
	 * @param integer $flags
	 * @param wxBitmap $bitmap
	 */
	function __construct($title, $width=wxCOL_WIDTH_DEFAULT, wxAlignment $align=null, $flags=wxCOL_DEFAULT_FLAGS, wxBitmap $bitmap, $width=wxCOL_WIDTH_DEFAULT, wxAlignment $align=null, $flags=wxCOL_DEFAULT_FLAGS){}

	/**
	 * Trivial implementations of the base class pure virtual functions.
	 * @return wxAlignment
	 */
	function GetAlignment(){}

	/**
	 * Trivial implementations of the base class pure virtual functions.
	 * @return wxBitmap
	 */
	function GetBitmap(){}

	/**
	 * Trivial implementations of the base class pure virtual functions.
	 * @return integer
	 */
	function GetFlags(){}

	/**
	 * Trivial implementations of the base class pure virtual functions.
	 * @return integer
	 */
	function GetMinWidth(){}

	/**
	 * Trivial implementations of the base class pure virtual functions.
	 * @return string
	 */
	function GetTitle(){}

	/**
	 * Trivial implementations of the base class pure virtual functions.
	 * @return integer
	 */
	function GetWidth(){}

	/**
	 * Trivial implementations of the base class pure virtual functions.
	 * @return bool
	 */
	function IsSortKey(){}

	/**
	 * Trivial implementations of the base class pure virtual functions.
	 * @return bool
	 */
	function IsSortOrderAscending(){}

	/**
	 * Trivial implementations of the base class pure virtual functions.
	 * @param wxAlignment $align
	 */
	function SetAlignment(wxAlignment $align){}

	/**
	 * Trivial implementations of the base class pure virtual functions.
	 * @param wxBitmap $bitmap
	 */
	function SetBitmap(wxBitmap $bitmap){}

	/**
	 * Trivial implementations of the base class pure virtual functions.
	 * @param integer $flags
	 */
	function SetFlags($flags){}

	/**
	 * Trivial implementations of the base class pure virtual functions.
	 * @param integer $minWidth
	 */
	function SetMinWidth($minWidth){}

	/**
	 * Trivial implementations of the base class pure virtual functions.
	 * @param bool $ascending
	 */
	function SetSortOrder($ascending){}

	/**
	 * Trivial implementations of the base class pure virtual functions.
	 * @param string $title
	 */
	function SetTitle($title){}

	/**
	 * Trivial implementations of the base class pure virtual functions.
	 * @param integer $width
	 */
	function SetWidth($width){}
}

class wxHeaderCtrl extends wxControl
{
	/**
	 * Default constructor not creating the underlying window.
	 * @param wxWindow $parent
	 * @param integer $winid
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param string $name
	 */
	function __construct(wxWindow &$parent, $winid=wxID_ANY, wxPoint $pos=null, wxSize $size=null, $style=wxHD_DEFAULT_STYLE, $name=wxHeaderCtrlNameStr){}

	/**
	 * Helper function appending the checkable items corresponding to all the columns to the given menu.
	 * @param wxMenu $menu
	 * @param integer $idColumnsBase
	 */
	function AddColumnsItems(wxMenu &$menu, $idColumnsBase){}

	/**
	 * Create the header control window.
	 * @param wxWindow $parent
	 * @param integer $winid
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param string $name
	 * @return bool
	 */
	function Create(wxWindow &$parent, $winid=wxID_ANY, wxPoint $pos=null, wxSize $size=null, $style=wxHD_DEFAULT_STYLE, $name=wxHeaderCtrlNameStr){}

	/**
	 * Method to be implemented by the derived classes to return the information for the given column.
	 * @param integer $idx
	 * @return wxHeaderColumn
	 */
	function GetColumn($idx){}

	/**
	 * Return the index of the column displayed at the given position.
	 * @param integer $pos
	 * @return integer
	 */
	function GetColumnAt($pos){}

	/**
	 * Return the number of columns in the control.
	 * @return integer
	 */
	function GetColumnCount(){}

	/**
	 * Get the position at which this column is currently displayed.
	 * @param integer $idx
	 * @return integer
	 */
	function GetColumnPos($idx){}

	/**
	 * Return whether the control has any columns.
	 * @return bool
	 */
	function IsEmpty(){}

	/**
	 * Can be overridden in the derived class to update internal data structures when the number of the columns in the control changes.
	 * @param integer $count
	 */
	function OnColumnCountChanging($count){}

	/**
	 * Reset the columns order to the natural one.
	 */
	function ResetColumnsOrder(){}

	/**
	 * Set the number of columns in the control.
	 * @param integer $count
	 */
	function SetColumnCount($count){}

	/**
	 * Show the popup menu allowing the user to show or hide the columns.
	 * @param wxPoint $pt
	 * @param string $title
	 * @return bool
	 */
	function ShowColumnsMenu(wxPoint $pt, $title=''){}

	/**
	 * Show the column customization dialog.
	 * @return bool
	 */
	function ShowCustomizeDialog(){}

	/**
	 * Update the column with the given index.
	 * @param integer $idx
	 */
	function UpdateColumn($idx){}

	/**
	 * Method called when the column visibility is changed by the user.
	 * @param integer $idx
	 * @param bool $show
	 */
	function UpdateColumnVisibility($idx, $show){}

	/**
	 * Method which may be implemented by the derived classes to allow double clicking the column separator to resize the column to fit its contents.
	 * @param integer $idx
	 * @param integer $widthTitle
	 * @return bool
	 */
	function UpdateColumnWidthToFit($idx, $widthTitle){}
}

class wxHeaderCtrlEvent extends wxNotifyEvent
{
	/**
	 * Return the index of the column affected by this event.
	 * @return integer
	 */
	function GetColumn(){}

	/**
	 * Return the new order of the column.
	 * @return integer
	 */
	function GetNewOrder(){}

	/**
	 * Return the current width of the column.
	 * @return integer
	 */
	function GetWidth(){}
}

class wxHeaderCtrlSimple extends wxHeaderCtrl
{
	/**
	 * Default constructor not creating the underlying window.
	 * @param wxWindow $parent
	 * @param integer $winid
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param string $name
	 */
	function __construct(wxWindow &$parent, $winid=wxID_ANY, wxPoint $pos=null, wxSize $size=null, $style=wxHD_DEFAULT_STYLE, $name=wxHeaderCtrlNameStr){}

	/**
	 * Append the column to the end of the control.
	 * @param wxHeaderColumnSimple $col
	 */
	function AppendColumn(wxHeaderColumnSimple $col){}

	/**
	 * Delete the column at the given position.
	 * @param integer $idx
	 */
	function DeleteColumn($idx){}

	/**
	 * This function can be overridden in the classes deriving from this control instead of overriding UpdateColumnWidthToFit().
	 * @param integer $idx
	 * @return integer
	 */
	function GetBestFittingWidth($idx){}

	/**
	 * Hide the column with the given index.
	 * @param integer $idx
	 */
	function HideColumn($idx){}

	/**
	 * Insert the column at the given position.
	 * @param wxHeaderColumnSimple $col
	 * @param integer $idx
	 */
	function InsertColumn(wxHeaderColumnSimple $col, $idx){}

	/**
	 * Remove the sort indicator from the column being used as sort key.
	 */
	function RemoveSortIndicator(){}

	/**
	 * Show or hide the column.
	 * @param integer $idx
	 * @param bool $show
	 */
	function ShowColumn($idx, $show=true){}

	/**
	 * Update the column sort indicator.
	 * @param integer $idx
	 * @param bool $sortOrder
	 */
	function ShowSortIndicator($idx, $sortOrder=true){}
}

class wxHelpEvent extends wxCommandEvent
{
	const Origin_Unknown = 1;
	const Origin_Keyboard = 1;
	const Origin_HelpButton = 1;

	/**
	 * Constructor.
	 * @param integer $type
	 * @param integer $winid
	 * @param wxPoint $pt
	 * @param wxHelpEvent::Origin $origin
	 */
	function __construct($type=wxEVT_NULL, $winid, wxPoint $pt=null, $origin=Origin_Unknown){}

	/**
	 * Returns the origin of the help event which is one of the ::wxHelpEventOrigin values.
	 * @return wxHelpEvent::Origin
	 */
	function GetOrigin(){}

	/**
	 * Returns the left-click position of the mouse, in screen coordinates.
	 * @return wxPoint
	 */
	function GetPosition(){}

	/**
	 * Set the help event origin, only used internally by wxWidgets normally.
	 * @param wxHelpEvent::Origin $origin
	 */
	function SetOrigin($origin){}

	/**
	 * Sets the left-click position of the mouse, in screen coordinates.
	 * @param wxPoint $pt
	 */
	function SetPosition(wxPoint $pt){}
}

class wxHtmlCell extends wxObject
{
	/**
	 * Constructor.
	 */
	function __construct(){}

	/**
	 * Returns pointer to itself if this cell matches condition (or if any of the cells following in the list matches), NULL otherwise.
	 * @param integer $condition
	 * @param mixed $param
	 * @return wxHtmlCell
	 */
	function Find($condition, $param){}

	/**
	 * Returns descent value of the cell (m_Descent member).
	 * @return integer
	 */
	function GetDescent(){}

	/**
	 * Returns pointer to the first cell in the list.
	 * @return wxHtmlCell
	 */
	function GetFirstChild(){}

	/**
	 * Returns height of the cell (m_Height member).
	 * @return integer
	 */
	function GetHeight(){}

	/**
	 * Returns unique cell identifier if there is any, the empty string otherwise.
	 * @return string
	 */
	function GetId(){}

	/**
	 * Returns hypertext link if associated with this cell or NULL otherwise.
	 * @param integer $x
	 * @param integer $y
	 * @return wxHtmlLinkInfo
	 */
	function GetLink($x, $y){}

	/**
	 * Returns pointer to the next cell in list (see htmlcell.h if you're interested in details).
	 * @return wxHtmlCell
	 */
	function GetNext(){}

	/**
	 * Returns pointer to parent container.
	 * @return wxHtmlContainerCell
	 */
	function GetParent(){}

	/**
	 * Returns X position within parent (the value is relative to parent's upper left corner).
	 * @return integer
	 */
	function GetPosX(){}

	/**
	 * Returns Y position within parent (the value is relative to parent's upper left corner).
	 * @return integer
	 */
	function GetPosY(){}

	/**
	 * Returns width of the cell (m_Width member).
	 * @return integer
	 */
	function GetWidth(){}

	/**
	 * Layouts the cell.
	 * @param integer $w
	 */
	function Layout($w){}

	/**
	 * Sets unique cell identifier.
	 * @param string $id
	 */
	function SetId($id){}

	/**
	 * Sets the hypertext link associated with this cell.
	 * @param wxHtmlLinkInfo $link
	 */
	function SetLink(wxHtmlLinkInfo $link){}

	/**
	 * Sets the next cell in the list.
	 * @param wxHtmlCell $cell
	 */
	function SetNext(wxHtmlCell &$cell){}

	/**
	 * Sets parent container of this cell.
	 * @param wxHtmlContainerCell $p
	 */
	function SetParent(wxHtmlContainerCell &$p){}

	/**
	 * Sets the cell's position within parent container.
	 * @param integer $x
	 * @param integer $y
	 */
	function SetPos($x, $y){}
}

class wxHtmlCellEvent extends wxCommandEvent
{
	/**
	 * The constructor is not normally used by the user code.
	 * @param integer $commandType
	 * @param integer $id
	 * @param wxHtmlCell $cell
	 * @param wxPoint $point
	 * @param wxMouseEvent $ev
	 */
	function __construct($commandType, $id, wxHtmlCell &$cell, wxPoint $point, wxMouseEvent $ev){}

	/**
	 * Returns the wxHtmlCellEvent associated with the event.
	 * @return wxHtmlCell
	 */
	function GetCell(){}

	/**
	 * Returns true if SetLinkClicked(true) has previously been called; false otherwise.
	 * @return bool
	 */
	function GetLinkClicked(){}

	/**
	 * Returns the wxPoint associated with the event.
	 * @return wxPoint
	 */
	function GetPoint(){}

	/**
	 * Call this function with linkclicked set to true if the cell which has been clicked contained a link or false otherwise (which is the default).
	 * @param bool $linkclicked
	 */
	function SetLinkClicked($linkclicked){}
}

class wxHtmlColourCell extends wxHtmlCell
{
	/**
	 * Constructor.
	 * @param wxColour $clr
	 * @param integer $flags
	 */
	function __construct(wxColour $clr, $flags=wxHTML_CLR_FOREGROUND){}
}

class wxHtmlContainerCell extends wxHtmlCell
{
	/**
	 * Constructor.
	 * @param wxHtmlContainerCell $parent
	 */
	function __construct(wxHtmlContainerCell &$parent){}

	/**
	 * Returns container's horizontal alignment.
	 * @return integer
	 */
	function GetAlignHor(){}

	/**
	 * Returns container's vertical alignment.
	 * @return integer
	 */
	function GetAlignVer(){}

	/**
	 * Returns the background colour of the container or wxNullColour if no background colour is set.
	 * @return wxColour
	 */
	function GetBackgroundColour(){}

	/**
	 * Returns the indentation.
	 * @param integer $ind
	 * @return integer
	 */
	function GetIndent($ind){}

	/**
	 * Returns the units of indentation for ind where ind is one of the wxHTML_INDENT_* constants.
	 * @param integer $ind
	 * @return integer
	 */
	function GetIndentUnits($ind){}

	/**
	 * Inserts a new cell into the container.
	 * @param wxHtmlCell $cell
	 */
	function InsertCell(wxHtmlCell &$cell){}

	/**
	 * Sets the container's alignment (both horizontal and vertical) according to the values stored in tag.
	 * @param wxHtmlTag $tag
	 */
	function SetAlign(wxHtmlTag $tag){}

	/**
	 * Sets the container's horizontal alignment.
	 * @param integer $al
	 */
	function SetAlignHor($al){}

	/**
	 * Sets the container's vertical alignment.
	 * @param integer $al
	 */
	function SetAlignVer($al){}

	/**
	 * Sets the background colour for this container.
	 * @param wxColour $clr
	 */
	function SetBackgroundColour(wxColour $clr){}

	/**
	 * Sets the border (frame) colours.
	 * @param wxColour $clr1
	 * @param wxColour $clr2
	 * @param integer $border
	 */
	function SetBorder(wxColour $clr1, wxColour $clr2, $border=1){}

	/**
	 * Sets the indentation (free space between borders of container and subcells).
	 * @param integer $i
	 * @param integer $what
	 * @param integer $units
	 */
	function SetIndent($i, $what, $units=wxHTML_UNITS_PIXELS){}

	/**
	 * Sets minimal height of the container.
	 * @param integer $h
	 * @param integer $align
	 */
	function SetMinHeight($h, $align=wxHTML_ALIGN_TOP){}

	/**
	 * Sets floating width adjustment.
	 * @param wxHtmlTag $tag
	 * @param float $pixel_scale
	 * @param integer $w
	 * @param integer $units
	 */
	function SetWidthFloat(wxHtmlTag $tag, $pixel_scale=1.0, $w, $units){}
}

class wxHtmlDCRenderer extends wxObject
{
	/**
	 * Constructor.
	 */
	function __construct(){}

	/**
	 * Returns the height of the HTML text in pixels.
	 * @return integer
	 */
	function GetTotalHeight(){}

	/**
	 * Returns the width of the HTML text in pixels.
	 * @return integer
	 */
	function GetTotalWidth(){}

	/**
	 * Assign DC instance to the renderer.
	 * @param wxDC $dc
	 * @param float $pixel_scale
	 */
	function SetDC(wxDC &$dc, $pixel_scale=1.0){}

	/**
	 * This function sets font sizes and faces.
	 * @param string $normal_face
	 * @param string $fixed_face
	 * @param array $sizes
	 */
	function SetFonts($normal_face, $fixed_face, array $sizes=NULL){}

	/**
	 * Assign text to the renderer.
	 * @param string $html
	 * @param string $basepath
	 * @param bool $isdir
	 */
	function SetHtmlText($html, $basepath=wxEmptyString, $isdir=true){}

	/**
	 * Set size of output rectangle, in pixels.
	 * @param integer $width
	 * @param integer $height
	 */
	function SetSize($width, $height){}

	/**
	 * Sets font sizes to be relative to the given size or the system default size; use either specified or default font.
	 * @param integer $size
	 * @param string $normal_face
	 * @param string $fixed_face
	 */
	function SetStandardFonts($size=-1, $normal_face=wxEmptyString, $fixed_face=wxEmptyString){}
}

class wxHtmlEasyPrinting extends wxObject
{
	/**
	 * Constructor.
	 * @param string $name
	 * @param wxWindow $parentWindow
	 */
	function __construct($name="Printing", wxWindow &$parentWindow=null){}

	/**
	 * Returns the current name being used for preview frames and setup dialogs.
	 * @return string
	 */
	function GetName(){}

	/**
	 * Returns a pointer to wxPageSetupDialogData instance used by this class.
	 * @return wxPageSetupDialogData
	 */
	function GetPageSetupData(){}

	/**
	 * Gets the parent window for dialogs.
	 * @return wxWindow
	 */
	function GetParentWindow(){}

	/**
	 * Returns pointer to wxPrintData instance used by this class.
	 * @return wxPrintData
	 */
	function GetPrintData(){}

	/**
	 * Display page setup dialog and allows the user to modify settings.
	 */
	function PageSetup(){}

	/**
	 * Preview HTML file.
	 * @param string $htmlfile
	 * @return bool
	 */
	function PreviewFile($htmlfile){}

	/**
	 * Preview HTML text (not file!).
	 * @param string $htmltext
	 * @param string $basepath
	 * @return bool
	 */
	function PreviewText($htmltext, $basepath=wxEmptyString){}

	/**
	 * Print HTML file.
	 * @param string $htmlfile
	 * @return bool
	 */
	function PrintFile($htmlfile){}

	/**
	 * Print HTML text (not file!).
	 * @param string $htmltext
	 * @param string $basepath
	 * @return bool
	 */
	function PrintText($htmltext, $basepath=wxEmptyString){}

	/**
	 * Sets fonts.
	 * @param string $normal_face
	 * @param string $fixed_face
	 * @param array $sizes
	 */
	function SetFonts($normal_face, $fixed_face, array $sizes=NULL){}

	/**
	 * Set page footer.
	 * @param string $footer
	 * @param integer $pg
	 */
	function SetFooter($footer, $pg=wxPAGE_ALL){}

	/**
	 * Set page header.
	 * @param string $header
	 * @param integer $pg
	 */
	function SetHeader($header, $pg=wxPAGE_ALL){}

	/**
	 * Sets the name used for preview frames and setup dialogs.
	 * @param string $name
	 */
	function SetName($name){}

	/**
	 * Sets the parent window for dialogs.
	 * @param wxWindow $window
	 */
	function SetParentWindow(wxWindow &$window){}

	/**
	 * Sets default font sizes and/or default font size.
	 * @param integer $size
	 * @param string $normal_face
	 * @param string $fixed_face
	 */
	function SetStandardFonts($size=-1, $normal_face=wxEmptyString, $fixed_face=wxEmptyString){}
}

class wxHtmlFilter extends wxObject
{
	/**
	 * Constructor.
	 */
	function __construct(){}

	/**
	 * Returns true if this filter is capable of reading file file.
	 * @param wxFSFile $file
	 * @return bool
	 */
	function CanRead(wxFSFile $file){}

	/**
	 * Reads the file and returns string with HTML document.
	 * @param wxFSFile $file
	 * @return string
	 */
	function ReadFile(wxFSFile $file){}
}

class wxHtmlHelpController
{
	/**
	 * Constructor.
	 * @param integer $style
	 * @param wxWindow $parentWindow
	 */
	function __construct($style=wxHF_DEFAULT_STYLE, wxWindow &$parentWindow=null){}

	/**
	 * Adds a book (i.e.
	 * @param wxFileName $bookFile
	 * @param bool $showWaitMsg
	 * @param string $bookUrl
	 * @return bool
	 */
	function AddBook(wxFileName $bookFile, $showWaitMsg=false, $bookUrl, $showWaitMsg=false){}

	/**
	 * This protected virtual method may be overridden so that when specifying the wxHF_DIALOG style, the controller uses a different dialog.
	 * @param wxHtmlHelpData $data
	 * @return wxHtmlHelpDialog
	 */
	function CreateHelpDialog(wxHtmlHelpData &$data){}

	/**
	 * This protected virtual method may be overridden so that the controller uses a different frame.
	 * @param wxHtmlHelpData $data
	 * @return wxHtmlHelpFrame
	 */
	function CreateHelpFrame(wxHtmlHelpData &$data){}

	/**
	 * Displays page x.
	 * @param string $x
	 * @param integer $id
	 * @return bool
	 */
	function Display($x, $id){}

	/**
	 * Displays help window and focuses contents panel.
	 * @return bool
	 */
	function DisplayContents(){}

	/**
	 * Displays help window and focuses index panel.
	 * @return bool
	 */
	function DisplayIndex(){}

	/**
	 * Displays the help window, focuses search panel and starts searching.
	 * @param string $keyword
	 * @param wxHelpSearchMode $mode
	 * @return bool
	 */
	function KeywordSearch($keyword, wxHelpSearchMode $mode=null){}

	/**
	 * Reads the controller's setting (position of window, etc.)
	 * @param wxConfigBase $cfg
	 * @param string $path
	 */
	function ReadCustomization(wxConfigBase &$cfg, $path=wxEmptyString){}

	/**
	 * Sets whether the help frame should prevent application from exiting if it's the only remaining top level window.
	 * @param bool $enable
	 */
	function SetShouldPreventAppExit($enable){}

	/**
	 * Sets the path for storing temporary files - cached binary versions of index and contents files.
	 * @param string $path
	 */
	function SetTempDir($path){}

	/**
	 * Sets format of title of the frame.
	 * @param string $format
	 */
	function SetTitleFormat($format){}

	/**
	 * Associates the config object with the controller.
	 * @param wxConfigBase $config
	 * @param string $rootpath
	 */
	function UseConfig(wxConfigBase &$config, $rootpath=wxEmptyString){}

	/**
	 * Stores controllers setting (position of window etc.)
	 * @param wxConfigBase $cfg
	 * @param string $path
	 */
	function WriteCustomization(wxConfigBase &$cfg, $path=wxEmptyString){}
}

class wxHtmlHelpData extends wxObject
{
	/**
	 * Constructor.
	 */
	function __construct(){}

	/**
	 * Adds new book.
	 * @param string $book_url
	 * @return bool
	 */
	function AddBook($book_url){}

	/**
	 * Returns page's URL based on integer ID stored in project.
	 * @param integer $id
	 * @return string
	 */
	function FindPageById($id){}

	/**
	 * Returns page's URL based on its (file)name.
	 * @param string $page
	 * @return string
	 */
	function FindPageByName($page){}

	/**
	 * Sets the temporary directory where binary cached versions of MS HTML Workshop files will be stored.
	 * @param string $path
	 */
	function SetTempDir($path){}
}

class wxHtmlHelpDialog extends wxFrame
{
	/**
	 * wxHtmlHelpDialog
	 * @param wxHtmlHelpData $data
	 * @param wxWindow $parent
	 * @param integer $wxWindowID
	 * @param string $title
	 * @param integer $style
	 */
	function __construct(wxHtmlHelpData &$data=null, wxWindow &$parent, $wxWindowID, $title=wxEmptyString, $style=wxHF_DEFAULT_STYLE, wxHtmlHelpData &$data=null){}

	/**
	 * You may override this virtual method to add more buttons to the help window's toolbar.
	 * @param wxToolBar $toolBar
	 * @param integer $style
	 */
	function AddToolbarButtons(wxToolBar &$toolBar, $style){}

	/**
	 * Creates the dialog.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param string $title
	 * @param integer $style
	 * @return bool
	 */
	function Create(wxWindow &$parent, $id, $title=wxEmptyString, $style=wxHF_DEFAULT_STYLE){}

	/**
	 * Returns the help controller associated with the dialog.
	 * @return wxHtmlHelpController
	 */
	function GetController(){}

	/**
	 * Sets the help controller associated with the dialog.
	 * @param wxHtmlHelpController $controller
	 */
	function SetController(wxHtmlHelpController &$controller){}

	/**
	 * Sets the dialog's title format.
	 * @param string $format
	 */
	function SetTitleFormat($format){}
}

class wxHtmlHelpFrame extends wxFrame
{
	/**
	 * wxHtmlHelpFrame
	 * @param wxHtmlHelpData $data
	 * @param wxWindow $parent
	 * @param integer $wxWindowID
	 * @param string $title
	 * @param integer $style
	 * @param wxConfigBase $config
	 * @param string $rootpath
	 */
	function __construct(wxHtmlHelpData &$data=null, wxWindow &$parent, $wxWindowID, $title=wxEmptyString, $style=wxHF_DEFAULT_STYLE, wxHtmlHelpData &$data=null, wxConfigBase &$config=null, $rootpath=wxEmptyString){}

	/**
	 * You may override this virtual method to add more buttons to the help window's toolbar.
	 * @param wxToolBar $toolBar
	 * @param integer $style
	 */
	function AddToolbarButtons(wxToolBar &$toolBar, $style){}

	/**
	 * Creates the frame.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param string $title
	 * @param integer $style
	 * @param wxConfigBase $config
	 * @param string $rootpath
	 * @return bool
	 */
	function Create(wxWindow &$parent, $id, $title=wxEmptyString, $style=wxHF_DEFAULT_STYLE, wxConfigBase &$config=null, $rootpath=wxEmptyString){}

	/**
	 * Returns the help controller associated with the frame.
	 * @return wxHtmlHelpController
	 */
	function GetController(){}

	/**
	 * Sets the help controller associated with the frame.
	 * @param wxHtmlHelpController $controller
	 */
	function SetController(wxHtmlHelpController &$controller){}

	/**
	 * Sets the frame's title format.
	 * @param string $format
	 */
	function SetTitleFormat($format){}
}

class wxHtmlHelpWindow extends wxWindow
{
	/**
	 * wxHtmlHelpWindow
	 * @param wxHtmlHelpData $data
	 * @param wxWindow $parent
	 * @param integer $wxWindowID
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param integer $helpStyle
	 */
	function __construct(wxHtmlHelpData &$data=null, wxWindow &$parent, $wxWindowID, wxPoint $pos=null, wxSize $size=null, $style=null, $helpStyle=wxHF_DEFAULT_STYLE, wxHtmlHelpData &$data=null){}

	/**
	 * You may override this virtual method to add more buttons to the help window's toolbar.
	 * @param wxToolBar $toolBar
	 * @param integer $style
	 */
	function AddToolbarButtons(wxToolBar &$toolBar, $style){}

	/**
	 * Creates the help window.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param integer $helpStyle
	 * @return bool
	 */
	function Create(wxWindow &$parent, $id, wxPoint $pos=null, wxSize $size=null, $style=null, $helpStyle=wxHF_DEFAULT_STYLE){}

	/**
	 * Displays page x.
	 * @param string $x
	 * @param integer $id
	 * @return bool
	 */
	function Display($x, $id){}

	/**
	 * Displays contents panel.
	 * @return bool
	 */
	function DisplayContents(){}

	/**
	 * Displays index panel.
	 * @return bool
	 */
	function DisplayIndex(){}

	/**
	 * Returns the wxHtmlHelpData object, which is usually a pointer to the controller's data.
	 * @return wxHtmlHelpData
	 */
	function GetData(){}

	/**
	 * Search for given keyword.
	 * @param string $keyword
	 * @param wxHelpSearchMode $mode
	 * @return bool
	 */
	function KeywordSearch($keyword, wxHelpSearchMode $mode=null){}

	/**
	 * Reads the user's settings for this window.
	 * @param wxConfigBase $cfg
	 * @param string $path
	 */
	function ReadCustomization(wxConfigBase &$cfg, $path=wxEmptyString){}

	/**
	 * Refresh all panels.
	 */
	function RefreshLists(){}

	/**
	 * Associates a wxConfig object with the help window.
	 * @param wxConfigBase $config
	 * @param string $rootpath
	 */
	function UseConfig(wxConfigBase &$config, $rootpath=wxEmptyString){}

	/**
	 * Saves the user's settings for this window.
	 * @param wxConfigBase $cfg
	 * @param string $path
	 */
	function WriteCustomization(wxConfigBase &$cfg, $path=wxEmptyString){}
}

class wxHtmlLinkEvent extends wxCommandEvent
{
	/**
	 * The constructor is not normally used by the user code.
	 * @param integer $id
	 * @param wxHtmlLinkInfo $linkinfo
	 */
	function __construct($id, wxHtmlLinkInfo $linkinfo){}

	/**
	 * Returns the wxHtmlLinkInfo which contains info about the cell clicked and the hyperlink it contains.
	 * @return wxHtmlLinkInfo
	 */
	function GetLinkInfo(){}
}

class wxHtmlLinkInfo extends wxObject
{
	/**
	 * Default ctor.
	 * @param string $href
	 * @param string $target
	 */
	function __construct($href, $target=wxEmptyString){}

	/**
	 * Return pointer to event that generated OnLinkClicked() event.
	 * @return wxMouseEvent
	 */
	function GetEvent(){}

	/**
	 * Return HREF value of the <A> tag.
	 * @return string
	 */
	function GetHref(){}

	/**
	 * Return pointer to the cell that was clicked.
	 * @return wxHtmlCell
	 */
	function GetHtmlCell(){}

	/**
	 * Return TARGET value of the <A> tag (this value is used to specify in which frame should be the page pointed by GetHref() Href opened).
	 * @return string
	 */
	function GetTarget(){}
}

class wxHtmlListBox extends wxVListBox
{
	/**
	 * Default constructor, you must call Create() later.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param string $name
	 */
	function __construct(wxWindow &$parent, $id=wxID_ANY, wxPoint $pos=null, wxSize $size=null, $style, $name=wxHtmlListBoxNameStr){}

	/**
	 * Creates the control and optionally sets the initial number of items in it (it may also be set or changed later with wxVListBox::SetItemCount).
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param string $name
	 * @return bool
	 */
	function Create(wxWindow &$parent, $id=wxID_ANY, wxPoint $pos=null, wxSize $size=null, $style, $name=wxHtmlListBoxNameStr){}

	/**
	 * This virtual function may be overridden to change the appearance of the background of the selected cells in the same way as GetSelectedTextColour().
	 * @param wxColour $colBg
	 * @return wxColour
	 */
	function GetSelectedTextBgColour(wxColour $colBg){}

	/**
	 * This virtual function may be overridden to customize the appearance of the selected cells.
	 * @param wxColour $colFg
	 * @return wxColour
	 */
	function GetSelectedTextColour(wxColour $colFg){}

	/**
	 * This method must be implemented in the derived class and should return the body (i.e.
	 * @param integer $n
	 * @return string
	 */
	function OnGetItem($n){}

	/**
	 * This function may be overridden to decorate HTML returned by OnGetItem().
	 * @param integer $n
	 * @return string
	 */
	function OnGetItemMarkup($n){}

	/**
	 * Called when the user clicks on hypertext link.
	 * @param integer $n
	 * @param wxHtmlLinkInfo $link
	 */
	function OnLinkClicked($n, wxHtmlLinkInfo $link){}
}

class wxHtmlModalHelp
{
	/**
	 * The ctor.
	 * @param wxWindow $parent
	 * @param string $helpFile
	 * @param string $topic
	 * @param integer $style
	 */
	function __construct(wxWindow &$parent, $helpFile, $topic=wxEmptyString, $style=null){}
}

class wxHtmlPrintout extends wxPrintout
{
	/**
	 * Constructor.
	 * @param string $title
	 */
	function __construct($title="Printout"){}

	/**
	 * Adds a filter to the static list of filters for wxHtmlPrintout.
	 * @param wxHtmlFilter $filter
	 */
	function AddFilter(wxHtmlFilter &$filter){}

	/**
	 * This function sets font sizes and faces.
	 * @param string $normal_face
	 * @param string $fixed_face
	 * @param array $sizes
	 */
	function SetFonts($normal_face, $fixed_face, array $sizes=NULL){}

	/**
	 * Set page footer.
	 * @param string $footer
	 * @param integer $pg
	 */
	function SetFooter($footer, $pg=wxPAGE_ALL){}

	/**
	 * Set page header.
	 * @param string $header
	 * @param integer $pg
	 */
	function SetHeader($header, $pg=wxPAGE_ALL){}

	/**
	 * Prepare the class for printing this HTML file.
	 * @param string $htmlfile
	 */
	function SetHtmlFile($htmlfile){}

	/**
	 * Prepare the class for printing this HTML text.
	 * @param string $html
	 * @param string $basepath
	 * @param bool $isdir
	 */
	function SetHtmlText($html, $basepath=wxEmptyString, $isdir=true){}

	/**
	 * Sets margins in millimeters.
	 * @param float $top
	 * @param float $bottom
	 * @param float $left
	 * @param float $right
	 * @param float $spaces
	 */
	function SetMargins($top=25.2, $bottom=25.2, $left=25.2, $right=25.2, $spaces=5){}
}

class wxHtmlRenderingInfo
{
	/**
	 * Default ctor.
	 */
	function __construct(){}

	/**
	 * Accessors.
	 * @return wxHtmlRenderingStyle
	 */
	function GetStyle(){}

	/**
	 * Accessors.
	 * @param wxHtmlRenderingStyle $style
	 */
	function SetStyle(wxHtmlRenderingStyle &$style){}
}

class wxHtmlRenderingStyle
{
	/**
	 * Returns the colour to use for the selected text's background.
	 * @param wxColour $clr
	 * @return wxColour
	 */
	function GetSelectedTextBgColour(wxColour $clr){}

	/**
	 * Returns the colour to use for the selected text.
	 * @param wxColour $clr
	 * @return wxColour
	 */
	function GetSelectedTextColour(wxColour $clr){}
}

class wxHtmlTag
{
	/**
	 * Returns a string containing all parameters.
	 * @return string
	 */
	function GetAllParams(){}

	/**
	 * Returns beginning position of the text between this tag and paired ending tag.
	 * @return integer
	 */
	function GetBeginPos(){}

	/**
	 * Returns ending position of the text between this tag and paired ending tag.
	 * @return integer
	 */
	function GetEndPos1(){}

	/**
	 * Returns ending position 2 of the text between this tag and paired ending tag.
	 * @return integer
	 */
	function GetEndPos2(){}

	/**
	 * Returns tag's name.
	 * @return string
	 */
	function GetName(){}

	/**
	 * Returns the value of the parameter.
	 * @param string $par
	 * @param bool $with_quotes
	 * @return string
	 */
	function GetParam($par, $with_quotes=false){}

	/**
	 * Interprets tag parameter par as colour specification and saves its value into wxColour variable pointed by clr.
	 * @param string $par
	 * @param wxColour $clr
	 * @return bool
	 */
	function GetParamAsColour($par, wxColour &$clr){}

	/**
	 * Returns true if this tag is paired with ending tag, false otherwise.
	 * @return bool
	 */
	function HasEnding(){}

	/**
	 * Returns true if the tag has a parameter of the given name.
	 * @param string $par
	 * @return bool
	 */
	function HasParam($par){}

	/**
	 * Parses the given string as an HTML colour.
	 * @param string $str
	 * @param wxColour $clr
	 * @return bool
	 */
	function ParseAsColour($str, wxColour &$clr){}

	/**
	 * This method scans the given parameter.
	 * @param string $par
	 * @param string $format
	 * @param mixed $value
	 * @return integer
	 */
	function ScanParam($par, $format, $value){}

	/**
	 * Interprets tag parameter par as an integer and saves its value into int variable pointed by value.
	 * @param string $par
	 * @param integer $value
	 * @return bool
	 */
	function GetParamAsInt($par, &$value){}
}

class wxHtmlTagHandler extends wxObject
{
	/**
	 * Constructor.
	 */
	function __construct(){}

	/**
	 * Returns list of supported tags.
	 * @return string
	 */
	function GetSupportedTags(){}

	/**
	 * This is the core method of each handler.
	 * @param wxHtmlTag $tag
	 * @return bool
	 */
	function HandleTag(wxHtmlTag $tag){}
}

class wxHtmlTagsModule extends wxModule
{
	/**
	 * You must override this method.
	 * @param wxHtmlWinParser $parser
	 */
	function FillHandlersTable(wxHtmlWinParser &$parser){}
}

class wxHtmlWidgetCell extends wxHtmlCell
{
	/**
	 * Constructor.
	 * @param wxWindow $wnd
	 * @param integer $w
	 */
	function __construct(wxWindow &$wnd, $w){}
}

class wxHtmlWinParser extends wxHtmlParser
{
	/**
	 * Adds module() to the list of wxHtmlWinParser tag handler.
	 * @param wxHtmlTagsModule $module
	 */
	function AddModule(wxHtmlTagsModule &$module){}

	/**
	 * Closes the container, sets actual container to the parent one and returns pointer to it (see Cells and Containers).
	 * @return wxHtmlContainerCell
	 */
	function CloseContainer(){}

	/**
	 * Creates font based on current setting (see SetFontSize(), SetFontBold(), SetFontItalic(), SetFontFixed(), wxHtmlWinParser::SetFontUnderlined) and returns pointer to it.
	 * @return wxFont
	 */
	function CreateCurrentFont(){}

	/**
	 * Returns actual text colour.
	 * @return wxColour
	 */
	function GetActualColor(){}

	/**
	 * Returns default horizontal alignment.
	 * @return integer
	 */
	function GetAlign(){}

	/**
	 * Returns (average) char height in standard font.
	 * @return integer
	 */
	function GetCharHeight(){}

	/**
	 * Returns average char width in standard font.
	 * @return integer
	 */
	function GetCharWidth(){}

	/**
	 * Returns pointer to the currently opened container (see Cells and Containers).
	 * @return wxHtmlContainerCell
	 */
	function GetContainer(){}

	/**
	 * Returns pointer to the DC used during parsing.
	 * @return wxDC
	 */
	function GetDC(){}

	/**
	 * Returns true if actual font is bold, false otherwise.
	 * @return integer
	 */
	function GetFontBold(){}

	/**
	 * Returns actual font face name.
	 * @return string
	 */
	function GetFontFace(){}

	/**
	 * Returns true if actual font is fixed face, false otherwise.
	 * @return integer
	 */
	function GetFontFixed(){}

	/**
	 * Returns true if actual font is italic, false otherwise.
	 * @return integer
	 */
	function GetFontItalic(){}

	/**
	 * Returns actual font size (HTML size varies from -2 to +4)
	 * @return integer
	 */
	function GetFontSize(){}

	/**
	 * Returns true if actual font is underlined, false otherwise.
	 * @return integer
	 */
	function GetFontUnderlined(){}

	/**
	 * Returns actual hypertext link.
	 * @return wxHtmlLinkInfo
	 */
	function GetLink(){}

	/**
	 * Returns the colour of hypertext link text.
	 * @return wxColour
	 */
	function GetLinkColor(){}

	/**
	 * Sets actual text colour.
	 * @param wxColour $clr
	 */
	function SetActualColor(wxColour $clr){}

	/**
	 * Sets default horizontal alignment (see wxHtmlContainerCell::SetAlignHor).
	 * @param integer $a
	 */
	function SetAlign($a){}

	/**
	 * Allows you to directly set opened container.
	 * @param wxHtmlContainerCell $c
	 * @return wxHtmlContainerCell
	 */
	function SetContainer(wxHtmlContainerCell &$c){}

	/**
	 * Sets the DC.
	 * @param wxDC $dc
	 * @param float $pixel_scale
	 */
	function SetDC(wxDC &$dc, $pixel_scale=1.0e+0){}

	/**
	 * Opens new container and returns pointer to it (see Cells and Containers).
	 * @return wxHtmlContainerCell
	 */
	function OpenContainer(){}

	/**
	 * Sets bold flag of actualfont.
	 * @param integer $x
	 */
	function SetFontBold($x){}

	/**
	 * Sets current font face to face.
	 * @param string $face
	 */
	function SetFontFace($face){}

	/**
	 * Sets fixed face flag of actualfont.
	 * @param integer $x
	 */
	function SetFontFixed($x){}

	/**
	 * Sets italic flag of actualfont.
	 * @param integer $x
	 */
	function SetFontItalic($x){}

	/**
	 * Sets actual font size (HTML size varies from 1 to 7).
	 * @param integer $s
	 */
	function SetFontSize($s){}

	/**
	 * Sets underlined flag of actualfont.
	 * @param integer $x
	 */
	function SetFontUnderlined($x){}

	/**
	 * Sets fonts.
	 * @param string $normal_face
	 * @param string $fixed_face
	 * @param array $sizes
	 */
	function SetFonts($normal_face, $fixed_face, array $sizes){}

	/**
	 * Sets actual hypertext link.
	 * @param wxHtmlLinkInfo $link
	 */
	function SetLink(wxHtmlLinkInfo $link){}

	/**
	 * Sets colour of hypertext link.
	 * @param wxColour $clr
	 */
	function SetLinkColor(wxColour $clr){}
}

class wxHtmlWinTagHandler extends wxHtmlTagHandler
{
}

class wxHtmlWindow extends wxScrolledWindow
{
	/**
	 * Default ctor.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param string $name
	 */
	function __construct(wxWindow &$parent, $id=wxID_ANY, wxPoint $pos=null, wxSize $size=null, $style=wxHW_DEFAULT_STYLE, $name="htmlWindow"){}

	/**
	 * Adds input filter to the static list of available filters.
	 * @param wxHtmlFilter $filter
	 */
	function AddFilter(wxHtmlFilter &$filter){}

	/**
	 * Appends HTML fragment to currently displayed text and refreshes the window.
	 * @param string $source
	 * @return bool
	 */
	function AppendToPage($source){}

	/**
	 * Returns pointer to the top-level container.
	 * @return wxHtmlContainerCell
	 */
	function GetInternalRepresentation(){}

	/**
	 * Returns anchor within currently opened page (see wxHtmlWindow::GetOpenedPage).
	 * @return string
	 */
	function GetOpenedAnchor(){}

	/**
	 * Returns full location of the opened page.
	 * @return string
	 */
	function GetOpenedPage(){}

	/**
	 * Returns title of the opened page or wxEmptyString if the current page does not contain <TITLE> tag.
	 * @return string
	 */
	function GetOpenedPageTitle(){}

	/**
	 * Returns the related frame.
	 * @return wxFrame
	 */
	function GetRelatedFrame(){}

	/**
	 * Moves back to the previous page.
	 * @return bool
	 */
	function HistoryBack(){}

	/**
	 * Returns true if it is possible to go back in the history i.e.
	 * @return bool
	 */
	function HistoryCanBack(){}

	/**
	 * Returns true if it is possible to go forward in the history i.e.
	 * @return bool
	 */
	function HistoryCanForward(){}

	/**
	 * Clears history.
	 */
	function HistoryClear(){}

	/**
	 * Moves to next page in history.
	 * @return bool
	 */
	function HistoryForward(){}

	/**
	 * Loads an HTML page from a file and displays it.
	 * @param wxFileName $filename
	 * @return bool
	 */
	function LoadFile(wxFileName $filename){}

	/**
	 * Unlike SetPage() this function first loads the HTML page from location and then displays it.
	 * @param string $location
	 * @return bool
	 */
	function LoadPage($location){}

	/**
	 * This method is called when a mouse button is clicked inside wxHtmlWindow.
	 * @param wxHtmlCell $cell
	 * @param integer $x
	 * @param integer $y
	 * @param wxMouseEvent $event
	 * @return bool
	 */
	function OnCellClicked(wxHtmlCell &$cell, $x, $y, wxMouseEvent $event){}

	/**
	 * This method is called when a mouse moves over an HTML cell.
	 * @param wxHtmlCell $cell
	 * @param integer $x
	 * @param integer $y
	 */
	function OnCellMouseHover(wxHtmlCell &$cell, $x, $y){}

	/**
	 * Called when user clicks on hypertext link.
	 * @param wxHtmlLinkInfo $link
	 */
	function OnLinkClicked(wxHtmlLinkInfo $link){}

	/**
	 * Called on parsing <TITLE> tag.
	 * @param string $title
	 */
	function OnSetTitle($title){}

	/**
	 * Selects all text in the window.
	 */
	function SelectAll(){}

	/**
	 * Selects the line of text that pos points at.
	 * @param wxPoint $pos
	 */
	function SelectLine(wxPoint $pos){}

	/**
	 * Selects the word at position pos.
	 * @param wxPoint $pos
	 */
	function SelectWord(wxPoint $pos){}

	/**
	 * Returns the current selection as plain text.
	 * @return string
	 */
	function SelectionToText(){}

	/**
	 * This function sets the space between border of window and HTML contents.
	 * @param integer $b
	 */
	function SetBorders($b){}

	/**
	 * This function sets font sizes and faces.
	 * @param string $normal_face
	 * @param string $fixed_face
	 * @param array $sizes
	 */
	function SetFonts($normal_face, $fixed_face, array $sizes=NULL){}

	/**
	 * Sets the source of a page and displays it, for example:
	 * @param string $source
	 * @return bool
	 */
	function SetPage($source){}

	/**
	 * Sets the frame in which page title will be displayed.
	 * @param wxFrame $frame
	 * @param string $format
	 */
	function SetRelatedFrame(wxFrame &$frame, $format){}

	/**
	 * After calling SetRelatedFrame(), this sets statusbar slot where messages will be displayed.
	 * @param integer $index
	 * @param wxStatusBar $statusbar
	 */
	function SetRelatedStatusBar($index, wxStatusBar &$statusbar, $index){}

	/**
	 * Sets default font sizes and/or default font size.
	 * @param integer $size
	 * @param string $normal_face
	 * @param string $fixed_face
	 */
	function SetStandardFonts($size=-1, $normal_face=wxEmptyString, $fixed_face=wxEmptyString){}

	/**
	 * Returns content of currently displayed page as plain text.
	 * @return string
	 */
	function ToText(){}

	/**
	 * Saves custom settings into wxConfig.
	 * @param wxConfigBase $cfg
	 * @param string $path
	 */
	function WriteCustomization(wxConfigBase &$cfg, $path=wxEmptyString){}
}

class wxHyperlinkCtrl extends wxControl
{
	/**
	 * Constructor.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param string $label
	 * @param string $url
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param string $name
	 */
	function __construct(wxWindow &$parent, $id, $label, $url, wxPoint $pos=null, wxSize $size=null, $style=wxHL_DEFAULT_STYLE, $name=wxHyperlinkCtrlNameStr){}

	/**
	 * Creates the hyperlink control.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param string $label
	 * @param string $url
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param string $name
	 * @return bool
	 */
	function Create(wxWindow &$parent, $id, $label, $url, wxPoint $pos=null, wxSize $size=null, $style=wxHL_DEFAULT_STYLE, $name=wxHyperlinkCtrlNameStr){}

	/**
	 * Returns the colour used to print the label of the hyperlink when the mouse is over the control.
	 * @return wxColour
	 */
	function GetHoverColour(){}

	/**
	 * Returns the colour used to print the label when the link has never been clicked before (i.e.
	 * @return wxColour
	 */
	function GetNormalColour(){}

	/**
	 * Returns the URL associated with the hyperlink.
	 * @return string
	 */
	function GetURL(){}

	/**
	 * Returns true if the hyperlink has already been clicked by the user at least one time.
	 * @return bool
	 */
	function GetVisited(){}

	/**
	 * Returns the colour used to print the label when the mouse is not over the control and the link has already been clicked before (i.e.
	 * @return wxColour
	 */
	function GetVisitedColour(){}

	/**
	 * Sets the colour used to print the label of the hyperlink when the mouse is over the control.
	 * @param wxColour $colour
	 */
	function SetHoverColour(wxColour $colour){}

	/**
	 * Sets the colour used to print the label when the link has never been clicked before (i.e.
	 * @param wxColour $colour
	 */
	function SetNormalColour(wxColour $colour){}

	/**
	 * Sets the URL associated with the hyperlink.
	 * @param string $url
	 */
	function SetURL($url){}

	/**
	 * Marks the hyperlink as visited (see wxHyperlinkCtrl::SetVisitedColour).
	 * @param bool $visited
	 */
	function SetVisited($visited=true){}

	/**
	 * Sets the colour used to print the label when the mouse is not over the control and the link has already been clicked before (i.e.
	 * @param wxColour $colour
	 */
	function SetVisitedColour(wxColour $colour){}
}

class wxHyperlinkEvent extends wxCommandEvent
{
	/**
	 * The constructor is not normally used by the user code.
	 * @param wxObject $generator
	 * @param integer $id
	 * @param string $url
	 */
	function __construct(wxObject &$generator, $id, $url){}

	/**
	 * Returns the URL of the hyperlink where the user has just clicked.
	 * @return string
	 */
	function GetURL(){}

	/**
	 * Sets the URL associated with the event.
	 * @param string $url
	 */
	function SetURL($url){}
}

class wxIcon extends wxGDIObject
{
	/**
	 * Loads an icon from a file or resource.
	 * @param string $name
	 * @param wxBitmapType $type
	 * @param integer $desiredWidth
	 * @param integer $desiredHeight
	 * @param wxIcon $icon
	 */
	function __construct($name, wxBitmapType $type=null, $desiredWidth=-1, $desiredHeight=-1, wxIcon $icon){}

	/**
	 * Copies bmp bitmap to this icon.
	 * @param wxBitmap $bmp
	 */
	function CopyFromBitmap(wxBitmap $bmp){}

	/**
	 * Gets the colour depth of the icon.
	 * @return integer
	 */
	function GetDepth(){}

	/**
	 * Gets the height of the icon in pixels.
	 * @return integer
	 */
	function GetHeight(){}

	/**
	 * Gets the width of the icon in pixels.
	 * @return integer
	 */
	function GetWidth(){}

	/**
	 * Returns true if icon data is present.
	 * @return bool
	 */
	function IsOk(){}

	/**
	 * Loads an icon from a file or resource.
	 * @param string $name
	 * @param wxBitmapType $type
	 * @param integer $desiredWidth
	 * @param integer $desiredHeight
	 * @return bool
	 */
	function LoadFile($name, wxBitmapType $type=null, $desiredWidth=-1, $desiredHeight=-1){}

	/**
	 * Sets the depth member (does not affect the icon data).
	 * @param integer $depth
	 */
	function SetDepth($depth){}

	/**
	 * Sets the height member (does not affect the icon data).
	 * @param integer $height
	 */
	function SetHeight($height){}

	/**
	 * Sets the width member (does not affect the icon data).
	 * @param integer $width
	 */
	function SetWidth($width){}
}

class wxIconBundle extends wxGDIObject
{
	/**
	 * Default ctor.
	 * @param string $file
	 * @param wxBitmapType $type
	 * @param wxIcon $icon
	 * @param wxIconBundle $ic
	 * @param wxInputStream $stream
	 */
	function __construct($file, wxBitmapType $type=null, wxIcon $icon, wxIconBundle $ic, wxInputStream &$stream, wxBitmapType $type=null){}

	/**
	 * Adds the icon to the collection; if the collection already contains an icon with the same width and height, it is replaced by the new one.
	 * @param wxIcon $icon
	 * @param string $file
	 * @param wxBitmapType $type
	 * @param wxInputStream $stream
	 */
	function AddIcon(wxIcon $icon, $file, wxBitmapType $type=null, wxInputStream &$stream, wxBitmapType $type=null){}

	/**
	 * Returns the icon with the given size.
	 * @param wxSize $size
	 * @param integer $flags
	 * @return wxIcon
	 */
	function GetIcon(wxSize $size, $flags=FALLBACK_SYSTEM, $size=wxDefaultCoord, $flags=FALLBACK_SYSTEM){}

	/**
	 * return the icon at index (must be < GetIconCount())
	 * @param integer $n
	 * @return wxIcon
	 */
	function GetIconByIndex($n){}

	/**
	 * return the number of available icons
	 * @return integer
	 */
	function GetIconCount(){}

	/**
	 * Returns the icon with exactly the given size or wxNullIcon if this size is not available.
	 * @param wxSize $size
	 * @return wxIcon
	 */
	function GetIconOfExactSize(wxSize $size){}

	/**
	 * Returns true if the bundle doesn't contain any icons, false otherwise (in which case a call to GetIcon() with default parameter should return a valid icon).
	 * @return bool
	 */
	function IsEmpty(){}
}

class wxIdleEvent extends wxEvent
{
	/**
	 * Constructor.
	 */
	function __construct(){}

	/**
	 * Static function returning a value specifying how wxWidgets will send idle events: to all windows, or only to those which specify that they will process the events.
	 * @return wxIdleMode
	 */
	function GetMode(){}

	/**
	 * Returns true if the OnIdle function processing this event requested more processing time.
	 * @return bool
	 */
	function MoreRequested(){}

	/**
	 * Tells wxWidgets that more processing is required.
	 * @param bool $needMore
	 */
	function RequestMore($needMore=true){}

	/**
	 * Static function for specifying how wxWidgets will send idle events: to all windows, or only to those which specify that they will process the events.
	 * @param wxIdleMode $mode
	 */
	function SetMode(wxIdleMode $mode){}
}

class wxImage extends wxObject
{
	/**
	 * Creates an image with the given size and clears it if requested.
	 * @param integer $width
	 * @param integer $height
	 * @param bool $clear
	 * @param wxSize $sz
	 * @param string $name
	 * @param wxBitmapType $type
	 * @param integer $index
	 * @param string $mimetype
	 * @param wxInputStream $stream
	 * @param integer $data
	 * @param integer $alpha
	 * @param bool $static_data
	 */
	function __construct($width, $height, $clear=true, wxSize $sz, $clear=true, $name, wxBitmapType $type=null, $index=-1, $name, $mimetype, $index=-1, wxInputStream &$stream, wxBitmapType $type=null, $index=-1, wxInputStream &$stream, $mimetype, $index=-1, wxSize $sz, &$data, &$alpha, $static_data=false, $width, $height, &$data, &$alpha, $static_data=false, wxSize $sz, &$data, $static_data=false, $width, $height, &$data, $static_data=false){}

	/**
	 * Register an image handler.
	 * @param wxImageHandler $handler
	 */
	function AddHandler(wxImageHandler &$handler){}

	/**
	 * Blurs the image in both horizontal and vertical directions by the specified pixel blurRadius.
	 * @param integer $blurRadius
	 * @return wxImage
	 */
	function Blur($blurRadius){}

	/**
	 * Blurs the image in the horizontal direction only.
	 * @param integer $blurRadius
	 * @return wxImage
	 */
	function BlurHorizontal($blurRadius){}

	/**
	 * Blurs the image in the vertical direction only.
	 * @param integer $blurRadius
	 * @return wxImage
	 */
	function BlurVertical($blurRadius){}

	/**
	 * Returns true if at least one of the available image handlers can read the data in the given stream.
	 * @param wxInputStream $stream
	 * @param string $filename
	 * @return bool
	 */
	function CanRead(wxInputStream &$stream, $filename){}

	/**
	 * Deletes all image handlers.
	 */
	function CleanUpHandlers(){}

	/**
	 * Initialize the image data with zeroes (the default) or with the byte value given as value.
	 * @param integer $value
	 */
	function Clear($value){}

	/**
	 * Removes the alpha channel from the image.
	 */
	function ClearAlpha(){}

	/**
	 * If the image has alpha channel, this method converts it to mask using the specified colour as the mask colour.
	 * @param integer $mr
	 * @param integer $mg
	 * @param integer $mb
	 * @param integer $threshold
	 * @return bool
	 */
	function ConvertAlphaToMask($mr, $mg, $mb, $threshold=wxIMAGE_ALPHA_THRESHOLD, $threshold=wxIMAGE_ALPHA_THRESHOLD){}

	/**
	 * Returns disabled (dimmed) version of the image.
	 * @param integer $brightness
	 * @return wxImage
	 */
	function ConvertToDisabled($brightness=255){}

	/**
	 * Returns a greyscale version of the image.
	 * @param float $weight_r
	 * @param float $weight_g
	 * @param float $weight_b
	 * @return wxImage
	 */
	function ConvertToGreyscale($weight_r, $weight_g, $weight_b){}

	/**
	 * Returns monochromatic version of the image.
	 * @param integer $r
	 * @param integer $g
	 * @param integer $b
	 * @return wxImage
	 */
	function ConvertToMono($r, $g, $b){}

	/**
	 * Returns an identical copy of this image.
	 * @return wxImage
	 */
	function Copy(){}

	/**
	 * This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.
	 * @param wxSize $sz
	 * @param integer $data
	 * @param integer $alpha
	 * @param bool $static_data
	 * @param integer $width
	 * @param integer $height
	 * @param bool $clear
	 * @return bool
	 */
	function Create(wxSize $sz, &$data, &$alpha, $static_data=false, $width, $height, &$data, &$alpha, $static_data=false, wxSize $sz, &$data, $static_data=false, $width, $height, &$data, $static_data=false, wxSize $sz, $clear=true, $width, $height, $clear=true){}

	/**
	 * Destroys the image data.
	 */
	function Destroy(){}

	/**
	 * Finds the first colour that is never used in the image.
	 * @param integer $r
	 * @param integer $g
	 * @param integer $b
	 * @param integer $startR
	 * @param integer $startG
	 * @param integer $startB
	 * @return bool
	 */
	function FindFirstUnusedColour(&$r, &$g, &$b, $startR=1, $startG, $startB){}

	/**
	 * Finds the handler associated with the given image type.
	 * @param wxBitmapType $imageType
	 * @param string $extension
	 * @param string $name
	 * @return wxImageHandler
	 */
	function FindHandler(wxBitmapType $imageType, $extension, wxBitmapType $imageType, $name){}

	/**
	 * Finds the handler associated with the given MIME type.
	 * @param string $mimetype
	 * @return wxImageHandler
	 */
	function FindHandlerMime($mimetype){}

	/**
	 * Return alpha value at given pixel location.
	 * @param integer $x
	 * @param integer $y
	 * @return integer
	 */
	function GetAlpha($x, $y){}

	/**
	 * Returns the blue intensity at the given coordinate.
	 * @param integer $x
	 * @param integer $y
	 * @return integer
	 */
	function GetBlue($x, $y){}

	/**
	 * Returns the image data as an array.
	 * @return integer
	 */
	function GetData(){}

	/**
	 * Returns the green intensity at the given coordinate.
	 * @param integer $x
	 * @param integer $y
	 * @return integer
	 */
	function GetGreen($x, $y){}

	/**
	 * Gets the height of the image in pixels.
	 * @return integer
	 */
	function GetHeight(){}

	/**
	 * If the image file contains more than one image and the image handler is capable of retrieving these individually, this function will return the number of available images.
	 * @param wxInputStream $stream
	 * @param wxBitmapType $type
	 * @param string $filename
	 * @return integer
	 */
	function GetImageCount(wxInputStream &$stream, wxBitmapType $type=null, $filename, wxBitmapType $type=null){}

	/**
	 * Iterates all registered wxImageHandler objects, and returns a string containing file extension masks suitable for passing to file open/save dialog boxes.
	 * @return string
	 */
	function GetImageExtWildcard(){}

	/**
	 * Gets the blue value of the mask colour.
	 * @return integer
	 */
	function GetMaskBlue(){}

	/**
	 * Gets the green value of the mask colour.
	 * @return integer
	 */
	function GetMaskGreen(){}

	/**
	 * Gets the red value of the mask colour.
	 * @return integer
	 */
	function GetMaskRed(){}

	/**
	 * Gets a user-defined string-valued option.
	 * @param string $name
	 * @return string
	 */
	function GetOption($name){}

	/**
	 * Gets a user-defined integer-valued option.
	 * @param string $name
	 * @return integer
	 */
	function GetOptionInt($name){}

	/**
	 * Get the current mask colour or find a suitable unused colour that could be used as a mask colour.
	 * @param integer $r
	 * @param integer $g
	 * @param integer $b
	 * @return bool
	 */
	function GetOrFindMaskColour(&$r, &$g, &$b){}

	/**
	 * Returns the palette associated with the image.
	 * @return wxPalette
	 */
	function GetPalette(){}

	/**
	 * Returns the red intensity at the given coordinate.
	 * @param integer $x
	 * @param integer $y
	 * @return integer
	 */
	function GetRed($x, $y){}

	/**
	 * Returns the size of the image in pixels.
	 * @return wxSize
	 */
	function GetSize(){}

	/**
	 * Returns a sub image of the current one as long as the rect belongs entirely to the image.
	 * @param wxRect $rect
	 * @return wxImage
	 */
	function GetSubImage(wxRect $rect){}

	/**
	 * Gets the type of image found by LoadFile() or specified with SaveFile().
	 * @return wxBitmapType
	 */
	function GetType(){}

	/**
	 * Gets the width of the image in pixels.
	 * @return integer
	 */
	function GetWidth(){}

	/**
	 * Returns true if this image has alpha channel, false otherwise.
	 * @return bool
	 */
	function HasAlpha(){}

	/**
	 * Returns true if there is a mask active, false otherwise.
	 * @return bool
	 */
	function HasMask(){}

	/**
	 * Returns true if the given option is present.
	 * @param string $name
	 * @return bool
	 */
	function HasOption($name){}

	/**
	 * Initializes the image alpha channel data.
	 */
	function InitAlpha(){}

	/**
	 * Internal use only.
	 */
	function InitStandardHandlers(){}

	/**
	 * Adds a handler at the start of the static list of format handlers.
	 * @param wxImageHandler $handler
	 */
	function InsertHandler(wxImageHandler &$handler){}

	/**
	 * Returns true if image data is present.
	 * @return bool
	 */
	function IsOk(){}

	/**
	 * Returns true if the given pixel is transparent, i.e.
	 * @param integer $x
	 * @param integer $y
	 * @param integer $threshold
	 * @return bool
	 */
	function IsTransparent($x, $y, $threshold=wxIMAGE_ALPHA_THRESHOLD){}

	/**
	 * Loads an image from an input stream.
	 * @param wxInputStream $stream
	 * @param string $mimetype
	 * @param integer $index
	 * @param string $name
	 * @param wxBitmapType $type
	 * @return bool
	 */
	function LoadFile(wxInputStream &$stream, $mimetype, $index=-1, $name, $mimetype, $index=-1, $name, wxBitmapType $type=null, $index=-1, wxInputStream &$stream, wxBitmapType $type=null, $index=-1){}

	/**
	 * Returns a mirrored copy of the image.
	 * @param bool $horizontally
	 * @return wxImage
	 */
	function Mirror($horizontally=true){}

	/**
	 * Copy the data of the given image to the specified position in this image.
	 * @param wxImage $image
	 * @param integer $x
	 * @param integer $y
	 */
	function Paste(wxImage $image, $x, $y){}

	/**
	 * Finds the handler with the given name, and removes it.
	 * @param string $name
	 * @return bool
	 */
	function RemoveHandler($name){}

	/**
	 * Replaces the colour specified by r1,g1,b1 by the colour r2,g2,b2.
	 * @param integer $r1
	 * @param integer $g1
	 * @param integer $b1
	 * @param integer $r2
	 * @param integer $g2
	 * @param integer $b2
	 */
	function Replace($r1, $g1, $b1, $r2, $g2, $b2){}

	/**
	 * Changes the size of the image in-place by scaling it: after a call to this function,the image will have the given width and height.
	 * @param integer $width
	 * @param integer $height
	 * @param wxImageResizeQuality $quality
	 * @return wxImage
	 */
	function Rescale($width, $height, wxImageResizeQuality $quality=null){}

	/**
	 * Changes the size of the image in-place without scaling it by adding either a border with the given colour or cropping as necessary.
	 * @param wxSize $size
	 * @param wxPoint $pos
	 * @param integer $red
	 * @param integer $green
	 * @param integer $blue
	 * @return wxImage
	 */
	function Resize(wxSize $size, wxPoint $pos, $red=-1, $green=-1, $blue=-1){}

	/**
	 * Rotates the image about the given point, by angle radians.
	 * @param float $angle
	 * @param wxPoint $rotationCentre
	 * @param bool $interpolating
	 * @param wxPoint $offsetAfterRotation
	 * @return wxImage
	 */
	function Rotate($angle, wxPoint $rotationCentre, $interpolating=true, wxPoint &$offsetAfterRotation=null){}

	/**
	 * Returns a copy of the image rotated by 180 degrees.
	 * @return wxImage
	 */
	function Rotate180(){}

	/**
	 * Returns a copy of the image rotated 90 degrees in the direction indicated by clockwise.
	 * @param bool $clockwise
	 * @return wxImage
	 */
	function Rotate90($clockwise=true){}

	/**
	 * Rotates the hue of each pixel in the image by angle, which is a double in the range of -1.0 to +1.0, where -1.0 corresponds to -360 degrees and +1.0 corresponds to +360 degrees.
	 * @param float $angle
	 */
	function RotateHue($angle){}

	/**
	 * Saves an image in the given stream.
	 * @param wxOutputStream $stream
	 * @param wxBitmapType $type
	 * @param string $name
	 * @param string $mimetype
	 * @return bool
	 */
	function SaveFile(wxOutputStream &$stream, wxBitmapType $type, $name, $name, wxBitmapType $type, wxOutputStream &$stream, $mimetype, $name, $mimetype){}

	/**
	 * Returns a scaled version of the image.
	 * @param integer $width
	 * @param integer $height
	 * @param wxImageResizeQuality $quality
	 * @return wxImage
	 */
	function Scale($width, $height, wxImageResizeQuality $quality=null){}

	/**
	 * Sets the alpha value for the given pixel.
	 * @param integer $x
	 * @param integer $y
	 * @param integer $alpha
	 * @param bool $static_data
	 */
	function SetAlpha($x, $y, $alpha, &$alpha=NULL, $static_data=false){}

	/**
	 * This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.
	 * @param integer $data
	 * @param integer $new_width
	 * @param integer $new_height
	 * @param bool $static_data
	 */
	function SetData(&$data, $new_width, $new_height, $static_data=false, &$data, $static_data=false){}

	/**
	 * Specifies whether there is a mask or not.
	 * @param bool $hasMask
	 */
	function SetMask($hasMask=true){}

	/**
	 * Sets the mask colour for this image (and tells the image to use the mask).
	 * @param integer $red
	 * @param integer $green
	 * @param integer $blue
	 */
	function SetMaskColour($red, $green, $blue){}

	/**
	 * Sets image's mask so that the pixels that have RGB value of mr,mg,mb in mask will be masked in the image.
	 * @param wxImage $mask
	 * @param integer $mr
	 * @param integer $mg
	 * @param integer $mb
	 * @return bool
	 */
	function SetMaskFromImage(wxImage $mask, $mr, $mg, $mb){}

	/**
	 * This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.
	 * @param string $name
	 * @param integer $value
	 */
	function SetOption($name, $value, $name, $value){}

	/**
	 * Associates a palette with the image.
	 * @param wxPalette $palette
	 */
	function SetPalette(wxPalette $palette){}

	/**
	 * Sets the colour of the pixels within the given rectangle.
	 * @param wxRect $rect
	 * @param integer $red
	 * @param integer $green
	 * @param integer $blue
	 */
	function SetRGB(wxRect $rect, $red, $green, $blue){}

	/**
	 * Set the type of image returned by GetType().
	 * @param wxBitmapType $type
	 */
	function SetType(wxBitmapType $type){}

	/**
	 * Returns a resized version of this image without scaling it by adding either a border with the given colour or cropping as necessary.
	 * @param wxSize $size
	 * @param wxPoint $pos
	 * @param integer $red
	 * @param integer $green
	 * @param integer $blue
	 * @return wxImage
	 */
	function Size(wxSize $size, wxPoint $pos, $red=-1, $green=-1, $blue=-1){}
}

class wxImageHandler extends wxObject
{
	/**
	 * Returns true if this handler supports the image format contained in the given stream.
	 * @param wxInputStream $stream
	 * @param string $filename
	 * @return bool
	 */
	function CanRead(wxInputStream &$stream, $filename){}

	/**
	 * Returns the other file extensions associated with this handler.
	 * @return array
	 */
	function GetAltExtensions(){}

	/**
	 * Gets the preferred file extension associated with this handler.
	 * @return string
	 */
	function GetExtension(){}

	/**
	 * If the image file contains more than one image and the image handler is capable of retrieving these individually, this function will return the number of available images.
	 * @param wxInputStream $stream
	 * @return integer
	 */
	function GetImageCount(wxInputStream &$stream){}

	/**
	 * Gets the MIME type associated with this handler.
	 * @return string
	 */
	function GetMimeType(){}

	/**
	 * Gets the name of this handler.
	 * @return string
	 */
	function GetName(){}

	/**
	 * Gets the image type associated with this handler.
	 * @return wxBitmapType
	 */
	function GetType(){}

	/**
	 * Loads a image from a stream, putting the resulting data into image.
	 * @param wxImage $image
	 * @param wxInputStream $stream
	 * @param bool $verbose
	 * @param integer $index
	 * @return bool
	 */
	function LoadFile(wxImage &$image, wxInputStream &$stream, $verbose=true, $index=-1){}

	/**
	 * Saves a image in the output stream.
	 * @param wxImage $image
	 * @param wxOutputStream $stream
	 * @param bool $verbose
	 * @return bool
	 */
	function SaveFile(wxImage &$image, wxOutputStream &$stream, $verbose=true){}

	/**
	 * Sets the alternative file extensions associated with this handler.
	 * @param array $extensions
	 */
	function SetAltExtensions(array $extensions){}

	/**
	 * Sets the preferred file extension associated with this handler.
	 * @param string $extension
	 */
	function SetExtension($extension){}

	/**
	 * Sets the handler MIME type.
	 * @param string $mimetype
	 */
	function SetMimeType($mimetype){}

	/**
	 * Sets the handler name.
	 * @param string $name
	 */
	function SetName($name){}
}

class wxImageList extends wxObject
{
	/**
	 * Default ctor.
	 * @param integer $width
	 * @param integer $height
	 * @param bool $mask
	 * @param integer $initialCount
	 */
	function __construct($width, $height, $mask=true, $initialCount=1){}

	/**
	 * Adds a new image or images using a bitmap and optional mask bitmap.
	 * @param wxBitmap $bitmap
	 * @param wxBitmap $mask
	 * @param wxColour $maskColour
	 * @return integer
	 */
	function Add(wxBitmap $bitmap, wxBitmap $mask=null, wxBitmap $bitmap, wxColour $maskColour){}

	/**
	 * Initializes the list.
	 * @param integer $width
	 * @param integer $height
	 * @param bool $mask
	 * @param integer $initialCount
	 * @return bool
	 */
	function Create($width, $height, $mask=true, $initialCount=1){}

	/**
	 * Draws a specified image onto a device context.
	 * @param integer $index
	 * @param wxDC $dc
	 * @param integer $x
	 * @param integer $y
	 * @param integer $flags
	 * @param bool $solidBackground
	 * @return bool
	 */
	function Draw($index, wxDC &$dc, $x, $y, $flags=wxIMAGELIST_DRAW_NORMAL, $solidBackground=false){}

	/**
	 * Returns the bitmap corresponding to the given index.
	 * @param integer $index
	 * @return wxBitmap
	 */
	function GetBitmap($index){}

	/**
	 * Returns the icon corresponding to the given index.
	 * @param integer $index
	 * @return wxIcon
	 */
	function GetIcon($index){}

	/**
	 * Returns the number of images in the list.
	 * @return integer
	 */
	function GetImageCount(){}

	/**
	 * Retrieves the size of the images in the list.
	 * @param integer $index
	 * @param integer $width
	 * @param integer $height
	 * @return bool
	 */
	function GetSize($index, &$width, &$height){}

	/**
	 * Removes the image at the given position.
	 * @param integer $index
	 * @return bool
	 */
	function Remove($index){}

	/**
	 * Removes all the images in the list.
	 * @return bool
	 */
	function RemoveAll(){}

	/**
	 * Replaces the existing image with the new image.
	 * @param integer $index
	 * @param wxBitmap $bitmap
	 * @param wxBitmap $mask
	 * @return bool
	 */
	function Replace($index, wxBitmap $bitmap, wxBitmap $mask=null){}
}

class wxInfoBar extends wxControl
{
	/**
	 * Default constructor.
	 * @param wxWindow $parent
	 * @param integer $winid
	 */
	function __construct(wxWindow &$parent, $winid=wxID_ANY){}

	/**
	 * Add a button to be shown in the info bar.
	 * @param integer $btnid
	 * @param string $label
	 */
	function AddButton($btnid, $label=''){}

	/**
	 * Create the info bar window.
	 * @param wxWindow $parent
	 * @param integer $winid
	 * @return bool
	 */
	function Create(wxWindow &$parent, $winid=wxID_ANY){}

	/**
	 * Hide the info bar window.
	 */
	function Dismiss(){}

	/**
	 * Return the effect animation duration currently used.
	 * @return integer
	 */
	function GetEffectDuration(){}

	/**
	 * Return the effect currently used for hiding the bar.
	 * @return wxShowEffect
	 */
	function GetHideEffect(){}

	/**
	 * Return the effect currently used for showing the bar.
	 * @return wxShowEffect
	 */
	function GetShowEffect(){}

	/**
	 * Remove a button previously added by AddButton().
	 * @param integer $btnid
	 */
	function RemoveButton($btnid){}

	/**
	 * Set the duration of the animation used when showing or hiding the bar.
	 * @param integer $duration
	 */
	function SetEffectDuration($duration){}

	/**
	 * Overridden base class methods changes the font of the text message.
	 * @param wxFont $font
	 * @return bool
	 */
	function SetFont(wxFont $font){}

	/**
	 * Set the effects to use when showing and hiding the bar.
	 * @param wxShowEffect $showEffect
	 * @param wxShowEffect $hideEffect
	 */
	function SetShowHideEffects(wxShowEffect $showEffect, wxShowEffect $hideEffect){}

	/**
	 * Show a message in the bar.
	 * @param string $msg
	 * @param integer $flags
	 */
	function ShowMessage($msg, $flags=wxICON_NONE){}
}

class wxInitDialogEvent extends wxEvent
{
	/**
	 * Constructor.
	 * @param integer $id
	 */
	function __construct($id){}
}

class wxInputStream extends wxStreamBase
{
	/**
	 * Creates a dummy input stream.
	 */
	function __construct(){}

	/**
	 * Returns true if some data is available in the stream right now, so that calling Read() wouldn't block.
	 * @return bool
	 */
	function CanRead(){}

	/**
	 * Returns true after an attempt has been made to read past the end of the stream.
	 * @return bool
	 */
	function Eof(){}

	/**
	 * Returns the first character in the input queue and removes it, blocking until it appears if necessary.
	 * @return integer
	 */
	function GetC(){}

	/**
	 * Returns the last number of bytes read.
	 * @return integer
	 */
	function LastRead(){}

	/**
	 * Internal function.
	 * @param mixed $buffer
	 * @param integer $bufsize
	 * @return integer
	 */
	function OnSysRead($buffer, $bufsize){}

	/**
	 * Returns the first character in the input queue without removing it.
	 * @return string
	 */
	function Peek(){}

	/**
	 * Reads data from the input queue and stores it in the specified output stream.
	 * @param wxOutputStream $stream_out
	 * @return wxInputStream
	 */
	function Read(wxOutputStream &$stream_out){}

	/**
	 * Changes the stream current position.
	 * @param integer $pos
	 * @param wxSeekMode $mode
	 * @return integer
	 */
	function SeekI($pos, wxSeekMode $mode=null){}

	/**
	 * Returns the current stream position or wxInvalidOffset if it's not available (e.g.
	 * @return integer
	 */
	function TellI(){}

	/**
	 * This function acts like the previous one except that it takes only one character: it is sometimes shorter to use than the generic function.
	 * @param string $c
	 * @param mixed $buffer
	 * @param integer $size
	 * @return integer
	 */
	function Ungetch($c, $buffer, $size){}
}

class wxItemContainer extends wxItemContainerImmutable
{
	/**
	 * Appends item into the control.
	 * @param string $item
	 * @param array $items
	 * @return integer
	 */
	function Append($item, array $items){}

	/**
	 * Deletes an item from the control.
	 * @param integer $n
	 */
	function Delete($n){}

	/**
	 * Inserts item into the control.
	 * @param string $item
	 * @param integer $pos
	 * @param array $items
	 * @return integer
	 */
	function Insert($item, $pos, array $items, $pos){}

	/**
	 * Removes all items from the control.
	 */
	function Clear(){}

	/**
	 * Replaces the current control contents with the given items.
	 * @param array $items
	 * @param mixed $clientData
	 */
	function Set(array $items, $clientData){}
}

class wxItemContainerImmutable
{
	/**
	 * Finds an item whose label matches the given string.
	 * @param string $string
	 * @param bool $caseSensitive
	 * @return integer
	 */
	function FindString($string, $caseSensitive=false){}

	/**
	 * Returns the label of the item with the given index.
	 * @param integer $n
	 * @return string
	 */
	function GetString($n){}

	/**
	 * Returns the number of items in the control.
	 * @return integer
	 */
	function GetCount(){}

	/**
	 * Returns the index of the selected item or wxNOT_FOUND if no item is selected.
	 * @return integer
	 */
	function GetSelection(){}

	/**
	 * Returns the label of the selected item or an empty string if no item is selected.
	 * @return string
	 */
	function GetStringSelection(){}

	/**
	 * Returns the array of the labels of all items in the control.
	 * @return array
	 */
	function GetStrings(){}

	/**
	 * Sets the selection to the given item n or removes the selection entirely if n == wxNOT_FOUND.
	 * @param integer $n
	 */
	function SetSelection($n){}

	/**
	 * Sets the label for the given item.
	 * @param integer $n
	 * @param string $string
	 */
	function SetString($n, $string){}

	/**
	 * Selects the item with the specified string in the control.
	 * @param string $string
	 * @return bool
	 */
	function SetStringSelection($string){}
}

class wxKeyEvent extends wxKeyboardState
{
	/**
	 * Constructor.
	 * @param integer $keyEventType
	 */
	function __construct($keyEventType=wxEVT_NULL){}

	/**
	 * Allow normal key events generation.
	 */
	function DoAllowNextEvent(){}

	/**
	 * Returns the key code of the key that generated this event.
	 * @return integer
	 */
	function GetKeyCode(){}

	/**
	 * Obtains the position (in client coordinates) at which the key was pressed.
	 * @param integer $x
	 * @param integer $y
	 */
	function GetPosition(&$x, &$y){}

	/**
	 * Returns the raw key code for this event.
	 * @return integer
	 */
	function GetRawKeyCode(){}

	/**
	 * Returns the low level key flags for this event.
	 * @return integer
	 */
	function GetRawKeyFlags(){}

	/**
	 * Returns the X position (in client coordinates) of the event.
	 * @return integer
	 */
	function GetX(){}

	/**
	 * Returns the Y position (in client coordinates) of the event.
	 * @return integer
	 */
	function GetY(){}

	/**
	 * Returns true if the key is in the given key category.
	 * @param integer $category
	 * @return bool
	 */
	function IsKeyInCategory($category){}

	/**
	 * Returns true if DoAllowNextEvent() had been called, false by default.
	 * @return bool
	 */
	function IsNextEventAllowed(){}
}

class wxKeyboardState
{
	/**
	 * Constructor initializes the modifier key settings.
	 * @param bool $controlDown
	 * @param bool $shiftDown
	 * @param bool $altDown
	 * @param bool $metaDown
	 */
	function __construct($controlDown=false, $shiftDown=false, $altDown=false, $metaDown=false){}

	/**
	 * Returns true if the Alt key is pressed.
	 * @return bool
	 */
	function AltDown(){}

	/**
	 * Returns true if the key used for command accelerators is pressed.
	 * @return bool
	 */
	function CmdDown(){}

	/**
	 * Returns true if the Control key or Apple/Command key under OS X is pressed.
	 * @return bool
	 */
	function ControlDown(){}

	/**
	 * Return the bit mask of all pressed modifier keys.
	 * @return integer
	 */
	function GetModifiers(){}

	/**
	 * Returns true if any modifiers at all are pressed.
	 * @return bool
	 */
	function HasModifiers(){}

	/**
	 * Returns true if the Meta/Windows/Apple key is pressed.
	 * @return bool
	 */
	function MetaDown(){}

	/**
	 * Returns true if the Control key (also under OS X).
	 * @return bool
	 */
	function RawControlDown(){}

	/**
	 * SetAltDown
	 * @param bool $down
	 */
	function SetAltDown($down){}

	/**
	 * SetControlDown
	 * @param bool $down
	 */
	function SetControlDown($down){}

	/**
	 * SetMetaDown
	 * @param bool $down
	 */
	function SetMetaDown($down){}

	/**
	 * SetRawControlDown
	 * @param bool $down
	 */
	function SetRawControlDown($down){}

	/**
	 * SetShiftDown
	 * @param bool $down
	 */
	function SetShiftDown($down){}

	/**
	 * Returns true if the Shift key is pressed.
	 * @return bool
	 */
	function ShiftDown(){}
}

class wxLayoutAlgorithm extends wxObject
{
	/**
	 * Default constructor.
	 */
	function __construct(){}

	/**
	 * Lays out the children of a normal frame.
	 * @param wxFrame $frame
	 * @param wxWindow $mainWindow
	 * @return bool
	 */
	function LayoutFrame(wxFrame &$frame, wxWindow &$mainWindow=null){}

	/**
	 * Lays out the children of an MDI parent frame.
	 * @param wxMDIParentFrame $frame
	 * @param wxRect $rect
	 * @return bool
	 */
	function LayoutMDIFrame(wxMDIParentFrame &$frame, wxRect &$rect=null){}

	/**
	 * Lays out the children of a normal frame or other window.
	 * @param wxWindow $parent
	 * @param wxWindow $mainWindow
	 * @return bool
	 */
	function LayoutWindow(wxWindow &$parent, wxWindow &$mainWindow=null){}
}

class wxLayoutConstraints extends wxObject
{
	/**
	 * wxLayoutConstraints
	 */
	function __construct(){}

	/**
	 * AreSatisfied
	 * @return bool
	 */
	function AreSatisfied(){}

	/**
	 * SatisfyConstraints
	 * @param wxWindow $win
	 * @param integer $noChanges
	 * @return bool
	 */
	function SatisfyConstraints(wxWindow &$win, &$noChanges){}
}

class wxListBox extends wxControlWithItems
{
	/**
	 * Constructor, creating and showing a list box.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param array $choices
	 * @param integer $style
	 * @param wxValidator $validator
	 * @param string $name
	 */
	function __construct(wxWindow &$parent, $id, wxPoint $pos, wxSize $size, array $choices, $style, wxValidator $validator=null, $name=wxListBoxNameStr){}

	/**
	 * Creates the listbox for two-step construction.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param array $choices
	 * @param integer $style
	 * @param wxValidator $validator
	 * @param string $name
	 * @param integer $n
	 * @return bool
	 */
	function Create(wxWindow &$parent, $id, wxPoint $pos, wxSize $size, array $choices, $style, wxValidator $validator=null, $name=wxListBoxNameStr, wxWindow &$parent, $id, wxPoint $pos=null, wxSize $size=null, $n, $choices=NULL, $style, wxValidator $validator=null, $name=wxListBoxNameStr){}

	/**
	 * Deselects an item in the list box.
	 * @param integer $n
	 */
	function Deselect($n){}

	/**
	 * Ensure that the item with the given index is currently shown.
	 * @param integer $n
	 */
	function EnsureVisible($n){}

	/**
	 * Finds an item whose label matches the given string.
	 * @param string $string
	 * @param bool $caseSensitive
	 * @return integer
	 */
	function FindString($string, $caseSensitive=false){}

	/**
	 * Returns the number of items in the control.
	 * @return integer
	 */
	function GetCount(){}

	/**
	 * Returns the index of the selected item or wxNOT_FOUND if no item is selected.
	 * @return integer
	 */
	function GetSelection(){}

	/**
	 * Returns the label of the item with the given index.
	 * @param integer $n
	 * @return string
	 */
	function GetString($n){}

	/**
	 * This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.
	 * @param integer $x
	 * @param integer $y
	 * @param wxPoint $point
	 * @return integer
	 */
	function HitTest($x, $y, wxPoint $point){}

	/**
	 * Insert the given number of strings before the specified position.
	 * @param array $items
	 * @param integer $pos
	 */
	function InsertItems(array $items, $pos){}

	/**
	 * Determines whether an item is selected.
	 * @param integer $n
	 * @return bool
	 */
	function IsSelected($n){}

	/**
	 * Return true if the listbox has wxLB_SORT style.
	 * @return bool
	 */
	function IsSorted(){}

	/**
	 * Set the specified item to be the first visible item.
	 * @param string $string
	 * @param integer $n
	 */
	function SetFirstItem($string, $n){}

	/**
	 * Sets the selection to the given item n or removes the selection entirely if n == wxNOT_FOUND.
	 * @param integer $n
	 */
	function SetSelection($n){}

	/**
	 * Sets the label for the given item.
	 * @param integer $n
	 * @param string $string
	 */
	function SetString($n, $string){}

	/**
	 * Selects the item with the specified string in the control.
	 * @param string $string
	 * @param string $s
	 * @param bool $select
	 * @return bool
	 */
	function SetStringSelection($string, $s, $select){}
}

class wxListCtrl extends wxControl
{
	/**
	 * Default constructor.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param wxValidator $validator
	 * @param string $name
	 */
	function __construct(wxWindow &$parent, $id, wxPoint $pos=null, wxSize $size=null, $style=wxLC_ICON, wxValidator $validator=null, $name=wxListCtrlNameStr){}

	/**
	 * Arranges the items in icon or small icon view.
	 * @param integer $flag
	 * @return bool
	 */
	function Arrange($flag=wxLIST_ALIGN_DEFAULT){}

	/**
	 * Sets the image list associated with the control and takes ownership of it (i.e.
	 * @param wxImageList $imageList
	 * @param integer $which
	 */
	function AssignImageList(wxImageList &$imageList, $which){}

	/**
	 * Deletes all items and all columns.
	 */
	function ClearAll(){}

	/**
	 * Creates the list control.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param wxValidator $validator
	 * @param string $name
	 * @return bool
	 */
	function Create(wxWindow &$parent, $id, wxPoint $pos=null, wxSize $size=null, $style=wxLC_ICON, wxValidator $validator=null, $name=wxListCtrlNameStr){}

	/**
	 * Deletes all items in the list control.
	 * @return bool
	 */
	function DeleteAllItems(){}

	/**
	 * Deletes a column.
	 * @param integer $col
	 * @return bool
	 */
	function DeleteColumn($col){}

	/**
	 * Deletes the specified item.
	 * @param integer $item
	 * @return bool
	 */
	function DeleteItem($item){}

	/**
	 * Starts editing the label of the given item.
	 * @param integer $item
	 * @param wxClassInfo $textControlClass
	 * @return wxTextCtrl
	 */
	function EditLabel($item, wxClassInfo &$textControlClass=null){}

	/**
	 * Ensures this item is visible.
	 * @param integer $item
	 * @return bool
	 */
	function EnsureVisible($item){}

	/**
	 * Find an item whose label matches this string, starting from start or the beginning if start is -1.
	 * @param integer $start
	 * @param string $str
	 * @param bool $partial
	 * @param integer $data
	 * @param wxPoint $pt
	 * @param integer $direction
	 * @return integer
	 */
	function FindItem($start, $str, $partial=false, $start, $data, $start, wxPoint $pt, $direction){}

	/**
	 * Gets information about this column.
	 * @param integer $col
	 * @param wxListItem $item
	 * @return bool
	 */
	function GetColumn($col, wxListItem &$item){}

	/**
	 * Returns the number of columns.
	 * @return integer
	 */
	function GetColumnCount(){}

	/**
	 * Gets the column width (report view only).
	 * @param integer $col
	 * @return integer
	 */
	function GetColumnWidth($col){}

	/**
	 * Gets the number of items that can fit vertically in the visible area of the list control (list or report view) or the total number of items in the list control (icon or small icon view).
	 * @return integer
	 */
	function GetCountPerPage(){}

	/**
	 * Returns the edit control being currently used to edit a label.
	 * @return wxTextCtrl
	 */
	function GetEditControl(){}

	/**
	 * Returns the specified image list.
	 * @param integer $which
	 * @return wxImageList
	 */
	function GetImageList($which){}

	/**
	 * Gets information about the item.
	 * @param wxListItem $info
	 * @return bool
	 */
	function GetItem(wxListItem &$info){}

	/**
	 * Returns the colour for this item.
	 * @param integer $item
	 * @return wxColour
	 */
	function GetItemBackgroundColour($item){}

	/**
	 * Returns the number of items in the list control.
	 * @return integer
	 */
	function GetItemCount(){}

	/**
	 * Returns the item's font.
	 * @param integer $item
	 * @return wxFont
	 */
	function GetItemFont($item){}

	/**
	 * Returns the position of the item, in icon or small icon view.
	 * @param integer $item
	 * @param wxPoint $pos
	 * @return bool
	 */
	function GetItemPosition($item, wxPoint &$pos){}

	/**
	 * Returns the rectangle representing the item's size and position, in physical coordinates.
	 * @param integer $item
	 * @param wxRect $rect
	 * @param integer $code
	 * @return bool
	 */
	function GetItemRect($item, wxRect &$rect, $code=wxLIST_RECT_BOUNDS){}

	/**
	 * Retrieves the spacing between icons in pixels: horizontal spacing is returned as x component of the wxSize object and the vertical spacing as its y component.
	 * @return wxSize
	 */
	function GetItemSpacing(){}

	/**
	 * Gets the item state.
	 * @param integer $item
	 * @param integer $stateMask
	 * @return integer
	 */
	function GetItemState($item, $stateMask){}

	/**
	 * Gets the item text for this item.
	 * @param integer $item
	 * @param integer $col
	 * @return string
	 */
	function GetItemText($item, $col){}

	/**
	 * Returns the colour for this item.
	 * @param integer $item
	 * @return wxColour
	 */
	function GetItemTextColour($item){}

	/**
	 * Searches for an item with the given geometry or state, starting from item but excluding the item itself.
	 * @param integer $item
	 * @param integer $geometry
	 * @param integer $state
	 * @return integer
	 */
	function GetNextItem($item, $geometry=wxLIST_NEXT_ALL, $state=wxLIST_STATE_DONTCARE){}

	/**
	 * Returns the number of selected items in the list control.
	 * @return integer
	 */
	function GetSelectedItemCount(){}

	/**
	 * Returns the rectangle representing the size and position, in physical coordinates, of the given subitem, i.e.
	 * @param integer $item
	 * @param integer $subItem
	 * @param wxRect $rect
	 * @param integer $code
	 * @return bool
	 */
	function GetSubItemRect($item, $subItem, wxRect &$rect, $code=wxLIST_RECT_BOUNDS){}

	/**
	 * Gets the text colour of the list control.
	 * @return wxColour
	 */
	function GetTextColour(){}

	/**
	 * Gets the index of the topmost visible item when in list or report view.
	 * @return integer
	 */
	function GetTopItem(){}

	/**
	 * Returns the rectangle taken by all items in the control.
	 * @return wxRect
	 */
	function GetViewRect(){}

	/**
	 * For report view mode (only), inserts a column.
	 * @param integer $col
	 * @param wxListItem $info
	 * @param string $heading
	 * @param integer $format
	 * @param integer $width
	 * @return integer
	 */
	function InsertColumn($col, wxListItem $info, $col, $heading, $format=wxLIST_FORMAT_LEFT, $width=wxLIST_AUTOSIZE){}

	/**
	 * Inserts an item, returning the index of the new item if successful, -1 otherwise.
	 * @param wxListItem $info
	 * @param integer $index
	 * @param string $label
	 * @param integer $imageIndex
	 * @return integer
	 */
	function InsertItem(wxListItem &$info, $index, $label, $index, $imageIndex, $index, $label, $imageIndex){}

	/**
	 * This function may be overridden in the derived class for a control with wxLC_VIRTUAL style.
	 * @param integer $item
	 * @return wxListItemAttr
	 */
	function OnGetItemAttr($item){}

	/**
	 * Override this function in the derived class for a control with wxLC_VIRTUAL and wxLC_REPORT styles in order to specify the image index for the given line and column.
	 * @param integer $item
	 * @param integer $column
	 * @return integer
	 */
	function OnGetItemColumnImage($item, $column){}

	/**
	 * This function must be overridden in the derived class for a control with wxLC_VIRTUAL style having an "image list" (see SetImageList(); if the control doesn't have an image list, it is not necessary to override it).
	 * @param integer $item
	 * @return integer
	 */
	function OnGetItemImage($item){}

	/**
	 * This function must be overridden in the derived class for a control with wxLC_VIRTUAL style.
	 * @param integer $item
	 * @param integer $column
	 * @return string
	 */
	function OnGetItemText($item, $column){}

	/**
	 * Redraws the given item.
	 * @param integer $item
	 */
	function RefreshItem($item){}

	/**
	 * Redraws the items between itemFrom and itemTo.
	 * @param integer $itemFrom
	 * @param integer $itemTo
	 */
	function RefreshItems($itemFrom, $itemTo){}

	/**
	 * Scrolls the list control.
	 * @param integer $dx
	 * @param integer $dy
	 * @return bool
	 */
	function ScrollList($dx, $dy){}

	/**
	 * Sets the background colour.
	 * @param wxColour $col
	 * @return bool
	 */
	function SetBackgroundColour(wxColour $col){}

	/**
	 * Sets information about this column.
	 * @param integer $col
	 * @param wxListItem $item
	 * @return bool
	 */
	function SetColumn($col, wxListItem &$item){}

	/**
	 * Sets the column width.
	 * @param integer $col
	 * @param integer $width
	 * @return bool
	 */
	function SetColumnWidth($col, $width){}

	/**
	 * Sets the image list associated with the control.
	 * @param wxImageList $imageList
	 * @param integer $which
	 */
	function SetImageList(wxImageList &$imageList, $which){}

	/**
	 * Sets an item string field at a particular column.
	 * @param integer $index
	 * @param integer $column
	 * @param string $label
	 * @param integer $imageId
	 * @param wxListItem $info
	 * @return bool
	 */
	function SetItem($index, $column, $label, $imageId=-1, wxListItem &$info){}

	/**
	 * Sets the background colour for this item.
	 * @param integer $item
	 * @param wxColour $col
	 */
	function SetItemBackgroundColour($item, wxColour $col){}

	/**
	 * Sets the image associated with the item.
	 * @param integer $item
	 * @param integer $column
	 * @param integer $image
	 * @return bool
	 */
	function SetItemColumnImage($item, $column, $image){}

	/**
	 * This method can only be used with virtual list controls.
	 * @param integer $count
	 */
	function SetItemCount($count){}

	/**
	 * Associates application-defined data with this item.
	 * @param integer $item
	 * @param integer $data
	 * @return bool
	 */
	function SetItemData($item, $data){}

	/**
	 * Sets the item's font.
	 * @param integer $item
	 * @param wxFont $font
	 */
	function SetItemFont($item, wxFont $font){}

	/**
	 * Sets the position of the item, in icon or small icon view.
	 * @param integer $item
	 * @param wxPoint $pos
	 * @return bool
	 */
	function SetItemPosition($item, wxPoint $pos){}

	/**
	 * Sets the item state.
	 * @param integer $item
	 * @param integer $state
	 * @param integer $stateMask
	 * @return bool
	 */
	function SetItemState($item, $state, $stateMask){}

	/**
	 * Sets the item text for this item.
	 * @param integer $item
	 * @param string $text
	 */
	function SetItemText($item, $text){}

	/**
	 * Sets the colour for this item.
	 * @param integer $item
	 * @param wxColour $col
	 */
	function SetItemTextColour($item, wxColour $col){}

	/**
	 * Adds or removes a single window style.
	 * @param integer $style
	 * @param bool $add
	 */
	function SetSingleStyle($style, $add=true){}

	/**
	 * Sets the text colour of the list control.
	 * @param wxColour $col
	 */
	function SetTextColour(wxColour $col){}

	/**
	 * Sets the whole window style, deleting all items.
	 * @param integer $style
	 */
	function SetWindowStyleFlag($style){}
}

class wxListEvent extends wxNotifyEvent
{
	/**
	 * Constructor.
	 * @param integer $commandType
	 * @param integer $id
	 */
	function __construct($commandType=wxEVT_NULL, $id){}

	/**
	 * For EVT_LIST_CACHE_HINT event only: return the first item which the list control advises us to cache.
	 * @return integer
	 */
	function GetCacheFrom(){}

	/**
	 * For EVT_LIST_CACHE_HINT event only: return the last item (inclusive) which the list control advises us to cache.
	 * @return integer
	 */
	function GetCacheTo(){}

	/**
	 * The column position: it is only used with COL events.
	 * @return integer
	 */
	function GetColumn(){}

	/**
	 * The data.
	 * @return integer
	 */
	function GetData(){}

	/**
	 * The image.
	 * @return integer
	 */
	function GetImage(){}

	/**
	 * The item index.
	 * @return integer
	 */
	function GetIndex(){}

	/**
	 * An item object, used by some events.
	 * @return wxListItem
	 */
	function GetItem(){}

	/**
	 * Key code if the event is a keypress event.
	 * @return integer
	 */
	function GetKeyCode(){}

	/**
	 * The (new) item label for EVT_LIST_END_LABEL_EDIT event.
	 * @return string
	 */
	function GetLabel(){}

	/**
	 * The mask.
	 * @return integer
	 */
	function GetMask(){}

	/**
	 * The position of the mouse pointer if the event is a drag event.
	 * @return wxPoint
	 */
	function GetPoint(){}

	/**
	 * The text.
	 * @return string
	 */
	function GetText(){}

	/**
	 * This method only makes sense for EVT_LIST_END_LABEL_EDIT message and returns true if it the label editing has been cancelled by the user (GetLabel() returns an empty string in this case but it doesn't allow the application to distinguish between really cancelling the edit and the admittedly rare case when the user wants to rename it to an empty string).
	 * @return bool
	 */
	function IsEditCancelled(){}
}

class wxListItem
{
	/**
	 * Constructor.
	 */
	function __construct(){}

	/**
	 * Resets the item state to the default.
	 */
	function Clear(){}

	/**
	 * Returns the alignment for this item.
	 * @return wxListColumnFormat
	 */
	function GetAlign(){}

	/**
	 * Returns the background colour for this item.
	 * @return wxColour
	 */
	function GetBackgroundColour(){}

	/**
	 * Returns the zero-based column; meaningful only in report mode.
	 * @return integer
	 */
	function GetColumn(){}

	/**
	 * Returns the font used to display the item.
	 * @return wxFont
	 */
	function GetFont(){}

	/**
	 * Returns the zero-based item position.
	 * @return integer
	 */
	function GetId(){}

	/**
	 * Returns the zero-based index of the image associated with the item into the image list.
	 * @return integer
	 */
	function GetImage(){}

	/**
	 * Returns a bit mask indicating which fields of the structure are valid.
	 * @return integer
	 */
	function GetMask(){}

	/**
	 * Returns a bit field representing the state of the item.
	 * @return integer
	 */
	function GetState(){}

	/**
	 * Returns the label/header text.
	 * @return string
	 */
	function GetText(){}

	/**
	 * Returns the text colour.
	 * @return wxColour
	 */
	function GetTextColour(){}

	/**
	 * Meaningful only for column headers in report mode.
	 * @return integer
	 */
	function GetWidth(){}

	/**
	 * Sets the alignment for the item.
	 * @param wxListColumnFormat $align
	 */
	function SetAlign(wxListColumnFormat $align){}

	/**
	 * Sets the background colour for the item.
	 * @param wxColour $colBack
	 */
	function SetBackgroundColour(wxColour $colBack){}

	/**
	 * Sets the zero-based column.
	 * @param integer $col
	 */
	function SetColumn($col){}

	/**
	 * Sets client data for the item.
	 * @param integer $data
	 */
	function SetData($data){}

	/**
	 * Sets the font for the item.
	 * @param wxFont $font
	 */
	function SetFont(wxFont $font){}

	/**
	 * Sets the zero-based item position.
	 * @param integer $id
	 */
	function SetId($id){}

	/**
	 * Sets the zero-based index of the image associated with the item into the image list.
	 * @param integer $image
	 */
	function SetImage($image){}

	/**
	 * Sets the mask of valid fields.
	 * @param integer $mask
	 */
	function SetMask($mask){}

	/**
	 * Sets the item state flags (note that the valid state flags are influenced by the value of the state mask, see wxListItem::SetStateMask).
	 * @param integer $state
	 */
	function SetState($state){}

	/**
	 * Sets the bitmask that is used to determine which of the state flags are to be set.
	 * @param integer $stateMask
	 */
	function SetStateMask($stateMask){}

	/**
	 * Sets the text label for the item.
	 * @param string $text
	 */
	function SetText($text){}

	/**
	 * Sets the text colour for the item.
	 * @param wxColour $colText
	 */
	function SetTextColour(wxColour $colText){}

	/**
	 * Meaningful only for column headers in report mode.
	 * @param integer $width
	 */
	function SetWidth($width){}
}

class wxListItemAttr
{
	/**
	 * Default Constructor.
	 * @param wxColour $colText
	 * @param wxColour $colBack
	 * @param wxFont $font
	 */
	function __construct(wxColour $colText, wxColour $colBack, wxFont $font){}

	/**
	 * Returns the currently set background color.
	 * @return wxColour
	 */
	function GetBackgroundColour(){}

	/**
	 * Returns the currently set font.
	 * @return wxFont
	 */
	function GetFont(){}

	/**
	 * Returns the currently set text color.
	 * @return wxColour
	 */
	function GetTextColour(){}

	/**
	 * Returns true if the currently set background color is valid.
	 * @return bool
	 */
	function HasBackgroundColour(){}

	/**
	 * Returns true if the currently set font is valid.
	 * @return bool
	 */
	function HasFont(){}

	/**
	 * Returns true if the currently set text color is valid.
	 * @return bool
	 */
	function HasTextColour(){}

	/**
	 * Sets a new background color.
	 * @param wxColour $colour
	 */
	function SetBackgroundColour(wxColour $colour){}

	/**
	 * Sets a new font.
	 * @param wxFont $font
	 */
	function SetFont(wxFont $font){}

	/**
	 * Sets a new text color.
	 * @param wxColour $colour
	 */
	function SetTextColour(wxColour $colour){}
}

class wxListView extends wxListCtrl
{
	/**
	 * Resets the column image -- after calling this function, no image will be shown.
	 * @param integer $col
	 */
	function ClearColumnImage($col){}

	/**
	 * Sets focus to the item with the given index.
	 * @param integer $index
	 */
	function Focus($index){}

	/**
	 * Returns the first selected item in a (presumably) multiple selection control.
	 * @return integer
	 */
	function GetFirstSelected(){}

	/**
	 * Returns the currently focused item or -1 if none.
	 * @return integer
	 */
	function GetFocusedItem(){}

	/**
	 * Used together with GetFirstSelected() to iterate over all selected items in the control.
	 * @param integer $item
	 * @return integer
	 */
	function GetNextSelected($item){}

	/**
	 * Returns true if the item with the given index is selected, false otherwise.
	 * @param integer $index
	 * @return bool
	 */
	function IsSelected($index){}

	/**
	 * Selects or unselects the given item.
	 * @param integer $n
	 * @param bool $on
	 */
	function Select($n, $on=true){}

	/**
	 * Sets the column image for the specified column.
	 * @param integer $col
	 * @param integer $image
	 */
	function SetColumnImage($col, $image){}
}

class wxListbook extends wxBookCtrlBase
{
	/**
	 * Constructs a listbook control.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param string $name
	 */
	function __construct(wxWindow &$parent, $id, wxPoint $pos=null, wxSize $size=null, $style, $name=wxEmptyString){}

	/**
	 * Returns the wxListView associated with the control.
	 * @return wxListView
	 */
	function GetListView(){}
}

class wxLog
{
	/**
	 * Add the mask to the list of allowed masks for wxLogTrace().
	 * @param string $mask
	 */
	function AddTraceMask($mask){}

	/**
	 * Removes all trace masks previously set with AddTraceMask().
	 */
	function ClearTraceMasks(){}

	/**
	 * Disables time stamping of the log messages.
	 */
	function DisableTimestamp(){}

	/**
	 * Called to log the specified string.
	 * @param string $msg
	 */
	function DoLogText($msg){}

	/**
	 * Called to log the specified string at given level.
	 * @param integer $level
	 * @param string $msg
	 */
	function DoLogTextAtLevel($level, $msg){}

	/**
	 * Instructs wxLog to not create new log targets on the fly if there is none currently (see GetActiveTarget()).
	 */
	function DontCreateOnDemand(){}

	/**
	 * Globally enable or disable logging.
	 * @param bool $enable
	 * @return bool
	 */
	function EnableLogging($enable=true){}

	/**
	 * Some of wxLog implementations, most notably the standard wxLogGui class, buffer the messages (for example, to avoid showing the user a zillion of modal message boxes one after another -- which would be really annoying).
	 */
	function Flush(){}

	/**
	 * Flushes the current log target if any, does nothing if there is none.
	 */
	function FlushActive(){}

	/**
	 * Returns the pointer to the active log target (may be NULL).
	 * @return wxLog
	 */
	function GetActiveTarget(){}

	/**
	 * Returns the current log level limit.
	 * @return integer
	 */
	function GetLogLevel(){}

	/**
	 * Returns whether the repetition counting mode is enabled.
	 * @return bool
	 */
	function GetRepetitionCounting(){}

	/**
	 * Returns the current timestamp format string.
	 * @return string
	 */
	function GetTimestamp(){}

	/**
	 * Returns the currently allowed list of string trace masks.
	 * @return array
	 */
	function GetTraceMasks(){}

	/**
	 * Returns whether the verbose mode is currently active.
	 * @return bool
	 */
	function GetVerbose(){}

	/**
	 * Returns true if the mask is one of allowed masks for wxLogTrace().
	 * @param string $mask
	 * @return bool
	 */
	function IsAllowedTraceMask($mask){}

	/**
	 * Returns true if logging is enabled at all now.
	 * @return bool
	 */
	function IsEnabled(){}

	/**
	 * Returns true if logging at this level is enabled for the current thread.
	 * @param integer $level
	 * @param string $component
	 * @return bool
	 */
	function IsLevelEnabled($level, $component){}

	/**
	 * Remove the mask from the list of allowed masks for wxLogTrace().
	 * @param string $mask
	 */
	function RemoveTraceMask($mask){}

	/**
	 * Resumes logging previously suspended by a call to Suspend().
	 */
	function Resume(){}

	/**
	 * Sets the specified log target as the active one.
	 * @param wxLog $logtarget
	 * @return wxLog
	 */
	function SetActiveTarget(wxLog &$logtarget){}

	/**
	 * Sets the log level for the given component.
	 * @param string $component
	 * @param integer $level
	 */
	function SetComponentLevel($component, $level){}

	/**
	 * Specifies that log messages with level greater (numerically) than logLevel should be ignored and not sent to the active log target.
	 * @param integer $logLevel
	 */
	function SetLogLevel($logLevel){}

	/**
	 * Enables logging mode in which a log message is logged once, and in case exactly the same message successively repeats one or more times, only the number of repetitions is logged.
	 * @param bool $repetCounting
	 */
	function SetRepetitionCounting($repetCounting=true){}

	/**
	 * Sets a thread-specific log target.
	 * @param wxLog $logger
	 * @return wxLog
	 */
	function SetThreadActiveTarget(wxLog &$logger){}

	/**
	 * Sets the timestamp format prepended by the default log targets to all messages.
	 * @param string $format
	 */
	function SetTimestamp($format){}

	/**
	 * Activates or deactivates verbose mode in which the verbose messages are logged as the normal ones instead of being silently dropped.
	 * @param bool $verbose
	 */
	function SetVerbose($verbose=true){}

	/**
	 * Suspends the logging until Resume() is called.
	 */
	function Suspend(){}
}

class wxLogBuffer extends wxLog
{
	/**
	 * The default ctor does nothing.
	 */
	function __construct(){}

	/**
	 * Shows all the messages collected so far to the user (using a message box in the GUI applications or by printing them out to the console in text mode) and clears the internal buffer.
	 */
	function Flush(){}

	/**
	 * Returns the current buffer contains.
	 * @return string
	 */
	function GetBuffer(){}
}

class wxLogChain extends wxLog
{
	/**
	 * Sets the specified logger (which may be NULL) as the default log target but the log messages are also passed to the previous log target if any.
	 * @param wxLog $logger
	 */
	function __construct(wxLog &$logger){}

	/**
	 * Detaches the old log target so it won't be destroyed when the wxLogChain object is destroyed.
	 */
	function DetachOldLog(){}

	/**
	 * Returns the pointer to the previously active log target (which may be NULL).
	 * @return wxLog
	 */
	function GetOldLog(){}

	/**
	 * Returns true if the messages are passed to the previously active log target (default) or false if PassMessages() had been called.
	 * @return bool
	 */
	function IsPassingMessages(){}

	/**
	 * By default, the log messages are passed to the previously active log target.
	 * @param bool $passMessages
	 */
	function PassMessages($passMessages){}

	/**
	 * Sets another log target to use (may be NULL).
	 * @param wxLog $logger
	 */
	function SetLog(wxLog &$logger){}
}

class wxLogGui extends wxLog
{
	/**
	 * Default constructor.
	 */
	function __construct(){}

	/**
	 * Presents the accumulated log messages, if any, to the user.
	 */
	function Flush(){}
}

class wxLogInterposer extends wxLogChain
{
	/**
	 * The default constructor installs this object as the current active log target.
	 */
	function __construct(){}
}

class wxLogTextCtrl extends wxLog
{
	/**
	 * Constructs a log target which sends all the log messages to the given text control.
	 * @param wxTextCtrl $pTextCtrl
	 */
	function __construct(wxTextCtrl &$pTextCtrl){}
}

class wxLogWindow extends wxLogInterposer
{
	/**
	 * Creates the log frame window and starts collecting the messages in it.
	 * @param wxWindow $pParent
	 * @param string $szTitle
	 * @param bool $show
	 * @param bool $passToOld
	 */
	function __construct(wxWindow &$pParent, $szTitle, $show=true, $passToOld=true){}

	/**
	 * Returns the associated log frame window.
	 * @return wxFrame
	 */
	function GetFrame(){}

	/**
	 * Called if the user closes the window interactively, will not be called if it is destroyed for another reason (such as when program exits).
	 * @param wxFrame $frame
	 * @return bool
	 */
	function OnFrameClose(wxFrame &$frame){}

	/**
	 * Called immediately after the log frame creation allowing for any extra initializations.
	 * @param wxFrame $frame
	 */
	function OnFrameCreate(wxFrame &$frame){}

	/**
	 * Called right before the log frame is going to be deleted: will always be called unlike OnFrameClose().
	 * @param wxFrame $frame
	 */
	function OnFrameDelete(wxFrame &$frame){}

	/**
	 * Shows or hides the frame.
	 * @param bool $show
	 */
	function Show($show=true){}
}

class wxMDIChildFrame extends wxFrame
{
	/**
	 * Constructor, creating the window.
	 * @param wxMDIParentFrame $parent
	 * @param integer $id
	 * @param string $title
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param string $name
	 */
	function __construct(wxMDIParentFrame &$parent, $id, $title, wxPoint $pos=null, wxSize $size=null, $style=wxDEFAULT_FRAME_STYLE, $name=wxFrameNameStr){}

	/**
	 * Activates this MDI child frame.
	 */
	function Activate(){}

	/**
	 * Used in two-step frame construction.
	 * @param wxMDIParentFrame $parent
	 * @param integer $id
	 * @param string $title
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param string $name
	 * @return bool
	 */
	function Create(wxMDIParentFrame &$parent, $id, $title, wxPoint $pos=null, wxSize $size=null, $style=wxDEFAULT_FRAME_STYLE, $name=wxFrameNameStr){}

	/**
	 * Returns the MDI parent frame containing this child.
	 * @return wxMDIParentFrame
	 */
	function GetMDIParent(){}

	/**
	 * Returns true for MDI children in TDI implementations.
	 * @return bool
	 */
	function IsAlwaysMaximized(){}

	/**
	 * Maximizes this MDI child frame.
	 * @param bool $maximize
	 */
	function Maximize($maximize=true){}

	/**
	 * Restores this MDI child frame (unmaximizes).
	 */
	function Restore(){}
}

class wxMDIClientWindow extends wxWindow
{
	/**
	 * Default constructor.
	 */
	function __construct(){}

	/**
	 * Called by wxMDIParentFrame immediately after creating the client window.
	 * @param wxMDIParentFrame $parent
	 * @param integer $style
	 * @return bool
	 */
	function CreateClient(wxMDIParentFrame &$parent, $style){}
}

class wxMDIParentFrame extends wxFrame
{
	/**
	 * Default constructor.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param string $title
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param string $name
	 */
	function __construct(wxWindow &$parent, $id, $title, wxPoint $pos=null, wxSize $size=null, $style=null, $name=wxFrameNameStr){}

	/**
	 * Activates the MDI child following the currently active one.
	 */
	function ActivateNext(){}

	/**
	 * Activates the MDI child preceding the currently active one.
	 */
	function ActivatePrevious(){}

	/**
	 * Arranges any iconized (minimized) MDI child windows.
	 */
	function ArrangeIcons(){}

	/**
	 * Arranges the MDI child windows in a cascade.
	 */
	function Cascade(){}

	/**
	 * Used in two-step frame construction.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param string $title
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param string $name
	 * @return bool
	 */
	function Create(wxWindow &$parent, $id, $title, wxPoint $pos=null, wxSize $size=null, $style=null, $name=wxFrameNameStr){}

	/**
	 * Returns a pointer to the active MDI child, if there is one.
	 * @return wxMDIChildFrame
	 */
	function GetActiveChild(){}

	/**
	 * Returns the current MDI Window menu.
	 * @return wxMenu
	 */
	function GetWindowMenu(){}

	/**
	 * Returns whether the MDI implementation is tab-based.
	 * @return bool
	 */
	function IsTDI(){}

	/**
	 * Override this to return a different kind of client window.
	 * @return wxMDIClientWindow
	 */
	function OnCreateClient(){}

	/**
	 * Replace the current MDI Window menu.
	 * @param wxMenu $menu
	 */
	function SetWindowMenu(wxMenu &$menu){}

	/**
	 * Tiles the MDI child windows either horizontally or vertically depending on whether orient is wxHORIZONTAL or wxVERTICAL.
	 * @param wxOrientation $orient
	 */
	function Tile(wxOrientation $orient=null){}
}

class wxMask extends wxObject
{
	/**
	 * Default constructor.
	 * @param wxBitmap $bitmap
	 * @param integer $index
	 * @param wxColour $colour
	 */
	function __construct(wxBitmap $bitmap, $index, wxBitmap $bitmap, wxBitmap $bitmap, wxColour $colour){}

	/**
	 * Constructs a mask from a bitmap and a palette index that indicates the background.
	 * @param wxBitmap $bitmap
	 * @param integer $index
	 * @param wxColour $colour
	 * @return bool
	 */
	function Create(wxBitmap $bitmap, $index, wxBitmap $bitmap, wxBitmap $bitmap, wxColour $colour){}
}

class wxMaximizeEvent extends wxEvent
{
	/**
	 * Constructor.
	 * @param integer $id
	 */
	function __construct($id){}
}

class wxMemoryDC extends wxDC
{
	/**
	 * Constructs a new memory device context.
	 * @param wxDC $dc
	 * @param wxBitmap $bitmap
	 */
	function __construct(wxDC &$dc, wxBitmap &$bitmap){}

	/**
	 * Works exactly like SelectObjectAsSource() but this is the function you should use when you select a bitmap because you want to modify it, e.g.
	 * @param wxBitmap $bitmap
	 */
	function SelectObject(wxBitmap &$bitmap){}

	/**
	 * Selects the given bitmap into the device context, to use as the memory bitmap.
	 * @param wxBitmap $bitmap
	 */
	function SelectObjectAsSource(wxBitmap $bitmap){}
}

class wxMenu extends wxEvtHandler
{
	/**
	 * Constructs a wxMenu object.
	 * @param integer $style
	 * @param string $title
	 */
	function __construct($style, $title, $style){}

	/**
	 * Adds a menu item.
	 * @param integer $id
	 * @param string $item
	 * @param string $helpString
	 * @param wxItemKind $kind
	 * @param wxMenu $subMenu
	 * @param wxMenuItem $menuItem
	 * @return wxMenuItem
	 */
	function Append($id, $item=wxEmptyString, $helpString=wxEmptyString, wxItemKind $kind=null, $id, $item, wxMenu &$subMenu, $helpString=wxEmptyString, wxMenuItem &$menuItem){}

	/**
	 * Adds a checkable item to the end of the menu.
	 * @param integer $id
	 * @param string $item
	 * @param string $help
	 * @return wxMenuItem
	 */
	function AppendCheckItem($id, $item, $help=wxEmptyString){}

	/**
	 * Adds a radio item to the end of the menu.
	 * @param integer $id
	 * @param string $item
	 * @param string $help
	 * @return wxMenuItem
	 */
	function AppendRadioItem($id, $item, $help=wxEmptyString){}

	/**
	 * Adds a separator to the end of the menu.
	 * @return wxMenuItem
	 */
	function AppendSeparator(){}

	/**
	 * Adds the given submenu to this menu.
	 * @param wxMenu $submenu
	 * @param string $text
	 * @param string $help
	 * @return wxMenuItem
	 */
	function AppendSubMenu(wxMenu &$submenu, $text, $help=wxEmptyString){}

	/**
	 * Attach
	 * @param wxMenuBar $menubar
	 */
	function Attach(wxMenuBar &$menubar){}

	/**
	 * Inserts a break in a menu, causing the next appended item to appear in a new column.
	 */
	function BreakMethod(){}

	/**
	 * Checks or unchecks the menu item.
	 * @param integer $id
	 * @param bool $check
	 */
	function Check($id, $check){}

	/**
	 * Deletes the menu item from the menu.
	 * @param integer $id
	 * @param wxMenuItem $item
	 * @return bool
	 */
	function Delete($id, wxMenuItem &$item){}

	/**
	 * Deletes the menu item from the menu.
	 * @param integer $id
	 * @param wxMenuItem $item
	 * @return bool
	 */
	function Destroy($id, wxMenuItem &$item){}

	/**
	 * Detach
	 */
	function Detach(){}

	/**
	 * Enables or disables (greys out) a menu item.
	 * @param integer $id
	 * @param bool $enable
	 */
	function Enable($id, $enable){}

	/**
	 * Finds the menu item object associated with the given menu item identifier and, optionally, the position of the item in the menu.
	 * @param integer $id
	 * @param integer $pos
	 * @return wxMenuItem
	 */
	function FindChildItem($id, &$pos=NULL){}

	/**
	 * Finds the menu id for a menu item string.
	 * @param string $itemString
	 * @return integer
	 */
	function FindItem($itemString){}

	/**
	 * Returns the wxMenuItem given a position in the menu.
	 * @param integer $position
	 * @return wxMenuItem
	 */
	function FindItemByPosition($position){}

	/**
	 * Returns the help string associated with a menu item.
	 * @param integer $id
	 * @return string
	 */
	function GetHelpString($id){}

	/**
	 * GetInvokingWindow
	 * @return wxWindow
	 */
	function GetInvokingWindow(){}

	/**
	 * Returns a menu item label.
	 * @param integer $id
	 * @return string
	 */
	function GetLabel($id){}

	/**
	 * Returns a menu item label, without any of the original mnemonics and accelerators.
	 * @param integer $id
	 * @return string
	 */
	function GetLabelText($id){}

	/**
	 * Returns the number of items in the menu.
	 * @return integer
	 */
	function GetMenuItemCount(){}

	/**
	 * GetParent
	 * @return wxMenu
	 */
	function GetParent(){}

	/**
	 * GetStyle
	 * @return integer
	 */
	function GetStyle(){}

	/**
	 * Returns the title of the menu.
	 * @return string
	 */
	function GetTitle(){}

	/**
	 * GetWindow
	 * @return wxWindow
	 */
	function GetWindow(){}

	/**
	 * Inserts the given item before the position pos.
	 * @param integer $pos
	 * @param wxMenuItem $menuItem
	 * @param integer $id
	 * @param string $item
	 * @param string $helpString
	 * @param wxItemKind $kind
	 * @return wxMenuItem
	 */
	function Insert($pos, wxMenuItem &$menuItem, $pos, $id, $item=wxEmptyString, $helpString=wxEmptyString, wxItemKind $kind=null){}

	/**
	 * Inserts a checkable item at the given position.
	 * @param integer $pos
	 * @param integer $id
	 * @param string $item
	 * @param string $helpString
	 * @return wxMenuItem
	 */
	function InsertCheckItem($pos, $id, $item, $helpString=wxEmptyString){}

	/**
	 * Inserts a radio item at the given position.
	 * @param integer $pos
	 * @param integer $id
	 * @param string $item
	 * @param string $helpString
	 * @return wxMenuItem
	 */
	function InsertRadioItem($pos, $id, $item, $helpString=wxEmptyString){}

	/**
	 * Inserts a separator at the given position.
	 * @param integer $pos
	 * @return wxMenuItem
	 */
	function InsertSeparator($pos){}

	/**
	 * IsAttached
	 * @return bool
	 */
	function IsAttached(){}

	/**
	 * Determines whether a menu item is checked.
	 * @param integer $id
	 * @return bool
	 */
	function IsChecked($id){}

	/**
	 * Determines whether a menu item is enabled.
	 * @param integer $id
	 * @return bool
	 */
	function IsEnabled($id){}

	/**
	 * Inserts the given item at position 0, i.e.
	 * @param integer $id
	 * @param string $item
	 * @param string $helpString
	 * @param wxItemKind $kind
	 * @return wxMenuItem
	 */
	function Prepend($id, $item=wxEmptyString, $helpString=wxEmptyString, wxItemKind $kind=null, wxMenuItem &$item){}

	/**
	 * Inserts a checkable item at position 0.
	 * @param integer $id
	 * @param string $item
	 * @param string $helpString
	 * @return wxMenuItem
	 */
	function PrependCheckItem($id, $item, $helpString=wxEmptyString){}

	/**
	 * Inserts a radio item at position 0.
	 * @param integer $id
	 * @param string $item
	 * @param string $helpString
	 * @return wxMenuItem
	 */
	function PrependRadioItem($id, $item, $helpString=wxEmptyString){}

	/**
	 * Inserts a separator at position 0.
	 * @return wxMenuItem
	 */
	function PrependSeparator(){}

	/**
	 * Removes the menu item from the menu but doesn't delete the associated C++ object.
	 * @param wxMenuItem $item
	 * @param integer $id
	 * @return wxMenuItem
	 */
	function Remove(wxMenuItem &$item, $id){}

	/**
	 * Sets an item's help string.
	 * @param integer $id
	 * @param string $helpString
	 */
	function SetHelpString($id, $helpString){}

	/**
	 * SetInvokingWindow
	 * @param wxWindow $win
	 */
	function SetInvokingWindow(wxWindow &$win){}

	/**
	 * Sets the label of a menu item.
	 * @param integer $id
	 * @param string $label
	 */
	function SetLabel($id, $label){}

	/**
	 * SetParent
	 * @param wxMenu $parent
	 */
	function SetParent(wxMenu &$parent){}

	/**
	 * Sets the title of the menu.
	 * @param string $title
	 */
	function SetTitle($title){}
}

class wxMenuBar extends wxWindow
{
	/**
	 * Construct an empty menu bar.
	 * @param integer $style
	 */
	function __construct($style){}

	/**
	 * Adds the item to the end of the menu bar.
	 * @param wxMenu $menu
	 * @param string $title
	 * @return bool
	 */
	function Append(wxMenu &$menu, $title){}

	/**
	 * Attach
	 * @param wxFrame $frame
	 */
	function Attach(wxFrame &$frame){}

	/**
	 * Checks or unchecks a menu item.
	 * @param integer $id
	 * @param bool $check
	 */
	function Check($id, $check){}

	/**
	 * Detach
	 */
	function Detach(){}

	/**
	 * Enables or disables (greys out) a menu item.
	 * @param integer $id
	 * @param bool $enable
	 */
	function Enable($id, $enable){}

	/**
	 * Enables or disables a whole menu.
	 * @param integer $pos
	 * @param bool $enable
	 */
	function EnableTop($pos, $enable){}

	/**
	 * Returns the index of the menu with the given title or wxNOT_FOUND if no such menu exists in this menubar.
	 * @param string $title
	 * @return integer
	 */
	function FindMenu($title){}

	/**
	 * Finds the menu item id for a menu name/menu item string pair.
	 * @param string $menuString
	 * @param string $itemString
	 * @return integer
	 */
	function FindMenuItem($menuString, $itemString){}

	/**
	 * GetFrame
	 * @return wxFrame
	 */
	function GetFrame(){}

	/**
	 * Gets the help string associated with the menu item identifier.
	 * @param integer $id
	 * @return string
	 */
	function GetHelpString($id){}

	/**
	 * Gets the label associated with a menu item.
	 * @param integer $id
	 * @return string
	 */
	function GetLabel($id){}

	/**
	 * Returns the label of a top-level menu.
	 * @param integer $pos
	 * @return string
	 */
	function GetLabelTop($pos){}

	/**
	 * Returns the menu at menuIndex (zero-based).
	 * @param integer $menuIndex
	 * @return wxMenu
	 */
	function GetMenu($menuIndex){}

	/**
	 * Returns the number of menus in this menubar.
	 * @return integer
	 */
	function GetMenuCount(){}

	/**
	 * Returns the label of a top-level menu.
	 * @param integer $pos
	 * @return string
	 */
	function GetMenuLabel($pos){}

	/**
	 * Returns the label of a top-level menu.
	 * @param integer $pos
	 * @return string
	 */
	function GetMenuLabelText($pos){}

	/**
	 * Inserts the menu at the given position into the menu bar.
	 * @param integer $pos
	 * @param wxMenu $menu
	 * @param string $title
	 * @return bool
	 */
	function Insert($pos, wxMenu &$menu, $title){}

	/**
	 * IsAttached
	 * @return bool
	 */
	function IsAttached(){}

	/**
	 * Determines whether an item is checked.
	 * @param integer $id
	 * @return bool
	 */
	function IsChecked($id){}

	/**
	 * Determines whether an item is enabled.
	 * @param integer $id
	 * @return bool
	 */
	function IsEnabled($id){}

	/**
	 * Redraw the menu bar.
	 * @param bool $eraseBackground
	 * @param wxRect $rect
	 */
	function Refresh($eraseBackground=true, wxRect $rect=null){}

	/**
	 * Removes the menu from the menu bar and returns the menu object - the caller is responsible for deleting it.
	 * @param integer $pos
	 * @return wxMenu
	 */
	function Remove($pos){}

	/**
	 * Replaces the menu at the given position with another one.
	 * @param integer $pos
	 * @param wxMenu $menu
	 * @param string $title
	 * @return wxMenu
	 */
	function Replace($pos, wxMenu &$menu, $title){}

	/**
	 * Sets the help string associated with a menu item.
	 * @param integer $id
	 * @param string $helpString
	 */
	function SetHelpString($id, $helpString){}

	/**
	 * Sets the label of a menu item.
	 * @param integer $id
	 * @param string $label
	 */
	function SetLabel($id, $label){}

	/**
	 * Sets the label of a top-level menu.
	 * @param integer $pos
	 * @param string $label
	 */
	function SetLabelTop($pos, $label){}

	/**
	 * Sets the label of a top-level menu.
	 * @param integer $pos
	 * @param string $label
	 */
	function SetMenuLabel($pos, $label){}
}

class wxMenuEvent extends wxEvent
{
	/**
	 * Constructor.
	 * @param integer $type
	 * @param integer $id
	 * @param wxMenu $menu
	 */
	function __construct($type=wxEVT_NULL, $id, wxMenu &$menu=null){}

	/**
	 * Returns the menu which is being opened or closed.
	 * @return wxMenu
	 */
	function GetMenu(){}

	/**
	 * Returns the menu identifier associated with the event.
	 * @return integer
	 */
	function GetMenuId(){}

	/**
	 * Returns true if the menu which is being opened or closed is a popup menu, false if it is a normal one.
	 * @return bool
	 */
	function IsPopup(){}
}

class wxMenuItem extends wxObject
{
	/**
	 * Constructs a wxMenuItem object.
	 * @param wxMenu $parentMenu
	 * @param integer $id
	 * @param string $text
	 * @param string $helpString
	 * @param wxItemKind $kind
	 * @param wxMenu $subMenu
	 */
	function __construct(wxMenu &$parentMenu=null, $id=wxID_SEPARATOR, $text=wxEmptyString, $helpString=wxEmptyString, wxItemKind $kind=null, wxMenu &$subMenu=null){}

	/**
	 * Checks or unchecks the menu item.
	 * @param bool $check
	 */
	function Check($check=true){}

	/**
	 * Enables or disables the menu item.
	 * @param bool $enable
	 */
	function Enable($enable=true){}

	/**
	 * Returns the help string associated with the menu item.
	 * @return string
	 */
	function GetHelp(){}

	/**
	 * Returns the menu item identifier.
	 * @return integer
	 */
	function GetId(){}

	/**
	 * Returns the text associated with the menu item including any accelerator characters that were passed to the constructor or SetItemLabel().
	 * @return string
	 */
	function GetItemLabel(){}

	/**
	 * Returns the text associated with the menu item, without any accelerator characters.
	 * @return string
	 */
	function GetItemLabelText(){}

	/**
	 * Returns the item kind, one of wxITEM_SEPARATOR, wxITEM_NORMAL, wxITEM_CHECK or wxITEM_RADIO.
	 * @return wxItemKind
	 */
	function GetKind(){}

	/**
	 * Returns the text associated with the menu item without any accelerator characters it might contain.
	 * @return string
	 */
	function GetLabel(){}

	/**
	 * GetLabelFromText
	 * @param string $text
	 * @return string
	 */
	function GetLabelFromText($text){}

	/**
	 * Strips all accelerator characters and mnemonics from the given text.
	 * @param string $text
	 * @return string
	 */
	function GetLabelText($text){}

	/**
	 * Returns the menu this menu item is in, or NULL if this menu item is not attached.
	 * @return wxMenu
	 */
	function GetMenu(){}

	/**
	 * Returns the text associated with the menu item.
	 * @return string
	 */
	function GetName(){}

	/**
	 * Returns the submenu associated with the menu item, or NULL if there isn't one.
	 * @return wxMenu
	 */
	function GetSubMenu(){}

	/**
	 * Returns the text associated with the menu item, such as it was passed to the wxMenuItem constructor, i.e.
	 * @return string
	 */
	function GetText(){}

	/**
	 * Returns true if the item is checkable.
	 * @return bool
	 */
	function IsCheckable(){}

	/**
	 * Returns true if the item is checked.
	 * @return bool
	 */
	function IsChecked(){}

	/**
	 * Returns true if the item is enabled.
	 * @return bool
	 */
	function IsEnabled(){}

	/**
	 * Returns true if the item is a separator.
	 * @return bool
	 */
	function IsSeparator(){}

	/**
	 * Returns true if the item is a submenu.
	 * @return bool
	 */
	function IsSubMenu(){}

	/**
	 * Sets the bitmap for the menu item.
	 * @param wxBitmap $bmp
	 */
	function SetBitmap(wxBitmap $bmp){}

	/**
	 * Sets the help string.
	 * @param string $helpString
	 */
	function SetHelp($helpString){}

	/**
	 * Sets the label associated with the menu item.
	 * @param string $label
	 */
	function SetItemLabel($label){}

	/**
	 * Sets the parent menu which will contain this menu item.
	 * @param wxMenu $menu
	 */
	function SetMenu(wxMenu &$menu){}

	/**
	 * Sets the submenu of this menu item.
	 * @param wxMenu $menu
	 */
	function SetSubMenu(wxMenu &$menu){}

	/**
	 * Sets the text associated with the menu item.
	 * @param string $text
	 */
	function SetText($text){}
}

class wxMessageDialog extends wxDialog
{
	/**
	 * Constructor specifying the message box properties.
	 * @param wxWindow $parent
	 * @param string $message
	 * @param string $caption
	 * @param integer $style
	 * @param wxPoint $pos
	 */
	function __construct(wxWindow &$parent, $message, $caption=wxMessageBoxCaptionStr, $style=null, wxPoint $pos=null){}

	/**
	 * GetCancelLabel
	 * @return string
	 */
	function GetCancelLabel(){}

	/**
	 * GetCaption
	 * @return string
	 */
	function GetCaption(){}

	/**
	 * GetEffectiveIcon
	 * @return integer
	 */
	function GetEffectiveIcon(){}

	/**
	 * GetExtendedMessage
	 * @return string
	 */
	function GetExtendedMessage(){}

	/**
	 * GetHelpLabel
	 * @return string
	 */
	function GetHelpLabel(){}

	/**
	 * GetMessage
	 * @return string
	 */
	function GetMessage(){}

	/**
	 * GetMessageDialogStyle
	 * @return integer
	 */
	function GetMessageDialogStyle(){}

	/**
	 * GetNoLabel
	 * @return string
	 */
	function GetNoLabel(){}

	/**
	 * GetOKLabel
	 * @return string
	 */
	function GetOKLabel(){}

	/**
	 * GetYesLabel
	 * @return string
	 */
	function GetYesLabel(){}

	/**
	 * HasCustomLabels
	 * @return bool
	 */
	function HasCustomLabels(){}

	/**
	 * Sets the extended message for the dialog: this message is usually an extension of the short message specified in the constructor or set with SetMessage().
	 * @param string $extendedMessage
	 */
	function SetExtendedMessage($extendedMessage){}

	/**
	 * Sets the label for the Help button.
	 * @param string $help
	 * @return bool
	 */
	function SetHelpLabel($help){}

	/**
	 * Sets the message shown by the dialog.
	 * @param string $message
	 */
	function SetMessage($message){}

	/**
	 * Overrides the default labels of the OK and Cancel buttons.
	 * @param string $ok
	 * @param string $cancel
	 * @return bool
	 */
	function SetOKCancelLabels($ok, $cancel){}

	/**
	 * Overrides the default label of the OK button.
	 * @param string $ok
	 * @return bool
	 */
	function SetOKLabel($ok){}

	/**
	 * Overrides the default labels of the Yes, No and Cancel buttons.
	 * @param string $yes
	 * @param string $no
	 * @param string $cancel
	 * @return bool
	 */
	function SetYesNoCancelLabels($yes, $no, $cancel){}

	/**
	 * Overrides the default labels of the Yes and No buttons.
	 * @param string $yes
	 * @param string $no
	 * @return bool
	 */
	function SetYesNoLabels($yes, $no){}

	/**
	 * Shows the dialog, returning one of wxID_OK, wxID_CANCEL, wxID_YES, wxID_NO or wxID_HELP.
	 * @return integer
	 */
	function ShowModal(){}
}

class wxMiniFrame extends wxFrame
{
	/**
	 * Default ctor.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param string $title
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param string $name
	 */
	function __construct(wxWindow &$parent, $id, $title, wxPoint $pos=null, wxSize $size=null, $style=null, $name=wxFrameNameStr){}

	/**
	 * Used in two-step frame construction.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param string $title
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param string $name
	 * @return bool
	 */
	function Create(wxWindow &$parent, $id, $title, wxPoint $pos=null, wxSize $size=null, $style=null, $name=wxFrameNameStr){}
}

class wxMirrorDC extends wxDC
{
	/**
	 * Creates a (maybe) mirrored DC associated with the real dc.
	 * @param wxDC $dc
	 * @param bool $mirror
	 */
	function __construct(wxDC &$dc, $mirror){}
}

class wxModule extends wxObject
{
	/**
	 * Constructs a wxModule object.
	 */
	function __construct(){}

	/**
	 * Provide this function with appropriate cleanup for your module.
	 */
	function OnExit(){}

	/**
	 * Provide this function with appropriate initialization for your module.
	 * @return bool
	 */
	function OnInit(){}
}

class wxMouseEvent extends wxEvent
{
	/**
	 * Constructor.
	 * @param integer $mouseEventType
	 */
	function __construct($mouseEventType=wxEVT_NULL){}

	/**
	 * Returns true if the event was a first extra button double click.
	 * @return bool
	 */
	function Aux1DClick(){}

	/**
	 * Returns true if the first extra button mouse button changed to down.
	 * @return bool
	 */
	function Aux1Down(){}

	/**
	 * Returns true if the first extra button mouse button changed to up.
	 * @return bool
	 */
	function Aux1Up(){}

	/**
	 * Returns true if the event was a second extra button double click.
	 * @return bool
	 */
	function Aux2DClick(){}

	/**
	 * Returns true if the second extra button mouse button changed to down.
	 * @return bool
	 */
	function Aux2Down(){}

	/**
	 * Returns true if the second extra button mouse button changed to up.
	 * @return bool
	 */
	function Aux2Up(){}

	/**
	 * Returns true if the event was generated by the specified button.
	 * @param wxMouseButton $but
	 * @return bool
	 */
	function Button(wxMouseButton $but){}

	/**
	 * If the argument is omitted, this returns true if the event was a mouse double click event.
	 * @param wxMouseButton $but
	 * @return bool
	 */
	function ButtonDClick(wxMouseButton $but=null){}

	/**
	 * If the argument is omitted, this returns true if the event was a mouse button down event.
	 * @param wxMouseButton $but
	 * @return bool
	 */
	function ButtonDown(wxMouseButton $but=null){}

	/**
	 * If the argument is omitted, this returns true if the event was a mouse button up event.
	 * @param wxMouseButton $but
	 * @return bool
	 */
	function ButtonUp(wxMouseButton $but=null){}

	/**
	 * Returns true if this was a dragging event (motion while a button is depressed).
	 * @return bool
	 */
	function Dragging(){}

	/**
	 * Returns true if the mouse was entering the window.
	 * @return bool
	 */
	function Entering(){}

	/**
	 * Returns the mouse button which generated this event or wxMOUSE_BTN_NONE if no button is involved (for mouse move, enter or leave event, for example).
	 * @return integer
	 */
	function GetButton(){}

	/**
	 * Returns the number of mouse clicks for this event: 1 for a simple click, 2 for a double-click, 3 for a triple-click and so on.
	 * @return integer
	 */
	function GetClickCount(){}

	/**
	 * Returns the configured number of lines (or whatever) to be scrolled per wheel action.
	 * @return integer
	 */
	function GetLinesPerAction(){}

	/**
	 * Returns the logical mouse position in pixels (i.e.
	 * @param wxDC $dc
	 * @return wxPoint
	 */
	function GetLogicalPosition(wxDC $dc){}

	/**
	 * Gets the axis the wheel operation concerns.
	 * @return wxMouseWheelAxis
	 */
	function GetWheelAxis(){}

	/**
	 * Get wheel delta, normally 120.
	 * @return integer
	 */
	function GetWheelDelta(){}

	/**
	 * Get wheel rotation, positive or negative indicates direction of rotation.
	 * @return integer
	 */
	function GetWheelRotation(){}

	/**
	 * Returns true if the event was a mouse button event (not necessarily a button down event - that may be tested using ButtonDown()).
	 * @return bool
	 */
	function IsButton(){}

	/**
	 * Returns true if the system has been setup to do page scrolling with the mouse wheel instead of line scrolling.
	 * @return bool
	 */
	function IsPageScroll(){}

	/**
	 * Returns true if the mouse was leaving the window.
	 * @return bool
	 */
	function Leaving(){}

	/**
	 * Returns true if the event was a left double click.
	 * @return bool
	 */
	function LeftDClick(){}

	/**
	 * Returns true if the left mouse button changed to down.
	 * @return bool
	 */
	function LeftDown(){}

	/**
	 * Returns true if the left mouse button changed to up.
	 * @return bool
	 */
	function LeftUp(){}

	/**
	 * Returns true if the Meta key was down at the time of the event.
	 * @return bool
	 */
	function MetaDown(){}

	/**
	 * Returns true if the event was a middle double click.
	 * @return bool
	 */
	function MiddleDClick(){}

	/**
	 * Returns true if the middle mouse button changed to down.
	 * @return bool
	 */
	function MiddleDown(){}

	/**
	 * Returns true if the middle mouse button changed to up.
	 * @return bool
	 */
	function MiddleUp(){}

	/**
	 * Returns true if this was a motion event and no mouse buttons were pressed.
	 * @return bool
	 */
	function Moving(){}

	/**
	 * Returns true if the event was a right double click.
	 * @return bool
	 */
	function RightDClick(){}

	/**
	 * Returns true if the right mouse button changed to down.
	 * @return bool
	 */
	function RightDown(){}

	/**
	 * Returns true if the right mouse button changed to up.
	 * @return bool
	 */
	function RightUp(){}
}

class wxMouseEventsManager extends wxEvtHandler
{
	/**
	 * Default constructor.
	 * @param wxWindow $win
	 */
	function __construct(wxWindow &$win){}

	/**
	 * Finishes initialization of the object created using default constructor.
	 * @param wxWindow $win
	 * @return bool
	 */
	function Create(wxWindow &$win){}

	/**
	 * May be overridden to update the state of an item when it is pressed.
	 * @param integer $item
	 */
	function MouseClickBegin($item){}

	/**
	 * Must be overridden to reset the item appearance changed by MouseClickBegin().
	 * @param integer $item
	 */
	function MouseClickCancelled($item){}

	/**
	 * Must be overridden to react to mouse clicks.
	 * @param integer $item
	 * @return bool
	 */
	function MouseClicked($item){}

	/**
	 * Must be overridden to allow or deny dragging of the item.
	 * @param integer $item
	 * @param wxPoint $pos
	 * @return bool
	 */
	function MouseDragBegin($item, wxPoint $pos){}

	/**
	 * Must be overridden to handle cancellation of mouse dragging.
	 * @param integer $item
	 */
	function MouseDragCancelled($item){}

	/**
	 * Must be overridden to handle item drop.
	 * @param integer $item
	 * @param wxPoint $pos
	 */
	function MouseDragEnd($item, wxPoint $pos){}

	/**
	 * Must be overridden to provide feed back while an item is being dragged.
	 * @param integer $item
	 * @param wxPoint $pos
	 */
	function MouseDragging($item, wxPoint $pos){}

	/**
	 * Must be overridden to return the item at the given position.
	 * @param wxPoint $pos
	 * @return integer
	 */
	function MouseHitTest(wxPoint $pos){}
}

class wxMouseState extends wxKeyboardState
{
	/**
	 * Default constructor.
	 */
	function __construct(){}

	/**
	 * Returns true if the first extra button mouse button is currently down.
	 * @return bool
	 */
	function Aux1IsDown(){}

	/**
	 * Returns true if the second extra button mouse button is currently down.
	 * @return bool
	 */
	function Aux2IsDown(){}

	/**
	 * Returns the physical mouse position.
	 * @return wxPoint
	 */
	function GetPosition(){}

	/**
	 * Returns X coordinate of the physical mouse event position.
	 * @return integer
	 */
	function GetX(){}

	/**
	 * Returns Y coordinate of the physical mouse event position.
	 * @return integer
	 */
	function GetY(){}

	/**
	 * Returns true if the left mouse button is currently down.
	 * @return bool
	 */
	function LeftIsDown(){}

	/**
	 * Returns true if the middle mouse button is currently down.
	 * @return bool
	 */
	function MiddleIsDown(){}

	/**
	 * Returns true if the right mouse button is currently down.
	 * @return bool
	 */
	function RightIsDown(){}

	/**
	 * SetAux1Down
	 * @param bool $down
	 */
	function SetAux1Down($down){}

	/**
	 * SetAux2Down
	 * @param bool $down
	 */
	function SetAux2Down($down){}

	/**
	 * SetLeftDown
	 * @param bool $down
	 */
	function SetLeftDown($down){}

	/**
	 * SetMiddleDown
	 * @param bool $down
	 */
	function SetMiddleDown($down){}

	/**
	 * SetPosition
	 * @param wxPoint $pos
	 */
	function SetPosition(wxPoint $pos){}

	/**
	 * SetRightDown
	 * @param bool $down
	 */
	function SetRightDown($down){}

	/**
	 * SetState
	 * @param wxMouseState $state
	 */
	function SetState(wxMouseState $state){}

	/**
	 * SetX
	 * @param integer $x
	 */
	function SetX($x){}

	/**
	 * SetY
	 * @param integer $y
	 */
	function SetY($y){}
}

class wxMoveEvent extends wxEvent
{
	/**
	 * Constructor.
	 * @param wxPoint $pt
	 * @param integer $id
	 */
	function __construct(wxPoint $pt, $id){}

	/**
	 * Returns the position of the window generating the move change event.
	 * @return wxPoint
	 */
	function GetPosition(){}

	/**
	 * GetRect
	 * @return wxRect
	 */
	function GetRect(){}

	/**
	 * SetPosition
	 * @param wxPoint $pos
	 */
	function SetPosition(wxPoint $pos){}

	/**
	 * SetRect
	 * @param wxRect $rect
	 */
	function SetRect(wxRect $rect){}
}

class wxMutex
{
	/**
	 * Default constructor.
	 * @param wxMutexType $type
	 */
	function __construct(wxMutexType $type=null){}

	/**
	 * Locks the mutex object.
	 * @return wxMutexError
	 */
	function Lock(){}

	/**
	 * Try to lock the mutex object during the specified time interval.
	 * @param integer $msec
	 * @return wxMutexError
	 */
	function LockTimeout($msec){}

	/**
	 * Tries to lock the mutex object.
	 * @return wxMutexError
	 */
	function TryLock(){}

	/**
	 * Unlocks the mutex object.
	 * @return wxMutexError
	 */
	function Unlock(){}
}

class wxMutexLocker
{
	/**
	 * Constructs a wxMutexLocker object associated with mutex and locks it.
	 * @param wxMutex $mutex
	 */
	function __construct(wxMutex &$mutex){}

	/**
	 * Returns true if mutex was acquired in the constructor, false otherwise.
	 * @return bool
	 */
	function IsOk(){}
}

class wxNativeFontInfo
{
	/**
	 * wxNativeFontInfo
	 * @param wxNativeFontInfo $info
	 */
	function __construct(wxNativeFontInfo $info){}

	/**
	 * FromString
	 * @param string $s
	 * @return bool
	 */
	function FromString($s){}

	/**
	 * FromUserString
	 * @param string $s
	 * @return bool
	 */
	function FromUserString($s){}

	/**
	 * GetEncoding
	 * @return wxFontEncoding
	 */
	function GetEncoding(){}

	/**
	 * GetFaceName
	 * @return string
	 */
	function GetFaceName(){}

	/**
	 * GetFamily
	 * @return wxFontFamily
	 */
	function GetFamily(){}

	/**
	 * GetPixelSize
	 * @return wxSize
	 */
	function GetPixelSize(){}

	/**
	 * GetPointSize
	 * @return integer
	 */
	function GetPointSize(){}

	/**
	 * GetStyle
	 * @return wxFontStyle
	 */
	function GetStyle(){}

	/**
	 * GetUnderlined
	 * @return bool
	 */
	function GetUnderlined(){}

	/**
	 * GetWeight
	 * @return wxFontWeight
	 */
	function GetWeight(){}

	/**
	 * Init
	 */
	function Init(){}

	/**
	 * InitFromFont
	 * @param wxFont $font
	 */
	function InitFromFont(wxFont $font){}

	/**
	 * SetEncoding
	 * @param wxFontEncoding $encoding
	 */
	function SetEncoding(wxFontEncoding $encoding){}

	/**
	 * SetFaceName
	 * @param string $facename
	 * @param array $facenames
	 */
	function SetFaceName($facename, array $facenames){}

	/**
	 * SetFamily
	 * @param wxFontFamily $family
	 */
	function SetFamily(wxFontFamily $family){}

	/**
	 * SetPixelSize
	 * @param wxSize $pixelSize
	 */
	function SetPixelSize(wxSize $pixelSize){}

	/**
	 * SetPointSize
	 * @param integer $pointsize
	 */
	function SetPointSize($pointsize){}

	/**
	 * SetStyle
	 * @param wxFontStyle $style
	 */
	function SetStyle(wxFontStyle $style){}

	/**
	 * SetUnderlined
	 * @param bool $underlined
	 */
	function SetUnderlined($underlined){}

	/**
	 * SetWeight
	 * @param wxFontWeight $weight
	 */
	function SetWeight(wxFontWeight $weight){}

	/**
	 * ToString
	 * @return string
	 */
	function ToString(){}

	/**
	 * ToUserString
	 * @return string
	 */
	function ToUserString(){}
}

class wxNavigationKeyEvent extends wxEvent
{
	const IsBackward = 1;
	const IsForward = 1;
	const WinChange = 1;
	const FromTab = 1;

	/**
	 * wxNavigationKeyEvent
	 */
	function __construct(){}

	/**
	 * Returns the child that has the focus, or NULL.
	 * @return wxWindow
	 */
	function GetCurrentFocus(){}

	/**
	 * Returns true if the navigation was in the forward direction.
	 * @return bool
	 */
	function GetDirection(){}

	/**
	 * Returns true if the navigation event was from a tab key.
	 * @return bool
	 */
	function IsFromTab(){}

	/**
	 * Returns true if the navigation event represents a window change (for example, from Ctrl-Page Down in a notebook).
	 * @return bool
	 */
	function IsWindowChange(){}

	/**
	 * Sets the current focus window member.
	 * @param wxWindow $currentFocus
	 */
	function SetCurrentFocus(wxWindow &$currentFocus){}

	/**
	 * Sets the direction to forward if direction is true, or backward if false.
	 * @param bool $direction
	 */
	function SetDirection($direction){}

	/**
	 * Sets the flags for this event.
	 * @param integer $flags
	 */
	function SetFlags($flags){}

	/**
	 * Marks the navigation event as from a tab key.
	 * @param bool $fromTab
	 */
	function SetFromTab($fromTab){}

	/**
	 * Marks the event as a window change event.
	 * @param bool $windowChange
	 */
	function SetWindowChange($windowChange){}
}

class wxNonOwnedWindow extends wxWindow
{
}

class wxNotebook extends wxBookCtrlBase
{
	/**
	 * Constructs a notebook control.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param string $name
	 */
	function __construct(wxWindow &$parent, $id, wxPoint $pos=null, wxSize $size=null, $style, $name=wxNotebookNameStr){}

	/**
	 * Changes the selection for the given page, returning the previous selection.
	 * @param integer $page
	 * @return integer
	 */
	function ChangeSelection($page){}

	/**
	 * Creates a notebook control.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param string $name
	 * @return bool
	 */
	function Create(wxWindow &$parent, $id, wxPoint $pos=null, wxSize $size=null, $style, $name=wxNotebookNameStr){}

	/**
	 * Returns the image index for the given page.
	 * @param integer $nPage
	 * @return integer
	 */
	function GetPageImage($nPage){}

	/**
	 * Returns the string for the given page.
	 * @param integer $nPage
	 * @return string
	 */
	function GetPageText($nPage){}

	/**
	 * Returns the number of rows in the notebook control.
	 * @return integer
	 */
	function GetRowCount(){}

	/**
	 * Returns the currently selected page, or wxNOT_FOUND if none was selected.
	 * @return integer
	 */
	function GetSelection(){}

	/**
	 * If running under Windows and themes are enabled for the application, this function returns a suitable colour for painting the background of a notebook page, and can be passed to SetBackgroundColour().
	 * @return wxColour
	 */
	function GetThemeBackgroundColour(){}

	/**
	 * Inserts a new page at the specified position.
	 * @param integer $index
	 * @param wxWindow $page
	 * @param string $text
	 * @param bool $select
	 * @param integer $imageId
	 * @return bool
	 */
	function InsertPage($index, wxWindow &$page, $text, $select=false, $imageId=NO_IMAGE){}

	/**
	 * Sets the amount of space around each page's icon and label, in pixels.
	 * @param wxSize $padding
	 */
	function SetPadding(wxSize $padding){}

	/**
	 * Sets the image index for the given page.
	 * @param integer $page
	 * @param integer $image
	 * @return bool
	 */
	function SetPageImage($page, $image){}

	/**
	 * Sets the text for the given page.
	 * @param integer $page
	 * @param string $text
	 * @return bool
	 */
	function SetPageText($page, $text){}

	/**
	 * Sets the selection for the given page, returning the previous selection.
	 * @param integer $page
	 * @return integer
	 */
	function SetSelection($page){}
}

class wxNotificationMessage extends wxEvtHandler
{
	/**
	 * Default constructor, use SetParent(), SetTitle() and SetMessage() to initialize the object before showing it.
	 * @param string $title
	 * @param string $message
	 * @param wxWindow $parent
	 * @param integer $flags
	 */
	function __construct($title, $message=wxEmptyString, wxWindow &$parent=null, $flags=wxICON_INFORMATION){}

	/**
	 * Hides the notification.
	 * @return bool
	 */
	function Close(){}

	/**
	 * This parameter can be currently used to specify the icon to show in the notification.
	 * @param integer $flags
	 */
	function SetFlags($flags){}

	/**
	 * Set the main text of the notification.
	 * @param string $message
	 */
	function SetMessage($message){}

	/**
	 * Set the parent for this notification: the notification will be associated with the top level parent of this window or, if this method is not called, with the main application window by default.
	 * @param wxWindow $parent
	 */
	function SetParent(wxWindow &$parent){}

	/**
	 * Set the title, it must be a concise string (not more than 64 characters), use SetMessage() to give the user more details.
	 * @param string $title
	 */
	function SetTitle($title){}

	/**
	 * Show the notification to the user and hides it after timeout seconds are elapsed.
	 * @param integer $timeout
	 * @return bool
	 */
	function Show($timeout=Timeout_Auto){}
}

class wxNotifyEvent extends wxCommandEvent
{
	/**
	 * Constructor (used internally by wxWidgets only).
	 * @param integer $eventType
	 * @param integer $id
	 */
	function __construct($eventType=wxEVT_NULL, $id){}

	/**
	 * This is the opposite of Veto(): it explicitly allows the event to be processed.
	 */
	function Allow(){}

	/**
	 * Returns true if the change is allowed (Veto() hasn't been called) or false otherwise (if it was).
	 * @return bool
	 */
	function IsAllowed(){}

	/**
	 * Prevents the change announced by this event from happening.
	 */
	function Veto(){}
}

class wxObject
{
	/**
	 * Copy ctor.
	 * @param wxObject $other
	 */
	function __construct(wxObject $other){}

	/**
	 * This virtual function is redefined for every class that requires run-time type information, when using the wxDECLARE_CLASS macro (or similar).
	 * @return wxClassInfo
	 */
	function GetClassInfo(){}

	/**
	 * Determines whether this class is a subclass of (or the same class as) the given class.
	 * @param wxClassInfo $info
	 * @return bool
	 */
	function IsKindOf(wxClassInfo $info){}

	/**
	 * Returns true if this object has the same data pointer as obj.
	 * @param wxObject $obj
	 * @return bool
	 */
	function IsSameAs(wxObject $obj){}

	/**
	 * Makes this object refer to the data in clone.
	 * @param wxObject $clone
	 */
	function Ref(wxObject $clone){}

	/**
	 * Decrements the reference count in the associated data, and if it is zero, deletes the data.
	 */
	function UnRef(){}

	/**
	 * This is the same of AllocExclusive() but this method is public.
	 */
	function UnShare(){}
}

class wxOutputStream extends wxStreamBase
{
	/**
	 * Creates a dummy wxOutputStream object.
	 */
	function __construct(){}

	/**
	 * Closes the stream, returning false if an error occurs.
	 * @return bool
	 */
	function Close(){}

	/**
	 * Returns the number of bytes written during the last Write().
	 * @return integer
	 */
	function LastWrite(){}

	/**
	 * Puts the specified character in the output queue and increments the stream position.
	 * @param string $c
	 */
	function PutC($c){}

	/**
	 * Changes the stream current position.
	 * @param integer $pos
	 * @param wxSeekMode $mode
	 * @return integer
	 */
	function SeekO($pos, wxSeekMode $mode=null){}

	/**
	 * Returns the current stream position.
	 * @return integer
	 */
	function TellO(){}

	/**
	 * Reads data from the specified input stream and stores them in the current stream.
	 * @param wxInputStream $stream_in
	 * @return wxOutputStream
	 */
	function Write(wxInputStream &$stream_in){}
}

class wxPageSetupDialog extends wxDialog
{
	/**
	 * Constructor.
	 * @param wxWindow $parent
	 * @param wxPageSetupDialogData $data
	 */
	function __construct(wxWindow &$parent, wxPageSetupDialogData &$data=null){}

	/**
	 * Returns the wxPageSetupDialogData object associated with the dialog.
	 * @return wxPageSetupDialogData
	 */
	function GetPageSetupData(){}

	/**
	 * Shows the dialog, returning wxID_OK if the user pressed OK, and wxID_CANCEL otherwise.
	 * @return integer
	 */
	function ShowModal(){}
}

class wxPageSetupDialogData extends wxObject
{
	/**
	 * Default constructor.
	 * @param wxPrintData $printData
	 */
	function __construct(wxPrintData $printData){}

	/**
	 * Enables or disables the "Help" button (Windows only).
	 * @param bool $flag
	 */
	function EnableHelp($flag){}

	/**
	 * Enables or disables the margin controls (Windows only).
	 * @param bool $flag
	 */
	function EnableMargins($flag){}

	/**
	 * Enables or disables the orientation control (Windows only).
	 * @param bool $flag
	 */
	function EnableOrientation($flag){}

	/**
	 * Enables or disables the paper size control (Windows only).
	 * @param bool $flag
	 */
	function EnablePaper($flag){}

	/**
	 * Enables or disables the "Printer" button, which invokes a printer setup dialog.
	 * @param bool $flag
	 */
	function EnablePrinter($flag){}

	/**
	 * Returns true if the dialog will simply return default printer information (such as orientation) instead of showing a dialog (Windows only).
	 * @return bool
	 */
	function GetDefaultInfo(){}

	/**
	 * Returns true if the page setup dialog will take its minimum margin values from the currently selected printer properties (Windows only).
	 * @return bool
	 */
	function GetDefaultMinMargins(){}

	/**
	 * Returns true if the printer setup button is enabled.
	 * @return bool
	 */
	function GetEnableHelp(){}

	/**
	 * Returns true if the margin controls are enabled (Windows only).
	 * @return bool
	 */
	function GetEnableMargins(){}

	/**
	 * Returns true if the orientation control is enabled (Windows only).
	 * @return bool
	 */
	function GetEnableOrientation(){}

	/**
	 * Returns true if the paper size control is enabled (Windows only).
	 * @return bool
	 */
	function GetEnablePaper(){}

	/**
	 * Returns true if the printer setup button is enabled.
	 * @return bool
	 */
	function GetEnablePrinter(){}

	/**
	 * Returns the right (x) and bottom (y) margins in millimetres.
	 * @return wxPoint
	 */
	function GetMarginBottomRight(){}

	/**
	 * Returns the left (x) and top (y) margins in millimetres.
	 * @return wxPoint
	 */
	function GetMarginTopLeft(){}

	/**
	 * Returns the right (x) and bottom (y) minimum margins the user can enter (Windows only).
	 * @return wxPoint
	 */
	function GetMinMarginBottomRight(){}

	/**
	 * Returns the left (x) and top (y) minimum margins the user can enter (Windows only).
	 * @return wxPoint
	 */
	function GetMinMarginTopLeft(){}

	/**
	 * Returns the paper id (stored in the internal wxPrintData object).
	 * @return wxPaperSize
	 */
	function GetPaperId(){}

	/**
	 * Returns the paper size in millimetres.
	 * @return wxSize
	 */
	function GetPaperSize(){}

	/**
	 * Returns a reference to the print data associated with this object.
	 * @return wxPrintData
	 */
	function GetPrintData(){}

	/**
	 * Returns true if the print data associated with the dialog data is valid.
	 * @return bool
	 */
	function IsOk(){}

	/**
	 * Pass true if the dialog will simply return default printer information (such as orientation) instead of showing a dialog (Windows only).
	 * @param bool $flag
	 */
	function SetDefaultInfo($flag){}

	/**
	 * Pass true if the page setup dialog will take its minimum margin values from the currently selected printer properties (Windows only).
	 * @param bool $flag
	 */
	function SetDefaultMinMargins($flag){}

	/**
	 * Sets the right (x) and bottom (y) margins in millimetres.
	 * @param wxPoint $pt
	 */
	function SetMarginBottomRight(wxPoint $pt){}

	/**
	 * Sets the left (x) and top (y) margins in millimetres.
	 * @param wxPoint $pt
	 */
	function SetMarginTopLeft(wxPoint $pt){}

	/**
	 * Sets the right (x) and bottom (y) minimum margins the user can enter (Windows only).
	 * @param wxPoint $pt
	 */
	function SetMinMarginBottomRight(wxPoint $pt){}

	/**
	 * Sets the left (x) and top (y) minimum margins the user can enter (Windows only).
	 * @param wxPoint $pt
	 */
	function SetMinMarginTopLeft(wxPoint $pt){}

	/**
	 * Sets the paper size id.
	 * @param wxPaperSize $id
	 */
	function SetPaperId(wxPaperSize $id){}

	/**
	 * Sets the paper size in millimetres.
	 * @param wxSize $size
	 */
	function SetPaperSize(wxSize $size){}

	/**
	 * Sets the print data associated with this object.
	 * @param wxPrintData $printData
	 */
	function SetPrintData(wxPrintData $printData){}
}

class wxPaintDC extends wxWindowDC
{
	/**
	 * Constructor.
	 * @param wxWindow $window
	 */
	function __construct(wxWindow &$window){}
}

class wxPaintEvent extends wxEvent
{
	/**
	 * Constructor.
	 * @param integer $id
	 */
	function __construct($id){}
}

class wxPalette extends wxGDIObject
{
	/**
	 * Default constructor.
	 * @param wxPalette $palette
	 * @param integer $n
	 * @param array $red
	 * @param array $green
	 * @param array $blue
	 */
	function __construct(wxPalette $palette, $n, array $red, array $green, array $blue){}

	/**
	 * Creates a palette from arrays of size n, one for each red, blue or green component.
	 * @param integer $n
	 * @param array $red
	 * @param array $green
	 * @param array $blue
	 * @return bool
	 */
	function Create($n, array $red, array $green, array $blue){}

	/**
	 * Returns number of entries in palette.
	 * @return integer
	 */
	function GetColoursCount(){}

	/**
	 * Returns a pixel value (index into the palette) for the given RGB values.
	 * @param integer $red
	 * @param integer $green
	 * @param integer $blue
	 * @return integer
	 */
	function GetPixel($red, $green, $blue){}

	/**
	 * Returns RGB values for a given palette index.
	 * @param integer $pixel
	 * @param integer $red
	 * @param integer $green
	 * @param integer $blue
	 * @return bool
	 */
	function GetRGB($pixel, &$red, &$green, &$blue){}

	/**
	 * Returns true if palette data is present.
	 * @return bool
	 */
	function IsOk(){}
}

class wxPaletteChangedEvent extends wxEvent
{
	/**
	 * wxPaletteChangedEvent
	 * @param integer $winid
	 */
	function __construct($winid){}

	/**
	 * GetChangedWindow
	 * @return wxWindow
	 */
	function GetChangedWindow(){}

	/**
	 * SetChangedWindow
	 * @param wxWindow $win
	 */
	function SetChangedWindow(wxWindow &$win){}
}

class wxPanel extends wxWindow
{
	/**
	 * Default constructor.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param string $name
	 */
	function __construct(wxWindow &$parent, $id=wxID_ANY, wxPoint $pos=null, wxSize $size=null, $style=wxTAB_TRAVERSAL, $name=wxPanelNameStr){}

	/**
	 * This method is overridden from wxWindow::AcceptsFocus() and returns true only if there is no child window in the panel which can accept the focus.
	 * @return bool
	 */
	function AcceptsFocus(){}

	/**
	 * Used for two-step panel construction.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param string $name
	 * @return bool
	 */
	function Create(wxWindow &$parent, $id=wxID_ANY, wxPoint $pos=null, wxSize $size=null, $style=wxTAB_TRAVERSAL, $name=wxPanelNameStr){}

	/**
	 * Sends a wxInitDialogEvent, which in turn transfers data to the dialog via validators.
	 */
	function InitDialog(){}

	/**
	 * See wxWindow::SetAutoLayout(): when auto layout is on, this function gets called automatically when the window is resized.
	 * @return bool
	 */
	function Layout(){}

	/**
	 * Overrides wxWindow::SetFocus().
	 */
	function SetFocus(){}

	/**
	 * In contrast to SetFocus() (see above) this will set the focus to the panel even if there are child windows in the panel.
	 */
	function SetFocusIgnoringChildren(){}
}

class wxPasswordEntryDialog extends wxTextEntryDialog
{
	/**
	 * Constructor.
	 * @param wxWindow $parent
	 * @param string $message
	 * @param string $caption
	 * @param string $defaultValue
	 * @param integer $style
	 * @param wxPoint $pos
	 */
	function __construct(wxWindow &$parent, $message, $caption=wxGetPasswordFromUserPromptStr, $defaultValue=wxEmptyString, $style=wxTextEntryDialogStyle, wxPoint $pos=null){}
}

class wxPathList extends wxArrayString
{
	/**
	 * Standard constructor.
	 * @param array $arr
	 */
	function __construct(array $arr){}

	/**
	 * Adds the given directory to the path list, if the path is not already in the list.
	 * @param string $path
	 * @param array $arr
	 */
	function Add($path, array $arr){}

	/**
	 * Finds the value of the given environment variable, and adds all paths to the path list.
	 * @param string $env_variable
	 */
	function AddEnvList($env_variable){}

	/**
	 * Given a full filename (with path), calls Add() with the path of the file.
	 * @param string $filename
	 * @return bool
	 */
	function EnsureFileAccessible($filename){}

	/**
	 * Like FindValidPath() but this function always returns an absolute path (eventually prepending the current working directory to the value returned wxPathList::FindValidPath()) or an empty string.
	 * @param string $file
	 * @return string
	 */
	function FindAbsoluteValidPath($file){}

	/**
	 * Searches the given file in all paths stored in this class.
	 * @param string $file
	 * @return string
	 */
	function FindValidPath($file){}
}

class wxPen extends wxGDIObject
{
	/**
	 * Default constructor.
	 * @param wxColour $colour
	 * @param integer $width
	 * @param wxPenStyle $style
	 */
	function __construct(wxColour $colour, $width=1, wxPenStyle $style=null){}

	/**
	 * Returns the pen cap style, which may be one of wxCAP_ROUND, wxCAP_PROJECTING and wxCAP_BUTT.
	 * @return wxPenCap
	 */
	function GetCap(){}

	/**
	 * Returns a reference to the pen colour.
	 * @return wxColour
	 */
	function GetColour(){}

	/**
	 * Returns the pen join style, which may be one of wxJOIN_BEVEL, wxJOIN_ROUND and wxJOIN_MITER.
	 * @return wxPenJoin
	 */
	function GetJoin(){}

	/**
	 * Gets a pointer to the stipple bitmap.
	 * @return wxBitmap
	 */
	function GetStipple(){}

	/**
	 * Returns the pen style.
	 * @return wxPenStyle
	 */
	function GetStyle(){}

	/**
	 * Returns the pen width.
	 * @return integer
	 */
	function GetWidth(){}

	/**
	 * Returns true if the pen is a valid non-transparent pen.
	 * @return bool
	 */
	function IsNonTransparent(){}

	/**
	 * Returns true if the pen is initialised.
	 * @return bool
	 */
	function IsOk(){}

	/**
	 * Returns true if the pen is transparent.
	 * @return bool
	 */
	function IsTransparent(){}

	/**
	 * Sets the pen cap style, which may be one of wxCAP_ROUND, wxCAP_PROJECTING and wxCAP_BUTT.
	 * @param wxPenCap $capStyle
	 */
	function SetCap(wxPenCap $capStyle){}

	/**
	 * The pen's colour is changed to the given colour.
	 * @param wxColour $colour
	 * @param integer $red
	 * @param integer $green
	 * @param integer $blue
	 */
	function SetColour(wxColour &$colour, $red, $green, $blue){}

	/**
	 * Sets the pen join style, which may be one of wxJOIN_BEVEL, wxJOIN_ROUND and wxJOIN_MITER.
	 * @param wxPenJoin $join_style
	 */
	function SetJoin(wxPenJoin $join_style){}

	/**
	 * Sets the bitmap for stippling.
	 * @param wxBitmap $stipple
	 */
	function SetStipple(wxBitmap $stipple){}

	/**
	 * Set the pen style.
	 * @param wxPenStyle $style
	 */
	function SetStyle(wxPenStyle $style){}

	/**
	 * Sets the pen width.
	 * @param integer $width
	 */
	function SetWidth($width){}
}

class wxPenList
{
	/**
	 * Constructor.
	 */
	function __construct(){}

	/**
	 * Finds a pen with the specified attributes and returns it, else creates a new pen, adds it to the pen list, and returns it.
	 * @param wxColour $colour
	 * @param integer $width
	 * @param wxPenStyle $style
	 * @return wxPen
	 */
	function FindOrCreatePen(wxColour $colour, $width=1, wxPenStyle $style=null){}
}

class wxPickerBase extends wxControl
{
	/**
	 * Returns the margin (in pixel) between the picker and the text control.
	 * @return integer
	 */
	function GetInternalMargin(){}

	/**
	 * Returns the native implementation of the real picker control.
	 * @return wxControl
	 */
	function GetPickerCtrl(){}

	/**
	 * Returns the proportion value of the picker.
	 * @return integer
	 */
	function GetPickerCtrlProportion(){}

	/**
	 * Returns a pointer to the text control handled by this window or NULL if the wxPB_USE_TEXTCTRL style was not specified when this control was created.
	 * @return wxTextCtrl
	 */
	function GetTextCtrl(){}

	/**
	 * Returns the proportion value of the text control.
	 * @return integer
	 */
	function GetTextCtrlProportion(){}

	/**
	 * Returns true if this window has a valid text control (i.e.
	 * @return bool
	 */
	function HasTextCtrl(){}

	/**
	 * Returns true if the picker control is growable.
	 * @return bool
	 */
	function IsPickerCtrlGrowable(){}

	/**
	 * Returns true if the text control is growable.
	 * @return bool
	 */
	function IsTextCtrlGrowable(){}

	/**
	 * Sets the margin (in pixel) between the picker and the text control.
	 * @param integer $margin
	 */
	function SetInternalMargin($margin){}

	/**
	 * Sets the picker control as growable when grow is true.
	 * @param bool $grow
	 */
	function SetPickerCtrlGrowable($grow=true){}

	/**
	 * Sets the proportion value of the picker.
	 * @param integer $prop
	 */
	function SetPickerCtrlProportion($prop){}

	/**
	 * Sets the text control as growable when grow is true.
	 * @param bool $grow
	 */
	function SetTextCtrlGrowable($grow=true){}

	/**
	 * Sets the proportion value of the text control.
	 * @param integer $prop
	 */
	function SetTextCtrlProportion($prop){}
}

class wxPlatformInfo
{
	/**
	 * Initializes the instance with the values corresponding to the currently running platform.
	 * @param wxPortId $pid
	 * @param integer $tkMajor
	 * @param integer $tkMinor
	 * @param wxOperatingSystemId $id
	 * @param integer $osMajor
	 * @param integer $osMinor
	 * @param wxArchitecture $arch
	 * @param wxEndianness $endian
	 */
	function __construct(wxPortId $pid, $tkMajor=-1, $tkMinor=-1, wxOperatingSystemId $id=null, $osMajor=-1, $osMinor=-1, wxArchitecture $arch=null, wxEndianness $endian=null){}

	/**
	 * Returns true if the OS version is at least major.minor.
	 * @param integer $major
	 * @param integer $minor
	 * @return bool
	 */
	function CheckOSVersion($major, $minor){}

	/**
	 * Returns true if the toolkit version is at least major.minor.
	 * @param integer $major
	 * @param integer $minor
	 * @return bool
	 */
	function CheckToolkitVersion($major, $minor){}

	/**
	 * Returns the global wxPlatformInfo object, initialized with the values for the currently running platform.
	 * @return wxPlatformInfo
	 */
	function Get(){}

	/**
	 * Converts the given string to a wxArchitecture enum value or to wxARCH_INVALID if the given string is not a valid architecture string (i.e.
	 * @param string $arch
	 * @return wxArchitecture
	 */
	function GetArch($arch){}

	/**
	 * Returns the name for the architecture of this wxPlatformInfo instance.
	 * @param wxArchitecture $arch
	 * @return string
	 */
	function GetArchName(wxArchitecture $arch){}

	/**
	 * Returns the architecture ID of this wxPlatformInfo instance.
	 * @return wxArchitecture
	 */
	function GetArchitecture(){}

	/**
	 * Returns the desktop environment associated with this wxPlatformInfo instance.
	 * @return string
	 */
	function GetDesktopEnvironment(){}

	/**
	 * Returns the endianness ID of this wxPlatformInfo instance.
	 * @param string $end
	 * @return wxEndianness
	 */
	function GetEndianness($end){}

	/**
	 * Returns the name for the endianness of this wxPlatformInfo instance.
	 * @param wxEndianness $end
	 * @return string
	 */
	function GetEndiannessName(wxEndianness $end){}

	/**
	 * Returns the run-time major version of the OS associated with this wxPlatformInfo instance.
	 * @return integer
	 */
	function GetOSMajorVersion(){}

	/**
	 * Returns the run-time minor version of the OS associated with this wxPlatformInfo instance.
	 * @return integer
	 */
	function GetOSMinorVersion(){}

	/**
	 * Returns the description of the operating system of this wxPlatformInfo instance.
	 * @return string
	 */
	function GetOperatingSystemDescription(){}

	/**
	 * Returns the operating system directory.
	 * @return string
	 */
	function GetOperatingSystemDirectory(){}

	/**
	 * Returns the operating system family name of the OS associated with this wxPlatformInfo instance.
	 * @param wxOperatingSystemId $os
	 * @return string
	 */
	function GetOperatingSystemFamilyName(wxOperatingSystemId $os){}

	/**
	 * Returns the operating system ID of this wxPlatformInfo instance.
	 * @param string $name
	 * @return wxOperatingSystemId
	 */
	function GetOperatingSystemId($name){}

	/**
	 * Returns the operating system name of the OS associated with this wxPlatformInfo instance.
	 * @param wxOperatingSystemId $os
	 * @return string
	 */
	function GetOperatingSystemIdName(wxOperatingSystemId $os){}

	/**
	 * Returns the wxWidgets port ID associated with this wxPlatformInfo instance.
	 * @param string $portname
	 * @return wxPortId
	 */
	function GetPortId($portname){}

	/**
	 * Returns the name of the wxWidgets port ID associated with this wxPlatformInfo instance.
	 * @param wxPortId $port
	 * @param bool $usingUniversal
	 * @return string
	 */
	function GetPortIdName(wxPortId $port, $usingUniversal){}

	/**
	 * Returns the short name of the wxWidgets port ID associated with this wxPlatformInfo instance.
	 * @param wxPortId $port
	 * @param bool $usingUniversal
	 * @return string
	 */
	function GetPortIdShortName(wxPortId $port, $usingUniversal){}

	/**
	 * Returns the run-time major version of the toolkit associated with this wxPlatformInfo instance.
	 * @return integer
	 */
	function GetToolkitMajorVersion(){}

	/**
	 * Returns the run-time minor version of the toolkit associated with this wxPlatformInfo instance.
	 * @return integer
	 */
	function GetToolkitMinorVersion(){}

	/**
	 * Returns true if this instance is fully initialized with valid values.
	 * @return bool
	 */
	function IsOk(){}

	/**
	 * Returns true if this wxPlatformInfo describes wxUniversal build.
	 * @return bool
	 */
	function IsUsingUniversalWidgets(){}

	/**
	 * Sets the architecture enum value associated with this wxPlatformInfo instance.
	 * @param wxArchitecture $n
	 */
	function SetArchitecture(wxArchitecture $n){}

	/**
	 * Sets the desktop environment associated with this wxPlatformInfo instance.
	 * @param string $de
	 */
	function SetDesktopEnvironment($de){}

	/**
	 * Sets the endianness enum value associated with this wxPlatformInfo instance.
	 * @param wxEndianness $n
	 */
	function SetEndianness(wxEndianness $n){}

	/**
	 * Sets the version of the operating system associated with this wxPlatformInfo instance.
	 * @param integer $major
	 * @param integer $minor
	 */
	function SetOSVersion($major, $minor){}

	/**
	 * Sets the operating system description associated with this wxPlatformInfo instance.
	 * @param string $desc
	 */
	function SetOperatingSystemDescription($desc){}

	/**
	 * Sets the operating system associated with this wxPlatformInfo instance.
	 * @param wxOperatingSystemId $n
	 */
	function SetOperatingSystemId(wxOperatingSystemId $n){}

	/**
	 * Sets the wxWidgets port ID associated with this wxPlatformInfo instance.
	 * @param wxPortId $n
	 */
	function SetPortId(wxPortId $n){}

	/**
	 * Sets the version of the toolkit associated with this wxPlatformInfo instance.
	 * @param integer $major
	 * @param integer $minor
	 */
	function SetToolkitVersion($major, $minor){}
}

class wxPoint
{
	/**
	 * Constructs a point.
	 * @param integer $x
	 * @param integer $y
	 * @param wxRealPoint $pt
	 */
	function __construct($x, $y, wxRealPoint $pt){}

	/**
	 * Returns true if neither of the point components is equal to wxDefaultCoord.
	 * @return bool
	 */
	function IsFullySpecified(){}
}

class wxPoint2DDouble
{
	/**
	 * wxPoint2DDouble
	 * @param float $x
	 * @param float $y
	 * @param wxPoint2DDouble $pt
	 */
	function __construct($x, $y, wxPoint2DDouble $pt, wxPoint2DInt $pt, wxPoint $pt){}

	/**
	 * GetCrossProduct
	 * @param wxPoint2DDouble $vec
	 * @return float
	 */
	function GetCrossProduct(wxPoint2DDouble $vec){}

	/**
	 * GetDistance
	 * @param wxPoint2DDouble $pt
	 * @return float
	 */
	function GetDistance(wxPoint2DDouble $pt){}

	/**
	 * GetDistanceSquare
	 * @param wxPoint2DDouble $pt
	 * @return float
	 */
	function GetDistanceSquare(wxPoint2DDouble $pt){}

	/**
	 * GetDotProduct
	 * @param wxPoint2DDouble $vec
	 * @return float
	 */
	function GetDotProduct(wxPoint2DDouble $vec){}

	/**
	 * GetFloor
	 * @param integer $x
	 * @param integer $y
	 */
	function GetFloor($x, $y){}

	/**
	 * GetRounded
	 * @param integer $x
	 * @param integer $y
	 */
	function GetRounded($x, $y){}

	/**
	 * GetVectorAngle
	 * @return float
	 */
	function GetVectorAngle(){}

	/**
	 * GetVectorLength
	 * @return float
	 */
	function GetVectorLength(){}

	/**
	 * Normalize
	 */
	function Normalize(){}

	/**
	 * SetVectorAngle
	 * @param float $degrees
	 */
	function SetVectorAngle($degrees){}

	/**
	 * SetVectorLength
	 * @param float $length
	 */
	function SetVectorLength($length){}
}

class wxPoint2DInt
{
	/**
	 * wxPoint2DInt
	 * @param integer $x
	 * @param integer $y
	 * @param wxPoint2DInt $pt
	 */
	function __construct($x, $y, wxPoint2DInt $pt, wxPoint $pt){}

	/**
	 * GetCrossProduct
	 * @param wxPoint2DInt $vec
	 * @return integer
	 */
	function GetCrossProduct(wxPoint2DInt $vec){}

	/**
	 * GetDistance
	 * @param wxPoint2DInt $pt
	 * @return float
	 */
	function GetDistance(wxPoint2DInt $pt){}

	/**
	 * GetDistanceSquare
	 * @param wxPoint2DInt $pt
	 * @return float
	 */
	function GetDistanceSquare(wxPoint2DInt $pt){}

	/**
	 * GetDotProduct
	 * @param wxPoint2DInt $vec
	 * @return integer
	 */
	function GetDotProduct(wxPoint2DInt $vec){}

	/**
	 * GetFloor
	 * @param integer $x
	 * @param integer $y
	 */
	function GetFloor($x, $y){}

	/**
	 * GetRounded
	 * @param integer $x
	 * @param integer $y
	 */
	function GetRounded($x, $y){}

	/**
	 * GetVectorAngle
	 * @return float
	 */
	function GetVectorAngle(){}

	/**
	 * GetVectorLength
	 * @return float
	 */
	function GetVectorLength(){}

	/**
	 * Normalize
	 */
	function Normalize(){}

	/**
	 * SetVectorAngle
	 * @param float $degrees
	 */
	function SetVectorAngle($degrees){}

	/**
	 * SetVectorLength
	 * @param float $length
	 */
	function SetVectorLength($length){}
}

class wxPopupTransientWindow extends wxPopupWindow
{
	/**
	 * Constructor.
	 * @param wxWindow $parent
	 * @param integer $flags
	 */
	function __construct(wxWindow &$parent, $flags=wxBORDER_NONE){}

	/**
	 * Hide the window.
	 */
	function Dismiss(){}

	/**
	 * Popup the window (this will show it too).
	 * @param wxWindow $focus
	 */
	function Popup(wxWindow &$focus=null){}

	/**
	 * Called when a mouse is pressed while the popup is shown.
	 * @param wxMouseEvent $event
	 * @return bool
	 */
	function ProcessLeftDown(wxMouseEvent &$event){}
}

class wxPopupWindow extends wxNonOwnedWindow
{
	/**
	 * Constructor.
	 * @param wxWindow $parent
	 * @param integer $flags
	 */
	function __construct(wxWindow &$parent, $flags=wxBORDER_NONE){}

	/**
	 * Create method for two-step creation.
	 * @param wxWindow $parent
	 * @param integer $flags
	 * @return bool
	 */
	function Create(wxWindow &$parent, $flags=wxBORDER_NONE){}

	/**
	 * Move the popup window to the right position, i.e.
	 * @param wxPoint $ptOrigin
	 * @param wxSize $sizePopup
	 */
	function Position(wxPoint $ptOrigin, wxSize $sizePopup){}
}

class wxPosition
{
	/**
	 * Construct a new wxPosition, setting the row and column to the default value of (0, 0).
	 * @param integer $row
	 * @param integer $col
	 */
	function __construct($row, $col){}

	/**
	 * A synonym for GetColumn().
	 * @return integer
	 */
	function GetCol(){}

	/**
	 * Get the current row value.
	 * @return integer
	 */
	function GetColumn(){}

	/**
	 * Get the current row value.
	 * @return integer
	 */
	function GetRow(){}

	/**
	 * A synonym for SetColumn().
	 * @param integer $column
	 */
	function SetCol($column){}

	/**
	 * Set a new column value.
	 * @param integer $column
	 */
	function SetColumn($column){}

	/**
	 * Set a new row value.
	 * @param integer $row
	 */
	function SetRow($row){}
}

class wxPostScriptDC extends wxDC
{
	/**
	 * wxPostScriptDC
	 * @param wxPrintData $printData
	 */
	function __construct(wxPrintData $printData){}
}

class wxPreviewCanvas extends wxScrolledWindow
{
	/**
	 * Constructor.
	 * @param wxPrintPreview $preview
	 * @param wxWindow $parent
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param string $name
	 */
	function __construct(wxPrintPreview &$preview, wxWindow &$parent, wxPoint $pos=null, wxSize $size=null, $style, $name="canvas"){}
}

class wxPreviewControlBar extends wxPanel
{
	/**
	 * Constructor.
	 * @param wxPrintPreview $preview
	 * @param integer $buttons
	 * @param wxWindow $parent
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param string $name
	 */
	function __construct(wxPrintPreview &$preview, $buttons, wxWindow &$parent, wxPoint $pos=null, wxSize $size=null, $style, $name="panel"){}

	/**
	 * Creates buttons, according to value of the button style flags.
	 */
	function CreateButtons(){}

	/**
	 * Gets the current zoom setting in percent.
	 * @return integer
	 */
	function GetZoomControl(){}

	/**
	 * Sets the zoom control.
	 * @param integer $percent
	 */
	function SetZoomControl($percent){}
}

class wxPreviewFrame extends wxFrame
{
	/**
	 * Creates a wxPreviewCanvas.
	 */
	function CreateCanvas(){}

	/**
	 * Creates a wxPreviewControlBar.
	 */
	function CreateControlBar(){}

	/**
	 * Initializes the frame elements and prepares for showing it.
	 */
	function Initialize(){}

	/**
	 * Initializes the frame elements and prepares for showing it with the given modality kind.
	 * @param wxPreviewFrameModalityKind $kind
	 */
	function InitializeWithModality(wxPreviewFrameModalityKind $kind){}
}

class wxPrintData extends wxObject
{
	/**
	 * Default constructor.
	 */
	function __construct(){}

	/**
	 * Returns the current bin (papersource).
	 * @return wxPrintBin
	 */
	function GetBin(){}

	/**
	 * Returns true if collation is on.
	 * @return bool
	 */
	function GetCollate(){}

	/**
	 * Returns true if colour printing is on.
	 * @return bool
	 */
	function GetColour(){}

	/**
	 * Returns the duplex mode.
	 * @return wxDuplexMode
	 */
	function GetDuplex(){}

	/**
	 * GetFilename
	 * @return string
	 */
	function GetFilename(){}

	/**
	 * Returns the number of copies requested by the user.
	 * @return integer
	 */
	function GetNoCopies(){}

	/**
	 * Gets the orientation.
	 * @return wxPrintOrientation
	 */
	function GetOrientation(){}

	/**
	 * Returns the paper size id.
	 * @return wxPaperSize
	 */
	function GetPaperId(){}

	/**
	 * GetPrintMode
	 * @return wxPrintMode
	 */
	function GetPrintMode(){}

	/**
	 * Returns the printer name.
	 * @return string
	 */
	function GetPrinterName(){}

	/**
	 * Returns the current print quality.
	 * @return integer
	 */
	function GetQuality(){}

	/**
	 * Returns true if the print data is valid for using in print dialogs.
	 * @return bool
	 */
	function IsOk(){}

	/**
	 * Sets the current bin.
	 * @param wxPrintBin $flag
	 */
	function SetBin(wxPrintBin $flag){}

	/**
	 * Sets collation to on or off.
	 * @param bool $flag
	 */
	function SetCollate($flag){}

	/**
	 * Sets colour printing on or off.
	 * @param bool $flag
	 */
	function SetColour($flag){}

	/**
	 * Returns the duplex mode.
	 * @param wxDuplexMode $mode
	 */
	function SetDuplex(wxDuplexMode $mode){}

	/**
	 * SetFilename
	 * @param string $filename
	 */
	function SetFilename($filename){}

	/**
	 * Sets the default number of copies to be printed out.
	 * @param integer $n
	 */
	function SetNoCopies($n){}

	/**
	 * Sets the orientation.
	 * @param wxPrintOrientation $orientation
	 */
	function SetOrientation(wxPrintOrientation $orientation){}

	/**
	 * Sets the paper id.
	 * @param wxPaperSize $paperId
	 */
	function SetPaperId(wxPaperSize $paperId){}

	/**
	 * SetPrintMode
	 * @param wxPrintMode $printMode
	 */
	function SetPrintMode(wxPrintMode $printMode){}

	/**
	 * Sets the printer name.
	 * @param string $printerName
	 */
	function SetPrinterName($printerName){}

	/**
	 * Sets the desired print quality.
	 * @param integer $quality
	 */
	function SetQuality($quality){}
}

class wxPrintDialog extends wxDialog
{
	/**
	 * Constructor.
	 * @param wxWindow $parent
	 * @param wxPrintDialogData $data
	 */
	function __construct(wxWindow &$parent, wxPrintDialogData &$data=null){}

	/**
	 * Returns the device context created by the print dialog, if any.
	 * @return wxDC
	 */
	function GetPrintDC(){}

	/**
	 * Returns the print dialog data associated with the print dialog.
	 * @return wxPrintDialogData
	 */
	function GetPrintDialogData(){}

	/**
	 * Shows the dialog, returning wxID_OK if the user pressed OK, and wxID_CANCEL otherwise.
	 * @return integer
	 */
	function ShowModal(){}
}

class wxPrintDialogData extends wxObject
{
	/**
	 * Default constructor.
	 * @param wxPrintData $printData
	 */
	function __construct(wxPrintData $printData){}

	/**
	 * Enables or disables the "Help" button.
	 * @param bool $flag
	 */
	function EnableHelp($flag){}

	/**
	 * Enables or disables the "Page numbers" controls.
	 * @param bool $flag
	 */
	function EnablePageNumbers($flag){}

	/**
	 * Enables or disables the "Print to file" checkbox.
	 * @param bool $flag
	 */
	function EnablePrintToFile($flag){}

	/**
	 * Enables or disables the "Selection" radio button.
	 * @param bool $flag
	 */
	function EnableSelection($flag){}

	/**
	 * Returns true if the user requested that all pages be printed.
	 * @return bool
	 */
	function GetAllPages(){}

	/**
	 * Returns true if the user requested that the document(s) be collated.
	 * @return bool
	 */
	function GetCollate(){}

	/**
	 * Returns the from page number, as entered by the user.
	 * @return integer
	 */
	function GetFromPage(){}

	/**
	 * Returns the maximum page number.
	 * @return integer
	 */
	function GetMaxPage(){}

	/**
	 * Returns the minimum page number.
	 * @return integer
	 */
	function GetMinPage(){}

	/**
	 * Returns the number of copies requested by the user.
	 * @return integer
	 */
	function GetNoCopies(){}

	/**
	 * Returns a reference to the internal wxPrintData object.
	 * @return wxPrintData
	 */
	function GetPrintData(){}

	/**
	 * Returns true if the user has selected printing to a file.
	 * @return bool
	 */
	function GetPrintToFile(){}

	/**
	 * Returns true if the user requested that the selection be printed (where "selection" is a concept specific to the application).
	 * @return bool
	 */
	function GetSelection(){}

	/**
	 * Returns the "print to" page number, as entered by the user.
	 * @return integer
	 */
	function GetToPage(){}

	/**
	 * Returns true if the print data is valid for using in print dialogs.
	 * @return bool
	 */
	function IsOk(){}

	/**
	 * Sets the "Collate" checkbox to true or false.
	 * @param bool $flag
	 */
	function SetCollate($flag){}

	/**
	 * Sets the from page number.
	 * @param integer $page
	 */
	function SetFromPage($page){}

	/**
	 * Sets the maximum page number.
	 * @param integer $page
	 */
	function SetMaxPage($page){}

	/**
	 * Sets the minimum page number.
	 * @param integer $page
	 */
	function SetMinPage($page){}

	/**
	 * Sets the default number of copies the user has requested to be printed out.
	 * @param integer $n
	 */
	function SetNoCopies($n){}

	/**
	 * Sets the internal wxPrintData.
	 * @param wxPrintData $printData
	 */
	function SetPrintData(wxPrintData $printData){}

	/**
	 * Sets the "Print to file" checkbox to true or false.
	 * @param bool $flag
	 */
	function SetPrintToFile($flag){}

	/**
	 * Selects the "Selection" radio button.
	 * @param bool $flag
	 */
	function SetSelection($flag){}

	/**
	 * Sets the "print to" page number.
	 * @param integer $page
	 */
	function SetToPage($page){}
}

class wxPrintPreview extends wxObject
{
	/**
	 * Constructor.
	 * @param wxPrintout $printout
	 * @param wxPrintout $printoutForPrinting
	 * @param wxPrintDialogData $data
	 */
	function __construct(wxPrintout &$printout, wxPrintout &$printoutForPrinting=null, wxPrintDialogData &$data=null){}

	/**
	 * Gets the preview window used for displaying the print preview image.
	 * @return wxPreviewCanvas
	 */
	function GetCanvas(){}

	/**
	 * Gets the page currently being previewed.
	 * @return integer
	 */
	function GetCurrentPage(){}

	/**
	 * Gets the frame used for displaying the print preview canvas and control bar.
	 * @return wxFrame
	 */
	function GetFrame(){}

	/**
	 * Returns the maximum page number.
	 * @return integer
	 */
	function GetMaxPage(){}

	/**
	 * Returns the minimum page number.
	 * @return integer
	 */
	function GetMinPage(){}

	/**
	 * Gets the preview printout object associated with the wxPrintPreview object.
	 * @return wxPrintout
	 */
	function GetPrintout(){}

	/**
	 * Gets the printout object to be used for printing from within the preview interface, or NULL if none exists.
	 * @return wxPrintout
	 */
	function GetPrintoutForPrinting(){}

	/**
	 * Returns true if the wxPrintPreview is valid, false otherwise.
	 * @return bool
	 */
	function IsOk(){}

	/**
	 * This refreshes the preview window with the preview image.
	 * @param wxPreviewCanvas $canvas
	 * @param wxDC $dc
	 * @return bool
	 */
	function PaintPage(wxPreviewCanvas &$canvas, wxDC &$dc){}

	/**
	 * Invokes the print process using the second wxPrintout object supplied in the wxPrintPreview constructor.
	 * @param bool $prompt
	 * @return bool
	 */
	function PrintMethod($prompt){}

	/**
	 * Renders a page into a wxMemoryDC.
	 * @param integer $pageNum
	 * @return bool
	 */
	function RenderPage($pageNum){}

	/**
	 * Sets the window to be used for displaying the print preview image.
	 * @param wxPreviewCanvas $window
	 */
	function SetCanvas(wxPreviewCanvas &$window){}

	/**
	 * Sets the current page to be previewed.
	 * @param integer $pageNum
	 * @return bool
	 */
	function SetCurrentPage($pageNum){}

	/**
	 * Sets the frame to be used for displaying the print preview canvas and control bar.
	 * @param wxFrame $frame
	 */
	function SetFrame(wxFrame &$frame){}

	/**
	 * Associates a printout object with the wxPrintPreview object.
	 * @param wxPrintout $printout
	 */
	function SetPrintout(wxPrintout &$printout){}

	/**
	 * Sets the percentage preview zoom, and refreshes the preview canvas accordingly.
	 * @param integer $percent
	 */
	function SetZoom($percent){}
}

class wxPrinter extends wxObject
{
	/**
	 * Constructor.
	 * @param wxPrintDialogData $data
	 */
	function __construct(wxPrintDialogData &$data=null){}

	/**
	 * Creates the default printing abort window, with a cancel button.
	 * @param wxWindow $parent
	 * @param wxPrintout $printout
	 * @return wxWindow
	 */
	function CreateAbortWindow(wxWindow &$parent, wxPrintout &$printout){}

	/**
	 * Returns true if the user has aborted the print job.
	 * @return bool
	 */
	function GetAbort(){}

	/**
	 * Return last error.
	 * @return wxPrinterError
	 */
	function GetLastError(){}

	/**
	 * Returns the print data associated with the printer object.
	 * @return wxPrintDialogData
	 */
	function GetPrintDialogData(){}

	/**
	 * Starts the printing process.
	 * @param wxWindow $parent
	 * @param wxPrintout $printout
	 * @param bool $prompt
	 * @return bool
	 */
	function PrintMethod(wxWindow &$parent, wxPrintout &$printout, $prompt=true){}

	/**
	 * Invokes the print dialog.
	 * @param wxWindow $parent
	 * @return wxDC
	 */
	function PrintDialog(wxWindow &$parent){}

	/**
	 * Default error-reporting function.
	 * @param wxWindow $parent
	 * @param wxPrintout $printout
	 * @param string $message
	 */
	function ReportError(wxWindow &$parent, wxPrintout &$printout, $message){}

	/**
	 * Invokes the print setup dialog.
	 * @param wxWindow $parent
	 * @return bool
	 */
	function Setup(wxWindow &$parent){}
}

class wxPrinterDC extends wxDC
{
	/**
	 * Constructor.
	 * @param wxPrintData $printData
	 */
	function __construct(wxPrintData $printData){}

	/**
	 * Return the rectangle in device coordinates that corresponds to the full paper area, including the nonprinting regions of the paper.
	 * @return wxRect
	 */
	function GetPaperRect(){}
}

class wxPrintout extends wxObject
{
	/**
	 * Constructor.
	 * @param string $title
	 */
	function __construct($title="Printout"){}

	/**
	 * Set the user scale and device origin of the wxDC associated with this wxPrintout so that the given image size fits entirely within the page rectangle and the origin is at the top left corner of the page rectangle.
	 * @param wxSize $imageSize
	 */
	function FitThisSizeToPage(wxSize $imageSize){}

	/**
	 * Set the user scale and device origin of the wxDC associated with this wxPrintout so that the given image size fits entirely within the page margins set in the given wxPageSetupDialogData object.
	 * @param wxSize $imageSize
	 * @param wxPageSetupDialogData $pageSetupData
	 */
	function FitThisSizeToPageMargins(wxSize $imageSize, wxPageSetupDialogData $pageSetupData){}

	/**
	 * Set the user scale and device origin of the wxDC associated with this wxPrintout so that the given image size fits entirely within the paper and the origin is at the top left corner of the paper.
	 * @param wxSize $imageSize
	 */
	function FitThisSizeToPaper(wxSize $imageSize){}

	/**
	 * Returns the device context associated with the printout (given to the printout at start of printing or previewing).
	 * @return wxDC
	 */
	function GetDC(){}

	/**
	 * Return the rectangle corresponding to the page margins specified by the given wxPageSetupDialogData object in the associated wxDC's logical coordinates for the current user scale and device origin.
	 * @param wxPageSetupDialogData $pageSetupData
	 * @return wxRect
	 */
	function GetLogicalPageMarginsRect(wxPageSetupDialogData $pageSetupData){}

	/**
	 * Return the rectangle corresponding to the page in the associated wxDC 's logical coordinates for the current user scale and device origin.
	 * @return wxRect
	 */
	function GetLogicalPageRect(){}

	/**
	 * Return the rectangle corresponding to the paper in the associated wxDC 's logical coordinates for the current user scale and device origin.
	 * @return wxRect
	 */
	function GetLogicalPaperRect(){}

	/**
	 * Returns the number of pixels per logical inch of the printer device context.
	 * @param integer $w
	 * @param integer $h
	 */
	function GetPPIPrinter(&$w, &$h){}

	/**
	 * Returns the number of pixels per logical inch of the screen device context.
	 * @param integer $w
	 * @param integer $h
	 */
	function GetPPIScreen(&$w, &$h){}

	/**
	 * Called by the framework to obtain information from the application about minimum and maximum page values that the user can select, and the required page range to be printed.
	 * @param integer $minPage
	 * @param integer $maxPage
	 * @param integer $pageFrom
	 * @param integer $pageTo
	 */
	function GetPageInfo(&$minPage, &$maxPage, &$pageFrom, &$pageTo){}

	/**
	 * Returns the size of the printer page in millimetres.
	 * @param integer $w
	 * @param integer $h
	 */
	function GetPageSizeMM(&$w, &$h){}

	/**
	 * Returns the size of the printer page in pixels, called the page rectangle.
	 * @param integer $w
	 * @param integer $h
	 */
	function GetPageSizePixels(&$w, &$h){}

	/**
	 * Returns the rectangle that corresponds to the entire paper in pixels, called the paper rectangle.
	 * @return wxRect
	 */
	function GetPaperRectPixels(){}

	/**
	 * Returns the associated preview object if any.
	 * @return wxPrintPreview
	 */
	function GetPreview(){}

	/**
	 * Returns the title of the printout.
	 * @return string
	 */
	function GetTitle(){}

	/**
	 * Should be overridden to return true if the document has this page, or false if not.
	 * @param integer $pageNum
	 * @return bool
	 */
	function HasPage($pageNum){}

	/**
	 * Returns true if the printout is currently being used for previewing.
	 * @return bool
	 */
	function IsPreview(){}

	/**
	 * Set the user scale and device origin of the wxDC associated with this wxPrintout so that one screen pixel maps to one device pixel on the DC.
	 */
	function MapScreenSizeToDevice(){}

	/**
	 * This sets the user scale of the wxDC associated with this wxPrintout to the same scale as MapScreenSizeToPaper() but sets the logical origin to the top left corner of the page rectangle.
	 */
	function MapScreenSizeToPage(){}

	/**
	 * This sets the user scale of the wxDC associated with this wxPrintout to the same scale as MapScreenSizeToPageMargins() but sets the logical origin to the top left corner of the page margins specified by the given wxPageSetupDialogData object.
	 * @param wxPageSetupDialogData $pageSetupData
	 */
	function MapScreenSizeToPageMargins(wxPageSetupDialogData $pageSetupData){}

	/**
	 * Set the user scale and device origin of the wxDC associated with this wxPrintout so that the printed page matches the screen size as closely as possible and the logical origin is in the top left corner of the paper rectangle.
	 */
	function MapScreenSizeToPaper(){}

	/**
	 * Shift the device origin by an amount specified in logical coordinates.
	 * @param integer $xoff
	 * @param integer $yoff
	 */
	function OffsetLogicalOrigin($xoff, $yoff){}

	/**
	 * Called by the framework at the start of document printing.
	 * @param integer $startPage
	 * @param integer $endPage
	 * @return bool
	 */
	function OnBeginDocument($startPage, $endPage){}

	/**
	 * Called by the framework at the start of printing.
	 */
	function OnBeginPrinting(){}

	/**
	 * Called by the framework at the end of document printing.
	 */
	function OnEndDocument(){}

	/**
	 * Called by the framework at the end of printing.
	 */
	function OnEndPrinting(){}

	/**
	 * Called once by the framework before any other demands are made of the wxPrintout object.
	 */
	function OnPreparePrinting(){}

	/**
	 * Called by the framework when a page should be printed.
	 * @param integer $pageNum
	 * @return bool
	 */
	function OnPrintPage($pageNum){}

	/**
	 * Set the device origin of the associated wxDC so that the current logical point becomes the new logical origin.
	 * @param integer $x
	 * @param integer $y
	 */
	function SetLogicalOrigin($x, $y){}
}

class wxProcess extends wxEvtHandler
{
	/**
	 * Constructs a process object.
	 * @param wxEvtHandler $parent
	 * @param integer $id
	 * @param integer $flags
	 */
	function __construct(wxEvtHandler &$parent=null, $id=-1, $flags){}

	/**
	 * Closes the output stream (the one connected to the stdin of the child process).
	 */
	function CloseOutput(){}

	/**
	 * Detaches this event handler from the parent specified in the constructor (see wxEvtHandler::Unlink() for a similar but not identic function).
	 */
	function Detach(){}

	/**
	 * Returns true if the given process exists in the system.
	 * @param integer $pid
	 * @return bool
	 */
	function Exists($pid){}

	/**
	 * Returns an input stream which corresponds to the standard error output (stderr) of the child process.
	 * @return wxInputStream
	 */
	function GetErrorStream(){}

	/**
	 * It returns an input stream corresponding to the standard output stream of the subprocess.
	 * @return wxInputStream
	 */
	function GetInputStream(){}

	/**
	 * It returns an output stream corresponding to the input stream of the subprocess.
	 * @return wxOutputStream
	 */
	function GetOutputStream(){}

	/**
	 * Returns the process ID of the process launched by Open() or set by wxExecute() (if you passed this wxProcess as argument).
	 * @return integer
	 */
	function GetPid(){}

	/**
	 * Returns true if there is data to be read on the child process standard error stream.
	 * @return bool
	 */
	function IsErrorAvailable(){}

	/**
	 * Returns true if there is data to be read on the child process standard output stream.
	 * @return bool
	 */
	function IsInputAvailable(){}

	/**
	 * Returns true if the child process standard output stream is opened.
	 * @return bool
	 */
	function IsInputOpened(){}

	/**
	 * Send the specified signal to the given process.
	 * @param integer $pid
	 * @param wxSignal $sig
	 * @param integer $flags
	 * @return wxKillError
	 */
	function Kill($pid, wxSignal $sig=null, $flags=wxKILL_NOCHILDREN){}

	/**
	 * It is called when the process with the pid pid finishes.
	 * @param integer $pid
	 * @param integer $status
	 */
	function OnTerminate($pid, $status){}

	/**
	 * This static method replaces the standard popen() function: it launches the process specified by the cmd parameter and returns the wxProcess object which can be used to retrieve the streams connected to the standard input, output and error output of the child process.
	 * @param string $cmd
	 * @param integer $flags
	 * @return wxProcess
	 */
	function Open($cmd, $flags=wxEXEC_ASYNC){}

	/**
	 * Turns on redirection.
	 */
	function Redirect(){}
}

class wxProcessEvent extends wxEvent
{
	/**
	 * Constructor.
	 * @param integer $id
	 * @param integer $pid
	 * @param integer $exitcode
	 */
	function __construct($id, $pid, $exitcode){}

	/**
	 * Returns the exist status.
	 * @return integer
	 */
	function GetExitCode(){}

	/**
	 * Returns the process id.
	 * @return integer
	 */
	function GetPid(){}
}

class wxProgressDialog extends wxDialog
{
	/**
	 * wxProgressDialog
	 * @param string $title
	 * @param string $message
	 * @param integer $maximum
	 * @param wxWindow $parent
	 * @param integer $style
	 */
	function __construct($title, $message, $maximum=100, wxWindow &$parent=null, $style=null){}
}

class wxPropertySheetDialog extends wxDialog
{
	/**
	 * Constructor.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param string $title
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param string $name
	 */
	function __construct(wxWindow &$parent, $id, $title, wxPoint $pos=null, wxSize $size=null, $style=wxDEFAULT_DIALOG_STYLE, $name=wxDialogNameStr){}

	/**
	 * Override this if you wish to add the book control in a way different from the standard way (for example, using different spacing).
	 * @param wxSizer $sizer
	 */
	function AddBookCtrl(wxSizer &$sizer){}

	/**
	 * Call this from your own Create function, before adding buttons and pages.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param string $title
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param string $name
	 * @return bool
	 */
	function Create(wxWindow &$parent, $id, $title, wxPoint $pos=null, wxSize $size=null, $style=wxDEFAULT_DIALOG_STYLE, $name=wxDialogNameStr){}

	/**
	 * Override this if you wish to create a different kind of book control; by default, the value passed to SetSheetStyle() is used to determine the control.
	 * @return wxBookCtrlBase
	 */
	function CreateBookCtrl(){}

	/**
	 * Call this to create the buttons for the dialog.
	 * @param integer $flags
	 */
	function CreateButtons($flags=null){}

	/**
	 * Returns the book control that will contain your settings pages.
	 * @return wxBookCtrlBase
	 */
	function GetBookCtrl(){}

	/**
	 * Returns the inner sizer that contains the book control and button sizer.
	 * @return wxSizer
	 */
	function GetInnerSizer(){}

	/**
	 * Returns the sheet style.
	 * @return integer
	 */
	function GetSheetStyle(){}

	/**
	 * Call this to lay out the dialog.
	 * @param integer $centreFlags
	 */
	function LayoutDialog($centreFlags=wxBOTH){}

	/**
	 * Sets the book control used for the dialog.
	 * @param wxBookCtrlBase $bookCtrl
	 */
	function SetBookCtrl(wxBookCtrlBase &$bookCtrl){}

	/**
	 * You can customize the look and feel of the dialog by setting the sheet style.
	 * @param integer $style
	 */
	function SetSheetStyle($style){}
}

class wxQueryLayoutInfoEvent extends wxEvent
{
	/**
	 * Constructor.
	 * @param integer $id
	 */
	function __construct($id){}

	/**
	 * Specifies the alignment of the window (which side of the remaining parent client area the window sticks to).
	 * @return wxLayoutAlignment
	 */
	function GetAlignment(){}

	/**
	 * Returns the flags associated with this event.
	 * @return integer
	 */
	function GetFlags(){}

	/**
	 * Returns the orientation that the event handler specified to the event object.
	 * @return wxLayoutOrientation
	 */
	function GetOrientation(){}

	/**
	 * Returns the requested length of the window in the direction of the window orientation.
	 * @return integer
	 */
	function GetRequestedLength(){}

	/**
	 * Returns the size that the event handler specified to the event object as being the requested size of the window.
	 * @return wxSize
	 */
	function GetSize(){}

	/**
	 * Call this to specify the alignment of the window (which side of the remaining parent client area the window sticks to).
	 * @param wxLayoutAlignment $alignment
	 */
	function SetAlignment(wxLayoutAlignment $alignment){}

	/**
	 * Sets the flags associated with this event.
	 * @param integer $flags
	 */
	function SetFlags($flags){}

	/**
	 * Call this to specify the orientation of the window.
	 * @param wxLayoutOrientation $orientation
	 */
	function SetOrientation(wxLayoutOrientation $orientation){}

	/**
	 * Sets the requested length of the window in the direction of the window orientation.
	 * @param integer $length
	 */
	function SetRequestedLength($length){}

	/**
	 * Call this to let the calling code know what the size of the window is.
	 * @param wxSize $size
	 */
	function SetSize(wxSize $size){}
}

class wxRadioBox extends wxControl
{
	/**
	 * Default constructor.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param string $label
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param array $choices
	 * @param integer $majorDimension
	 * @param integer $style
	 * @param wxValidator $validator
	 * @param string $name
	 */
	function __construct(wxWindow &$parent, $id, $label, wxPoint $pos, wxSize $size, array $choices, $majorDimension, $style=wxRA_SPECIFY_COLS, wxValidator $validator=null, $name=wxRadioBoxNameStr){}

	/**
	 * Creates the radiobox for two-step construction.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param string $label
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $n
	 * @param string $choices
	 * @param integer $majorDimension
	 * @param integer $style
	 * @param wxValidator $validator
	 * @param string $name
	 * @return bool
	 */
	function Create(wxWindow &$parent, $id, $label, wxPoint $pos=null, wxSize $size=null, $n, $choices=NULL, $majorDimension, $style=wxRA_SPECIFY_COLS, wxValidator $validator=null, $name=wxRadioBoxNameStr, wxWindow &$parent, $id, $label, wxPoint $pos, wxSize $size, array $choices, $majorDimension, $style=wxRA_SPECIFY_COLS, wxValidator $validator=null, $name=wxRadioBoxNameStr){}

	/**
	 * Enables or disables an individual button in the radiobox.
	 * @param integer $n
	 * @param bool $enable
	 * @return bool
	 */
	function Enable($n, $enable=true){}

	/**
	 * Finds a button matching the given string, returning the position if found, or wxNOT_FOUND if not found.
	 * @param string $string
	 * @param bool $bCase
	 * @return integer
	 */
	function FindString($string, $bCase=false){}

	/**
	 * Returns the number of columns in the radiobox.
	 * @return integer
	 */
	function GetColumnCount(){}

	/**
	 * Returns the number of items in the control.
	 * @return integer
	 */
	function GetCount(){}

	/**
	 * Returns a radio box item under the point, a zero-based item index, or wxNOT_FOUND if no item is under the point.
	 * @param wxPoint $pt
	 * @return integer
	 */
	function GetItemFromPoint(wxPoint $pt){}

	/**
	 * Returns the helptext associated with the specified item if any or wxEmptyString.
	 * @param integer $item
	 * @return string
	 */
	function GetItemHelpText($item){}

	/**
	 * Returns the tooltip associated with the specified item if any or NULL.
	 * @param integer $item
	 * @return wxToolTip
	 */
	function GetItemToolTip($item){}

	/**
	 * Returns the number of rows in the radiobox.
	 * @return integer
	 */
	function GetRowCount(){}

	/**
	 * Returns the index of the selected item or wxNOT_FOUND if no item is selected.
	 * @return integer
	 */
	function GetSelection(){}

	/**
	 * Returns the label of the item with the given index.
	 * @param integer $n
	 * @return string
	 */
	function GetString($n){}

	/**
	 * Returns true if the item is enabled or false if it was disabled using Enable(n, false).
	 * @param integer $n
	 * @return bool
	 */
	function IsItemEnabled($n){}

	/**
	 * Returns true if the item is currently shown or false if it was hidden using Show(n, false).
	 * @param integer $n
	 * @return bool
	 */
	function IsItemShown($n){}

	/**
	 * Sets the helptext for an item.
	 * @param integer $item
	 * @param string $helptext
	 */
	function SetItemHelpText($item, $helptext){}

	/**
	 * Sets the tooltip text for the specified item in the radio group.
	 * @param integer $item
	 * @param string $text
	 */
	function SetItemToolTip($item, $text){}

	/**
	 * Sets the selection to the given item n or removes the selection entirely if n == wxNOT_FOUND.
	 * @param integer $n
	 */
	function SetSelection($n){}

	/**
	 * Sets the label for the given item.
	 * @param integer $n
	 * @param string $string
	 */
	function SetString($n, $string){}

	/**
	 * Shows or hides individual buttons.
	 * @param integer $item
	 * @param bool $show
	 * @return bool
	 */
	function Show($item, $show=true){}
}

class wxRadioButton extends wxControl
{
	/**
	 * Default constructor.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param string $label
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param wxValidator $validator
	 * @param string $name
	 */
	function __construct(wxWindow &$parent, $id, $label, wxPoint $pos=null, wxSize $size=null, $style, wxValidator $validator=null, $name=wxRadioButtonNameStr){}

	/**
	 * Creates the choice for two-step construction.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param string $label
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param wxValidator $validator
	 * @param string $name
	 * @return bool
	 */
	function Create(wxWindow &$parent, $id, $label, wxPoint $pos=null, wxSize $size=null, $style, wxValidator $validator=null, $name=wxRadioButtonNameStr){}

	/**
	 * Returns true if the radio button is checked, false otherwise.
	 * @return bool
	 */
	function GetValue(){}

	/**
	 * Sets the radio button to checked or unchecked status.
	 * @param bool $value
	 */
	function SetValue($value){}
}

class wxRealPoint
{
	/**
	 * Initializes to zero the x and y members.
	 * @param float $x
	 * @param float $y
	 * @param wxPoint $pt
	 */
	function __construct($x, $y, wxPoint $pt){}
}

class wxRearrangeCtrl
{
	/**
	 * Default constructor.
	 */
	function __construct(){}

	/**
	 * Return the listbox which is the main part of this control.
	 * @return wxRearrangeList
	 */
	function GetList(){}
}

class wxRearrangeDialog
{
	/**
	 * Default constructor.
	 */
	function __construct(){}

	/**
	 * Customize the dialog by adding extra controls to it.
	 * @param wxWindow $win
	 */
	function AddExtraControls(wxWindow &$win){}

	/**
	 * Return the list control used by the dialog.
	 * @return wxRearrangeList
	 */
	function GetList(){}
}

class wxRearrangeList extends wxCheckListBox
{
	/**
	 * Default constructor.
	 */
	function __construct(){}

	/**
	 * Return true if the currently selected item can be moved down.
	 * @return bool
	 */
	function CanMoveCurrentDown(){}

	/**
	 * Return true if the currently selected item can be moved up.
	 * @return bool
	 */
	function CanMoveCurrentUp(){}

	/**
	 * Move the currently selected item one position below.
	 * @return bool
	 */
	function MoveCurrentDown(){}

	/**
	 * Move the currently selected item one position above.
	 * @return bool
	 */
	function MoveCurrentUp(){}
}

class wxRect
{
	/**
	 * Default constructor.
	 * @param integer $x
	 * @param integer $y
	 * @param integer $width
	 * @param integer $height
	 * @param wxPoint $topLeft
	 * @param wxPoint $bottomRight
	 * @param wxPoint $pos
	 * @param wxSize $size
	 */
	function __construct($x, $y, $width, $height, wxPoint $topLeft, wxPoint $bottomRight, wxPoint $pos, wxSize $size, wxSize $size){}

	/**
	 * Returns the rectangle having the same size as this one but centered relatively to the given rectangle r.
	 * @param wxRect $r
	 * @param integer $dir
	 * @return wxRect
	 */
	function CenterIn(wxRect $r, $dir=wxBOTH){}

	/**
	 * Returns the rectangle having the same size as this one but centered relatively to the given rectangle r.
	 * @param wxRect $r
	 * @param integer $dir
	 * @return wxRect
	 */
	function CentreIn(wxRect $r, $dir=wxBOTH){}

	/**
	 * Returns true if the given point is inside the rectangle (or on its boundary) and false otherwise.
	 * @param integer $x
	 * @param integer $y
	 * @param wxPoint $pt
	 * @param wxRect $rect
	 * @return bool
	 */
	function Contains($x, $y, wxPoint $pt, wxRect $rect){}

	/**
	 * Decrease the rectangle size.
	 * @param integer $dx
	 * @param integer $dy
	 * @param wxSize $diff
	 * @return wxRect
	 */
	function Deflate($dx, $dy, wxSize $diff, $diff, $dx, $dy){}

	/**
	 * Gets the bottom point of the rectangle.
	 * @return integer
	 */
	function GetBottom(){}

	/**
	 * Gets the position of the bottom left corner.
	 * @return wxPoint
	 */
	function GetBottomLeft(){}

	/**
	 * Gets the position of the bottom right corner.
	 * @return wxPoint
	 */
	function GetBottomRight(){}

	/**
	 * Gets the height member.
	 * @return integer
	 */
	function GetHeight(){}

	/**
	 * Gets the left point of the rectangle (the same as GetX()).
	 * @return integer
	 */
	function GetLeft(){}

	/**
	 * Gets the position.
	 * @return wxPoint
	 */
	function GetPosition(){}

	/**
	 * Gets the right point of the rectangle.
	 * @return integer
	 */
	function GetRight(){}

	/**
	 * Gets the size.
	 * @return wxSize
	 */
	function GetSize(){}

	/**
	 * Gets the top point of the rectangle (the same as GetY()).
	 * @return integer
	 */
	function GetTop(){}

	/**
	 * Gets the position of the top left corner of the rectangle, same as GetPosition().
	 * @return wxPoint
	 */
	function GetTopLeft(){}

	/**
	 * Gets the position of the top right corner.
	 * @return wxPoint
	 */
	function GetTopRight(){}

	/**
	 * Gets the width member.
	 * @return integer
	 */
	function GetWidth(){}

	/**
	 * Gets the x member.
	 * @return integer
	 */
	function GetX(){}

	/**
	 * Gets the y member.
	 * @return integer
	 */
	function GetY(){}

	/**
	 * Increases the size of the rectangle.
	 * @param integer $dx
	 * @param integer $dy
	 * @param integer $diff
	 * @return wxRect
	 */
	function Inflate($dx, $dy, $diff, wxSize $diff, $dx, $dy){}

	/**
	 * Returns the overlapping portion of this rectangle and the one passed in as parameter.
	 * @param wxRect $rect
	 * @return wxRect
	 */
	function Intersect(wxRect $rect, wxRect $rect){}

	/**
	 * Returns true if this rectangle has a non-empty intersection with the rectangle rect and false otherwise.
	 * @param wxRect $rect
	 * @return bool
	 */
	function Intersects(wxRect $rect){}

	/**
	 * Returns true if this rectangle has a width or height less than or equal to 0 and false otherwise.
	 * @return bool
	 */
	function IsEmpty(){}

	/**
	 * Moves the rectangle by the specified offset.
	 * @param integer $dx
	 * @param integer $dy
	 * @param wxPoint $pt
	 */
	function Offset($dx, $dy, wxPoint $pt){}

	/**
	 * Sets the height.
	 * @param integer $height
	 */
	function SetHeight($height){}

	/**
	 * Sets the size.
	 * @param wxSize $s
	 */
	function SetSize(wxSize $s){}

	/**
	 * Sets the width.
	 * @param integer $width
	 */
	function SetWidth($width){}

	/**
	 * Sets the x position.
	 * @param integer $x
	 */
	function SetX($x){}

	/**
	 * Sets the y position.
	 * @param integer $y
	 */
	function SetY($y){}

	/**
	 * Modifies the rectangle to contain the bounding box of this rectangle and the one passed in as parameter.
	 * @param wxRect $rect
	 * @return wxRect
	 */
	function Union(wxRect $rect){}
}

class wxRefCounter
{
	/**
	 * Default constructor.
	 */
	function __construct(){}

	/**
	 * Decrements the reference count associated with this shared data and, if it reaches zero, destroys this instance of wxRefCounter releasing its memory.
	 */
	function DecRef(){}

	/**
	 * Returns the reference count associated with this shared data.
	 * @return integer
	 */
	function GetRefCount(){}

	/**
	 * Increments the reference count associated with this shared data.
	 */
	function IncRef(){}
}

class wxRegion extends wxGDIObject
{
	/**
	 * Default constructor.
	 * @param integer $x
	 * @param integer $y
	 * @param integer $width
	 * @param integer $height
	 * @param wxPoint $topLeft
	 * @param wxPoint $bottomRight
	 * @param wxRect $rect
	 * @param wxRegion $region
	 * @param integer $n
	 * @param wxPoint $points
	 * @param wxPolygonFillMode $fillStyle
	 * @param wxBitmap $bmp
	 * @param wxColour $transColour
	 * @param integer $tolerance
	 */
	function __construct($x, $y, $width, $height, wxPoint $topLeft, wxPoint $bottomRight, wxRect $rect, wxRegion $region, $n, wxPoint $points, wxPolygonFillMode $fillStyle=null, wxBitmap $bmp, wxBitmap $bmp, wxColour $transColour, $tolerance){}

	/**
	 * Clears the current region.
	 */
	function Clear(){}

	/**
	 * Returns a value indicating whether the given point is contained within the region.
	 * @param integer $x
	 * @param integer $y
	 * @param wxPoint $pt
	 * @param integer $width
	 * @param integer $height
	 * @param wxRect $rect
	 * @return wxRegionContain
	 */
	function Contains($x, $y, wxPoint $pt, $x, $y, $width, $height, wxRect $rect){}

	/**
	 * Convert the region to a black and white bitmap with the white pixels being inside the region.
	 * @return wxBitmap
	 */
	function ConvertToBitmap(){}

	/**
	 * Returns the outer bounds of the region.
	 * @param integer $x
	 * @param integer $y
	 * @param integer $width
	 * @param integer $height
	 * @return wxRect
	 */
	function GetBox($x, $y, $width, $height){}

	/**
	 * Finds the intersection of this region and another, rectangular region, specified using position and size.
	 * @param integer $x
	 * @param integer $y
	 * @param integer $width
	 * @param integer $height
	 * @param wxRect $rect
	 * @param wxRegion $region
	 * @return bool
	 */
	function Intersect($x, $y, $width, $height, wxRect $rect, wxRegion $region){}

	/**
	 * Returns true if the region is empty, false otherwise.
	 * @return bool
	 */
	function IsEmpty(){}

	/**
	 * Returns true if the region is equal to, i.e.
	 * @param wxRegion $region
	 * @return bool
	 */
	function IsEqual(wxRegion $region){}

	/**
	 * Moves the region by the specified offsets in horizontal and vertical directions.
	 * @param integer $x
	 * @param integer $y
	 * @param wxPoint $pt
	 * @return bool
	 */
	function Offset($x, $y, wxPoint $pt){}

	/**
	 * Subtracts a rectangular region from this region.
	 * @param wxRect $rect
	 * @param wxRegion $region
	 * @return bool
	 */
	function Subtract(wxRect $rect, wxRegion $region){}

	/**
	 * Finds the union of this region and another, rectangular region, specified using position and size.
	 * @param integer $x
	 * @param integer $y
	 * @param integer $width
	 * @param integer $height
	 * @param wxRect $rect
	 * @param wxRegion $region
	 * @param wxBitmap $bmp
	 * @param wxColour $transColour
	 * @param integer $tolerance
	 * @return bool
	 */
	function Union($x, $y, $width, $height, wxRect $rect, wxRegion $region, wxBitmap $bmp, wxBitmap $bmp, wxColour $transColour, $tolerance){}

	/**
	 * Finds the Xor of this region and another, rectangular region, specified using position and size.
	 * @param integer $x
	 * @param integer $y
	 * @param integer $width
	 * @param integer $height
	 * @param wxRect $rect
	 * @param wxRegion $region
	 * @return bool
	 */
	function XorMethod($x, $y, $width, $height, wxRect $rect, wxRegion $region){}
}

class wxRendererNative
{
	/**
	 * Draw a check box.
	 * @param wxWindow $win
	 * @param wxDC $dc
	 * @param wxRect $rect
	 * @param integer $flags
	 */
	function DrawCheckBox(wxWindow &$win, wxDC &$dc, wxRect $rect, $flags){}

	/**
	 * Draw a native wxChoice.
	 * @param wxWindow $win
	 * @param wxDC $dc
	 * @param wxRect $rect
	 * @param integer $flags
	 */
	function DrawChoice(wxWindow &$win, wxDC &$dc, wxRect $rect, $flags){}

	/**
	 * Draw a native wxComboBox.
	 * @param wxWindow $win
	 * @param wxDC $dc
	 * @param wxRect $rect
	 * @param integer $flags
	 */
	function DrawComboBox(wxWindow &$win, wxDC &$dc, wxRect $rect, $flags){}

	/**
	 * Draw a button like the one used by wxComboBox to show a drop down window.
	 * @param wxWindow $win
	 * @param wxDC $dc
	 * @param wxRect $rect
	 * @param integer $flags
	 */
	function DrawComboBoxDropButton(wxWindow &$win, wxDC &$dc, wxRect $rect, $flags){}

	/**
	 * Draw a drop down arrow that is suitable for use outside a combo box.
	 * @param wxWindow $win
	 * @param wxDC $dc
	 * @param wxRect $rect
	 * @param integer $flags
	 */
	function DrawDropArrow(wxWindow &$win, wxDC &$dc, wxRect $rect, $flags){}

	/**
	 * Draw a focus rectangle using the specified rectangle.
	 * @param wxWindow $win
	 * @param wxDC $dc
	 * @param wxRect $rect
	 * @param integer $flags
	 */
	function DrawFocusRect(wxWindow &$win, wxDC &$dc, wxRect $rect, $flags){}

	/**
	 * Draw a blank push button that looks very similar to wxButton.
	 * @param wxWindow $win
	 * @param wxDC $dc
	 * @param wxRect $rect
	 * @param integer $flags
	 */
	function DrawPushButton(wxWindow &$win, wxDC &$dc, wxRect $rect, $flags){}

	/**
	 * Draw a selection rectangle underneath the text as used e.g.
	 * @param wxWindow $win
	 * @param wxDC $dc
	 * @param wxRect $rect
	 * @param integer $flags
	 */
	function DrawItemSelectionRect(wxWindow &$win, wxDC &$dc, wxRect $rect, $flags){}

	/**
	 * Draw a native wxRadioButton bitmap.
	 * @param wxWindow $win
	 * @param wxDC $dc
	 * @param wxRect $rect
	 * @param integer $flags
	 */
	function DrawRadioBitmap(wxWindow &$win, wxDC &$dc, wxRect $rect, $flags){}

	/**
	 * Draw the border for sash window: this border must be such that the sash drawn by DrawSplitterSash() blends into it well.
	 * @param wxWindow $win
	 * @param wxDC $dc
	 * @param wxRect $rect
	 * @param integer $flags
	 */
	function DrawSplitterBorder(wxWindow &$win, wxDC &$dc, wxRect $rect, $flags){}

	/**
	 * Draw a sash.
	 * @param wxWindow $win
	 * @param wxDC $dc
	 * @param wxSize $size
	 * @param integer $position
	 * @param wxOrientation $orient
	 * @param integer $flags
	 */
	function DrawSplitterSash(wxWindow &$win, wxDC &$dc, wxSize $size, $position, wxOrientation $orient, $flags){}

	/**
	 * Draw a native wxTextCtrl frame.
	 * @param wxWindow $win
	 * @param wxDC $dc
	 * @param wxRect $rect
	 * @param integer $flags
	 */
	function DrawTextCtrl(wxWindow &$win, wxDC &$dc, wxRect $rect, $flags){}

	/**
	 * Draw the expanded/collapsed icon for a tree control item.
	 * @param wxWindow $win
	 * @param wxDC $dc
	 * @param wxRect $rect
	 * @param integer $flags
	 */
	function DrawTreeItemButton(wxWindow &$win, wxDC &$dc, wxRect $rect, $flags){}

	/**
	 * Return the currently used renderer.
	 * @return wxRendererNative
	 */
	function Get(){}

	/**
	 * Returns the size of a check box.
	 * @param wxWindow $win
	 * @return wxSize
	 */
	function GetCheckBoxSize(wxWindow &$win){}

	/**
	 * Return the default (native) implementation for this platform -- this is also the one used by default but this may be changed by calling Set() in which case the return value of this method may be different from the return value of Get().
	 * @return wxRendererNative
	 */
	function GetDefault(){}

	/**
	 * Return the generic implementation of the renderer.
	 * @return wxRendererNative
	 */
	function GetGeneric(){}

	/**
	 * Returns the height of a header button, either a fixed platform height if available, or a generic height based on the win window's font.
	 * @param wxWindow $win
	 * @return integer
	 */
	function GetHeaderButtonHeight(wxWindow &$win){}

	/**
	 * Returns the horizontal margin on the left and right sides of header button's label.
	 * @param wxWindow $win
	 * @return integer
	 */
	function GetHeaderButtonMargin(wxWindow &$win){}

	/**
	 * Load the renderer from the specified DLL, the returned pointer must be deleted by caller if not NULL when it is not used any more.
	 * @param string $name
	 * @return wxRendererNative
	 */
	function Load($name){}

	/**
	 * Set the renderer to use, passing NULL reverts to using the default renderer (the global renderer must always exist).
	 * @param wxRendererNative $renderer
	 * @return wxRendererNative
	 */
	function Set(wxRendererNative &$renderer){}
}

class wxRibbonArtProvider
{
	/**
	 * Create a new art provider which is a clone of this one.
	 * @return wxRibbonArtProvider
	 */
	function CloneMethod(){}

	/**
	 * Draw the background for a wxRibbonButtonBar control.
	 * @param wxDC $dc
	 * @param wxWindow $wnd
	 * @param wxRect $rect
	 */
	function DrawButtonBarBackground(wxDC &$dc, wxWindow &$wnd, wxRect $rect){}

	/**
	 * Draw the background and chrome for a wxRibbonGallery control.
	 * @param wxDC $dc
	 * @param wxRibbonGallery $wnd
	 * @param wxRect $rect
	 */
	function DrawGalleryBackground(wxDC &$dc, wxRibbonGallery &$wnd, wxRect $rect){}

	/**
	 * Draw the background of a single item in a wxRibbonGallery control.
	 * @param wxDC $dc
	 * @param wxRibbonGallery $wnd
	 * @param wxRect $rect
	 * @param wxRibbonGalleryItem $item
	 */
	function DrawGalleryItemBackground(wxDC &$dc, wxRibbonGallery &$wnd, wxRect $rect, wxRibbonGalleryItem &$item){}

	/**
	 * Draw a minimised ribbon panel.
	 * @param wxDC $dc
	 * @param wxRibbonPanel $wnd
	 * @param wxRect $rect
	 * @param wxBitmap $bitmap
	 */
	function DrawMinimisedPanel(wxDC &$dc, wxRibbonPanel &$wnd, wxRect $rect, wxBitmap &$bitmap){}

	/**
	 * Draw the background of a ribbon page.
	 * @param wxDC $dc
	 * @param wxWindow $wnd
	 * @param wxRect $rect
	 */
	function DrawPageBackground(wxDC &$dc, wxWindow &$wnd, wxRect $rect){}

	/**
	 * Draw the background and chrome for a ribbon panel.
	 * @param wxDC $dc
	 * @param wxRibbonPanel $wnd
	 * @param wxRect $rect
	 */
	function DrawPanelBackground(wxDC &$dc, wxRibbonPanel &$wnd, wxRect $rect){}

	/**
	 * Draw a ribbon-style scroll button.
	 * @param wxDC $dc
	 * @param wxWindow $wnd
	 * @param wxRect $rect
	 * @param integer $style
	 */
	function DrawScrollButton(wxDC &$dc, wxWindow &$wnd, wxRect $rect, $style){}

	/**
	 * Draw the background of the tab region of a ribbon bar.
	 * @param wxDC $dc
	 * @param wxWindow $wnd
	 * @param wxRect $rect
	 */
	function DrawTabCtrlBackground(wxDC &$dc, wxWindow &$wnd, wxRect $rect){}

	/**
	 * Draw a separator between two tabs in a ribbon bar.
	 * @param wxDC $dc
	 * @param wxWindow $wnd
	 * @param wxRect $rect
	 * @param float $visibility
	 */
	function DrawTabSeparator(wxDC &$dc, wxWindow &$wnd, wxRect $rect, $visibility){}

	/**
	 * Draw a single tool (for a wxRibbonToolBar control).
	 * @param wxDC $dc
	 * @param wxWindow $wnd
	 * @param wxRect $rect
	 * @param wxBitmap $bitmap
	 * @param wxRibbonButtonKind $kind
	 * @param integer $state
	 */
	function DrawTool(wxDC &$dc, wxWindow &$wnd, wxRect $rect, wxBitmap $bitmap, wxRibbonButtonKind $kind, $state){}

	/**
	 * Draw the background for a wxRibbonToolBar control.
	 * @param wxDC $dc
	 * @param wxWindow $wnd
	 * @param wxRect $rect
	 */
	function DrawToolBarBackground(wxDC &$dc, wxWindow &$wnd, wxRect $rect){}

	/**
	 * Draw the background for a group of tools on a wxRibbonToolBar control.
	 * @param wxDC $dc
	 * @param wxWindow $wnd
	 * @param wxRect $rect
	 */
	function DrawToolGroupBackground(wxDC &$dc, wxWindow &$wnd, wxRect $rect){}

	/**
	 * Calculate the ideal and minimum width (in pixels) of a tab in a ribbon bar.
	 * @param wxDC $dc
	 * @param wxWindow $wnd
	 * @param string $label
	 * @param wxBitmap $bitmap
	 * @param integer $ideal
	 * @param integer $small_begin_need_separator
	 * @param integer $small_must_have_separator
	 * @param integer $minimum
	 */
	function GetBarTabWidth(wxDC &$dc, wxWindow &$wnd, $label, wxBitmap $bitmap, &$ideal, &$small_begin_need_separator, &$small_must_have_separator, &$minimum){}

	/**
	 * GetColor
	 * @param integer $id
	 * @return wxColour
	 */
	function GetColor($id){}

	/**
	 * Get the value of a certain colour setting.
	 * @param integer $id
	 * @return wxColour
	 */
	function GetColour($id){}

	/**
	 * Get the current colour scheme.
	 * @param wxColour $primary
	 * @param wxColour $secondary
	 * @param wxColour $tertiary
	 */
	function GetColourScheme(wxColour &$primary, wxColour &$secondary, wxColour &$tertiary){}

	/**
	 * Get the previously set style flags.
	 * @return integer
	 */
	function GetFlags(){}

	/**
	 * Get the value of a certain font setting.
	 * @param integer $id
	 * @return wxFont
	 */
	function GetFont($id){}

	/**
	 * Calculate the client size of a wxRibbonGallery control for a given size.
	 * @param wxDC $dc
	 * @param wxRibbonGallery $wnd
	 * @param wxSize $size
	 * @param wxPoint $client_offset
	 * @param wxRect $scroll_up_button
	 * @param wxRect $scroll_down_button
	 * @param wxRect $extension_button
	 * @return wxSize
	 */
	function GetGalleryClientSize(wxDC &$dc, wxRibbonGallery $wnd, wxSize $size, wxPoint &$client_offset, wxRect &$scroll_up_button, wxRect &$scroll_down_button, wxRect &$extension_button){}

	/**
	 * Calculate the size of a wxRibbonGallery control for a given client size.
	 * @param wxDC $dc
	 * @param wxRibbonGallery $wnd
	 * @param wxSize $client_size
	 * @return wxSize
	 */
	function GetGallerySize(wxDC &$dc, wxRibbonGallery $wnd, wxSize $client_size){}

	/**
	 * Get the value of a certain integer setting.
	 * @param integer $id
	 * @return integer
	 */
	function GetMetric($id){}

	/**
	 * Calculate the size of a minimised ribbon panel.
	 * @param wxDC $dc
	 * @param wxRibbonPanel $wnd
	 * @param wxSize $desired_bitmap_size
	 * @param wxDirection $expanded_panel_direction
	 * @return wxSize
	 */
	function GetMinimisedPanelMinimumSize(wxDC &$dc, wxRibbonPanel $wnd, wxSize &$desired_bitmap_size, wxDirection &$expanded_panel_direction){}

	/**
	 * Calculate the portion of a page background which needs to be redrawn when a page is resized.
	 * @param wxDC $dc
	 * @param wxRibbonPage $wnd
	 * @param wxSize $page_old_size
	 * @param wxSize $page_new_size
	 * @return wxRect
	 */
	function GetPageBackgroundRedrawArea(wxDC &$dc, wxRibbonPage $wnd, wxSize $page_old_size, wxSize $page_new_size){}

	/**
	 * Calculate the client size of a panel for a given overall size.
	 * @param wxDC $dc
	 * @param wxRibbonPanel $wnd
	 * @param wxSize $size
	 * @param wxPoint $client_offset
	 * @return wxSize
	 */
	function GetPanelClientSize(wxDC &$dc, wxRibbonPanel $wnd, wxSize $size, wxPoint &$client_offset){}

	/**
	 * Calculate the size of a panel for a given client size.
	 * @param wxDC $dc
	 * @param wxRibbonPanel $wnd
	 * @param wxSize $client_size
	 * @param wxPoint $client_offset
	 * @return wxSize
	 */
	function GetPanelSize(wxDC &$dc, wxRibbonPanel $wnd, wxSize $client_size, wxPoint &$client_offset){}

	/**
	 * Calculate the minimum size (in pixels) of a scroll button.
	 * @param wxDC $dc
	 * @param wxWindow $wnd
	 * @param integer $style
	 * @return wxSize
	 */
	function GetScrollButtonMinimumSize(wxDC &$dc, wxWindow &$wnd, $style){}

	/**
	 * Calculate the size of a tool within a wxRibbonToolBar.
	 * @param wxDC $dc
	 * @param wxWindow $wnd
	 * @param wxSize $bitmap_size
	 * @param wxRibbonButtonKind $kind
	 * @param bool $is_first
	 * @param bool $is_last
	 * @param wxRect $dropdown_region
	 * @return wxSize
	 */
	function GetToolSize(wxDC &$dc, wxWindow &$wnd, wxSize $bitmap_size, wxRibbonButtonKind $kind, $is_first, $is_last, wxRect &$dropdown_region){}

	/**
	 * SetColor
	 * @param integer $id
	 * @param wxColour $color
	 */
	function SetColor($id, wxColour $color){}

	/**
	 * Set all applicable colour settings from a few base colours.
	 * @param wxColour $primary
	 * @param wxColour $secondary
	 * @param wxColour $tertiary
	 */
	function SetColourScheme(wxColour $primary, wxColour $secondary, wxColour $tertiary){}

	/**
	 * Set the style flags.
	 * @param integer $flags
	 */
	function SetFlags($flags){}

	/**
	 * Set the value of a certain font setting to the value font.
	 * @param integer $id
	 * @param wxFont $font
	 */
	function SetFont($id, wxFont $font){}

	/**
	 * Set the value of a certain integer setting to the value new_val.
	 * @param integer $id
	 * @param integer $new_val
	 */
	function SetMetric($id, $new_val){}

	/**
	 * Draw a single button for a wxRibbonButtonBar control.
	 * @param wxDC $dc
	 * @param wxWindow $wnd
	 * @param wxRect $rect
	 * @param wxRibbonButtonKind $kind
	 * @param integer $state
	 * @param string $label
	 * @param wxBitmap $bitmap_large
	 * @param wxBitmap $bitmap_small
	 */
	function DrawButtonBarButton(wxDC &$dc, wxWindow &$wnd, wxRect $rect, wxRibbonButtonKind $kind, $state, $label, wxBitmap $bitmap_large, wxBitmap $bitmap_small){}

	/**
	 * Calculate the size of a button within a wxRibbonButtonBar.
	 * @param wxDC $dc
	 * @param wxWindow $wnd
	 * @param wxRibbonButtonKind $kind
	 * @param wxRibbonButtonBarButtonState $size
	 * @param string $label
	 * @param wxSize $bitmap_size_large
	 * @param wxSize $bitmap_size_small
	 * @param wxSize $button_size
	 * @param wxRect $normal_region
	 * @param wxRect $dropdown_region
	 * @return bool
	 */
	function GetButtonBarButtonSize(wxDC &$dc, wxWindow &$wnd, wxRibbonButtonKind $kind, wxRibbonButtonBarButtonState $size, $label, wxSize $bitmap_size_large, wxSize $bitmap_size_small, wxSize &$button_size, wxRect &$normal_region, wxRect &$dropdown_region){}
}

class wxRibbonBar extends wxRibbonControl
{
	/**
	 * Default constructor.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 */
	function __construct(wxWindow &$parent, $id=wxID_ANY, wxPoint $pos=null, wxSize $size=null, $style=wxRIBBON_BAR_DEFAULT_STYLE){}

	/**
	 * Indicates whether the panel area of the ribbon bar is shown.
	 * @return bool
	 */
	function ArePanelsShown(){}

	/**
	 * Create a ribbon bar in two-step ribbon bar construction.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @return bool
	 */
	function Create(wxWindow &$parent, $id=wxID_ANY, wxPoint $pos=null, wxSize $size=null, $style=wxRIBBON_BAR_DEFAULT_STYLE){}

	/**
	 * Dismiss the expanded panel of the currently active page.
	 * @return bool
	 */
	function DismissExpandedPanel(){}

	/**
	 * Get the index of the active page.
	 * @return integer
	 */
	function GetActivePage(){}

	/**
	 * Get a page by index.
	 * @param integer $n
	 * @return wxRibbonPage
	 */
	function GetPage($n){}

	/**
	 * Hides the panel area of the ribbon bar.
	 */
	function HidePanels(){}

	/**
	 * Perform initial layout and size calculations of the bar and its children.
	 * @return bool
	 */
	function Realize(){}

	/**
	 * Set the active page by index, without triggering any events.
	 * @param integer $page
	 * @return bool
	 */
	function SetActivePage($page, wxRibbonPage &$page){}

	/**
	 * Set the art provider to be used be the ribbon bar.
	 * @param wxRibbonArtProvider $art
	 */
	function SetArtProvider(wxRibbonArtProvider &$art){}

	/**
	 * Set the margin widths (in pixels) on the left and right sides of the tab bar region of the ribbon bar.
	 * @param integer $left
	 * @param integer $right
	 */
	function SetTabCtrlMargins($left, $right){}

	/**
	 * Shows or hides the panel area of the ribbon bar.
	 * @param bool $show
	 */
	function ShowPanels($show=true){}
}

class wxRibbonBarEvent extends wxNotifyEvent
{
	/**
	 * Constructor.
	 * @param integer $command_type
	 * @param integer $win_id
	 * @param wxRibbonPage $page
	 */
	function __construct($command_type=wxEVT_NULL, $win_id, wxRibbonPage &$page=null){}

	/**
	 * Returns the page being changed to, or being clicked on.
	 * @return wxRibbonPage
	 */
	function GetPage(){}

	/**
	 * Sets the page relating to this event.
	 * @param wxRibbonPage $page
	 */
	function SetPage(wxRibbonPage &$page){}
}

class wxRibbonButtonBar extends wxRibbonControl
{
	/**
	 * Default constructor.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 */
	function __construct(wxWindow &$parent, $id=wxID_ANY, wxPoint $pos=null, wxSize $size=null, $style){}

	/**
	 * Add a button to the button bar (simple version).
	 * @param integer $button_id
	 * @param string $label
	 * @param wxBitmap $bitmap
	 * @param string $help_string
	 * @param wxRibbonButtonKind $kind
	 * @param wxBitmap $bitmap_small
	 * @param wxBitmap $bitmap_disabled
	 * @param wxBitmap $bitmap_small_disabled
	 * @param wxObject $client_data
	 * @return wxRibbonButtonBarButtonBase
	 */
	function AddButton($button_id, $label, wxBitmap $bitmap, $help_string, wxRibbonButtonKind $kind=null, $button_id, $label, wxBitmap $bitmap, wxBitmap $bitmap_small=null, wxBitmap $bitmap_disabled=null, wxBitmap $bitmap_small_disabled=null, wxRibbonButtonKind $kind=null, $help_string=wxEmptyString, wxObject &$client_data=null){}

	/**
	 * Add a dropdown button to the button bar (simple version).
	 * @param integer $button_id
	 * @param string $label
	 * @param wxBitmap $bitmap
	 * @param string $help_string
	 * @return wxRibbonButtonBarButtonBase
	 */
	function AddDropdownButton($button_id, $label, wxBitmap $bitmap, $help_string=wxEmptyString){}

	/**
	 * Add a hybrid button to the button bar (simple version).
	 * @param integer $button_id
	 * @param string $label
	 * @param wxBitmap $bitmap
	 * @param string $help_string
	 * @return wxRibbonButtonBarButtonBase
	 */
	function AddHybridButton($button_id, $label, wxBitmap $bitmap, $help_string=wxEmptyString){}

	/**
	 * Add a toggle button to the button bar (simple version).
	 * @param integer $button_id
	 * @param string $label
	 * @param wxBitmap $bitmap
	 * @param string $help_string
	 * @return wxRibbonButtonBarButtonBase
	 */
	function AddToggleButton($button_id, $label, wxBitmap $bitmap, $help_string=wxEmptyString){}

	/**
	 * Delete all buttons from the button bar.
	 */
	function ClearButtons(){}

	/**
	 * Create a button bar in two-step button bar construction.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @return bool
	 */
	function Create(wxWindow &$parent, $id=wxID_ANY, wxPoint $pos=null, wxSize $size=null, $style){}

	/**
	 * Delete a single button from the button bar.
	 * @param integer $button_id
	 * @return bool
	 */
	function DeleteButton($button_id){}

	/**
	 * Enable or disable a single button on the bar.
	 * @param integer $button_id
	 * @param bool $enable
	 */
	function EnableButton($button_id, $enable=true){}

	/**
	 * Calculate button layouts and positions.
	 * @return bool
	 */
	function Realize(){}

	/**
	 * Set a toggle button to the checked or unchecked state.
	 * @param integer $button_id
	 * @param bool $checked
	 */
	function ToggleButton($button_id, $checked){}
}

class wxRibbonButtonBarButtonBase extends dummy
{
}

class wxRibbonButtonBarEvent extends wxCommandEvent
{
	/**
	 * Constructor.
	 * @param integer $command_type
	 * @param integer $win_id
	 * @param wxRibbonButtonBar $bar
	 */
	function __construct($command_type=wxEVT_NULL, $win_id, wxRibbonButtonBar &$bar=null){}

	/**
	 * Returns the bar which contains the button which the event relates to.
	 * @return wxRibbonButtonBar
	 */
	function GetBar(){}

	/**
	 * Display a popup menu as a result of this (dropdown clicked) event.
	 * @param wxMenu $menu
	 * @return bool
	 */
	function PopupMenu(wxMenu &$menu){}

	/**
	 * Sets the button bar relating to this event.
	 * @param wxRibbonButtonBar $bar
	 */
	function SetBar(wxRibbonButtonBar &$bar){}
}

class wxRibbonControl extends wxControl
{
	/**
	 * Constructor.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param wxValidator $validator
	 * @param string $name
	 */
	function __construct(wxWindow &$parent, $id, wxPoint $pos=null, wxSize $size=null, $style, wxValidator $validator=null, $name=wxControlNameStr){}

	/**
	 * Implementation of GetNextLargerSize().
	 * @param wxOrientation $direction
	 * @param wxSize $relative_to
	 * @return wxSize
	 */
	function DoGetNextLargerSize(wxOrientation $direction, wxSize $relative_to){}

	/**
	 * Implementation of GetNextSmallerSize().
	 * @param wxOrientation $direction
	 * @param wxSize $relative_to
	 * @return wxSize
	 */
	function DoGetNextSmallerSize(wxOrientation $direction, wxSize $relative_to){}

	/**
	 * Get the art provider to be used.
	 * @return wxRibbonArtProvider
	 */
	function GetArtProvider(){}

	/**
	 * If sizing is not continuous, then return a suitable size for the control which is larger than the current size.
	 * @param wxOrientation $direction
	 * @param wxSize $relative_to
	 * @return wxSize
	 */
	function GetNextLargerSize(wxOrientation $direction, wxOrientation $direction, wxSize $relative_to){}

	/**
	 * If sizing is not continuous, then return a suitable size for the control which is smaller than the current size.
	 * @param wxOrientation $direction
	 * @param wxSize $relative_to
	 * @return wxSize
	 */
	function GetNextSmallerSize(wxOrientation $direction, wxOrientation $direction, wxSize $relative_to){}

	/**
	 * IsSizingContinuous
	 * @return bool
	 */
	function IsSizingContinuous(){}

	/**
	 * Alias for Realize().
	 * @return bool
	 */
	function Realise(){}

	/**
	 * Perform initial size and layout calculations after children have been added, and/or realize children.
	 * @return bool
	 */
	function Realize(){}

	/**
	 * Set the art provider to be used.
	 * @param wxRibbonArtProvider $art
	 */
	function SetArtProvider(wxRibbonArtProvider &$art){}
}

class wxRibbonGallery extends wxRibbonControl
{
	/**
	 * Default constructor.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 */
	function __construct(wxWindow &$parent, $id=wxID_ANY, wxPoint $pos=null, wxSize $size=null, $style){}

	/**
	 * Add an item to the gallery (with no client data).
	 * @param wxBitmap $bitmap
	 * @param integer $id
	 * @param mixed $clientData
	 * @return wxRibbonGalleryItem
	 */
	function Append(wxBitmap $bitmap, $id, wxBitmap $bitmap, $id, $clientData, wxBitmap $bitmap, $id, wxClientData &$clientData){}

	/**
	 * Remove all items from the gallery.
	 */
	function Clear(){}

	/**
	 * Create a gallery in two-step gallery construction.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @return bool
	 */
	function Create(wxWindow &$parent, $id=wxID_ANY, wxPoint $pos=null, wxSize $size=null, $style){}

	/**
	 * Scroll the gallery to ensure that the given item is visible.
	 * @param wxRibbonGalleryItem $item
	 */
	function EnsureVisible(wxRibbonGalleryItem $item){}

	/**
	 * Get the currently active item, or NULL if there is none.
	 * @return wxRibbonGalleryItem
	 */
	function GetActiveItem(){}

	/**
	 * Get the number of items in the gallery.
	 * @return integer
	 */
	function GetCount(){}

	/**
	 * Get the state of the scroll down button.
	 * @return wxRibbonGalleryButtonState
	 */
	function GetDownButtonState(){}

	/**
	 * Get the state of the "extension" button.
	 * @return wxRibbonGalleryButtonState
	 */
	function GetExtensionButtonState(){}

	/**
	 * Get the currently hovered item, or NULL if there is none.
	 * @return wxRibbonGalleryItem
	 */
	function GetHoveredItem(){}

	/**
	 * Get an item by index.
	 * @param integer $n
	 * @return wxRibbonGalleryItem
	 */
	function GetItem($n){}

	/**
	 * Get the client data associated with a gallery item.
	 * @param wxRibbonGalleryItem $item
	 * @return mixed
	 */
	function GetItemClientData(wxRibbonGalleryItem $item){}

	/**
	 * Get the client object associated with a gallery item.
	 * @param wxRibbonGalleryItem $item
	 * @return wxClientData
	 */
	function GetItemClientObject(wxRibbonGalleryItem $item){}

	/**
	 * Get the currently selected item, or NULL if there is none.
	 * @return wxRibbonGalleryItem
	 */
	function GetSelection(){}

	/**
	 * Get the state of the scroll up button.
	 * @return wxRibbonGalleryButtonState
	 */
	function GetUpButtonState(){}

	/**
	 * Query if the gallery has no items in it.
	 * @return bool
	 */
	function IsEmpty(){}

	/**
	 * Query is the mouse is currently hovered over the gallery.
	 * @return bool
	 */
	function IsHovered(){}

	/**
	 * Scroll the gallery contents by some amount.
	 * @param integer $lines
	 * @return bool
	 */
	function ScrollLines($lines){}

	/**
	 * Scroll the gallery contents by some fine-grained amount.
	 * @param integer $pixels
	 * @return bool
	 */
	function ScrollPixels($pixels){}

	/**
	 * Set the client data associated with a gallery item.
	 * @param wxRibbonGalleryItem $item
	 * @param mixed $data
	 */
	function SetItemClientData(wxRibbonGalleryItem &$item, $data){}

	/**
	 * Set the client object associated with a gallery item.
	 * @param wxRibbonGalleryItem $item
	 * @param wxClientData $data
	 */
	function SetItemClientObject(wxRibbonGalleryItem &$item, wxClientData &$data){}

	/**
	 * Set the selection to the given item, or removes the selection if item == NULL.
	 * @param wxRibbonGalleryItem $item
	 */
	function SetSelection(wxRibbonGalleryItem &$item){}
}

class wxRibbonGalleryEvent extends wxCommandEvent
{
	/**
	 * Constructor.
	 * @param integer $command_type
	 * @param integer $win_id
	 * @param wxRibbonGallery $gallery
	 * @param wxRibbonGalleryItem $item
	 */
	function __construct($command_type=wxEVT_NULL, $win_id, wxRibbonGallery &$gallery=null, wxRibbonGalleryItem &$item=null){}

	/**
	 * Returns the gallery which the event relates to.
	 * @return wxRibbonGallery
	 */
	function GetGallery(){}

	/**
	 * Returns the gallery item which the event relates to, or NULL if it does not relate to an item.
	 * @return wxRibbonGalleryItem
	 */
	function GetGalleryItem(){}

	/**
	 * Sets the gallery relating to this event.
	 * @param wxRibbonGallery $gallery
	 */
	function SetGallery(wxRibbonGallery &$gallery){}

	/**
	 * Sets the gallery item relating to this event.
	 * @param wxRibbonGalleryItem $item
	 */
	function SetGalleryItem(wxRibbonGalleryItem &$item){}
}

class wxRibbonGalleryItem extends dummy
{
}

class wxRibbonPage extends wxRibbonControl
{
	/**
	 * Default constructor.
	 * @param wxRibbonBar $parent
	 * @param integer $id
	 * @param string $label
	 * @param wxBitmap $icon
	 * @param integer $style
	 */
	function __construct(wxRibbonBar &$parent, $id=wxID_ANY, $label=wxEmptyString, wxBitmap $icon=null, $style){}

	/**
	 * Expand a rectangle of the page to include external scroll buttons (if any).
	 * @param wxRect $rect
	 */
	function AdjustRectToIncludeScrollButtons(wxRect &$rect){}

	/**
	 * Create a ribbon page in two-step ribbon page construction.
	 * @param wxRibbonBar $parent
	 * @param integer $id
	 * @param string $label
	 * @param wxBitmap $icon
	 * @param integer $style
	 * @return bool
	 */
	function Create(wxRibbonBar &$parent, $id=wxID_ANY, $label=wxEmptyString, wxBitmap $icon=null, $style){}

	/**
	 * Dismiss the current externally expanded panel, if there is one.
	 * @return bool
	 */
	function DismissExpandedPanel(){}

	/**
	 * Get the icon used for the page in the ribbon bar tab area (only displayed if the ribbon bar is actually showing icons).
	 * @return wxBitmap
	 */
	function GetIcon(){}

	/**
	 * Get the direction in which ribbon panels are stacked within the page.
	 * @return wxOrientation
	 */
	function GetMajorAxis(){}

	/**
	 * Perform a full re-layout of all panels on the page.
	 * @return bool
	 */
	function Realize(){}

	/**
	 * Scroll the page by some amount up / down / left / right.
	 * @param integer $lines
	 * @return bool
	 */
	function ScrollLines($lines){}

	/**
	 * Scroll the page by a set number of pixels up / down / left / right.
	 * @param integer $pixels
	 * @return bool
	 */
	function ScrollPixels($pixels){}

	/**
	 * Set the art provider to be used.
	 * @param wxRibbonArtProvider $art
	 */
	function SetArtProvider(wxRibbonArtProvider &$art){}

	/**
	 * Set the size of the page and the external scroll buttons (if any).
	 * @param integer $x
	 * @param integer $y
	 * @param integer $width
	 * @param integer $height
	 */
	function SetSizeWithScrollButtonAdjustment($x, $y, $width, $height){}
}

class wxRibbonPanel extends wxRibbonControl
{
	/**
	 * Default constructor.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param string $label
	 * @param wxBitmap $minimised_icon
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 */
	function __construct(wxWindow &$parent, $id=wxID_ANY, $label=wxEmptyString, wxBitmap $minimised_icon=null, wxPoint $pos=null, wxSize $size=null, $style=wxRIBBON_PANEL_DEFAULT_STYLE){}

	/**
	 * Query if the panel can automatically minimise itself at small sizes.
	 * @return bool
	 */
	function CanAutoMinimise(){}

	/**
	 * Create a ribbon panel in two-step ribbon panel construction.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param string $label
	 * @param wxBitmap $icon
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @return bool
	 */
	function Create(wxWindow &$parent, $id=wxID_ANY, $label=wxEmptyString, wxBitmap $icon=null, wxPoint $pos=null, wxSize $size=null, $style=wxRIBBON_PANEL_DEFAULT_STYLE){}

	/**
	 * Get the dummy panel of an expanded panel.
	 * @return wxRibbonPanel
	 */
	function GetExpandedDummy(){}

	/**
	 * Get the expanded panel of a dummy panel.
	 * @return wxRibbonPanel
	 */
	function GetExpandedPanel(){}

	/**
	 * Get the bitmap to be used in place of the panel children when it is minimised.
	 * @return wxBitmap
	 */
	function GetMinimisedIcon(){}

	/**
	 * Hide the panel's external expansion.
	 * @return bool
	 */
	function HideExpanded(){}

	/**
	 * Query is the mouse is currently hovered over the panel.
	 * @return bool
	 */
	function IsHovered(){}

	/**
	 * Query if the panel is currently minimised.
	 * @param wxSize $at_size
	 * @return bool
	 */
	function IsMinimised(wxSize $at_size){}

	/**
	 * Realize all children of the panel.
	 * @return bool
	 */
	function Realize(){}

	/**
	 * Set the art provider to be used.
	 * @param wxRibbonArtProvider $art
	 */
	function SetArtProvider(wxRibbonArtProvider &$art){}

	/**
	 * Show the panel externally expanded.
	 * @return bool
	 */
	function ShowExpanded(){}
}

class wxRibbonToolBar extends wxRibbonControl
{
	/**
	 * Default constructor.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 */
	function __construct(wxWindow &$parent, $id=wxID_ANY, wxPoint $pos=null, wxSize $size=null, $style){}

	/**
	 * Add a dropdown tool to the tool bar (simple version).
	 * @param integer $tool_id
	 * @param wxBitmap $bitmap
	 * @param string $help_string
	 * @return wxRibbonToolBarToolBase
	 */
	function AddDropdownTool($tool_id, wxBitmap $bitmap, $help_string=wxEmptyString){}

	/**
	 * Add a hybrid tool to the tool bar (simple version).
	 * @param integer $tool_id
	 * @param wxBitmap $bitmap
	 * @param string $help_string
	 * @return wxRibbonToolBarToolBase
	 */
	function AddHybridTool($tool_id, wxBitmap $bitmap, $help_string=wxEmptyString){}

	/**
	 * Add a separator to the tool bar.
	 * @return wxRibbonToolBarToolBase
	 */
	function AddSeparator(){}

	/**
	 * Add a tool to the tool bar (simple version).
	 * @param integer $tool_id
	 * @param wxBitmap $bitmap
	 * @param string $help_string
	 * @param wxRibbonButtonKind $kind
	 * @param wxBitmap $bitmap_disabled
	 * @param wxObject $client_data
	 * @return wxRibbonToolBarToolBase
	 */
	function AddTool($tool_id, wxBitmap $bitmap, $help_string, wxRibbonButtonKind $kind=null, $tool_id, wxBitmap $bitmap, wxBitmap $bitmap_disabled=null, $help_string=wxEmptyString, wxRibbonButtonKind $kind=null, wxObject &$client_data=null){}

	/**
	 * Create a tool bar in two-step tool bar construction.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @return bool
	 */
	function Create(wxWindow &$parent, $id=wxID_ANY, wxPoint $pos=null, wxSize $size=null, $style){}

	/**
	 * Set the number of rows to distribute tool groups over.
	 * @param integer $nMin
	 * @param integer $nMax
	 */
	function SetRows($nMin, $nMax=-1){}
}

class wxRibbonToolBarToolBase extends dummy
{
}

class wxRichToolTip
{
	/**
	 * Constructor must specify the tooltip title and main message.
	 * @param string $title
	 * @param string $message
	 */
	function __construct($title, $message){}

	/**
	 * Set the background colour.
	 * @param wxColour $col
	 * @param wxColour $colEnd
	 */
	function SetBackgroundColour(wxColour $col, wxColour $colEnd=null){}

	/**
	 * Set the small icon to show.
	 * @param integer $icon
	 */
	function SetIcon($icon=wxICON_INFORMATION, wxIcon $icon){}

	/**
	 * Set timeout after which the tooltip should disappear, in milliseconds.
	 * @param integer $milliseconds
	 */
	function SetTimeout($milliseconds){}

	/**
	 * Choose the tip kind, possibly none.
	 * @param wxTipKind $tipKind
	 */
	function SetTipKind(wxTipKind $tipKind){}

	/**
	 * Show the tooltip for the given window.
	 * @param wxWindow $win
	 */
	function ShowFor(wxWindow &$win){}
}

class wxSashEvent extends wxCommandEvent
{
	/**
	 * Constructor.
	 * @param integer $id
	 * @param wxSashEdgePosition $edge
	 */
	function __construct($id, wxSashEdgePosition $edge=null){}

	/**
	 * Returns the rectangle representing the new size the window would be if the resize was applied.
	 * @return wxRect
	 */
	function GetDragRect(){}

	/**
	 * Returns the status of the sash: one of wxSASH_STATUS_OK, wxSASH_STATUS_OUT_OF_RANGE.
	 * @return wxSashDragStatus
	 */
	function GetDragStatus(){}

	/**
	 * Returns the dragged edge.
	 * @return wxSashEdgePosition
	 */
	function GetEdge(){}
}

class wxSashLayoutWindow extends wxSashWindow
{
	/**
	 * Default ctor.
	 * @param wxSashLayoutWindow $parent
	 * @param integer $id
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param string $name
	 */
	function __construct(wxSashLayoutWindow &$parent, $id, wxPoint $pos=null, wxSize $size=null, $style=null, $name="layoutWindow"){}

	/**
	 * Initializes a sash layout window, which can be a child of a frame, dialog or any other non-control window.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param string $name
	 * @return bool
	 */
	function Create(wxWindow &$parent, $id=wxID_ANY, wxPoint $pos=null, wxSize $size=null, $style=null, $name="layoutWindow"){}

	/**
	 * Returns the alignment of the window: one of wxLAYOUT_TOP, wxLAYOUT_LEFT, wxLAYOUT_RIGHT, wxLAYOUT_BOTTOM.
	 * @return wxLayoutAlignment
	 */
	function GetAlignment(){}

	/**
	 * Returns the orientation of the window: one of wxLAYOUT_HORIZONTAL, wxLAYOUT_VERTICAL.
	 * @return wxLayoutOrientation
	 */
	function GetOrientation(){}

	/**
	 * Sets the alignment of the window (which edge of the available parent client area the window is attached to).
	 * @param wxLayoutAlignment $alignment
	 */
	function SetAlignment(wxLayoutAlignment $alignment){}

	/**
	 * Sets the default dimensions of the window.
	 * @param wxSize $size
	 */
	function SetDefaultSize(wxSize $size){}

	/**
	 * Sets the orientation of the window (the direction the window will stretch in, to fill the available parent client area).
	 * @param wxLayoutOrientation $orientation
	 */
	function SetOrientation(wxLayoutOrientation $orientation){}
}

class wxSashWindow extends wxWindow
{
	/**
	 * Default ctor.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param string $name
	 */
	function __construct(wxWindow &$parent, $id, wxPoint $pos=null, wxSize $size=null, $style=null, $name="sashWindow"){}

	/**
	 * Gets the maximum window size in the x direction.
	 * @return integer
	 */
	function GetMaximumSizeX(){}

	/**
	 * Gets the maximum window size in the y direction.
	 * @return integer
	 */
	function GetMaximumSizeY(){}

	/**
	 * Gets the minimum window size in the x direction.
	 * @return integer
	 */
	function GetMinimumSizeX(){}

	/**
	 * Gets the minimum window size in the y direction.
	 * @return integer
	 */
	function GetMinimumSizeY(){}

	/**
	 * Returns true if a sash is visible on the given edge, false otherwise.
	 * @param wxSashEdgePosition $edge
	 * @return bool
	 */
	function GetSashVisible(wxSashEdgePosition $edge){}

	/**
	 * Sets the maximum window size in the x direction.
	 * @param integer $min
	 */
	function SetMaximumSizeX($min){}

	/**
	 * Sets the maximum window size in the y direction.
	 * @param integer $min
	 */
	function SetMaximumSizeY($min){}

	/**
	 * Sets the minimum window size in the x direction.
	 * @param integer $min
	 */
	function SetMinimumSizeX($min){}

	/**
	 * Sets the minimum window size in the y direction.
	 * @param integer $min
	 */
	function SetMinimumSizeY($min){}

	/**
	 * Call this function to make a sash visible or invisible on a particular edge.
	 * @param wxSashEdgePosition $edge
	 * @param bool $visible
	 */
	function SetSashVisible(wxSashEdgePosition $edge, $visible){}
}

class wxScreenDC extends wxDC
{
	/**
	 * Constructor.
	 */
	function __construct(){}

	/**
	 * Use this in conjunction with StartDrawingOnTop().
	 * @return bool
	 */
	function EndDrawingOnTop(){}

	/**
	 * Use this in conjunction with EndDrawingOnTop() to ensure that drawing to the screen occurs on top of existing windows.
	 * @param wxWindow $window
	 * @param wxRect $rect
	 * @return bool
	 */
	function StartDrawingOnTop(wxWindow &$window, wxRect &$rect=null){}
}

class wxScrollBar extends wxControl
{
	/**
	 * Constructor, creating and showing a scrollbar.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param wxValidator $validator
	 * @param string $name
	 */
	function __construct(wxWindow &$parent, $id, wxPoint $pos=null, wxSize $size=null, $style=wxSB_HORIZONTAL, wxValidator $validator=null, $name=wxScrollBarNameStr){}

	/**
	 * Scrollbar creation function called by the scrollbar constructor.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param wxValidator $validator
	 * @param string $name
	 * @return bool
	 */
	function Create(wxWindow &$parent, $id, wxPoint $pos=null, wxSize $size=null, $style=wxSB_HORIZONTAL, wxValidator $validator=null, $name=wxScrollBarNameStr){}

	/**
	 * Returns the page size of the scrollbar.
	 * @return integer
	 */
	function GetPageSize(){}

	/**
	 * Returns the length of the scrollbar.
	 * @return integer
	 */
	function GetRange(){}

	/**
	 * Returns the current position of the scrollbar thumb.
	 * @return integer
	 */
	function GetThumbPosition(){}

	/**
	 * Returns the thumb or 'view' size.
	 * @return integer
	 */
	function GetThumbSize(){}

	/**
	 * Sets the scrollbar properties.
	 * @param integer $position
	 * @param integer $thumbSize
	 * @param integer $range
	 * @param integer $pageSize
	 * @param bool $refresh
	 */
	function SetScrollbar($position, $thumbSize, $range, $pageSize, $refresh=true){}

	/**
	 * Sets the position of the scrollbar.
	 * @param integer $viewStart
	 */
	function SetThumbPosition($viewStart){}
}

class wxScrollEvent extends wxCommandEvent
{
	/**
	 * Constructor.
	 * @param integer $commandType
	 * @param integer $id
	 * @param integer $pos
	 * @param integer $orientation
	 */
	function __construct($commandType=wxEVT_NULL, $id, $pos, $orientation){}

	/**
	 * Returns wxHORIZONTAL or wxVERTICAL, depending on the orientation of the scrollbar.
	 * @return integer
	 */
	function GetOrientation(){}

	/**
	 * Returns the position of the scrollbar.
	 * @return integer
	 */
	function GetPosition(){}

	/**
	 * SetOrientation
	 * @param integer $orient
	 */
	function SetOrientation($orient){}

	/**
	 * SetPosition
	 * @param integer $pos
	 */
	function SetPosition($pos){}
}

class wxScrollWinEvent extends wxEvent
{
	/**
	 * Constructor.
	 * @param integer $commandType
	 * @param integer $pos
	 * @param integer $orientation
	 */
	function __construct($commandType=wxEVT_NULL, $pos, $orientation){}

	/**
	 * Returns wxHORIZONTAL or wxVERTICAL, depending on the orientation of the scrollbar.
	 * @return integer
	 */
	function GetOrientation(){}

	/**
	 * Returns the position of the scrollbar for the thumb track and release events.
	 * @return integer
	 */
	function GetPosition(){}

	/**
	 * SetOrientation
	 * @param integer $orient
	 */
	function SetOrientation($orient){}

	/**
	 * SetPosition
	 * @param integer $pos
	 */
	function SetPosition($pos){}
}

class wxScrolledWindow extends wxPanel
{
}

class wxSearchCtrl extends wxTextCtrl
{
	/**
	 * Default constructor.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param string $value
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param wxValidator $validator
	 * @param string $name
	 */
	function __construct(wxWindow &$parent, $id, $value=wxEmptyString, wxPoint $pos=null, wxSize $size=null, $style, wxValidator $validator=null, $name=wxSearchCtrlNameStr){}

	/**
	 * Creates the text control for two-step construction.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param string $value
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param wxValidator $validator
	 * @param string $name
	 * @return bool
	 */
	function Create(wxWindow &$parent, $id, $value=wxEmptyString, wxPoint $pos=null, wxSize $size=null, $style, wxValidator $validator=null, $name=wxSearchCtrlNameStr){}

	/**
	 * Return the text displayed when there is not yet any user input.
	 * @return string
	 */
	function GetDescriptiveText(){}

	/**
	 * Returns a pointer to the search control's menu object or NULL if there is no menu attached.
	 * @return wxMenu
	 */
	function GetMenu(){}

	/**
	 * Returns the cancel button's visibility state.
	 * @return bool
	 */
	function IsCancelButtonVisible(){}

	/**
	 * Returns the search button visibility value.
	 * @return bool
	 */
	function IsSearchButtonVisible(){}

	/**
	 * Set the text to be displayed in the search control when the user has not yet typed anything in it.
	 * @param string $text
	 */
	function SetDescriptiveText($text){}

	/**
	 * Sets the search control's menu object.
	 * @param wxMenu $menu
	 */
	function SetMenu(wxMenu &$menu){}

	/**
	 * Shows or hides the cancel button.
	 * @param bool $show
	 */
	function ShowCancelButton($show){}

	/**
	 * Sets the search button visibility value on the search control.
	 * @param bool $show
	 */
	function ShowSearchButton($show){}
}

class wxSemaphore
{
	/**
	 * Specifying a maxcount of 0 actually makes wxSemaphore behave as if there is no upper limit.
	 * @param integer $initialcount
	 * @param integer $maxcount
	 */
	function __construct($initialcount, $maxcount){}

	/**
	 * Increments the semaphore count and signals one of the waiting threads in an atomic way.
	 * @return wxSemaError
	 */
	function Post(){}

	/**
	 * Same as Wait(), but returns immediately.
	 * @return wxSemaError
	 */
	function TryWait(){}

	/**
	 * Wait indefinitely until the semaphore count becomes strictly positive and then decrement it and return.
	 * @return wxSemaError
	 */
	function Wait(){}

	/**
	 * Same as Wait(), but with a timeout limit.
	 * @param integer $timeout_millis
	 * @return wxSemaError
	 */
	function WaitTimeout($timeout_millis){}
}

class wxSetCursorEvent extends wxEvent
{
	/**
	 * Constructor, used by the library itself internally to initialize the event object.
	 * @param integer $x
	 * @param integer $y
	 */
	function __construct($x, $y){}

	/**
	 * Returns a reference to the cursor specified by this event.
	 * @return wxCursor
	 */
	function GetCursor(){}

	/**
	 * Returns the X coordinate of the mouse in client coordinates.
	 * @return integer
	 */
	function GetX(){}

	/**
	 * Returns the Y coordinate of the mouse in client coordinates.
	 * @return integer
	 */
	function GetY(){}

	/**
	 * Returns true if the cursor specified by this event is a valid cursor.
	 * @return bool
	 */
	function HasCursor(){}

	/**
	 * Sets the cursor associated with this event.
	 * @param wxCursor $cursor
	 */
	function SetCursor(wxCursor $cursor){}
}

class wxSettableHeaderColumn extends wxHeaderColumn
{
	/**
	 * Don't use this column for sorting.
	 */
	function UnsetAsSortKey(){}

	/**
	 * Inverses the sort order.
	 */
	function ToggleSortOrder(){}

	/**
	 * Toggle the specified flag for the column.
	 * @param integer $flag
	 */
	function ToggleFlag($flag){}

	/**
	 * Set the column width.
	 * @param integer $width
	 */
	function SetWidth($width){}

	/**
	 * Set the text to display in the column header.
	 * @param string $title
	 */
	function SetTitle($title){}

	/**
	 * Allow clicking the column to sort the control contents by the field in this column.
	 * @param bool $sortable
	 */
	function SetSortable($sortable){}

	/**
	 * Sets this column as the sort key for the associated control.
	 * @param bool $ascending
	 */
	function SetSortOrder($ascending){}

	/**
	 * Call this to enable or disable interactive resizing of the column by the user.
	 * @param bool $resizable
	 */
	function SetResizeable($resizable){}

	/**
	 * Allow changing the column order by dragging it.
	 * @param bool $reorderable
	 */
	function SetReorderable($reorderable){}

	/**
	 * Set the minimal column width.
	 * @param integer $minWidth
	 */
	function SetMinWidth($minWidth){}

	/**
	 * Hide or show the column.
	 * @param bool $hidden
	 */
	function SetHidden($hidden){}

	/**
	 * Set the column flags.
	 * @param integer $flags
	 */
	function SetFlags($flags){}

	/**
	 * Set the specified flag for the column.
	 * @param integer $flag
	 */
	function SetFlag($flag){}

	/**
	 * Set the bitmap to be displayed in the column header.
	 * @param wxBitmap $bitmap
	 */
	function SetBitmap(wxBitmap $bitmap){}

	/**
	 * Set the alignment of the column header.
	 * @param wxAlignment $align
	 */
	function SetAlignment(wxAlignment $align){}

	/**
	 * Clear the specified flag for the column.
	 * @param integer $flag
	 */
	function ClearFlag($flag){}

	/**
	 * Set or clear the given flag.
	 * @param integer $flag
	 * @param bool $set
	 */
	function ChangeFlag($flag, $set){}
}

class wxSimpleHtmlListBox extends wxHtmlListBox
{
	/**
	 * Constructor, creating and showing the HTML list box.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param array $choices
	 * @param integer $style
	 * @param wxValidator $validator
	 * @param string $name
	 */
	function __construct(wxWindow &$parent, $id, wxPoint $pos, wxSize $size, array $choices, $style=wxHLB_DEFAULT_STYLE, wxValidator $validator=null, $name=wxSimpleHtmlListBoxNameStr){}

	/**
	 * Creates the HTML listbox for two-step construction.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $n
	 * @param string $choices
	 * @param integer $style
	 * @param wxValidator $validator
	 * @param string $name
	 * @return bool
	 */
	function Create(wxWindow &$parent, $id, wxPoint $pos=null, wxSize $size=null, $n, $choices=NULL, $style=wxHLB_DEFAULT_STYLE, wxValidator $validator=null, $name=wxSimpleHtmlListBoxNameStr, wxWindow &$parent, $id, wxPoint $pos, wxSize $size, array $choices, $style=wxHLB_DEFAULT_STYLE, wxValidator $validator=null, $name=wxSimpleHtmlListBoxNameStr){}
}

class wxSingleChoiceDialog extends wxDialog
{
	/**
	 * Constructor, taking an array of wxString choices and optional client data.
	 * @param wxWindow $parent
	 * @param string $message
	 * @param string $caption
	 * @param integer $n
	 * @param array $choices
	 * @param mixed $clientData
	 * @param integer $style
	 * @param wxPoint $pos
	 */
	function __construct(wxWindow &$parent, $message, $caption, $n, array $choices, $clientData=NULL, $style=wxCHOICEDLG_STYLE, wxPoint $pos=null, wxWindow &$parent, $message, $caption, array $choices, $clientData=NULL, $style=wxCHOICEDLG_STYLE, wxPoint $pos=null){}

	/**
	 * Returns the index of selected item.
	 * @return integer
	 */
	function GetSelection(){}

	/**
	 * Returns the client data associated with the selection.
	 * @return mixed
	 */
	function GetSelectionData(){}

	/**
	 * Returns the selected string.
	 * @return string
	 */
	function GetStringSelection(){}

	/**
	 * Sets the index of the initially selected item.
	 * @param integer $selection
	 */
	function SetSelection($selection){}

	/**
	 * Shows the dialog, returning either wxID_OK or wxID_CANCEL.
	 * @return integer
	 */
	function ShowModal(){}
}

class wxSingleInstanceChecker
{
	/**
	 * Default constructor.
	 * @param string $name
	 * @param string $path
	 */
	function __construct($name, $path=wxEmptyString){}

	/**
	 * Initialize the object if it had been created using the default constructor.
	 * @param string $name
	 * @param string $path
	 * @return bool
	 */
	function Create($name, $path=wxEmptyString){}

	/**
	 * Calls Create() with default name.
	 * @return bool
	 */
	function CreateDefault(){}

	/**
	 * Returns true if another copy of this program is already running and false otherwise.
	 * @return bool
	 */
	function IsAnotherRunning(){}
}

class wxSize
{
	/**
	 * Initializes this size object with zero width and height.
	 * @param integer $width
	 * @param integer $height
	 */
	function __construct($width, $height){}

	/**
	 * Decrements this object so that both of its dimensions are not greater than the corresponding dimensions of the size.
	 * @param wxSize $size
	 */
	function DecTo(wxSize $size){}

	/**
	 * Gets the height member.
	 * @return integer
	 */
	function GetHeight(){}

	/**
	 * Gets the width member.
	 * @return integer
	 */
	function GetWidth(){}

	/**
	 * Increments this object so that both of its dimensions are not less than the corresponding dimensions of the size.
	 * @param wxSize $size
	 */
	function IncTo(wxSize $size){}

	/**
	 * Returns true if neither of the size object components is equal to -1, which is used as default for the size values in wxWidgets (hence the predefined wxDefaultSize has both of its components equal to -1).
	 * @return bool
	 */
	function IsFullySpecified(){}

	/**
	 * Scales the dimensions of this object by the given factors.
	 * @param float $xscale
	 * @param float $yscale
	 * @return wxSize
	 */
	function Scale($xscale, $yscale){}

	/**
	 * Sets the width and height members.
	 * @param integer $width
	 * @param integer $height
	 */
	function Set($width, $height){}

	/**
	 * Combine this size object with another one replacing the default (i.e.
	 * @param wxSize $sizeDefault
	 */
	function SetDefaults(wxSize $sizeDefault){}

	/**
	 * Sets the height.
	 * @param integer $height
	 */
	function SetHeight($height){}

	/**
	 * Sets the width.
	 * @param integer $width
	 */
	function SetWidth($width){}
}

class wxSizeEvent extends wxEvent
{
	/**
	 * Constructor.
	 * @param wxSize $sz
	 * @param integer $id
	 */
	function __construct(wxSize $sz, $id){}

	/**
	 * GetRect
	 * @return wxRect
	 */
	function GetRect(){}

	/**
	 * Returns the entire size of the window generating the size change event.
	 * @return wxSize
	 */
	function GetSize(){}

	/**
	 * SetRect
	 * @param wxRect $rect
	 */
	function SetRect(wxRect $rect){}

	/**
	 * SetSize
	 * @param wxSize $size
	 */
	function SetSize(wxSize $size){}
}

class wxSizer extends wxObject
{
	/**
	 * The constructor.
	 */
	function __construct(){}

	/**
	 * Appends a child to the sizer.
	 * @param wxWindow $window
	 * @param wxSizerFlags $flags
	 * @param integer $proportion
	 * @param integer $flag
	 * @param integer $border
	 * @param wxObject $userData
	 * @param wxSizer $sizer
	 * @param integer $width
	 * @param integer $height
	 * @param wxSizerItem $item
	 * @return wxSizerItem
	 */
	function Add(wxWindow &$window, wxSizerFlags $flags, wxWindow &$window, $proportion, $flag, $border, wxObject &$userData=null, wxSizer &$sizer, wxSizerFlags $flags, wxSizer &$sizer, $proportion, $flag, $border, wxObject &$userData=null, $width, $height, $proportion, $flag, $border, wxObject &$userData=null, wxSizerItem &$item){}

	/**
	 * This base function adds non-stretchable space to both the horizontal and vertical orientation of the sizer.
	 * @param integer $size
	 * @return wxSizerItem
	 */
	function AddSpacer($size){}

	/**
	 * Adds stretchable space to the sizer.
	 * @param integer $prop
	 * @return wxSizerItem
	 */
	function AddStretchSpacer($prop=1){}

	/**
	 * This method is abstract and has to be overwritten by any derived class.
	 * @return wxSize
	 */
	function CalcMin(){}

	/**
	 * Detaches all children from the sizer.
	 * @param bool $delete_windows
	 */
	function Clear($delete_windows=false){}

	/**
	 * Computes client area size for window so that it matches the sizer's minimal size.
	 * @param wxWindow $window
	 * @return wxSize
	 */
	function ComputeFittingClientSize(wxWindow &$window){}

	/**
	 * Like ComputeFittingClientSize(), but converts the result into window size.
	 * @param wxWindow $window
	 * @return wxSize
	 */
	function ComputeFittingWindowSize(wxWindow &$window){}

	/**
	 * Detach a item at position index from the sizer without destroying it.
	 * @param integer $index
	 * @param wxSizer $sizer
	 * @param wxWindow $window
	 * @return bool
	 */
	function Detach($index, wxSizer &$sizer, wxWindow &$window){}

	/**
	 * Tell the sizer to resize the window so that its client area matches the sizer's minimal size (ComputeFittingClientSize() is called to determine it).
	 * @param wxWindow $window
	 * @return wxSize
	 */
	function Fit(wxWindow &$window){}

	/**
	 * Tell the sizer to resize the virtual size of the window to match the sizer's minimal size.
	 * @param wxWindow $window
	 */
	function FitInside(wxWindow &$window){}

	/**
	 * Returns the window this sizer is used in or NULL if none.
	 * @return wxWindow
	 */
	function GetContainingWindow(){}

	/**
	 * Finds wxSizerItem which holds the given window.
	 * @param wxWindow $window
	 * @param bool $recursive
	 * @param wxSizer $sizer
	 * @param integer $index
	 * @return wxSizerItem
	 */
	function GetItem(wxWindow &$window, $recursive=false, wxSizer &$sizer, $recursive=false, $index){}

	/**
	 * Finds item of the sizer which has the given id.
	 * @param integer $id
	 * @param bool $recursive
	 * @return wxSizerItem
	 */
	function GetItemById($id, $recursive=false){}

	/**
	 * Returns the number of items in the sizer.
	 * @return integer
	 */
	function GetItemCount(){}

	/**
	 * Returns the minimal size of the sizer.
	 * @return wxSize
	 */
	function GetMinSize(){}

	/**
	 * Returns the current position of the sizer.
	 * @return wxPoint
	 */
	function GetPosition(){}

	/**
	 * Returns the current size of the sizer.
	 * @return wxSize
	 */
	function GetSize(){}

	/**
	 * Hides the item at position index.
	 * @param integer $index
	 * @param wxSizer $sizer
	 * @param bool $recursive
	 * @param wxWindow $window
	 * @return bool
	 */
	function Hide($index, wxSizer &$sizer, $recursive=false, wxWindow &$window, $recursive=false){}

	/**
	 * Inform sizer about the first direction that has been decided (by parent item).
	 * @param integer $direction
	 * @param integer $size
	 * @param integer $availableOtherDir
	 * @return bool
	 */
	function InformFirstDirection($direction, $size, $availableOtherDir){}

	/**
	 * Insert a child into the sizer before any existing item at index.
	 * @param integer $index
	 * @param integer $width
	 * @param integer $height
	 * @param integer $proportion
	 * @param integer $flag
	 * @param integer $border
	 * @param wxObject $userData
	 * @param wxSizer $sizer
	 * @param wxSizerFlags $flags
	 * @param wxWindow $window
	 * @param wxSizerItem $item
	 * @return wxSizerItem
	 */
	function Insert($index, $width, $height, $proportion, $flag, $border, wxObject &$userData=null, $index, wxSizer &$sizer, $proportion, $flag, $border, wxObject &$userData=null, $index, wxSizer &$sizer, wxSizerFlags $flags, $index, wxWindow &$window, $proportion, $flag, $border, wxObject &$userData=null, $index, wxWindow &$window, wxSizerFlags $flags, $index, wxSizerItem &$item){}

	/**
	 * Inserts non-stretchable space to the sizer.
	 * @param integer $index
	 * @param integer $size
	 * @return wxSizerItem
	 */
	function InsertSpacer($index, $size){}

	/**
	 * Inserts stretchable space to the sizer.
	 * @param integer $index
	 * @param integer $prop
	 * @return wxSizerItem
	 */
	function InsertStretchSpacer($index, $prop=1){}

	/**
	 * Return true if the sizer has no elements.
	 * @return bool
	 */
	function IsEmpty(){}

	/**
	 * Returns true if the item at index is shown.
	 * @param integer $index
	 * @param wxSizer $sizer
	 * @param wxWindow $window
	 * @return bool
	 */
	function IsShown($index, wxSizer &$sizer, wxWindow &$window){}

	/**
	 * Call this to force layout of the children anew, e.g.
	 */
	function Layout(){}

	/**
	 * Prepend
	 * @param wxSizerItem $item
	 * @param integer $width
	 * @param integer $height
	 * @param integer $proportion
	 * @param integer $flag
	 * @param integer $border
	 * @param wxObject $userData
	 * @param wxSizer $sizer
	 * @param wxWindow $window
	 * @param wxSizerFlags $flags
	 * @return wxSizerItem
	 */
	function Prepend(wxSizerItem &$item, $width, $height, $proportion, $flag, $border, wxObject &$userData=null, wxSizer &$sizer, $proportion, $flag, $border, wxObject &$userData=null, wxWindow &$window, $proportion, $flag, $border, wxObject &$userData=null, wxWindow &$window, wxSizerFlags $flags, wxSizer &$sizer, wxSizerFlags $flags){}

	/**
	 * Prepends non-stretchable space to the sizer.
	 * @param integer $size
	 * @return wxSizerItem
	 */
	function PrependSpacer($size){}

	/**
	 * Prepends stretchable space to the sizer.
	 * @param integer $prop
	 * @return wxSizerItem
	 */
	function PrependStretchSpacer($prop=1){}

	/**
	 * This method is abstract and has to be overwritten by any derived class.
	 */
	function RecalcSizes(){}

	/**
	 * Removes a child from the sizer and destroys it if it is a sizer or a spacer, but not if it is a window (because windows are owned by their parent window, not the sizer).
	 * @param integer $index
	 * @param wxSizer $sizer
	 * @return bool
	 */
	function Remove($index, wxSizer &$sizer){}

	/**
	 * Detaches the given oldsz from the sizer and replaces it with the given newsz.
	 * @param wxSizer $oldsz
	 * @param wxSizer $newsz
	 * @param bool $recursive
	 * @param wxWindow $oldwin
	 * @param wxWindow $newwin
	 * @param integer $index
	 * @param wxSizerItem $newitem
	 * @return bool
	 */
	function Replace(wxSizer &$oldsz, wxSizer &$newsz, $recursive=false, wxWindow &$oldwin, wxWindow &$newwin, $recursive=false, $index, wxSizerItem &$newitem){}

	/**
	 * This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $x
	 * @param integer $y
	 * @param integer $width
	 * @param integer $height
	 */
	function SetDimension(wxPoint $pos, wxSize $size, $x, $y, $width, $height){}

	/**
	 * Set an item's minimum size by window, sizer, or position.
	 * @param integer $index
	 * @param wxSize $size
	 * @param integer $width
	 * @param integer $height
	 * @param wxSizer $sizer
	 * @param wxWindow $window
	 * @return bool
	 */
	function SetItemMinSize($index, wxSize $size, $index, $width, $height, wxSizer &$sizer, wxSize $size, wxSizer &$sizer, $width, $height, wxWindow &$window, wxSize $size, wxWindow &$window, $width, $height){}

	/**
	 * This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.
	 * @param integer $width
	 * @param integer $height
	 * @param wxSize $size
	 */
	function SetMinSize($width, $height, wxSize $size){}

	/**
	 * This method first calls Fit() and then wxTopLevelWindow::SetSizeHints() on the window passed to it.
	 * @param wxWindow $window
	 */
	function SetSizeHints(wxWindow &$window){}

	/**
	 * Tell the sizer to set the minimal size of the window virtual area to match the sizer's minimal size.
	 * @param wxWindow $window
	 */
	function SetVirtualSizeHints(wxWindow &$window){}

	/**
	 * Shows or hides sizer.
	 * @param wxSizer $sizer
	 * @param bool $show
	 * @param bool $recursive
	 * @param integer $index
	 * @param wxWindow $window
	 * @return bool
	 */
	function Show(wxSizer &$sizer, $show=true, $recursive=false, $index, $show=true, wxWindow &$window, $show=true, $recursive=false){}
}

class wxSizerFlags
{
	/**
	 * Creates the wxSizer with the proportion specified by proportion.
	 * @param integer $proportion
	 */
	function __construct($proportion){}

	/**
	 * Sets the alignment of this wxSizerFlags to align.
	 * @param integer $alignment
	 * @return wxSizerFlags
	 */
	function Align($alignment){}

	/**
	 * Sets the wxSizerFlags to have a border with size as returned by GetDefaultBorder().
	 * @param integer $direction
	 * @param integer $borderinpixels
	 * @return wxSizerFlags
	 */
	function Border($direction=wxALL, $direction, $borderinpixels){}

	/**
	 * Aligns the object to the bottom, similar for Align(wxALIGN_BOTTOM).
	 * @return wxSizerFlags
	 */
	function Bottom(){}

	/**
	 * Sets the object of the wxSizerFlags to center itself in the area it is given.
	 * @return wxSizerFlags
	 */
	function Center(){}

	/**
	 * Center() for people with the other dialect of English.
	 * @return wxSizerFlags
	 */
	function Centre(){}

	/**
	 * Sets the border in the given direction having twice the default border size.
	 * @param integer $direction
	 * @return wxSizerFlags
	 */
	function DoubleBorder($direction=wxALL){}

	/**
	 * Sets the border in left and right directions having twice the default border size.
	 * @return wxSizerFlags
	 */
	function DoubleHorzBorder(){}

	/**
	 * Sets the object of the wxSizerFlags to expand to fill as much area as it can.
	 * @return wxSizerFlags
	 */
	function Expand(){}

	/**
	 * Set the wxFIXED_MINSIZE flag which indicates that the initial size of the window should be also set as its minimal size.
	 * @return wxSizerFlags
	 */
	function FixedMinSize(){}

	/**
	 * Returns the border used by default in Border() method.
	 * @return integer
	 */
	function GetDefaultBorder(){}

	/**
	 * Aligns the object to the left, similar for Align(wxALIGN_LEFT).
	 * @return wxSizerFlags
	 */
	function Left(){}

	/**
	 * Sets the proportion of this wxSizerFlags to proportion.
	 * @param integer $proportion
	 * @return wxSizerFlags
	 */
	function Proportion($proportion){}

	/**
	 * Set the wxRESERVE_SPACE_EVEN_IF_HIDDEN flag.
	 * @return wxSizerFlags
	 */
	function ReserveSpaceEvenIfHidden(){}

	/**
	 * Aligns the object to the right, similar for Align(wxALIGN_RIGHT).
	 * @return wxSizerFlags
	 */
	function Right(){}

	/**
	 * Set the wx_SHAPED flag which indicates that the elements should always keep the fixed width to height ratio equal to its original value.
	 * @return wxSizerFlags
	 */
	function Shaped(){}

	/**
	 * Aligns the object to the top, similar for Align(wxALIGN_TOP).
	 * @return wxSizerFlags
	 */
	function Top(){}

	/**
	 * Sets the border in the given direction having thrice the default border size.
	 * @param integer $direction
	 * @return wxSizerFlags
	 */
	function TripleBorder($direction=wxALL){}
}

class wxSizerItem extends wxObject
{
	/**
	 * Construct a sizer item for tracking a window.
	 * @param wxWindow $window
	 * @param wxSizerFlags $flags
	 * @param integer $proportion
	 * @param integer $flag
	 * @param integer $border
	 * @param wxObject $userData
	 * @param wxSizer $sizer
	 * @param integer $width
	 * @param integer $height
	 */
	function __construct(wxWindow &$window, wxSizerFlags $flags, wxWindow &$window, $proportion, $flag, $border, wxObject &$userData=null, wxSizer &$sizer, wxSizerFlags $flags, wxSizer &$sizer, $proportion, $flag, $border, wxObject &$userData=null, $width, $height, $proportion, $flag, $border, wxObject &$userData=null){}

	/**
	 * Set the sizer tracked by this item.
	 * @param wxSizer $sizer
	 */
	function AssignSizer(wxSizer &$sizer){}

	/**
	 * Set the size of the spacer tracked by this item.
	 * @param wxSize $size
	 * @param integer $w
	 * @param integer $h
	 */
	function AssignSpacer(wxSize $size, $w, $h){}

	/**
	 * Set the window to be tracked by this item.
	 * @param wxWindow $window
	 */
	function AssignWindow(wxWindow &$window){}

	/**
	 * Calculates the minimum desired size for the item, including any space needed by borders.
	 * @return wxSize
	 */
	function CalcMin(){}

	/**
	 * Destroy the window or the windows in a subsizer, depending on the type of item.
	 */
	function DeleteWindows(){}

	/**
	 * Enable deleting the SizerItem without destroying the contained sizer.
	 */
	function DetachSizer(){}

	/**
	 * Return the border attribute.
	 * @return integer
	 */
	function GetBorder(){}

	/**
	 * Return the flags attribute.
	 * @return integer
	 */
	function GetFlag(){}

	/**
	 * Return the numeric id of wxSizerItem, or wxID_NONE if the id has not been set.
	 * @return integer
	 */
	function GetId(){}

	/**
	 * Get the minimum size needed for the item.
	 * @return wxSize
	 */
	function GetMinSize(){}

	/**
	 * What is the current position of the item, as set in the last Layout.
	 * @return wxPoint
	 */
	function GetPosition(){}

	/**
	 * Get the proportion item attribute.
	 * @return integer
	 */
	function GetProportion(){}

	/**
	 * Get the ration item attribute.
	 * @return float
	 */
	function GetRatio(){}

	/**
	 * Get the rectangle of the item on the parent window, excluding borders.
	 * @return wxRect
	 */
	function GetRect(){}

	/**
	 * Get the current size of the item, as set in the last Layout.
	 * @return wxSize
	 */
	function GetSize(){}

	/**
	 * If this item is tracking a sizer, return it.
	 * @return wxSizer
	 */
	function GetSizer(){}

	/**
	 * If this item is tracking a spacer, return its size.
	 * @return wxSize
	 */
	function GetSpacer(){}

	/**
	 * Get the userData item attribute.
	 * @return wxObject
	 */
	function GetUserData(){}

	/**
	 * If this item is tracking a window then return it.
	 * @return wxWindow
	 */
	function GetWindow(){}

	/**
	 * Returns true if this item is a window or a spacer and it is shown or if this item is a sizer and not all of its elements are hidden.
	 * @return bool
	 */
	function IsShown(){}

	/**
	 * Is this item a sizer?
	 * @return bool
	 */
	function IsSizer(){}

	/**
	 * Is this item a spacer?
	 * @return bool
	 */
	function IsSpacer(){}

	/**
	 * Is this item a window?
	 * @return bool
	 */
	function IsWindow(){}

	/**
	 * Set the border item attribute.
	 * @param integer $border
	 */
	function SetBorder($border){}

	/**
	 * Set the position and size of the space allocated to the sizer, and adjust the position and size of the item to be within that space taking alignment and borders into account.
	 * @param wxPoint $pos
	 * @param wxSize $size
	 */
	function SetDimension(wxPoint $pos, wxSize $size){}

	/**
	 * Set the flag item attribute.
	 * @param integer $flag
	 */
	function SetFlag($flag){}

	/**
	 * Sets the numeric id of the wxSizerItem to id.
	 * @param integer $id
	 */
	function SetId($id){}

	/**
	 * SetInitSize
	 * @param integer $x
	 * @param integer $y
	 */
	function SetInitSize($x, $y){}

	/**
	 * This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.
	 * @param integer $x
	 * @param integer $y
	 * @param wxSize $size
	 */
	function SetMinSize($x, $y, wxSize $size){}

	/**
	 * Set the proportion item attribute.
	 * @param integer $proportion
	 */
	function SetProportion($proportion){}

	/**
	 * Set the ratio item attribute.
	 * @param float $ratio
	 * @param wxSize $size
	 * @param integer $width
	 * @param integer $height
	 */
	function SetRatio($ratio, wxSize $size, $width, $height){}

	/**
	 * Set the sizer tracked by this item.
	 * @param wxSizer $sizer
	 */
	function SetSizer(wxSizer &$sizer){}

	/**
	 * Set the size of the spacer tracked by this item.
	 * @param wxSize $size
	 */
	function SetSpacer(wxSize $size){}

	/**
	 * SetUserData
	 * @param wxObject $userData
	 */
	function SetUserData(wxObject &$userData){}

	/**
	 * Set the window to be tracked by this item.
	 * @param wxWindow $window
	 */
	function SetWindow(wxWindow &$window){}

	/**
	 * Set the show item attribute, which sizers use to determine if the item is to be made part of the layout or not.
	 * @param bool $show
	 */
	function Show($show){}
}

class wxSlider extends wxControl
{
	/**
	 * Default constructor.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param integer $value
	 * @param integer $minValue
	 * @param integer $maxValue
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param wxValidator $validator
	 * @param string $name
	 */
	function __construct(wxWindow &$parent, $id, $value, $minValue, $maxValue, wxPoint $pos=null, wxSize $size=null, $style=wxSL_HORIZONTAL, wxValidator $validator=null, $name=wxSliderNameStr){}

	/**
	 * Used for two-step slider construction.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param integer $value
	 * @param integer $minValue
	 * @param integer $maxValue
	 * @param wxPoint $point
	 * @param wxSize $size
	 * @param integer $style
	 * @param wxValidator $validator
	 * @param string $name
	 * @return bool
	 */
	function Create(wxWindow &$parent, $id, $value, $minValue, $maxValue, wxPoint $point=null, wxSize $size=null, $style=wxSL_HORIZONTAL, wxValidator $validator=null, $name=wxSliderNameStr){}

	/**
	 * Returns the line size.
	 * @return integer
	 */
	function GetLineSize(){}

	/**
	 * Gets the maximum slider value.
	 * @return integer
	 */
	function GetMax(){}

	/**
	 * Gets the minimum slider value.
	 * @return integer
	 */
	function GetMin(){}

	/**
	 * Returns the page size.
	 * @return integer
	 */
	function GetPageSize(){}

	/**
	 * Gets the current slider value.
	 * @return integer
	 */
	function GetValue(){}

	/**
	 * Sets the line size for the slider.
	 * @param integer $lineSize
	 */
	function SetLineSize($lineSize){}

	/**
	 * Sets the page size for the slider.
	 * @param integer $pageSize
	 */
	function SetPageSize($pageSize){}

	/**
	 * Sets the minimum and maximum slider values.
	 * @param integer $minValue
	 * @param integer $maxValue
	 */
	function SetRange($minValue, $maxValue){}

	/**
	 * Sets the slider position.
	 * @param integer $value
	 */
	function SetValue($value){}
}

class wxSound extends wxObject
{
	/**
	 * Default ctor.
	 * @param string $fileName
	 * @param bool $isResource
	 * @param integer $size
	 * @param mixed $data
	 */
	function __construct($fileName, $isResource=false, $size, $data){}

	/**
	 * Constructs a wave object from a file or resource.
	 * @param string $fileName
	 * @param bool $isResource
	 * @return bool
	 */
	function Create($fileName, $isResource=false){}

	/**
	 * Returns true if the object contains a successfully loaded file or resource, false otherwise.
	 * @return bool
	 */
	function IsOk(){}

	/**
	 * Plays the sound file.
	 * @param integer $flags
	 * @param string $filename
	 * @return bool
	 */
	function Play($flags=wxSOUND_ASYNC, $filename, $flags=wxSOUND_ASYNC){}

	/**
	 * If a sound is played, this function stops it.
	 */
	function Stop(){}
}

class wxSpinButton extends wxControl
{
	/**
	 * Default constructor.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param string $name
	 */
	function __construct(wxWindow &$parent, $id=-1, wxPoint $pos=null, wxSize $size=null, $style=wxSP_VERTICAL, $name="spinButton"){}

	/**
	 * Scrollbar creation function called by the spin button constructor.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param string $name
	 * @return bool
	 */
	function Create(wxWindow &$parent, $id=-1, wxPoint $pos=null, wxSize $size=null, $style=wxSP_VERTICAL, $name="wxSpinButton"){}

	/**
	 * Returns the maximum permissible value.
	 * @return integer
	 */
	function GetMax(){}

	/**
	 * Returns the minimum permissible value.
	 * @return integer
	 */
	function GetMin(){}

	/**
	 * Returns the current spin button value.
	 * @return integer
	 */
	function GetValue(){}

	/**
	 * Sets the range of the spin button.
	 * @param integer $min
	 * @param integer $max
	 */
	function SetRange($min, $max){}

	/**
	 * Sets the value of the spin button.
	 * @param integer $value
	 */
	function SetValue($value){}
}

class wxSpinCtrl extends wxControl
{
	/**
	 * Default constructor.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param string $value
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param integer $min
	 * @param integer $max
	 * @param integer $initial
	 * @param string $name
	 */
	function __construct(wxWindow &$parent, $id=wxID_ANY, $value=wxEmptyString, wxPoint $pos=null, wxSize $size=null, $style=wxSP_ARROW_KEYS, $min, $max=100, $initial, $name="wxSpinCtrl"){}

	/**
	 * Creation function called by the spin control constructor.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param string $value
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param integer $min
	 * @param integer $max
	 * @param integer $initial
	 * @param string $name
	 * @return bool
	 */
	function Create(wxWindow &$parent, $id=wxID_ANY, $value=wxEmptyString, wxPoint $pos=null, wxSize $size=null, $style=wxSP_ARROW_KEYS, $min, $max=100, $initial, $name="wxSpinCtrl"){}

	/**
	 * Gets maximal allowable value.
	 * @return integer
	 */
	function GetMax(){}

	/**
	 * Gets minimal allowable value.
	 * @return integer
	 */
	function GetMin(){}

	/**
	 * Gets the value of the spin control.
	 * @return integer
	 */
	function GetValue(){}

	/**
	 * Sets range of allowable values.
	 * @param integer $minVal
	 * @param integer $maxVal
	 */
	function SetRange($minVal, $maxVal){}

	/**
	 * Select the text in the text part of the control between positions from (inclusive) and to (exclusive).
	 * @param integer $from
	 * @param integer $to
	 */
	function SetSelection($from, $to){}

	/**
	 * Sets the value of the spin control.
	 * @param integer $value
	 */
	function SetValue($value){}
}

class wxSpinCtrlDouble extends wxControl
{
	/**
	 * Default constructor.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param string $value
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param float $min
	 * @param float $max
	 * @param float $initial
	 * @param float $inc
	 * @param string $name
	 */
	function __construct(wxWindow &$parent, $id=-1, $value=wxEmptyString, wxPoint $pos=null, wxSize $size=null, $style=wxSP_ARROW_KEYS, $min, $max=100, $initial, $inc=1, $name="wxSpinCtrlDouble"){}

	/**
	 * Creation function called by the spin control constructor.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param string $value
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param float $min
	 * @param float $max
	 * @param float $initial
	 * @param float $inc
	 * @param string $name
	 * @return bool
	 */
	function Create(wxWindow &$parent, $id=wxID_ANY, $value=wxEmptyString, wxPoint $pos=null, wxSize $size=null, $style=wxSP_ARROW_KEYS, $min, $max=100, $initial, $inc=1, $name="wxSpinCtrlDouble"){}

	/**
	 * Gets the number of digits in the display.
	 * @return integer
	 */
	function GetDigits(){}

	/**
	 * Gets the increment value.
	 * @return float
	 */
	function GetIncrement(){}

	/**
	 * Gets maximal allowable value.
	 * @return float
	 */
	function GetMax(){}

	/**
	 * Gets minimal allowable value.
	 * @return float
	 */
	function GetMin(){}

	/**
	 * Gets the value of the spin control.
	 * @return float
	 */
	function GetValue(){}

	/**
	 * Sets the number of digits in the display.
	 * @param integer $digits
	 */
	function SetDigits($digits){}

	/**
	 * Sets the increment value.
	 * @param float $inc
	 */
	function SetIncrement($inc){}

	/**
	 * Sets range of allowable values.
	 * @param float $minVal
	 * @param float $maxVal
	 */
	function SetRange($minVal, $maxVal){}

	/**
	 * Sets the value of the spin control.
	 * @param float $value
	 */
	function SetValue($value){}
}

class wxSpinDoubleEvent extends wxNotifyEvent
{
	/**
	 * The copy constructor.
	 * @param wxSpinDoubleEvent $event
	 * @param integer $commandType
	 * @param integer $winid
	 * @param float $value
	 */
	function __construct(wxSpinDoubleEvent $event, $commandType=wxEVT_NULL, $winid, $value){}

	/**
	 * Returns the value associated with this spin control event.
	 * @return float
	 */
	function GetValue(){}

	/**
	 * Set the value associated with the event.
	 * @param float $value
	 */
	function SetValue($value){}
}

class wxSpinEvent extends wxNotifyEvent
{
	/**
	 * The constructor is not normally used by the user code.
	 * @param integer $commandType
	 * @param integer $id
	 */
	function __construct($commandType=wxEVT_NULL, $id){}

	/**
	 * Retrieve the current spin button or control value.
	 * @return integer
	 */
	function GetPosition(){}

	/**
	 * Set the value associated with the event.
	 * @param integer $pos
	 */
	function SetPosition($pos){}
}

class wxSplashScreen extends wxFrame
{
	/**
	 * Construct the splash screen passing a bitmap, a style, a timeout, a window id, optional position and size, and a window style.
	 * @param wxBitmap $bitmap
	 * @param integer $splashStyle
	 * @param integer $milliseconds
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 */
	function __construct(wxBitmap $bitmap, $splashStyle, $milliseconds, wxWindow &$parent, $id, wxPoint $pos=null, wxSize $size=null, $style=null){}

	/**
	 * Returns the splash style (see wxSplashScreen() for details).
	 * @return integer
	 */
	function GetSplashStyle(){}

	/**
	 * Returns the timeout in milliseconds.
	 * @return integer
	 */
	function GetTimeout(){}
}

class wxSplitterEvent extends wxNotifyEvent
{
	/**
	 * Constructor.
	 * @param integer $eventType
	 * @param wxSplitterWindow $splitter
	 */
	function __construct($eventType=wxEVT_NULL, wxSplitterWindow &$splitter=null){}

	/**
	 * Returns the new sash position.
	 * @return integer
	 */
	function GetSashPosition(){}

	/**
	 * Returns a pointer to the window being removed when a splitter window is unsplit.
	 * @return wxWindow
	 */
	function GetWindowBeingRemoved(){}

	/**
	 * Returns the x coordinate of the double-click point.
	 * @return integer
	 */
	function GetX(){}

	/**
	 * Returns the y coordinate of the double-click point.
	 * @return integer
	 */
	function GetY(){}

	/**
	 * In the case of wxEVT_COMMAND_SPLITTER_SASH_POS_CHANGED events, sets the new sash position.
	 * @param integer $pos
	 */
	function SetSashPosition($pos){}
}

class wxSplitterWindow extends wxWindow
{
	/**
	 * Default constructor.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param string $name
	 */
	function __construct(wxWindow &$parent, $id=wxID_ANY, wxPoint $pos=null, wxSize $size=null, $style=wxSP_3D, $name="splitterWindow"){}

	/**
	 * Creation function, for two-step construction.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param wxPoint $point
	 * @param wxSize $size
	 * @param integer $style
	 * @param string $name
	 * @return bool
	 */
	function Create(wxWindow &$parent, $id=wxID_ANY, wxPoint $point=null, wxSize $size=null, $style=wxSP_3D, $name="splitter"){}

	/**
	 * Returns the current minimum pane size (defaults to zero).
	 * @return integer
	 */
	function GetMinimumPaneSize(){}

	/**
	 * Returns the current sash gravity.
	 * @return float
	 */
	function GetSashGravity(){}

	/**
	 * Returns the current sash position.
	 * @return integer
	 */
	function GetSashPosition(){}

	/**
	 * Returns the default sash size in pixels or 0 if it is invisible.
	 * @return integer
	 */
	function GetSashSize(){}

	/**
	 * Gets the split mode.
	 * @return wxSplitMode
	 */
	function GetSplitMode(){}

	/**
	 * Returns the left/top or only pane.
	 * @return wxWindow
	 */
	function GetWindow1(){}

	/**
	 * Returns the right/bottom pane.
	 * @return wxWindow
	 */
	function GetWindow2(){}

	/**
	 * Initializes the splitter window to have one pane.
	 * @param wxWindow $window
	 */
	function Initialize(wxWindow &$window){}

	/**
	 * Returns true if the window is split, false otherwise.
	 * @return bool
	 */
	function IsSplit(){}

	/**
	 * Application-overridable function called when the sash is double-clicked with the left mouse button.
	 * @param integer $x
	 * @param integer $y
	 */
	function OnDoubleClickSash($x, $y){}

	/**
	 * Application-overridable function called when the sash position is changed by user.
	 * @param integer $newSashPosition
	 * @return bool
	 */
	function OnSashPositionChange($newSashPosition){}

	/**
	 * Application-overridable function called when the window is unsplit, either programmatically or using the wxSplitterWindow user interface.
	 * @param wxWindow $removed
	 */
	function OnUnsplit(wxWindow &$removed){}

	/**
	 * This function replaces one of the windows managed by the wxSplitterWindow with another one.
	 * @param wxWindow $winOld
	 * @param wxWindow $winNew
	 * @return bool
	 */
	function ReplaceWindow(wxWindow &$winOld, wxWindow &$winNew){}

	/**
	 * Sets the minimum pane size.
	 * @param integer $paneSize
	 */
	function SetMinimumPaneSize($paneSize){}

	/**
	 * Sets the sash gravity.
	 * @param float $gravity
	 */
	function SetSashGravity($gravity){}

	/**
	 * Sets the sash position.
	 * @param integer $position
	 * @param bool $redraw
	 */
	function SetSashPosition($position, $redraw=true){}

	/**
	 * Sets the split mode.
	 * @param integer $mode
	 */
	function SetSplitMode($mode){}

	/**
	 * Initializes the top and bottom panes of the splitter window.
	 * @param wxWindow $window1
	 * @param wxWindow $window2
	 * @param integer $sashPosition
	 * @return bool
	 */
	function SplitHorizontally(wxWindow &$window1, wxWindow &$window2, $sashPosition){}

	/**
	 * Initializes the left and right panes of the splitter window.
	 * @param wxWindow $window1
	 * @param wxWindow $window2
	 * @param integer $sashPosition
	 * @return bool
	 */
	function SplitVertically(wxWindow &$window1, wxWindow &$window2, $sashPosition){}

	/**
	 * Unsplits the window.
	 * @param wxWindow $toRemove
	 * @return bool
	 */
	function Unsplit(wxWindow &$toRemove=null){}

	/**
	 * Causes any pending sizing of the sash and child panes to take place immediately.
	 */
	function UpdateSize(){}
}

class wxStandardPaths
{
	const ResourceCat_None = 1;
	const ResourceCat_Messages = 1;

	/**
	 * Returns reference to the unique global standard paths object.
	 * @return wxStandardPaths
	 */
	function Get(){}

	/**
	 * Return the directory for the document files used by this application.
	 * @return string
	 */
	function GetAppDocumentsDir(){}

	/**
	 * Return the directory containing the system config files.
	 * @return string
	 */
	function GetConfigDir(){}

	/**
	 * Return the location of the applications global, i.e.
	 * @return string
	 */
	function GetDataDir(){}

	/**
	 * Return the directory containing the current user's documents.
	 * @return string
	 */
	function GetDocumentsDir(){}

	/**
	 * Return the directory and the filename for the current executable.
	 * @return string
	 */
	function GetExecutablePath(){}

	/**
	 * Return the location for application data files which are host-specific and can't, or shouldn't, be shared with the other machines.
	 * @return string
	 */
	function GetLocalDataDir(){}

	/**
	 * Return the directory where the loadable modules (plugins) live.
	 * @return string
	 */
	function GetPluginsDir(){}

	/**
	 * Return the directory where the application resource files are located.
	 * @return string
	 */
	function GetResourcesDir(){}

	/**
	 * Return the directory for storing temporary files.
	 * @return string
	 */
	function GetTempDir(){}

	/**
	 * Return the directory for the user config files:
	 * @return string
	 */
	function GetUserConfigDir(){}

	/**
	 * Return the directory for the user-dependent application data files:
	 * @return string
	 */
	function GetUserDataDir(){}

	/**
	 * Return the directory for user data files which shouldn't be shared with the other machines.
	 * @return string
	 */
	function GetUserLocalDataDir(){}

	/**
	 * Controls what application information is used when constructing paths that should be unique to this program, such as the application data directory, the plugins directory on Unix, etc.
	 * @param integer $info
	 */
	function UseAppInfo($info){}
}

class wxStaticBitmap extends wxControl
{
	/**
	 * Default constructor.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param wxBitmap $label
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param string $name
	 */
	function __construct(wxWindow &$parent, $id, wxBitmap $label, wxPoint $pos=null, wxSize $size=null, $style, $name=wxStaticBitmapNameStr){}

	/**
	 * Creation function, for two-step construction.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param wxBitmap $label
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param string $name
	 * @return bool
	 */
	function Create(wxWindow &$parent, $id, wxBitmap $label, wxPoint $pos=null, wxSize $size=null, $style, $name=wxStaticBitmapNameStr){}

	/**
	 * Returns the bitmap currently used in the control.
	 * @return wxBitmap
	 */
	function GetBitmap(){}

	/**
	 * Returns the icon currently used in the control.
	 * @return wxIcon
	 */
	function GetIcon(){}

	/**
	 * Sets the bitmap label.
	 * @param wxBitmap $label
	 */
	function SetBitmap(wxBitmap $label){}

	/**
	 * Sets the label to the given icon.
	 * @param wxIcon $label
	 */
	function SetIcon(wxIcon $label){}
}

class wxStaticBox extends wxControl
{
	/**
	 * Default constructor.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param string $label
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param string $name
	 */
	function __construct(wxWindow &$parent, $id, $label, wxPoint $pos=null, wxSize $size=null, $style, $name=wxStaticBoxNameStr){}

	/**
	 * Creates the static box for two-step construction.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param string $label
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param string $name
	 * @return bool
	 */
	function Create(wxWindow &$parent, $id, $label, wxPoint $pos=null, wxSize $size=null, $style, $name=wxStaticBoxNameStr){}
}

class wxStaticBoxSizer extends wxBoxSizer
{
	/**
	 * This constructor uses an already existing static box.
	 * @param wxStaticBox $box
	 * @param integer $orient
	 * @param wxWindow $parent
	 * @param string $label
	 */
	function __construct(wxStaticBox &$box, $orient, $orient, wxWindow &$parent, $label=wxEmptyString){}

	/**
	 * Implements the calculation of a box sizer's minimal.
	 * @return wxSize
	 */
	function CalcMin(){}

	/**
	 * Returns the static box associated with the sizer.
	 * @return wxStaticBox
	 */
	function GetStaticBox(){}

	/**
	 * Implements the calculation of a box sizer's dimensions and then sets the size of its children (calling wxWindow::SetSize if the child is a window).
	 */
	function RecalcSizes(){}
}

class wxStaticLine extends wxControl
{
	/**
	 * Default constructor.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param string $name
	 */
	function __construct(wxWindow &$parent, $id=wxID_ANY, wxPoint $pos=null, wxSize $size=null, $style=wxLI_HORIZONTAL, $name=wxStaticLineNameStr){}

	/**
	 * Creates the static line for two-step construction.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param string $name
	 * @return bool
	 */
	function Create(wxWindow &$parent, $id=wxID_ANY, wxPoint $pos=null, wxSize $size=null, $style=wxLI_HORIZONTAL, $name=wxStaticLineNameStr){}

	/**
	 * This static function returns the size which will be given to the smaller dimension of the static line, i.e.
	 * @return integer
	 */
	function GetDefaultSize(){}

	/**
	 * Returns true if the line is vertical, false if horizontal.
	 * @return bool
	 */
	function IsVertical(){}
}

class wxStaticText extends wxControl
{
	/**
	 * Default constructor.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param string $label
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param string $name
	 */
	function __construct(wxWindow &$parent, $id, $label, wxPoint $pos=null, wxSize $size=null, $style, $name=wxStaticTextNameStr){}

	/**
	 * Creation function, for two-step construction.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param string $label
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param string $name
	 * @return bool
	 */
	function Create(wxWindow &$parent, $id, $label, wxPoint $pos=null, wxSize $size=null, $style, $name=wxStaticTextNameStr){}

	/**
	 * Returns true if the window styles for this control contains one of the wxST_ELLIPSIZE_START, wxST_ELLIPSIZE_MIDDLE or wxST_ELLIPSIZE_END styles.
	 * @return bool
	 */
	function IsEllipsized(){}

	/**
	 * This functions wraps the controls label so that each of its lines becomes at most width pixels wide if possible (the lines are broken at words boundaries so it might not be the case if words are too long).
	 * @param integer $width
	 */
	function Wrap($width){}
}

class wxStatusBar extends wxControl
{
	/**
	 * Constructor, creating the window.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param integer $style
	 * @param string $name
	 */
	function __construct(wxWindow &$parent, $id=wxID_ANY, $style=wxSTB_DEFAULT_STYLE, $name=wxStatusBarNameStr){}

	/**
	 * Creates the window, for two-step construction.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param integer $style
	 * @param string $name
	 * @return bool
	 */
	function Create(wxWindow &$parent, $id=wxID_ANY, $style=wxSTB_DEFAULT_STYLE, $name=wxStatusBarNameStr){}

	/**
	 * Returns the horizontal and vertical borders used when rendering the field text inside the field area.
	 * @return wxSize
	 */
	function GetBorders(){}

	/**
	 * Returns the wxStatusBarPane representing the n-th field.
	 * @param integer $n
	 * @return wxStatusBarPane
	 */
	function GetField($n){}

	/**
	 * Returns the size and position of a field's internal bounding rectangle.
	 * @param integer $i
	 * @param wxRect $rect
	 * @return bool
	 */
	function GetFieldRect($i, wxRect &$rect){}

	/**
	 * Returns the number of fields in the status bar.
	 * @return integer
	 */
	function GetFieldsCount(){}

	/**
	 * Returns the style of the n-th field.
	 * @param integer $n
	 * @return integer
	 */
	function GetStatusStyle($n){}

	/**
	 * Returns the string associated with a status bar field.
	 * @param integer $i
	 * @return string
	 */
	function GetStatusText($i){}

	/**
	 * Returns the width of the n-th field.
	 * @param integer $n
	 * @return integer
	 */
	function GetStatusWidth($n){}

	/**
	 * Restores the text to the value it had before the last call to PushStatusText().
	 * @param integer $field
	 */
	function PopStatusText($field){}

	/**
	 * Saves the current field text in a per-field stack, and sets the field text to the string passed as argument.
	 * @param string $string
	 * @param integer $field
	 */
	function PushStatusText($string, $field){}

	/**
	 * Sets the number of fields, and optionally the field widths.
	 * @param integer $number
	 * @param array $widths
	 */
	function SetFieldsCount($number=1, array $widths=NULL){}

	/**
	 * Sets the minimal possible height for the status bar.
	 * @param integer $height
	 */
	function SetMinHeight($height){}

	/**
	 * Sets the styles of the fields in the status line which can make fields appear flat or raised instead of the standard sunken 3D border.
	 * @param integer $n
	 * @param array $styles
	 */
	function SetStatusStyles($n, array $styles){}

	/**
	 * Sets the status text for the i-th field.
	 * @param string $text
	 * @param integer $i
	 */
	function SetStatusText($text, $i){}

	/**
	 * Sets the widths of the fields in the status line.
	 * @param integer $n
	 * @param array $widths_field
	 */
	function SetStatusWidths($n, array $widths_field){}
}

class wxStatusBarPane
{
	/**
	 * Constructs the pane with the given style and width.
	 * @param integer $style
	 * @param integer $width
	 */
	function __construct($style=wxSB_NORMAL, $width){}

	/**
	 * Returns the pane style.
	 * @return integer
	 */
	function GetStyle(){}

	/**
	 * Returns the text currently shown in this pane.
	 * @return string
	 */
	function GetText(){}

	/**
	 * Returns the pane width; it maybe negative, indicating a variable-width field.
	 * @return integer
	 */
	function GetWidth(){}
}

class wxStdDialogButtonSizer extends wxBoxSizer
{
	/**
	 * Constructor for a wxStdDialogButtonSizer.
	 */
	function __construct(){}

	/**
	 * Adds a button to the wxStdDialogButtonSizer.
	 * @param wxButton $button
	 */
	function AddButton(wxButton &$button){}

	/**
	 * Implements the calculation of a box sizer's minimal.
	 * @return wxSize
	 */
	function CalcMin(){}

	/**
	 * Rearranges the buttons and applies proper spacing between buttons to make them match the platform or toolkit's interface guidelines.
	 */
	function Realize(){}

	/**
	 * Implements the calculation of a box sizer's dimensions and then sets the size of its children (calling wxWindow::SetSize if the child is a window).
	 */
	function RecalcSizes(){}

	/**
	 * Sets the affirmative button for the sizer.
	 * @param wxButton $button
	 */
	function SetAffirmativeButton(wxButton &$button){}

	/**
	 * Sets the cancel button for the sizer.
	 * @param wxButton $button
	 */
	function SetCancelButton(wxButton &$button){}

	/**
	 * Sets the negative button for the sizer.
	 * @param wxButton $button
	 */
	function SetNegativeButton(wxButton &$button){}
}

class wxStopWatch
{
	/**
	 * Constructor.
	 */
	function __construct(){}

	/**
	 * Pauses the stop watch.
	 */
	function Pause(){}

	/**
	 * Resumes the stop watch which had been paused with Pause().
	 */
	function Resume(){}

	/**
	 * (Re)starts the stop watch with a given initial value.
	 * @param integer $milliseconds
	 */
	function Start($milliseconds){}

	/**
	 * Returns the time in milliseconds since the start (or restart) or the last call of Pause().
	 * @return integer
	 */
	function Time(){}
}

class wxStreamBase
{
	/**
	 * Creates a dummy stream object.
	 */
	function __construct(){}

	/**
	 * This function returns the last error.
	 * @return wxStreamError
	 */
	function GetLastError(){}

	/**
	 * Returns the length of the stream in bytes.
	 * @return integer
	 */
	function GetLength(){}

	/**
	 * This function returns the size of the stream.
	 * @return integer
	 */
	function GetSize(){}

	/**
	 * Returns true if no error occurred on the stream.
	 * @return bool
	 */
	function IsOk(){}

	/**
	 * Returns true if the stream supports seeking to arbitrary offsets.
	 * @return bool
	 */
	function IsSeekable(){}

	/**
	 * Internal function.
	 * @param integer $pos
	 * @param wxSeekMode $mode
	 * @return integer
	 */
	function OnSysSeek($pos, wxSeekMode $mode){}

	/**
	 * Internal function.
	 * @return integer
	 */
	function OnSysTell(){}

	/**
	 * Resets the stream state.
	 * @param wxStreamError $error
	 */
	function Reset(wxStreamError $error=null){}
}

class wxStyledTextCtrl extends wxControl
{
	/**
	 * Ctor.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param string $name
	 */
	function __construct(wxWindow &$parent, $id=wxID_ANY, wxPoint $pos=null, wxSize $size=null, $style, $name=wxSTCNameStr){}

	/**
	 * Add a selection.
	 * @param integer $caret
	 * @param integer $anchor
	 * @return integer
	 */
	function AddSelection($caret, $anchor){}

	/**
	 * Add text to the document at current position.
	 * @param string $text
	 */
	function AddText($text){}

	/**
	 * Add raw text to the document at current position.
	 * @param string $text
	 * @param integer $length
	 */
	function AddTextRaw($text, $length=-1){}

	/**
	 * Add a container action to the undo stack.
	 * @param integer $token
	 * @param integer $flags
	 */
	function AddUndoAction($token, $flags){}

	/**
	 * Enlarge the document to a particular size of text bytes.
	 * @param integer $bytes
	 */
	function Allocate($bytes){}

	/**
	 * Clear the annotations from all lines.
	 */
	function AnnotationClearAll(){}

	/**
	 * Get the number of annotation lines for a line.
	 * @param integer $line
	 * @return integer
	 */
	function AnnotationGetLines($line){}

	/**
	 * Get the style number for the annotations for a line.
	 * @param integer $line
	 * @return integer
	 */
	function AnnotationGetStyle($line){}

	/**
	 * Get the start of the range of style numbers used for annotations.
	 * @return integer
	 */
	function AnnotationGetStyleOffset(){}

	/**
	 * Get the annotation styles for a line.
	 * @param integer $line
	 * @return string
	 */
	function AnnotationGetStyles($line){}

	/**
	 * Get the annotation text for a line.
	 * @param integer $line
	 * @return string
	 */
	function AnnotationGetText($line){}

	/**
	 * Get the visibility for the annotations for a view.
	 * @return integer
	 */
	function AnnotationGetVisible(){}

	/**
	 * Set the style number for the annotations for a line.
	 * @param integer $line
	 * @param integer $style
	 */
	function AnnotationSetStyle($line, $style){}

	/**
	 * Get the start of the range of style numbers used for annotations.
	 * @param integer $style
	 */
	function AnnotationSetStyleOffset($style){}

	/**
	 * Set the annotation styles for a line.
	 * @param integer $line
	 * @param string $styles
	 */
	function AnnotationSetStyles($line, $styles){}

	/**
	 * Set the annotation text for a line.
	 * @param integer $line
	 * @param string $text
	 */
	function AnnotationSetText($line, $text){}

	/**
	 * Set the visibility for the annotations for a view.
	 * @param integer $visible
	 */
	function AnnotationSetVisible($visible){}

	/**
	 * Append a string to the end of the document without changing the selection.
	 * @param string $text
	 */
	function AppendText($text){}

	/**
	 * Append a string to the end of the document without changing the selection.
	 * @param string $text
	 * @param integer $length
	 */
	function AppendTextRaw($text, $length=-1){}

	/**
	 * Is there an auto-completion list visible?
	 * @return bool
	 */
	function AutoCompActive(){}

	/**
	 * Remove the auto-completion list from the screen.
	 */
	function AutoCompCancel(){}

	/**
	 * User has selected an item so remove the list and insert the selection.
	 */
	function AutoCompComplete(){}

	/**
	 * Retrieve whether or not autocompletion is hidden automatically when nothing matches.
	 * @return bool
	 */
	function AutoCompGetAutoHide(){}

	/**
	 * Retrieve whether auto-completion cancelled by backspacing before start.
	 * @return bool
	 */
	function AutoCompGetCancelAtStart(){}

	/**
	 * Retrieve whether a single item auto-completion list automatically choose the item.
	 * @return bool
	 */
	function AutoCompGetChooseSingle(){}

	/**
	 * Get currently selected item position in the auto-completion list.
	 * @return integer
	 */
	function AutoCompGetCurrent(){}

	/**
	 * Retrieve whether or not autocompletion deletes any word characters after the inserted text upon completion.
	 * @return bool
	 */
	function AutoCompGetDropRestOfWord(){}

	/**
	 * Retrieve state of ignore case flag.
	 * @return bool
	 */
	function AutoCompGetIgnoreCase(){}

	/**
	 * Set the maximum height, in rows, of auto-completion and user lists.
	 * @return integer
	 */
	function AutoCompGetMaxHeight(){}

	/**
	 * Get the maximum width, in characters, of auto-completion and user lists.
	 * @return integer
	 */
	function AutoCompGetMaxWidth(){}

	/**
	 * Retrieve the auto-completion list separator character.
	 * @return integer
	 */
	function AutoCompGetSeparator(){}

	/**
	 * Retrieve the auto-completion list type-separator character.
	 * @return integer
	 */
	function AutoCompGetTypeSeparator(){}

	/**
	 * Retrieve the position of the caret when the auto-completion list was displayed.
	 * @return integer
	 */
	function AutoCompPosStart(){}

	/**
	 * Select the item in the auto-completion list that starts with a string.
	 * @param string $text
	 */
	function AutoCompSelect($text){}

	/**
	 * Set whether or not autocompletion is hidden automatically when nothing matches.
	 * @param bool $autoHide
	 */
	function AutoCompSetAutoHide($autoHide){}

	/**
	 * Should the auto-completion list be cancelled if the user backspaces to a position before where the box was created.
	 * @param bool $cancel
	 */
	function AutoCompSetCancelAtStart($cancel){}

	/**
	 * Should a single item auto-completion list automatically choose the item.
	 * @param bool $chooseSingle
	 */
	function AutoCompSetChooseSingle($chooseSingle){}

	/**
	 * Set whether or not autocompletion deletes any word characters after the inserted text upon completion.
	 * @param bool $dropRestOfWord
	 */
	function AutoCompSetDropRestOfWord($dropRestOfWord){}

	/**
	 * Define a set of characters that when typed will cause the autocompletion to choose the selected item.
	 * @param string $characterSet
	 */
	function AutoCompSetFillUps($characterSet){}

	/**
	 * Set whether case is significant when performing auto-completion searches.
	 * @param bool $ignoreCase
	 */
	function AutoCompSetIgnoreCase($ignoreCase){}

	/**
	 * Set the maximum height, in rows, of auto-completion and user lists.
	 * @param integer $rowCount
	 */
	function AutoCompSetMaxHeight($rowCount){}

	/**
	 * Set the maximum width, in characters, of auto-completion and user lists.
	 * @param integer $characterCount
	 */
	function AutoCompSetMaxWidth($characterCount){}

	/**
	 * Change the separator character in the string setting up an auto-completion list.
	 * @param integer $separatorCharacter
	 */
	function AutoCompSetSeparator($separatorCharacter){}

	/**
	 * Change the type-separator character in the string setting up an auto-completion list.
	 * @param integer $separatorCharacter
	 */
	function AutoCompSetTypeSeparator($separatorCharacter){}

	/**
	 * Display a auto-completion list.
	 * @param integer $lenEntered
	 * @param string $itemList
	 */
	function AutoCompShow($lenEntered, $itemList){}

	/**
	 * Define a set of character that when typed cancel the auto-completion list.
	 * @param string $characterSet
	 */
	function AutoCompStops($characterSet){}

	/**
	 * Dedent the selected lines.
	 */
	function BackTab(){}

	/**
	 * Start a sequence of actions that is undone and redone as a unit.
	 */
	function BeginUndoAction(){}

	/**
	 * Highlight the character at a position indicating there is no matching brace.
	 * @param integer $pos
	 */
	function BraceBadLight($pos){}

	/**
	 * Highlight the characters at two positions.
	 * @param integer $pos1
	 * @param integer $pos2
	 */
	function BraceHighlight($pos1, $pos2){}

	/**
	 * Find the position of a matching brace or wxSTC_INVALID_POSITION if no match.
	 * @param integer $pos
	 * @return integer
	 */
	function BraceMatch($pos){}

	/**
	 * Is there an active call tip?
	 * @return bool
	 */
	function CallTipActive(){}

	/**
	 * Remove the call tip from the screen.
	 */
	function CallTipCancel(){}

	/**
	 * Retrieve the position where the caret was before displaying the call tip.
	 * @return integer
	 */
	function CallTipPosAtStart(){}

	/**
	 * Set the background colour for the call tip.
	 * @param wxColour $back
	 */
	function CallTipSetBackground(wxColour $back){}

	/**
	 * Set the foreground colour for the call tip.
	 * @param wxColour $fore
	 */
	function CallTipSetForeground(wxColour $fore){}

	/**
	 * Set the foreground colour for the highlighted part of the call tip.
	 * @param wxColour $fore
	 */
	function CallTipSetForegroundHighlight(wxColour $fore){}

	/**
	 * Highlight a segment of the definition.
	 * @param integer $start
	 * @param integer $end
	 */
	function CallTipSetHighlight($start, $end){}

	/**
	 * Show a call tip containing a definition near position pos.
	 * @param integer $pos
	 * @param string $definition
	 */
	function CallTipShow($pos, $definition){}

	/**
	 * Enable use of STYLE_CALLTIP and set call tip tab size in pixels.
	 * @param integer $tabSize
	 */
	function CallTipUseStyle($tabSize){}

	/**
	 * Will a paste succeed?
	 * @return bool
	 */
	function CanPaste(){}

	/**
	 * Are there any redoable actions in the undo history?
	 * @return bool
	 */
	function CanRedo(){}

	/**
	 * Are there any undoable actions in the undo history?
	 * @return bool
	 */
	function CanUndo(){}

	/**
	 * Cancel any modes such as call tip or auto-completion list display.
	 */
	function Cancel(){}

	/**
	 * Move caret left one character.
	 */
	function CharLeft(){}

	/**
	 * Move caret left one character extending selection to new caret position.
	 */
	function CharLeftExtend(){}

	/**
	 * Move caret left one character, extending rectangular selection to new caret position.
	 */
	function CharLeftRectExtend(){}

	/**
	 * Find the position of a character from a point within the window.
	 * @param integer $x
	 * @param integer $y
	 * @return integer
	 */
	function CharPositionFromPoint($x, $y){}

	/**
	 * Find the position of a character from a point within the window.
	 * @param integer $x
	 * @param integer $y
	 * @return integer
	 */
	function CharPositionFromPointClose($x, $y){}

	/**
	 * Move caret right one character.
	 */
	function CharRight(){}

	/**
	 * Move caret right one character extending selection to new caret position.
	 */
	function CharRightExtend(){}

	/**
	 * Move caret right one character, extending rectangular selection to new caret position.
	 */
	function CharRightRectExtend(){}

	/**
	 * Set the last x chosen value to be the caret x position.
	 */
	function ChooseCaretX(){}

	/**
	 * Clear the selection.
	 */
	function Clear(){}

	/**
	 * Delete all text in the document.
	 */
	function ClearAll(){}

	/**
	 * Set all style bytes to 0, remove all folding information.
	 */
	function ClearDocumentStyle(){}

	/**
	 * Clear all the registered images.
	 */
	function ClearRegisteredImages(){}

	/**
	 * Clear selections to a single empty stream selection.
	 */
	function ClearSelections(){}

	/**
	 * When key+modifier combination km is pressed perform msg.
	 * @param integer $key
	 * @param integer $modifiers
	 * @param integer $cmd
	 */
	function CmdKeyAssign($key, $modifiers, $cmd){}

	/**
	 * When key+modifier combination km is pressed do nothing.
	 * @param integer $key
	 * @param integer $modifiers
	 */
	function CmdKeyClear($key, $modifiers){}

	/**
	 * Drop all key mappings.
	 */
	function CmdKeyClearAll(){}

	/**
	 * Perform one of the operations defined by the wxSTC_CMD_* constants.
	 * @param integer $cmd
	 */
	function CmdKeyExecute($cmd){}

	/**
	 * Colourise a segment of the document using the current lexing language.
	 * @param integer $start
	 * @param integer $end
	 */
	function Colourise($start, $end){}

	/**
	 * Convert all line endings in the document to one mode.
	 * @param integer $eolMode
	 */
	function ConvertEOLs($eolMode){}

	/**
	 * Copy the selection to the clipboard.
	 */
	function Copy(){}

	/**
	 * Copy the selection, if selection empty copy the line with the caret.
	 */
	function CopyAllowLine(){}

	/**
	 * Copy a range of text to the clipboard.
	 * @param integer $start
	 * @param integer $end
	 */
	function CopyRange($start, $end){}

	/**
	 * Copy argument text to the clipboard.
	 * @param integer $length
	 * @param string $text
	 */
	function CopyText($length, $text){}

	/**
	 * Create
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param string $name
	 * @return bool
	 */
	function Create(wxWindow &$parent, $id=wxID_ANY, wxPoint $pos=null, wxSize $size=null, $style, $name=wxSTCNameStr){}

	/**
	 * Create a new document object.
	 * @return mixed
	 */
	function CreateDocument(){}

	/**
	 * Cut the selection to the clipboard.
	 */
	function Cut(){}

	/**
	 * Delete back from the current position to the start of the line.
	 */
	function DelLineLeft(){}

	/**
	 * Delete forwards from the current position to the end of the line.
	 */
	function DelLineRight(){}

	/**
	 * Delete the word to the left of the caret.
	 */
	function DelWordLeft(){}

	/**
	 * Delete the word to the right of the caret.
	 */
	function DelWordRight(){}

	/**
	 * Delete the selection or if no selection, the character before the caret.
	 */
	function DeleteBack(){}

	/**
	 * Delete the selection or if no selection, the character before the caret.
	 */
	function DeleteBackNotLine(){}

	/**
	 * Allow for simulating a DnD DragOver.
	 * @param integer $x
	 * @param integer $y
	 * @param wxDragResult $def
	 * @return wxDragResult
	 */
	function DoDragOver($x, $y, wxDragResult $def){}

	/**
	 * Allow for simulating a DnD DropText.
	 * @param integer $x
	 * @param integer $y
	 * @param string $data
	 * @return bool
	 */
	function DoDropText($x, $y, $data){}

	/**
	 * Find the document line of a display line taking hidden lines into account.
	 * @param integer $lineDisplay
	 * @return integer
	 */
	function DocLineFromVisible($lineDisplay){}

	/**
	 * Move caret to last position in document.
	 */
	function DocumentEnd(){}

	/**
	 * Move caret to last position in document extending selection to new caret position.
	 */
	function DocumentEndExtend(){}

	/**
	 * Move caret to first position in document.
	 */
	function DocumentStart(){}

	/**
	 * Move caret to first position in document extending selection to new caret position.
	 */
	function DocumentStartExtend(){}

	/**
	 * Switch from insert to overtype mode or the reverse.
	 */
	function EditToggleOvertype(){}

	/**
	 * Delete the undo history.
	 */
	function EmptyUndoBuffer(){}

	/**
	 * End a sequence of actions that is undone and redone as a unit.
	 */
	function EndUndoAction(){}

	/**
	 * Ensure the caret is visible.
	 */
	function EnsureCaretVisible(){}

	/**
	 * Ensure a particular line is visible by expanding any header line hiding it.
	 * @param integer $line
	 */
	function EnsureVisible($line){}

	/**
	 * Ensure a particular line is visible by expanding any header line hiding it.
	 * @param integer $line
	 */
	function EnsureVisibleEnforcePolicy($line){}

	/**
	 * Find the position of a column on a line taking into account tabs and multi-byte characters.
	 * @param integer $line
	 * @param integer $column
	 * @return integer
	 */
	function FindColumn($line, $column){}

	/**
	 * Find some text in the document.
	 * @param integer $minPos
	 * @param integer $maxPos
	 * @param string $text
	 * @param integer $flags
	 * @return integer
	 */
	function FindText($minPos, $maxPos, $text, $flags){}

	/**
	 * Insert a Form Feed character.
	 */
	function FormFeed(){}

	/**
	 * On Windows, will draw the document into a display context such as a printer.
	 * @param bool $doDraw
	 * @param integer $startPos
	 * @param integer $endPos
	 * @param wxDC $draw
	 * @param wxDC $target
	 * @param wxRect $renderRect
	 * @param wxRect $pageRect
	 * @return integer
	 */
	function FormatRange($doDraw, $startPos, $endPos, wxDC &$draw, wxDC &$target, wxRect $renderRect, wxRect $pageRect){}

	/**
	 * Get the foreground colour of additional carets.
	 * @return wxColour
	 */
	function GetAdditionalCaretForeground(){}

	/**
	 * Whether additional carets will blink.
	 * @return bool
	 */
	function GetAdditionalCaretsBlink(){}

	/**
	 * Whether additional carets are visible.
	 * @return bool
	 */
	function GetAdditionalCaretsVisible(){}

	/**
	 * Get the alpha of the selection.
	 * @return integer
	 */
	function GetAdditionalSelAlpha(){}

	/**
	 * Whether typing can be performed into multiple selections.
	 * @return bool
	 */
	function GetAdditionalSelectionTyping(){}

	/**
	 * Returns the position of the opposite end of the selection to the caret.
	 * @return integer
	 */
	function GetAnchor(){}

	/**
	 * Does a backspace pressed when caret is within indentation unindent?
	 * @return bool
	 */
	function GetBackSpaceUnIndents(){}

	/**
	 * Is drawing done first into a buffer or direct to the screen?
	 * @return bool
	 */
	function GetBufferedDraw(){}

	/**
	 * Get the foreground colour of the caret.
	 * @return wxColour
	 */
	function GetCaretForeground(){}

	/**
	 * Get the background alpha of the caret line.
	 * @return integer
	 */
	function GetCaretLineBackAlpha(){}

	/**
	 * Get the colour of the background of the line containing the caret.
	 * @return wxColour
	 */
	function GetCaretLineBackground(){}

	/**
	 * Is the background of the line containing the caret in a different colour?
	 * @return bool
	 */
	function GetCaretLineVisible(){}

	/**
	 * Get the time in milliseconds that the caret is on and off.
	 * @return integer
	 */
	function GetCaretPeriod(){}

	/**
	 * Can the caret preferred x position only be changed by explicit movement commands?
	 * @return bool
	 */
	function GetCaretSticky(){}

	/**
	 * Returns the width of the insert mode caret.
	 * @return integer
	 */
	function GetCaretWidth(){}

	/**
	 * Returns the character byte at the position.
	 * @param integer $pos
	 * @return integer
	 */
	function GetCharAt($pos){}

	/**
	 * Compact the document buffer and return a read-only pointer to the characters in the document.
	 * @return string
	 */
	function GetCharacterPointer(){}

	/**
	 * Get the code page used to interpret the bytes of the document as characters.
	 * @return integer
	 */
	function GetCodePage(){}

	/**
	 * Retrieve the column number of a position, taking tab width into account.
	 * @param integer $pos
	 * @return integer
	 */
	function GetColumn($pos){}

	/**
	 * Get the way control characters are displayed.
	 * @return integer
	 */
	function GetControlCharSymbol(){}

	/**
	 * END of generated section Others...
	 * @return integer
	 */
	function GetCurrentLine(){}

	/**
	 * Returns the position of the caret.
	 * @return integer
	 */
	function GetCurrentPos(){}

	/**
	 * Retrieve the current end of line mode - one of CRLF, CR, or LF.
	 * @return integer
	 */
	function GetEOLMode(){}

	/**
	 * Retrieve the colour used in edge indication.
	 * @return wxColour
	 */
	function GetEdgeColour(){}

	/**
	 * Retrieve the column number which text should be kept within.
	 * @return integer
	 */
	function GetEdgeColumn(){}

	/**
	 * Retrieve the edge highlight mode.
	 * @return integer
	 */
	function GetEdgeMode(){}

	/**
	 * Retrieve whether the maximum scroll position has the last line at the bottom of the view.
	 * @return bool
	 */
	function GetEndAtLastLine(){}

	/**
	 * Retrieve the position of the last correctly styled character.
	 * @return integer
	 */
	function GetEndStyled(){}

	/**
	 * Get extra ascent for each line.
	 * @return integer
	 */
	function GetExtraAscent(){}

	/**
	 * Get extra descent for each line.
	 * @return integer
	 */
	function GetExtraDescent(){}

	/**
	 * Retrieve the display line at the top of the display.
	 * @return integer
	 */
	function GetFirstVisibleLine(){}

	/**
	 * Is a header line expanded?
	 * @param integer $line
	 * @return bool
	 */
	function GetFoldExpanded($line){}

	/**
	 * Retrieve the fold level of a line.
	 * @param integer $line
	 * @return integer
	 */
	function GetFoldLevel($line){}

	/**
	 * Find the parent line of a child line.
	 * @param integer $line
	 * @return integer
	 */
	function GetFoldParent($line){}

	/**
	 * Get the highlighted indentation guide column.
	 * @return integer
	 */
	function GetHighlightGuide(){}

	/**
	 * Retrieve indentation size.
	 * @return integer
	 */
	function GetIndent(){}

	/**
	 * Are the indentation guides visible?
	 * @return integer
	 */
	function GetIndentationGuides(){}

	/**
	 * Are keys always interpreted as Unicode?
	 * @return bool
	 */
	function GetKeysUnicode(){}

	/**
	 * Find the last child line of a header line.
	 * @param integer $line
	 * @param integer $level
	 * @return integer
	 */
	function GetLastChild($line, $level){}

	/**
	 * Can be used to prevent the EVT_CHAR handler from adding the char.
	 * @return bool
	 */
	function GetLastKeydownProcessed(){}

	/**
	 * Retrieve the degree of caching of layout information.
	 * @return integer
	 */
	function GetLayoutCache(){}

	/**
	 * Returns the number of bytes in the document.
	 * @return integer
	 */
	function GetLength(){}

	/**
	 * Retrieve the lexing language of the document.
	 * @return integer
	 */
	function GetLexer(){}

	/**
	 * Get Scintilla library version information.
	 * @return wxVersionInfo
	 */
	function GetLibraryVersionInfo(){}

	/**
	 * Retrieve the contents of a line.
	 * @param integer $line
	 * @return string
	 */
	function GetLine($line){}

	/**
	 * Returns the number of lines in the document.
	 * @return integer
	 */
	function GetLineCount(){}

	/**
	 * Get the position after the last visible characters on a line.
	 * @param integer $line
	 * @return integer
	 */
	function GetLineEndPosition($line){}

	/**
	 * Retrieve the position before the first non indentation character on a line.
	 * @param integer $line
	 * @return integer
	 */
	function GetLineIndentPosition($line){}

	/**
	 * Retrieve the number of columns that a line is indented.
	 * @param integer $line
	 * @return integer
	 */
	function GetLineIndentation($line){}

	/**
	 * Retrieve the position of the end of the selection at the given line (wxSTC_INVALID_POSITION if no selection on this line).
	 * @param integer $line
	 * @return integer
	 */
	function GetLineSelEndPosition($line){}

	/**
	 * Retrieve the position of the start of the selection at the given line (wxSTC_INVALID_POSITION if no selection on this line).
	 * @param integer $line
	 * @return integer
	 */
	function GetLineSelStartPosition($line){}

	/**
	 * Retrieve the extra styling information for a line.
	 * @param integer $line
	 * @return integer
	 */
	function GetLineState($line){}

	/**
	 * Is a line visible?
	 * @param integer $line
	 * @return bool
	 */
	function GetLineVisible($line){}

	/**
	 * Which selection is the main selection.
	 * @return integer
	 */
	function GetMainSelection(){}

	/**
	 * Returns the size in pixels of the left margin.
	 * @return integer
	 */
	function GetMarginLeft(){}

	/**
	 * Retrieve the marker mask of a margin.
	 * @param integer $margin
	 * @return integer
	 */
	function GetMarginMask($margin){}

	/**
	 * Returns the size in pixels of the right margin.
	 * @return integer
	 */
	function GetMarginRight(){}

	/**
	 * Retrieve the mouse click sensitivity of a margin.
	 * @param integer $margin
	 * @return bool
	 */
	function GetMarginSensitive($margin){}

	/**
	 * Retrieve the type of a margin.
	 * @param integer $margin
	 * @return integer
	 */
	function GetMarginType($margin){}

	/**
	 * Retrieve the width of a margin in pixels.
	 * @param integer $margin
	 * @return integer
	 */
	function GetMarginWidth($margin){}

	/**
	 * Which symbol was defined for markerNumber with MarkerDefine.
	 * @param integer $markerNumber
	 * @return integer
	 */
	function GetMarkerSymbolDefined($markerNumber){}

	/**
	 * Retrieve the last line number that has line state.
	 * @return integer
	 */
	function GetMaxLineState(){}

	/**
	 * Get which document modification events are sent to the container.
	 * @return integer
	 */
	function GetModEventMask(){}

	/**
	 * Is the document different from when it was last saved?
	 * @return bool
	 */
	function GetModify(){}

	/**
	 * Get whether mouse gets captured.
	 * @return bool
	 */
	function GetMouseDownCaptures(){}

	/**
	 * Retrieve the time the mouse must sit still to generate a mouse dwell event.
	 * @return integer
	 */
	function GetMouseDwellTime(){}

	/**
	 * Whether multiple selections can be made.
	 * @return bool
	 */
	function GetMultipleSelection(){}

	/**
	 * Returns true if overtype mode is active otherwise false is returned.
	 * @return bool
	 */
	function GetOvertype(){}

	/**
	 * Get convert-on-paste setting.
	 * @return bool
	 */
	function GetPasteConvertEndings(){}

	/**
	 * Returns the print colour mode.
	 * @return integer
	 */
	function GetPrintColourMode(){}

	/**
	 * Returns the print magnification.
	 * @return integer
	 */
	function GetPrintMagnification(){}

	/**
	 * Is printing line wrapped?
	 * @return integer
	 */
	function GetPrintWrapMode(){}

	/**
	 * Retrieve a 'property' value previously set with SetProperty.
	 * @param string $key
	 * @return string
	 */
	function GetProperty($key){}

	/**
	 * Retrieve a 'property' value previously set with SetProperty, with '$()' variable replacement on returned buffer.
	 * @param string $key
	 * @return string
	 */
	function GetPropertyExpanded($key){}

	/**
	 * Retrieve a 'property' value previously set with SetProperty, interpreted as an int AFTER any '$()' variable replacement.
	 * @param string $key
	 * @return integer
	 */
	function GetPropertyInt($key){}

	/**
	 * In read-only mode?
	 * @return bool
	 */
	function GetReadOnly(){}

	/**
	 * GetRectangularSelectionAnchor
	 * @return integer
	 */
	function GetRectangularSelectionAnchor(){}

	/**
	 * GetRectangularSelectionAnchorVirtualSpace
	 * @return integer
	 */
	function GetRectangularSelectionAnchorVirtualSpace(){}

	/**
	 * GetRectangularSelectionCaret
	 * @return integer
	 */
	function GetRectangularSelectionCaret(){}

	/**
	 * GetRectangularSelectionCaretVirtualSpace
	 * @return integer
	 */
	function GetRectangularSelectionCaretVirtualSpace(){}

	/**
	 * Get the modifier key used for rectangular selection.
	 * @return integer
	 */
	function GetRectangularSelectionModifier(){}

	/**
	 * Get cursor type.
	 * @return integer
	 */
	function GetSTCCursor(){}

	/**
	 * Get internal focus flag.
	 * @return bool
	 */
	function GetSTCFocus(){}

	/**
	 * Retrieve the document width assumed for scrolling.
	 * @return integer
	 */
	function GetScrollWidth(){}

	/**
	 * Get the search flags used by SearchInTarget.
	 * @return integer
	 */
	function GetSearchFlags(){}

	/**
	 * Get the alpha of the selection.
	 * @return integer
	 */
	function GetSelAlpha(){}

	/**
	 * Retrieve the selected text.
	 * @return string
	 */
	function GetSelectedText(){}

	/**
	 * Returns the position at the end of the selection.
	 * @return integer
	 */
	function GetSelectionEnd(){}

	/**
	 * Get the mode of the current selection.
	 * @return integer
	 */
	function GetSelectionMode(){}

	/**
	 * GetSelectionNAnchor
	 * @param integer $selection
	 * @return integer
	 */
	function GetSelectionNAnchor($selection){}

	/**
	 * GetSelectionNAnchorVirtualSpace
	 * @param integer $selection
	 * @return integer
	 */
	function GetSelectionNAnchorVirtualSpace($selection){}

	/**
	 * GetSelectionNCaret
	 * @param integer $selection
	 * @return integer
	 */
	function GetSelectionNCaret($selection){}

	/**
	 * GetSelectionNCaretVirtualSpace
	 * @param integer $selection
	 * @return integer
	 */
	function GetSelectionNCaretVirtualSpace($selection){}

	/**
	 * Returns the position at the end of the selection.
	 * @param integer $selection
	 * @return integer
	 */
	function GetSelectionNEnd($selection){}

	/**
	 * Returns the position at the start of the selection.
	 * @param integer $selection
	 * @return integer
	 */
	function GetSelectionNStart($selection){}

	/**
	 * Returns the position at the start of the selection.
	 * @return integer
	 */
	function GetSelectionStart(){}

	/**
	 * How many selections are there?
	 * @return integer
	 */
	function GetSelections(){}

	/**
	 * Get error status.
	 * @return integer
	 */
	function GetStatus(){}

	/**
	 * Returns the style byte at the position.
	 * @param integer $pos
	 * @return integer
	 */
	function GetStyleAt($pos){}

	/**
	 * Retrieve number of bits in style bytes used to hold the lexical state.
	 * @return integer
	 */
	function GetStyleBits(){}

	/**
	 * Retrieve the number of bits the current lexer needs for styling.
	 * @return integer
	 */
	function GetStyleBitsNeeded(){}

	/**
	 * Does a tab pressed when caret is within indentation indent?
	 * @return bool
	 */
	function GetTabIndents(){}

	/**
	 * Retrieve the visible size of a tab.
	 * @return integer
	 */
	function GetTabWidth(){}

	/**
	 * Get the position that ends the target.
	 * @return integer
	 */
	function GetTargetEnd(){}

	/**
	 * Get the position that starts the target.
	 * @return integer
	 */
	function GetTargetStart(){}

	/**
	 * Retrieve all the text in the document.
	 * @return string
	 */
	function GetText(){}

	/**
	 * Retrieve the number of characters in the document.
	 * @return integer
	 */
	function GetTextLength(){}

	/**
	 * Retrieve a range of text.
	 * @param integer $startPos
	 * @param integer $endPos
	 * @return string
	 */
	function GetTextRange($startPos, $endPos){}

	/**
	 * Is drawing done in two phases with backgrounds drawn before foregrounds?
	 * @return bool
	 */
	function GetTwoPhaseDraw(){}

	/**
	 * Is undo history being collected?
	 * @return bool
	 */
	function GetUndoCollection(){}

	/**
	 * Returns the current UseAntiAliasing setting.
	 * @return bool
	 */
	function GetUseAntiAliasing(){}

	/**
	 * Is the horizontal scroll bar visible?
	 * @return bool
	 */
	function GetUseHorizontalScrollBar(){}

	/**
	 * Retrieve whether tabs will be used in indentation.
	 * @return bool
	 */
	function GetUseTabs(){}

	/**
	 * Is the vertical scroll bar visible?
	 * @return bool
	 */
	function GetUseVerticalScrollBar(){}

	/**
	 * Are the end of line characters visible?
	 * @return bool
	 */
	function GetViewEOL(){}

	/**
	 * Are white space characters currently visible? Returns one of SCWS_* constants.
	 * @return integer
	 */
	function GetViewWhiteSpace(){}

	/**
	 * GetVirtualSpaceOptions
	 * @return integer
	 */
	function GetVirtualSpaceOptions(){}

	/**
	 * Get the size of the dots used to mark space characters.
	 * @return integer
	 */
	function GetWhitespaceSize(){}

	/**
	 * Retrieve how wrapped sublines are placed.
	 * @return integer
	 */
	function GetWrapIndentMode(){}

	/**
	 * Retrieve whether text is word wrapped.
	 * @return integer
	 */
	function GetWrapMode(){}

	/**
	 * Retrieve the start indent for wrapped lines.
	 * @return integer
	 */
	function GetWrapStartIndent(){}

	/**
	 * Retrieve the display mode of visual flags for wrapped lines.
	 * @return integer
	 */
	function GetWrapVisualFlags(){}

	/**
	 * Retrieve the location of visual flags for wrapped lines.
	 * @return integer
	 */
	function GetWrapVisualFlagsLocation(){}

	/**
	 * GetXOffset
	 * @return integer
	 */
	function GetXOffset(){}

	/**
	 * Retrieve the zoom level.
	 * @return integer
	 */
	function GetZoom(){}

	/**
	 * Set caret to start of a line and ensure it is visible.
	 * @param integer $line
	 */
	function GotoLine($line){}

	/**
	 * Set caret to a position and ensure it is visible.
	 * @param integer $pos
	 */
	function GotoPos($pos){}

	/**
	 * Make a range of lines invisible.
	 * @param integer $lineStart
	 * @param integer $lineEnd
	 */
	function HideLines($lineStart, $lineEnd){}

	/**
	 * Draw the selection in normal style or with selection highlighted.
	 * @param bool $normal
	 */
	function HideSelection($normal){}

	/**
	 * Move caret to first position on line.
	 */
	function Home(){}

	/**
	 * Move caret to first position on display line.
	 */
	function HomeDisplay(){}

	/**
	 * Move caret to first position on display line extending selection to new caret position.
	 */
	function HomeDisplayExtend(){}

	/**
	 * Move caret to first position on line extending selection to new caret position.
	 */
	function HomeExtend(){}

	/**
	 * Move caret to first position on line, extending rectangular selection to new caret position.
	 */
	function HomeRectExtend(){}

	/**
	 * These are like their namesakes Home(Extend)?, LineEnd(Extend)?, VCHome(Extend)? except they behave differently when word-wrap is enabled: They go first to the start / end of the display line, like (Home|LineEnd)Display The difference is that, the cursor is already at the point, it goes on to the start or end of the document line, as appropriate for (Home|LineEnd|VCHome)(Extend)?.
	 */
	function HomeWrap(){}

	/**
	 * HomeWrapExtend
	 */
	function HomeWrapExtend(){}

	/**
	 * Get the alpha fill colour of the given indicator.
	 * @param integer $indicator
	 * @return integer
	 */
	function IndicatorGetAlpha($indicator){}

	/**
	 * Retrieve the foreground colour of an indicator.
	 * @param integer $indic
	 * @return wxColour
	 */
	function IndicatorGetForeground($indic){}

	/**
	 * Retrieve the style of an indicator.
	 * @param integer $indic
	 * @return integer
	 */
	function IndicatorGetStyle($indic){}

	/**
	 * Set the alpha fill colour of the given indicator.
	 * @param integer $indicator
	 * @param integer $alpha
	 */
	function IndicatorSetAlpha($indicator, $alpha){}

	/**
	 * Set the foreground colour of an indicator.
	 * @param integer $indic
	 * @param wxColour $fore
	 */
	function IndicatorSetForeground($indic, wxColour $fore){}

	/**
	 * Set an indicator to plain, squiggle or TT.
	 * @param integer $indic
	 * @param integer $style
	 */
	function IndicatorSetStyle($indic, $style){}

	/**
	 * Insert string at a position.
	 * @param integer $pos
	 * @param string $text
	 */
	function InsertText($pos, $text){}

	/**
	 * Insert string at a position.
	 * @param integer $pos
	 * @param string $text
	 */
	function InsertTextRaw($pos, $text){}

	/**
	 * Copy the line containing the caret.
	 */
	function LineCopy(){}

	/**
	 * Cut the line containing the caret.
	 */
	function LineCut(){}

	/**
	 * Delete the line containing the caret.
	 */
	function LineDelete(){}

	/**
	 * Move caret down one line.
	 */
	function LineDown(){}

	/**
	 * Move caret down one line extending selection to new caret position.
	 */
	function LineDownExtend(){}

	/**
	 * Move caret down one line, extending rectangular selection to new caret position.
	 */
	function LineDownRectExtend(){}

	/**
	 * Duplicate the current line.
	 */
	function LineDuplicate(){}

	/**
	 * Move caret to last position on line.
	 */
	function LineEnd(){}

	/**
	 * Move caret to last position on display line.
	 */
	function LineEndDisplay(){}

	/**
	 * Move caret to last position on display line extending selection to new caret position.
	 */
	function LineEndDisplayExtend(){}

	/**
	 * Move caret to last position on line extending selection to new caret position.
	 */
	function LineEndExtend(){}

	/**
	 * Move caret to last position on line, extending rectangular selection to new caret position.
	 */
	function LineEndRectExtend(){}

	/**
	 * LineEndWrap
	 */
	function LineEndWrap(){}

	/**
	 * LineEndWrapExtend
	 */
	function LineEndWrapExtend(){}

	/**
	 * Retrieve the line containing a position.
	 * @param integer $pos
	 * @return integer
	 */
	function LineFromPosition($pos){}

	/**
	 * How many characters are on a line, including end of line characters?
	 * @param integer $line
	 * @return integer
	 */
	function LineLength($line){}

	/**
	 * Scroll horizontally and vertically.
	 * @param integer $columns
	 * @param integer $lines
	 */
	function LineScroll($columns, $lines){}

	/**
	 * Scroll the document down, keeping the caret visible.
	 */
	function LineScrollDown(){}

	/**
	 * Scroll the document up, keeping the caret visible.
	 */
	function LineScrollUp(){}

	/**
	 * Switch the current line with the previous.
	 */
	function LineTranspose(){}

	/**
	 * Move caret up one line.
	 */
	function LineUp(){}

	/**
	 * Move caret up one line extending selection to new caret position.
	 */
	function LineUpExtend(){}

	/**
	 * Move caret up one line, extending rectangular selection to new caret position.
	 */
	function LineUpRectExtend(){}

	/**
	 * Join the lines in the target.
	 */
	function LinesJoin(){}

	/**
	 * Retrieves the number of lines completely visible.
	 * @return integer
	 */
	function LinesOnScreen(){}

	/**
	 * Split the lines in the target into lines that are less wide than pixelWidth where possible.
	 * @param integer $pixelWidth
	 */
	function LinesSplit($pixelWidth){}

	/**
	 * Load the contents of filename into the editor.
	 * @param string $file
	 * @param integer $fileType
	 * @return bool
	 */
	function LoadFile($file, $fileType=wxTEXT_TYPE_ANY){}

	/**
	 * Transform the selection to lower case.
	 */
	function LowerCase(){}

	/**
	 * Get the style number for the text margin for a line.
	 * @param integer $line
	 * @return integer
	 */
	function MarginGetStyle($line){}

	/**
	 * Get the start of the range of style numbers used for margin text.
	 * @return integer
	 */
	function MarginGetStyleOffset(){}

	/**
	 * Get the styles in the text margin for a line.
	 * @param integer $line
	 * @return string
	 */
	function MarginGetStyles($line){}

	/**
	 * Get the text in the text margin for a line.
	 * @param integer $line
	 * @return string
	 */
	function MarginGetText($line){}

	/**
	 * Set the style number for the text margin for a line.
	 * @param integer $line
	 * @param integer $style
	 */
	function MarginSetStyle($line, $style){}

	/**
	 * Get the start of the range of style numbers used for margin text.
	 * @param integer $style
	 */
	function MarginSetStyleOffset($style){}

	/**
	 * Set the style in the text margin for a line.
	 * @param integer $line
	 * @param string $styles
	 */
	function MarginSetStyles($line, $styles){}

	/**
	 * Set the text in the text margin for a line.
	 * @param integer $line
	 * @param string $text
	 */
	function MarginSetText($line, $text){}

	/**
	 * Clear the margin text on all lines.
	 */
	function MarginTextClearAll(){}

	/**
	 * Add a marker to a line, returning an ID which can be used to find or delete the marker.
	 * @param integer $line
	 * @param integer $markerNumber
	 * @return integer
	 */
	function MarkerAdd($line, $markerNumber){}

	/**
	 * Add a set of markers to a line.
	 * @param integer $line
	 * @param integer $set
	 */
	function MarkerAddSet($line, $set){}

	/**
	 * Set the symbol used for a particular marker number, and optionally the fore and background colours.
	 * @param integer $markerNumber
	 * @param integer $markerSymbol
	 * @param wxColour $foreground
	 * @param wxColour $background
	 */
	function MarkerDefine($markerNumber, $markerSymbol, wxColour $foreground=null, wxColour $background=null){}

	/**
	 * Define a marker from a bitmap.
	 * @param integer $markerNumber
	 * @param wxBitmap $bmp
	 */
	function MarkerDefineBitmap($markerNumber, wxBitmap $bmp){}

	/**
	 * Delete a marker from a line.
	 * @param integer $line
	 * @param integer $markerNumber
	 */
	function MarkerDelete($line, $markerNumber){}

	/**
	 * Delete all markers with a particular number from all lines.
	 * @param integer $markerNumber
	 */
	function MarkerDeleteAll($markerNumber){}

	/**
	 * Delete a marker.
	 * @param integer $handle
	 */
	function MarkerDeleteHandle($handle){}

	/**
	 * Get a bit mask of all the markers set on a line.
	 * @param integer $line
	 * @return integer
	 */
	function MarkerGet($line){}

	/**
	 * Retrieve the line number at which a particular marker is located.
	 * @param integer $handle
	 * @return integer
	 */
	function MarkerLineFromHandle($handle){}

	/**
	 * Find the next line after lineStart that includes a marker in mask.
	 * @param integer $lineStart
	 * @param integer $markerMask
	 * @return integer
	 */
	function MarkerNext($lineStart, $markerMask){}

	/**
	 * Find the previous line before lineStart that includes a marker in mask.
	 * @param integer $lineStart
	 * @param integer $markerMask
	 * @return integer
	 */
	function MarkerPrevious($lineStart, $markerMask){}

	/**
	 * Set the alpha used for a marker that is drawn in the text area, not the margin.
	 * @param integer $markerNumber
	 * @param integer $alpha
	 */
	function MarkerSetAlpha($markerNumber, $alpha){}

	/**
	 * Set the background colour used for a particular marker number.
	 * @param integer $markerNumber
	 * @param wxColour $back
	 */
	function MarkerSetBackground($markerNumber, wxColour $back){}

	/**
	 * Set the foreground colour used for a particular marker number.
	 * @param integer $markerNumber
	 * @param wxColour $fore
	 */
	function MarkerSetForeground($markerNumber, wxColour $fore){}

	/**
	 * Move the caret inside current view if it's not there already.
	 */
	function MoveCaretInsideView(){}

	/**
	 * Insert a new line, may use a CRLF, CR or LF depending on EOL mode.
	 */
	function NewLine(){}

	/**
	 * Move caret one page down.
	 */
	function PageDown(){}

	/**
	 * Move caret one page down extending selection to new caret position.
	 */
	function PageDownExtend(){}

	/**
	 * Move caret one page down, extending rectangular selection to new caret position.
	 */
	function PageDownRectExtend(){}

	/**
	 * Move caret one page up.
	 */
	function PageUp(){}

	/**
	 * Move caret one page up extending selection to new caret position.
	 */
	function PageUpExtend(){}

	/**
	 * Move caret one page up, extending rectangular selection to new caret position.
	 */
	function PageUpRectExtend(){}

	/**
	 * Move caret between paragraphs (delimited by empty lines).
	 */
	function ParaDown(){}

	/**
	 * ParaDownExtend
	 */
	function ParaDownExtend(){}

	/**
	 * ParaUp
	 */
	function ParaUp(){}

	/**
	 * ParaUpExtend
	 */
	function ParaUpExtend(){}

	/**
	 * Paste the contents of the clipboard into the document replacing the selection.
	 */
	function Paste(){}

	/**
	 * Retrieve the point in the window where a position is displayed.
	 * @param integer $pos
	 * @return wxPoint
	 */
	function PointFromPosition($pos){}

	/**
	 * Given a valid document position, return the next position taking code page into account.
	 * @param integer $pos
	 * @return integer
	 */
	function PositionAfter($pos){}

	/**
	 * Given a valid document position, return the previous position taking code page into account.
	 * @param integer $pos
	 * @return integer
	 */
	function PositionBefore($pos){}

	/**
	 * Retrieve the position at the start of a line.
	 * @param integer $line
	 * @return integer
	 */
	function PositionFromLine($line){}

	/**
	 * Find the position from a point within the window.
	 * @param wxPoint $pt
	 * @return integer
	 */
	function PositionFromPoint(wxPoint $pt){}

	/**
	 * Find the position from a point within the window but return wxSTC_INVALID_POSITION if not close to text.
	 * @param integer $x
	 * @param integer $y
	 * @return integer
	 */
	function PositionFromPointClose($x, $y){}

	/**
	 * Redoes the next action on the undo history.
	 */
	function Redo(){}

	/**
	 * Register an image for use in autocompletion lists.
	 * @param integer $type
	 * @param wxBitmap $bmp
	 */
	function RegisterImage($type, wxBitmap $bmp){}

	/**
	 * Replace the selected text with the argument text.
	 * @param string $text
	 */
	function ReplaceSelection($text){}

	/**
	 * Replace the target text with the argument text.
	 * @param string $text
	 * @return integer
	 */
	function ReplaceTarget($text){}

	/**
	 * Replace the target text with the argument text after d processing.
	 * @param string $text
	 * @return integer
	 */
	function ReplaceTargetRE($text){}

	/**
	 * Set the main selection to the next selection.
	 */
	function RotateSelection(){}

	/**
	 * Write the contents of the editor to filename.
	 * @param string $file
	 * @param integer $fileType
	 * @return bool
	 */
	function SaveFile($file=wxEmptyString, $fileType=wxTEXT_TYPE_ANY){}

	/**
	 * Scroll enough to make the given column visible.
	 * @param integer $column
	 */
	function ScrollToColumn($column){}

	/**
	 * Scroll enough to make the given line visible.
	 * @param integer $line
	 */
	function ScrollToLine($line){}

	/**
	 * Sets the current caret position to be the search anchor.
	 */
	function SearchAnchor(){}

	/**
	 * Search for a counted string in the target and set the target to the found range.
	 * @param string $text
	 * @return integer
	 */
	function SearchInTarget($text){}

	/**
	 * Find some text starting at the search anchor.
	 * @param integer $flags
	 * @param string $text
	 * @return integer
	 */
	function SearchNext($flags, $text){}

	/**
	 * Find some text starting at the search anchor and moving backwards.
	 * @param integer $flags
	 * @param string $text
	 * @return integer
	 */
	function SearchPrev($flags, $text){}

	/**
	 * Select all the text in the document.
	 */
	function SelectAll(){}

	/**
	 * Duplicate the selection.
	 */
	function SelectionDuplicate(){}

	/**
	 * Is the selection rectangular? The alternative is the more common stream selection.
	 * @return bool
	 */
	function SelectionIsRectangle(){}

	/**
	 * Set the foreground colour of additional carets.
	 * @param wxColour $fore
	 */
	function SetAdditionalCaretForeground(wxColour $fore){}

	/**
	 * Set whether additional carets will blink.
	 * @param bool $additionalCaretsBlink
	 */
	function SetAdditionalCaretsBlink($additionalCaretsBlink){}

	/**
	 * Set whether additional carets are visible.
	 * @param bool $additionalCaretsBlink
	 */
	function SetAdditionalCaretsVisible($additionalCaretsBlink){}

	/**
	 * Set the alpha of the selection.
	 * @param integer $alpha
	 */
	function SetAdditionalSelAlpha($alpha){}

	/**
	 * Set the background colour of additional selections.
	 * @param wxColour $back
	 */
	function SetAdditionalSelBackground(wxColour $back){}

	/**
	 * Set the foreground colour of additional selections.
	 * @param wxColour $fore
	 */
	function SetAdditionalSelForeground(wxColour $fore){}

	/**
	 * Set whether typing can be performed into multiple selections.
	 * @param bool $additionalSelectionTyping
	 */
	function SetAdditionalSelectionTyping($additionalSelectionTyping){}

	/**
	 * Set the selection anchor to a position.
	 * @param integer $posAnchor
	 */
	function SetAnchor($posAnchor){}

	/**
	 * Sets whether a backspace pressed when caret is within indentation unindents.
	 * @param bool $bsUnIndents
	 */
	function SetBackSpaceUnIndents($bsUnIndents){}

	/**
	 * If drawing is buffered then each line of text is drawn into a bitmap buffer before drawing it to the screen to avoid flicker.
	 * @param bool $buffered
	 */
	function SetBufferedDraw($buffered){}

	/**
	 * Set the foreground colour of the caret.
	 * @param wxColour $fore
	 */
	function SetCaretForeground(wxColour $fore){}

	/**
	 * Set background alpha of the caret line.
	 * @param integer $alpha
	 */
	function SetCaretLineBackAlpha($alpha){}

	/**
	 * Set the colour of the background of the line containing the caret.
	 * @param wxColour $back
	 */
	function SetCaretLineBackground(wxColour $back){}

	/**
	 * Display the background of the line containing the caret in a different colour.
	 * @param bool $show
	 */
	function SetCaretLineVisible($show){}

	/**
	 * Get the time in milliseconds that the caret is on and off.
	 * @param integer $periodMilliseconds
	 */
	function SetCaretPeriod($periodMilliseconds){}

	/**
	 * Stop the caret preferred x position changing when the user types.
	 * @param bool $useCaretStickyBehaviour
	 */
	function SetCaretSticky($useCaretStickyBehaviour){}

	/**
	 * Set the width of the insert mode caret.
	 * @param integer $pixelWidth
	 */
	function SetCaretWidth($pixelWidth){}

	/**
	 * Reset the set of characters for whitespace and word characters to the defaults.
	 */
	function SetCharsDefault(){}

	/**
	 * Set the code page used to interpret the bytes of the document as characters.
	 * @param integer $codePage
	 */
	function SetCodePage($codePage){}

	/**
	 * Change the way control characters are displayed: If symbol is 32, keep the drawn way, else, use the given character.
	 * @param integer $symbol
	 */
	function SetControlCharSymbol($symbol){}

	/**
	 * Sets the position of the caret.
	 * @param integer $pos
	 */
	function SetCurrentPos($pos){}

	/**
	 * Set the current end of line mode.
	 * @param integer $eolMode
	 */
	function SetEOLMode($eolMode){}

	/**
	 * Change the colour used in edge indication.
	 * @param wxColour $edgeColour
	 */
	function SetEdgeColour(wxColour $edgeColour){}

	/**
	 * Set the column number of the edge.
	 * @param integer $column
	 */
	function SetEdgeColumn($column){}

	/**
	 * The edge may be displayed by a line (EDGE_LINE) or by highlighting text that goes beyond it (EDGE_BACKGROUND) or not displayed at all (EDGE_NONE).
	 * @param integer $mode
	 */
	function SetEdgeMode($mode){}

	/**
	 * Sets the scroll range so that maximum scroll position has the last line at the bottom of the view (default).
	 * @param bool $endAtLastLine
	 */
	function SetEndAtLastLine($endAtLastLine){}

	/**
	 * Set extra ascent for each line.
	 * @param integer $extraAscent
	 */
	function SetExtraAscent($extraAscent){}

	/**
	 * Set extra descent for each line.
	 * @param integer $extraDescent
	 */
	function SetExtraDescent($extraDescent){}

	/**
	 * Scroll so that a display line is at the top of the display.
	 * @param integer $lineDisplay
	 */
	function SetFirstVisibleLine($lineDisplay){}

	/**
	 * Show the children of a header line.
	 * @param integer $line
	 * @param bool $expanded
	 */
	function SetFoldExpanded($line, $expanded){}

	/**
	 * Set some style options for folding.
	 * @param integer $flags
	 */
	function SetFoldFlags($flags){}

	/**
	 * Set the fold level of a line.
	 * @param integer $line
	 * @param integer $level
	 */
	function SetFoldLevel($line, $level){}

	/**
	 * Set the colours used as a chequerboard pattern in the fold margin.
	 * @param bool $useSetting
	 * @param wxColour $back
	 */
	function SetFoldMarginColour($useSetting, wxColour $back){}

	/**
	 * SetFoldMarginHiColour
	 * @param bool $useSetting
	 * @param wxColour $fore
	 */
	function SetFoldMarginHiColour($useSetting, wxColour $fore){}

	/**
	 * Set the horizontal scrollbar to use instead of the ont that's built-in.
	 * @param wxScrollBar $bar
	 */
	function SetHScrollBar(wxScrollBar &$bar){}

	/**
	 * Set the highlighted indentation guide column.
	 * @param integer $column
	 */
	function SetHighlightGuide($column){}

	/**
	 * Set a back colour for active hotspots.
	 * @param bool $useSetting
	 * @param wxColour $back
	 */
	function SetHotspotActiveBackground($useSetting, wxColour $back){}

	/**
	 * Set a fore colour for active hotspots.
	 * @param bool $useSetting
	 * @param wxColour $fore
	 */
	function SetHotspotActiveForeground($useSetting, wxColour $fore){}

	/**
	 * Enable / Disable underlining active hotspots.
	 * @param bool $underline
	 */
	function SetHotspotActiveUnderline($underline){}

	/**
	 * Limit hotspots to single line so hotspots on two lines don't merge.
	 * @param bool $singleLine
	 */
	function SetHotspotSingleLine($singleLine){}

	/**
	 * Set the number of spaces used for one level of indentation.
	 * @param integer $indentSize
	 */
	function SetIndent($indentSize){}

	/**
	 * Show or hide indentation guides.
	 * @param integer $indentView
	 */
	function SetIndentationGuides($indentView){}

	/**
	 * Set up the key words used by the lexer.
	 * @param integer $keywordSet
	 * @param string $keyWords
	 */
	function SetKeyWords($keywordSet, $keyWords){}

	/**
	 * Always interpret keyboard input as Unicode.
	 * @param bool $keysUnicode
	 */
	function SetKeysUnicode($keysUnicode){}

	/**
	 * SetLastKeydownProcessed
	 * @param bool $val
	 */
	function SetLastKeydownProcessed($val){}

	/**
	 * Sets the degree of caching of layout information.
	 * @param integer $mode
	 */
	function SetLayoutCache($mode){}

	/**
	 * Set the lexing language of the document.
	 * @param integer $lexer
	 */
	function SetLexer($lexer){}

	/**
	 * Set the lexing language of the document based on string name.
	 * @param string $language
	 */
	function SetLexerLanguage($language){}

	/**
	 * Change the indentation of a line to a number of columns.
	 * @param integer $line
	 * @param integer $indentSize
	 */
	function SetLineIndentation($line, $indentSize){}

	/**
	 * Used to hold extra styling information for each line.
	 * @param integer $line
	 * @param integer $state
	 */
	function SetLineState($line, $state){}

	/**
	 * Set the main selection.
	 * @param integer $selection
	 */
	function SetMainSelection($selection){}

	/**
	 * Sets the size in pixels of the left margin.
	 * @param integer $pixelWidth
	 */
	function SetMarginLeft($pixelWidth){}

	/**
	 * Set a mask that determines which markers are displayed in a margin.
	 * @param integer $margin
	 * @param integer $mask
	 */
	function SetMarginMask($margin, $mask){}

	/**
	 * Sets the size in pixels of the right margin.
	 * @param integer $pixelWidth
	 */
	function SetMarginRight($pixelWidth){}

	/**
	 * Make a margin sensitive or insensitive to mouse clicks.
	 * @param integer $margin
	 * @param bool $sensitive
	 */
	function SetMarginSensitive($margin, $sensitive){}

	/**
	 * Set a margin to be either numeric or symbolic.
	 * @param integer $margin
	 * @param integer $marginType
	 */
	function SetMarginType($margin, $marginType){}

	/**
	 * Set the width of a margin to a width expressed in pixels.
	 * @param integer $margin
	 * @param integer $pixelWidth
	 */
	function SetMarginWidth($margin, $pixelWidth){}

	/**
	 * Set the left and right margin in the edit area, measured in pixels.
	 * @param integer $left
	 * @param integer $right
	 */
	function SetMargins($left, $right){}

	/**
	 * Set which document modification events are sent to the container.
	 * @param integer $mask
	 */
	function SetModEventMask($mask){}

	/**
	 * Set whether the mouse is captured when its button is pressed.
	 * @param bool $captures
	 */
	function SetMouseDownCaptures($captures){}

	/**
	 * Sets the time the mouse must sit still to generate a mouse dwell event.
	 * @param integer $periodMilliseconds
	 */
	function SetMouseDwellTime($periodMilliseconds){}

	/**
	 * Set whether multiple selections can be made.
	 * @param bool $multipleSelection
	 */
	function SetMultipleSelection($multipleSelection){}

	/**
	 * Set to overtype (true) or insert mode.
	 * @param bool $overtype
	 */
	function SetOvertype($overtype){}

	/**
	 * Enable/Disable convert-on-paste for line endings.
	 * @param bool $convert
	 */
	function SetPasteConvertEndings($convert){}

	/**
	 * Modify colours when printing for clearer printed text.
	 * @param integer $mode
	 */
	function SetPrintColourMode($mode){}

	/**
	 * Sets the print magnification added to the point size of each style for printing.
	 * @param integer $magnification
	 */
	function SetPrintMagnification($magnification){}

	/**
	 * Set printing to line wrapped (SC_WRAP_WORD) or not line wrapped (SC_WRAP_NONE).
	 * @param integer $mode
	 */
	function SetPrintWrapMode($mode){}

	/**
	 * Set up a value that may be used by a lexer for some optional feature.
	 * @param string $key
	 * @param string $value
	 */
	function SetProperty($key, $value){}

	/**
	 * Set to read only or read write.
	 * @param bool $readOnly
	 */
	function SetReadOnly($readOnly){}

	/**
	 * SetRectangularSelectionAnchor
	 * @param integer $posAnchor
	 */
	function SetRectangularSelectionAnchor($posAnchor){}

	/**
	 * SetRectangularSelectionAnchorVirtualSpace
	 * @param integer $space
	 */
	function SetRectangularSelectionAnchorVirtualSpace($space){}

	/**
	 * SetRectangularSelectionCaret
	 * @param integer $pos
	 */
	function SetRectangularSelectionCaret($pos){}

	/**
	 * SetRectangularSelectionCaretVirtualSpace
	 * @param integer $space
	 */
	function SetRectangularSelectionCaretVirtualSpace($space){}

	/**
	 * Select the modifier key to use for mouse-based rectangular selection.
	 * @param integer $modifier
	 */
	function SetRectangularSelectionModifier($modifier){}

	/**
	 * Sets the cursor to one of the SC_CURSOR* values.
	 * @param integer $cursorType
	 */
	function SetSTCCursor($cursorType){}

	/**
	 * Change internal focus flag.
	 * @param bool $focus
	 */
	function SetSTCFocus($focus){}

	/**
	 * Remember the current position in the undo history as the position at which the document was saved.
	 */
	function SetSavePoint(){}

	/**
	 * Sets the document width assumed for scrolling.
	 * @param integer $pixelWidth
	 */
	function SetScrollWidth($pixelWidth){}

	/**
	 * Set the search flags used by SearchInTarget.
	 * @param integer $flags
	 */
	function SetSearchFlags($flags){}

	/**
	 * Set the alpha of the selection.
	 * @param integer $alpha
	 */
	function SetSelAlpha($alpha){}

	/**
	 * Set the background colour of the main and additional selections and whether to use this setting.
	 * @param bool $useSetting
	 * @param wxColour $back
	 */
	function SetSelBackground($useSetting, wxColour $back){}

	/**
	 * Set the foreground colour of the main and additional selections and whether to use this setting.
	 * @param bool $useSetting
	 * @param wxColour $fore
	 */
	function SetSelForeground($useSetting, wxColour $fore){}

	/**
	 * Select a range of text.
	 * @param integer $from
	 * @param integer $to
	 */
	function SetSelection($from, $to){}

	/**
	 * Sets the position that ends the selection - this becomes the currentPosition.
	 * @param integer $pos
	 */
	function SetSelectionEnd($pos){}

	/**
	 * Set the selection mode to stream (wxSTC_SEL_STREAM) or rectangular (wxSTC_SEL_RECTANGLE/wxSTC_SEL_THIN) or by lines (wxSTC_SEL_LINES).
	 * @param integer $mode
	 */
	function SetSelectionMode($mode){}

	/**
	 * SetSelectionNAnchor
	 * @param integer $selection
	 * @param integer $posAnchor
	 */
	function SetSelectionNAnchor($selection, $posAnchor){}

	/**
	 * SetSelectionNAnchorVirtualSpace
	 * @param integer $selection
	 * @param integer $space
	 */
	function SetSelectionNAnchorVirtualSpace($selection, $space){}

	/**
	 * SetSelectionNCaret
	 * @param integer $selection
	 * @param integer $pos
	 */
	function SetSelectionNCaret($selection, $pos){}

	/**
	 * SetSelectionNCaretVirtualSpace
	 * @param integer $selection
	 * @param integer $space
	 */
	function SetSelectionNCaretVirtualSpace($selection, $space){}

	/**
	 * Sets the position that ends the selection - this becomes the currentPosition.
	 * @param integer $selection
	 * @param integer $pos
	 */
	function SetSelectionNEnd($selection, $pos){}

	/**
	 * Sets the position that starts the selection - this becomes the anchor.
	 * @param integer $selection
	 * @param integer $pos
	 */
	function SetSelectionNStart($selection, $pos){}

	/**
	 * Sets the position that starts the selection - this becomes the anchor.
	 * @param integer $pos
	 */
	function SetSelectionStart($pos){}

	/**
	 * Change error status - 0 = OK.
	 * @param integer $statusCode
	 */
	function SetStatus($statusCode){}

	/**
	 * Divide each styling byte into lexical class bits (default: 5) and indicator bits (default: 3).
	 * @param integer $bits
	 */
	function SetStyleBits($bits){}

	/**
	 * Change style from current styling position for length characters to a style and move the current styling position to after this newly styled segment.
	 * @param integer $length
	 * @param integer $style
	 */
	function SetStyling($length, $style){}

	/**
	 * Sets whether a tab pressed when caret is within indentation indents.
	 * @param bool $tabIndents
	 */
	function SetTabIndents($tabIndents){}

	/**
	 * Change the visible size of a tab to be a multiple of the width of a space character.
	 * @param integer $tabWidth
	 */
	function SetTabWidth($tabWidth){}

	/**
	 * Sets the position that ends the target which is used for updating the document without affecting the scroll position.
	 * @param integer $pos
	 */
	function SetTargetEnd($pos){}

	/**
	 * Sets the position that starts the target which is used for updating the document without affecting the scroll position.
	 * @param integer $pos
	 */
	function SetTargetStart($pos){}

	/**
	 * Replace the contents of the document with the argument text.
	 * @param string $text
	 */
	function SetText($text){}

	/**
	 * Replace the contents of the document with the argument text.
	 * @param string $text
	 */
	function SetTextRaw($text){}

	/**
	 * In twoPhaseDraw mode, drawing is performed in two phases, first the background and then the foreground.
	 * @param bool $twoPhase
	 */
	function SetTwoPhaseDraw($twoPhase){}

	/**
	 * Choose between collecting actions into the undo history and discarding them.
	 * @param bool $collectUndo
	 */
	function SetUndoCollection($collectUndo){}

	/**
	 * Specify whether anti-aliased fonts should be used.
	 * @param bool $useAA
	 */
	function SetUseAntiAliasing($useAA){}

	/**
	 * Show or hide the horizontal scroll bar.
	 * @param bool $show
	 */
	function SetUseHorizontalScrollBar($show){}

	/**
	 * Indentation will only use space characters if useTabs is false, otherwise it will use a combination of tabs and spaces.
	 * @param bool $useTabs
	 */
	function SetUseTabs($useTabs){}

	/**
	 * Show or hide the vertical scroll bar.
	 * @param bool $show
	 */
	function SetUseVerticalScrollBar($show){}

	/**
	 * Set the vertical scrollbar to use instead of the ont that's built-in.
	 * @param wxScrollBar $bar
	 */
	function SetVScrollBar(wxScrollBar &$bar){}

	/**
	 * Make the end of line characters visible or invisible.
	 * @param bool $visible
	 */
	function SetViewEOL($visible){}

	/**
	 * Make white space characters invisible, always visible or visible outside indentation.
	 * @param integer $viewWS
	 */
	function SetViewWhiteSpace($viewWS){}

	/**
	 * SetVirtualSpaceOptions
	 * @param integer $virtualSpaceOptions
	 */
	function SetVirtualSpaceOptions($virtualSpaceOptions){}

	/**
	 * Set the way the display area is determined when a particular line is to be moved to by Find, FindNext, GotoLine, etc.
	 * @param integer $visiblePolicy
	 * @param integer $visibleSlop
	 */
	function SetVisiblePolicy($visiblePolicy, $visibleSlop){}

	/**
	 * Set the background colour of all whitespace and whether to use this setting.
	 * @param bool $useSetting
	 * @param wxColour $back
	 */
	function SetWhitespaceBackground($useSetting, wxColour $back){}

	/**
	 * Set the set of characters making up whitespace for when moving or selecting by word.
	 * @param string $characters
	 */
	function SetWhitespaceChars($characters){}

	/**
	 * Set the foreground colour of all whitespace and whether to use this setting.
	 * @param bool $useSetting
	 * @param wxColour $fore
	 */
	function SetWhitespaceForeground($useSetting, wxColour $fore){}

	/**
	 * Set the size of the dots used to mark space characters.
	 * @param integer $size
	 */
	function SetWhitespaceSize($size){}

	/**
	 * Set the set of characters making up words for when moving or selecting by word.
	 * @param string $characters
	 */
	function SetWordChars($characters){}

	/**
	 * Sets how wrapped sublines are placed.
	 * @param integer $mode
	 */
	function SetWrapIndentMode($mode){}

	/**
	 * Sets whether text is word wrapped.
	 * @param integer $mode
	 */
	function SetWrapMode($mode){}

	/**
	 * Set the start indent for wrapped lines.
	 * @param integer $indent
	 */
	function SetWrapStartIndent($indent){}

	/**
	 * Set the display mode of visual flags for wrapped lines.
	 * @param integer $wrapVisualFlags
	 */
	function SetWrapVisualFlags($wrapVisualFlags){}

	/**
	 * Set the location of visual flags for wrapped lines.
	 * @param integer $wrapVisualFlagsLocation
	 */
	function SetWrapVisualFlagsLocation($wrapVisualFlagsLocation){}

	/**
	 * Set the way the caret is kept visible when going sideway.
	 * @param integer $caretPolicy
	 * @param integer $caretSlop
	 */
	function SetXCaretPolicy($caretPolicy, $caretSlop){}

	/**
	 * Get and Set the xOffset (ie, horizontal scroll position).
	 * @param integer $newOffset
	 */
	function SetXOffset($newOffset){}

	/**
	 * Set the way the line the caret is on is kept visible.
	 * @param integer $caretPolicy
	 * @param integer $caretSlop
	 */
	function SetYCaretPolicy($caretPolicy, $caretSlop){}

	/**
	 * Set the zoom level.
	 * @param integer $zoom
	 */
	function SetZoom($zoom){}

	/**
	 * Make a range of lines visible.
	 * @param integer $lineStart
	 * @param integer $lineEnd
	 */
	function ShowLines($lineStart, $lineEnd){}

	/**
	 * Start notifying the container of all key presses and commands.
	 */
	function StartRecord(){}

	/**
	 * Set the current styling position to pos and the styling mask to mask.
	 * @param integer $pos
	 * @param integer $mask
	 */
	function StartStyling($pos, $mask){}

	/**
	 * Stop notifying the container of all key presses and commands.
	 */
	function StopRecord(){}

	/**
	 * Move caret to bottom of page, or one page down if already at bottom of page.
	 */
	function StutteredPageDown(){}

	/**
	 * Move caret to bottom of page, or one page down if already at bottom of page, extending selection to new caret position.
	 */
	function StutteredPageDownExtend(){}

	/**
	 * Move caret to top of page, or one page up if already at top of page.
	 */
	function StutteredPageUp(){}

	/**
	 * Move caret to top of page, or one page up if already at top of page, extending selection to new caret position.
	 */
	function StutteredPageUpExtend(){}

	/**
	 * Clear all the styles and make equivalent to the global default style.
	 */
	function StyleClearAll(){}

	/**
	 * Reset the default style to its state at startup.
	 */
	function StyleResetDefault(){}

	/**
	 * Set the background colour of a style.
	 * @param integer $style
	 * @param wxColour $back
	 */
	function StyleSetBackground($style, wxColour $back){}

	/**
	 * Set a style to be bold or not.
	 * @param integer $style
	 * @param bool $bold
	 */
	function StyleSetBold($style, $bold){}

	/**
	 * Set a style to be mixed case, or to force upper or lower case.
	 * @param integer $style
	 * @param integer $caseForce
	 */
	function StyleSetCase($style, $caseForce){}

	/**
	 * Set a style to be changeable or not (read only).
	 * @param integer $style
	 * @param bool $changeable
	 */
	function StyleSetChangeable($style, $changeable){}

	/**
	 * Set the character set of the font in a style.
	 * @param integer $style
	 * @param integer $characterSet
	 */
	function StyleSetCharacterSet($style, $characterSet){}

	/**
	 * Set a style to have its end of line filled or not.
	 * @param integer $style
	 * @param bool $filled
	 */
	function StyleSetEOLFilled($style, $filled){}

	/**
	 * Set the font of a style.
	 * @param integer $style
	 * @param string $fontName
	 */
	function StyleSetFaceName($style, $fontName){}

	/**
	 * Set style size, face, bold, italic, and underline attributes from a wxFont's attributes.
	 * @param integer $styleNum
	 * @param wxFont $font
	 */
	function StyleSetFont($styleNum, wxFont &$font){}

	/**
	 * Set all font style attributes at once.
	 * @param integer $styleNum
	 * @param integer $size
	 * @param string $faceName
	 * @param bool $bold
	 * @param bool $italic
	 * @param bool $underline
	 * @param wxFontEncoding $encoding
	 */
	function StyleSetFontAttr($styleNum, $size, $faceName, $bold, $italic, $underline, wxFontEncoding $encoding=null){}

	/**
	 * Set the font encoding to be used by a style.
	 * @param integer $style
	 * @param wxFontEncoding $encoding
	 */
	function StyleSetFontEncoding($style, wxFontEncoding $encoding){}

	/**
	 * Set the foreground colour of a style.
	 * @param integer $style
	 * @param wxColour $fore
	 */
	function StyleSetForeground($style, wxColour $fore){}

	/**
	 * Set a style to be a hotspot or not.
	 * @param integer $style
	 * @param bool $hotspot
	 */
	function StyleSetHotSpot($style, $hotspot){}

	/**
	 * Set a style to be italic or not.
	 * @param integer $style
	 * @param bool $italic
	 */
	function StyleSetItalic($style, $italic){}

	/**
	 * Set the size of characters of a style.
	 * @param integer $style
	 * @param integer $sizePoints
	 */
	function StyleSetSize($style, $sizePoints){}

	/**
	 * Extract style settings from a spec-string which is composed of one or more of the following comma separated elements: bold turns on bold italic turns on italics fore:[name or #RRGGBB] sets the foreground colour back:[name or #RRGGBB] sets the background colour face:[facename] sets the font face name to use size:[num] sets the font size in points eol turns on eol filling underline turns on underlining.
	 * @param integer $styleNum
	 * @param string $spec
	 */
	function StyleSetSpec($styleNum, $spec){}

	/**
	 * Set a style to be underlined or not.
	 * @param integer $style
	 * @param bool $underline
	 */
	function StyleSetUnderline($style, $underline){}

	/**
	 * Set a style to be visible or not.
	 * @param integer $style
	 * @param bool $visible
	 */
	function StyleSetVisible($style, $visible){}

	/**
	 * Swap that caret and anchor of the main selection.
	 */
	function SwapMainAnchorCaret(){}

	/**
	 * If selection is empty or all on one line replace the selection with a tab character.
	 */
	function Tab(){}

	/**
	 * Make the target range start and end be the same as the selection range start and end.
	 */
	function TargetFromSelection(){}

	/**
	 * Retrieve the height of a particular line of text in pixels.
	 * @param integer $line
	 * @return integer
	 */
	function TextHeight($line){}

	/**
	 * Measure the pixel width of some text in a particular style.
	 * @param integer $style
	 * @param string $text
	 * @return integer
	 */
	function TextWidth($style, $text){}

	/**
	 * Switch between sticky and non-sticky: meant to be bound to a key.
	 */
	function ToggleCaretSticky(){}

	/**
	 * Switch a header line between expanded and contracted.
	 * @param integer $line
	 */
	function ToggleFold($line){}

	/**
	 * Undo one action in the undo history.
	 */
	function Undo(){}

	/**
	 * Transform the selection to upper case.
	 */
	function UpperCase(){}

	/**
	 * Set whether a pop up menu is displayed automatically when the user presses the wrong mouse button.
	 * @param bool $allowPopUp
	 */
	function UsePopUp($allowPopUp){}

	/**
	 * Display a list of strings and send notification when user chooses one.
	 * @param integer $listType
	 * @param string $itemList
	 */
	function UserListShow($listType, $itemList){}

	/**
	 * Move caret to before first visible character on line.
	 */
	function VCHome(){}

	/**
	 * Like VCHome but extending selection to new caret position.
	 */
	function VCHomeExtend(){}

	/**
	 * Move caret to before first visible character on line.
	 */
	function VCHomeRectExtend(){}

	/**
	 * VCHomeWrap
	 */
	function VCHomeWrap(){}

	/**
	 * VCHomeWrapExtend
	 */
	function VCHomeWrapExtend(){}

	/**
	 * Find the display line of a document line taking hidden lines into account.
	 * @param integer $line
	 * @return integer
	 */
	function VisibleFromDocLine($line){}

	/**
	 * Get position of end of word.
	 * @param integer $pos
	 * @param bool $onlyWordCharacters
	 * @return integer
	 */
	function WordEndPosition($pos, $onlyWordCharacters){}

	/**
	 * Move caret left one word.
	 */
	function WordLeft(){}

	/**
	 * Move caret left one word, position cursor at end of word.
	 */
	function WordLeftEnd(){}

	/**
	 * Move caret left one word, position cursor at end of word, extending selection to new caret position.
	 */
	function WordLeftEndExtend(){}

	/**
	 * Move caret left one word extending selection to new caret position.
	 */
	function WordLeftExtend(){}

	/**
	 * Move to the previous change in capitalisation.
	 */
	function WordPartLeft(){}

	/**
	 * Move to the previous change in capitalisation extending selection to new caret position.
	 */
	function WordPartLeftExtend(){}

	/**
	 * Move to the change next in capitalisation.
	 */
	function WordPartRight(){}

	/**
	 * Move to the next change in capitalisation extending selection to new caret position.
	 */
	function WordPartRightExtend(){}

	/**
	 * Move caret right one word.
	 */
	function WordRight(){}

	/**
	 * Move caret right one word, position cursor at end of word.
	 */
	function WordRightEnd(){}

	/**
	 * Move caret right one word, position cursor at end of word, extending selection to new caret position.
	 */
	function WordRightEndExtend(){}

	/**
	 * Move caret right one word extending selection to new caret position.
	 */
	function WordRightExtend(){}

	/**
	 * Get position of start of word.
	 * @param integer $pos
	 * @param bool $onlyWordCharacters
	 * @return integer
	 */
	function WordStartPosition($pos, $onlyWordCharacters){}

	/**
	 * The number of display lines needed to wrap a document line.
	 * @param integer $line
	 * @return integer
	 */
	function WrapCount($line){}

	/**
	 * Magnify the displayed text by increasing the sizes by 1 point.
	 */
	function ZoomIn(){}

	/**
	 * Make the displayed text smaller by decreasing the sizes by 1 point.
	 */
	function ZoomOut(){}
}

class wxStyledTextEvent extends wxCommandEvent
{
	/**
	 * Ctors; used internally by wxWidgets.
	 * @param integer $commandType
	 * @param integer $id
	 * @param wxStyledTextEvent $event
	 */
	function __construct($commandType, $id, wxStyledTextEvent $event){}

	/**
	 * GetAlt
	 * @return bool
	 */
	function GetAlt(){}

	/**
	 * GetControl
	 * @return bool
	 */
	function GetControl(){}

	/**
	 * GetDragAllowMove
	 * @return bool
	 */
	function GetDragAllowMove(){}

	/**
	 * GetDragResult
	 * @return wxDragResult
	 */
	function GetDragResult(){}

	/**
	 * GetDragText
	 * @return string
	 */
	function GetDragText(){}

	/**
	 * GetFoldLevelNow
	 * @return integer
	 */
	function GetFoldLevelNow(){}

	/**
	 * GetFoldLevelPrev
	 * @return integer
	 */
	function GetFoldLevelPrev(){}

	/**
	 * GetKey
	 * @return integer
	 */
	function GetKey(){}

	/**
	 * GetLParam
	 * @return integer
	 */
	function GetLParam(){}

	/**
	 * GetLength
	 * @return integer
	 */
	function GetLength(){}

	/**
	 * GetLine
	 * @return integer
	 */
	function GetLine(){}

	/**
	 * GetLinesAdded
	 * @return integer
	 */
	function GetLinesAdded(){}

	/**
	 * GetListType
	 * @return integer
	 */
	function GetListType(){}

	/**
	 * GetMargin
	 * @return integer
	 */
	function GetMargin(){}

	/**
	 * GetMessage
	 * @return integer
	 */
	function GetMessage(){}

	/**
	 * GetModificationType
	 * @return integer
	 */
	function GetModificationType(){}

	/**
	 * GetModifiers
	 * @return integer
	 */
	function GetModifiers(){}

	/**
	 * GetPosition
	 * @return integer
	 */
	function GetPosition(){}

	/**
	 * GetShift
	 * @return bool
	 */
	function GetShift(){}

	/**
	 * GetText
	 * @return string
	 */
	function GetText(){}

	/**
	 * GetWParam
	 * @return integer
	 */
	function GetWParam(){}

	/**
	 * GetX
	 * @return integer
	 */
	function GetX(){}

	/**
	 * GetY
	 * @return integer
	 */
	function GetY(){}

	/**
	 * SetDragAllowMove
	 * @param bool $val
	 */
	function SetDragAllowMove($val){}

	/**
	 * SetDragResult
	 * @param wxDragResult $val
	 */
	function SetDragResult(wxDragResult $val){}

	/**
	 * SetDragText
	 * @param string $val
	 */
	function SetDragText($val){}

	/**
	 * SetFoldLevelNow
	 * @param integer $val
	 */
	function SetFoldLevelNow($val){}

	/**
	 * SetFoldLevelPrev
	 * @param integer $val
	 */
	function SetFoldLevelPrev($val){}

	/**
	 * SetKey
	 * @param integer $k
	 */
	function SetKey($k){}

	/**
	 * SetLParam
	 * @param integer $val
	 */
	function SetLParam($val){}

	/**
	 * SetLength
	 * @param integer $len
	 */
	function SetLength($len){}

	/**
	 * SetLine
	 * @param integer $val
	 */
	function SetLine($val){}

	/**
	 * SetLinesAdded
	 * @param integer $num
	 */
	function SetLinesAdded($num){}

	/**
	 * SetListType
	 * @param integer $val
	 */
	function SetListType($val){}

	/**
	 * SetMargin
	 * @param integer $val
	 */
	function SetMargin($val){}

	/**
	 * SetMessage
	 * @param integer $val
	 */
	function SetMessage($val){}

	/**
	 * SetModificationType
	 * @param integer $t
	 */
	function SetModificationType($t){}

	/**
	 * SetModifiers
	 * @param integer $m
	 */
	function SetModifiers($m){}

	/**
	 * SetPosition
	 * @param integer $pos
	 */
	function SetPosition($pos){}

	/**
	 * SetText
	 * @param string $t
	 */
	function SetText($t){}

	/**
	 * SetWParam
	 * @param integer $val
	 */
	function SetWParam($val){}

	/**
	 * SetX
	 * @param integer $val
	 */
	function SetX($val){}

	/**
	 * SetY
	 * @param integer $val
	 */
	function SetY($val){}
}

class wxSymbolPickerDialog extends wxDialog
{
	/**
	 * Default ctor.
	 * @param string $symbol
	 * @param string $initialFont
	 * @param string $normalTextFont
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param string $title
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 */
	function __construct($symbol, $initialFont, $normalTextFont, wxWindow &$parent, $id=wxID_ANY, $title="Symbols", wxPoint $pos=null, wxSize $size=null, $style=null){}

	/**
	 * Creation: see the constructor for details about the parameters.
	 * @param string $symbol
	 * @param string $initialFont
	 * @param string $normalTextFont
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param string $caption
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @return bool
	 */
	function Create($symbol, $initialFont, $normalTextFont, wxWindow &$parent, $id=wxID_ANY, $caption=null, wxPoint $pos=null, wxSize $size=null, $style=null){}

	/**
	 * Returns the font name (the font reflected in the font list).
	 * @return string
	 */
	function GetFontName(){}

	/**
	 * Returns true if the dialog is showing the full range of Unicode characters.
	 * @return bool
	 */
	function GetFromUnicode(){}

	/**
	 * Gets the font name used for displaying symbols in the absence of a selected font.
	 * @return string
	 */
	function GetNormalTextFontName(){}

	/**
	 * Gets the current or initial symbol as a string.
	 * @return string
	 */
	function GetSymbol(){}

	/**
	 * Gets the selected symbol character as an integer.
	 * @return integer
	 */
	function GetSymbolChar(){}

	/**
	 * Returns true if a symbol is selected.
	 * @return bool
	 */
	function HasSelection(){}

	/**
	 * Sets the initial/selected font name.
	 * @param string $value
	 */
	function SetFontName($value){}

	/**
	 * Sets the internal flag indicating that the full Unicode range should be displayed.
	 * @param bool $value
	 */
	function SetFromUnicode($value){}

	/**
	 * Sets the name of the font to be used in the absence of a selected font.
	 * @param string $value
	 */
	function SetNormalTextFontName($value){}

	/**
	 * Sets the symbol as a one or zero character string.
	 * @param string $value
	 */
	function SetSymbol($value){}

	/**
	 * Sets Unicode display mode.
	 * @param bool $unicodeMode
	 */
	function SetUnicodeMode($unicodeMode){}

	/**
	 * Returns true if the has specified normal text - that is, there is no selected font.
	 * @return bool
	 */
	function UseNormalFont(){}
}

class wxSysColourChangedEvent extends wxEvent
{
	/**
	 * Constructor.
	 */
	function __construct(){}
}

class wxSystemOptions
{
	/**
	 * Gets an option.
	 * @param string $name
	 * @return string
	 */
	function GetOption($name){}

	/**
	 * Gets an option as an integer.
	 * @param string $name
	 * @return integer
	 */
	function GetOptionInt($name){}

	/**
	 * Returns true if the given option is present.
	 * @param string $name
	 * @return bool
	 */
	function HasOption($name){}

	/**
	 * Returns true if the option with the given name had been set to 0 value.
	 * @param string $name
	 * @return bool
	 */
	function IsFalse($name){}

	/**
	 * Sets an option.
	 * @param string $name
	 * @param string $value
	 */
	function SetOption($name, $value, $name, $value){}
}

class wxSystemSettings
{
	/**
	 * Returns a system colour.
	 * @param wxSystemColour $index
	 * @return wxColour
	 */
	function GetColour(wxSystemColour $index){}

	/**
	 * Returns a system font.
	 * @param wxSystemFont $index
	 * @return wxFont
	 */
	function GetFont(wxSystemFont $index){}

	/**
	 * Returns the value of a system metric, or -1 if the metric is not supported on the current system.
	 * @param wxSystemMetric $index
	 * @param wxWindow $win
	 * @return integer
	 */
	function GetMetric(wxSystemMetric $index, wxWindow &$win=null){}

	/**
	 * Returns the screen type.
	 * @return wxSystemScreenType
	 */
	function GetScreenType(){}

	/**
	 * Returns true if the port has certain feature.
	 * @param wxSystemFeature $index
	 * @return bool
	 */
	function HasFeature(wxSystemFeature $index){}
}

class wxTaskBarIcon extends wxEvtHandler
{
	/**
	 * Default constructor.
	 * @param wxTaskBarIconType $iconType
	 */
	function __construct(wxTaskBarIconType $iconType=null){}

	/**
	 * This method is called by the library when the user requests popup menu (on Windows and Unix platforms, this is when the user right-clicks the icon).
	 * @return wxMenu
	 */
	function CreatePopupMenu(){}

	/**
	 * This method is similar to wxWindow::Destroy and can be used to schedule the task bar icon object for the delayed destruction: it will be deleted during the next event loop iteration, which allows the task bar icon to process any pending events for it before being destroyed.
	 */
	function Destroy(){}

	/**
	 * Returns true if system tray is available in the desktop environment the app runs under.
	 * @return bool
	 */
	function IsAvailable(){}

	/**
	 * Returns true if SetIcon() was called with no subsequent RemoveIcon().
	 * @return bool
	 */
	function IsIconInstalled(){}

	/**
	 * Returns true if the object initialized successfully.
	 * @return bool
	 */
	function IsOk(){}

	/**
	 * Pops up a menu at the current mouse position.
	 * @param wxMenu $menu
	 * @return bool
	 */
	function PopupMenu(wxMenu &$menu){}

	/**
	 * Removes the icon previously set with SetIcon().
	 * @return bool
	 */
	function RemoveIcon(){}

	/**
	 * Sets the icon, and optional tooltip text.
	 * @param wxIcon $icon
	 * @param string $tooltip
	 * @return bool
	 */
	function SetIcon(wxIcon $icon, $tooltip=wxEmptyString){}
}

class wxTaskBarIconEvent extends wxEvent
{
	/**
	 * Constructor.
	 * @param integer $evtType
	 * @param wxTaskBarIcon $tbIcon
	 */
	function __construct($evtType, wxTaskBarIcon &$tbIcon){}
}

class wxTextAttr
{
	/**
	 * Constructors.
	 * @param wxTextAttr $attr
	 * @param wxColour $colText
	 * @param wxColour $colBack
	 * @param wxFont $font
	 * @param wxTextAttrAlignment $alignment
	 */
	function __construct(wxTextAttr $attr, wxColour $colText, wxColour $colBack=null, wxFont $font=null, wxTextAttrAlignment $alignment=null){}

	/**
	 * Applies the attributes in style to the original object, but not those attributes from style that are the same as those in compareWith (if passed).
	 * @param wxTextAttr $style
	 * @param wxTextAttr $compareWith
	 * @return bool
	 */
	function Apply(wxTextAttr $style, wxTextAttr $compareWith=null){}

	/**
	 * Returns the alignment flags.
	 * @return wxTextAttrAlignment
	 */
	function GetAlignment(){}

	/**
	 * Returns the background colour.
	 * @return wxColour
	 */
	function GetBackgroundColour(){}

	/**
	 * Returns a string containing the name of the font associated with the bullet symbol.
	 * @return string
	 */
	function GetBulletFont(){}

	/**
	 * Returns the standard bullet name, applicable if the bullet style is wxTEXT_ATTR_BULLET_STYLE_STANDARD.
	 * @return string
	 */
	function GetBulletName(){}

	/**
	 * Returns the bullet number.
	 * @return integer
	 */
	function GetBulletNumber(){}

	/**
	 * Returns the bullet style.
	 * @return integer
	 */
	function GetBulletStyle(){}

	/**
	 * Returns the bullet text, which could be a symbol, or (for example) cached outline text.
	 * @return string
	 */
	function GetBulletText(){}

	/**
	 * Returns the name of the character style.
	 * @return string
	 */
	function GetCharacterStyleName(){}

	/**
	 * Returns flags indicating which attributes are applicable.
	 * @return integer
	 */
	function GetFlags(){}

	/**
	 * Creates and returns a font specified by the font attributes in the wxTextAttr object.
	 * @return wxFont
	 */
	function GetFont(){}

	/**
	 * Gets the font attributes from the given font, using only the attributes specified by flags.
	 * @param wxFont $font
	 * @param integer $flags
	 * @return bool
	 */
	function GetFontAttributes(wxFont $font, $flags=wxTEXT_ATTR_FONT){}

	/**
	 * Returns the font encoding.
	 * @return wxFontEncoding
	 */
	function GetFontEncoding(){}

	/**
	 * Returns the font face name.
	 * @return string
	 */
	function GetFontFaceName(){}

	/**
	 * Returns the font family.
	 * @return wxFontFamily
	 */
	function GetFontFamily(){}

	/**
	 * Returns the font size in points.
	 * @return integer
	 */
	function GetFontSize(){}

	/**
	 * Returns the font style.
	 * @return wxFontStyle
	 */
	function GetFontStyle(){}

	/**
	 * Returns true if the font is underlined.
	 * @return bool
	 */
	function GetFontUnderlined(){}

	/**
	 * Returns the font weight.
	 * @return wxFontWeight
	 */
	function GetFontWeight(){}

	/**
	 * Returns the left indent in tenths of a millimetre.
	 * @return integer
	 */
	function GetLeftIndent(){}

	/**
	 * Returns the left sub-indent in tenths of a millimetre.
	 * @return integer
	 */
	function GetLeftSubIndent(){}

	/**
	 * Returns the line spacing value, one of wxTextAttrLineSpacing values.
	 * @return integer
	 */
	function GetLineSpacing(){}

	/**
	 * Returns the name of the list style.
	 * @return string
	 */
	function GetListStyleName(){}

	/**
	 * Returns the outline level.
	 * @return integer
	 */
	function GetOutlineLevel(){}

	/**
	 * Returns the space in tenths of a millimeter after the paragraph.
	 * @return integer
	 */
	function GetParagraphSpacingAfter(){}

	/**
	 * Returns the space in tenths of a millimeter before the paragraph.
	 * @return integer
	 */
	function GetParagraphSpacingBefore(){}

	/**
	 * Returns the name of the paragraph style.
	 * @return string
	 */
	function GetParagraphStyleName(){}

	/**
	 * Returns the right indent in tenths of a millimeter.
	 * @return integer
	 */
	function GetRightIndent(){}

	/**
	 * Returns the text foreground colour.
	 * @return wxColour
	 */
	function GetTextColour(){}

	/**
	 * Returns the text effect bits of interest.
	 * @return integer
	 */
	function GetTextEffectFlags(){}

	/**
	 * Returns the text effects, a bit list of styles.
	 * @return integer
	 */
	function GetTextEffects(){}

	/**
	 * Returns the URL for the content.
	 * @return string
	 */
	function GetURL(){}

	/**
	 * Returns true if the attribute object specifies alignment.
	 * @return bool
	 */
	function HasAlignment(){}

	/**
	 * Returns true if the attribute object specifies a background colour.
	 * @return bool
	 */
	function HasBackgroundColour(){}

	/**
	 * Returns true if the attribute object specifies a standard bullet name.
	 * @return bool
	 */
	function HasBulletName(){}

	/**
	 * Returns true if the attribute object specifies a bullet number.
	 * @return bool
	 */
	function HasBulletNumber(){}

	/**
	 * Returns true if the attribute object specifies a bullet style.
	 * @return bool
	 */
	function HasBulletStyle(){}

	/**
	 * Returns true if the attribute object specifies bullet text (usually specifying a symbol).
	 * @return bool
	 */
	function HasBulletText(){}

	/**
	 * Returns true if the attribute object specifies a character style name.
	 * @return bool
	 */
	function HasCharacterStyleName(){}

	/**
	 * Returns true if the flag is present in the attribute object's flag bitlist.
	 * @param integer $flag
	 * @return bool
	 */
	function HasFlag($flag){}

	/**
	 * Returns true if the attribute object specifies any font attributes.
	 * @return bool
	 */
	function HasFont(){}

	/**
	 * Returns true if the attribute object specifies an encoding.
	 * @return bool
	 */
	function HasFontEncoding(){}

	/**
	 * Returns true if the attribute object specifies a font face name.
	 * @return bool
	 */
	function HasFontFaceName(){}

	/**
	 * Returns true if the attribute object specifies a font family.
	 * @return bool
	 */
	function HasFontFamily(){}

	/**
	 * Returns true if the attribute object specifies italic style.
	 * @return bool
	 */
	function HasFontItalic(){}

	/**
	 * Returns true if the attribute object specifies a font point size.
	 * @return bool
	 */
	function HasFontSize(){}

	/**
	 * Returns true if the attribute object specifies either underlining or no underlining.
	 * @return bool
	 */
	function HasFontUnderlined(){}

	/**
	 * Returns true if the attribute object specifies font weight (bold, light or normal).
	 * @return bool
	 */
	function HasFontWeight(){}

	/**
	 * Returns true if the attribute object specifies a left indent.
	 * @return bool
	 */
	function HasLeftIndent(){}

	/**
	 * Returns true if the attribute object specifies line spacing.
	 * @return bool
	 */
	function HasLineSpacing(){}

	/**
	 * Returns true if the attribute object specifies a list style name.
	 * @return bool
	 */
	function HasListStyleName(){}

	/**
	 * Returns true if the attribute object specifies an outline level.
	 * @return bool
	 */
	function HasOutlineLevel(){}

	/**
	 * Returns true if the attribute object specifies a page break before this paragraph.
	 * @return bool
	 */
	function HasPageBreak(){}

	/**
	 * Returns true if the attribute object specifies spacing after a paragraph.
	 * @return bool
	 */
	function HasParagraphSpacingAfter(){}

	/**
	 * Returns true if the attribute object specifies spacing before a paragraph.
	 * @return bool
	 */
	function HasParagraphSpacingBefore(){}

	/**
	 * Returns true if the attribute object specifies a paragraph style name.
	 * @return bool
	 */
	function HasParagraphStyleName(){}

	/**
	 * Returns true if the attribute object specifies a right indent.
	 * @return bool
	 */
	function HasRightIndent(){}

	/**
	 * Returns true if the attribute object specifies tab stops.
	 * @return bool
	 */
	function HasTabs(){}

	/**
	 * Returns true if the attribute object specifies a text foreground colour.
	 * @return bool
	 */
	function HasTextColour(){}

	/**
	 * Returns true if the attribute object specifies text effects.
	 * @return bool
	 */
	function HasTextEffects(){}

	/**
	 * Returns true if the attribute object specifies a URL.
	 * @return bool
	 */
	function HasURL(){}

	/**
	 * Returns true if the object represents a character style, that is, the flags specify a font or a text background or foreground colour.
	 * @return bool
	 */
	function IsCharacterStyle(){}

	/**
	 * Returns false if we have any attributes set, true otherwise.
	 * @return bool
	 */
	function IsDefault(){}

	/**
	 * Returns true if the object represents a paragraph style, that is, the flags specify alignment, indentation, tabs, paragraph spacing, or bullet style.
	 * @return bool
	 */
	function IsParagraphStyle(){}

	/**
	 * Copies all defined/valid properties from overlay to current object.
	 * @param wxTextAttr $overlay
	 * @param wxTextAttr $base
	 * @return wxTextAttr
	 */
	function Merge(wxTextAttr $overlay, wxTextAttr $base, wxTextAttr $overlay){}

	/**
	 * Sets the paragraph alignment.
	 * @param wxTextAttrAlignment $alignment
	 */
	function SetAlignment(wxTextAttrAlignment $alignment){}

	/**
	 * Sets the background colour.
	 * @param wxColour $colBack
	 */
	function SetBackgroundColour(wxColour $colBack){}

	/**
	 * Sets the name of the font associated with the bullet symbol.
	 * @param string $font
	 */
	function SetBulletFont($font){}

	/**
	 * Sets the standard bullet name, applicable if the bullet style is wxTEXT_ATTR_BULLET_STYLE_STANDARD.
	 * @param string $name
	 */
	function SetBulletName($name){}

	/**
	 * Sets the bullet number.
	 * @param integer $n
	 */
	function SetBulletNumber($n){}

	/**
	 * Sets the bullet style.
	 * @param integer $style
	 */
	function SetBulletStyle($style){}

	/**
	 * Sets the bullet text, which could be a symbol, or (for example) cached outline text.
	 * @param string $text
	 */
	function SetBulletText($text){}

	/**
	 * Sets the character style name.
	 * @param string $name
	 */
	function SetCharacterStyleName($name){}

	/**
	 * Sets the flags determining which styles are being specified.
	 * @param integer $flags
	 */
	function SetFlags($flags){}

	/**
	 * Sets the attributes for the given font.
	 * @param wxFont $font
	 * @param integer $flags
	 */
	function SetFont(wxFont $font, $flags=wxTEXT_ATTR_FONT){}

	/**
	 * Sets the font encoding.
	 * @param wxFontEncoding $encoding
	 */
	function SetFontEncoding(wxFontEncoding $encoding){}

	/**
	 * Sets the font face name.
	 * @param string $faceName
	 */
	function SetFontFaceName($faceName){}

	/**
	 * Sets the font family.
	 * @param wxFontFamily $family
	 */
	function SetFontFamily(wxFontFamily $family){}

	/**
	 * Sets the font size in points.
	 * @param integer $pointSize
	 */
	function SetFontSize($pointSize){}

	/**
	 * Sets the font style (normal, italic or slanted).
	 * @param wxFontStyle $fontStyle
	 */
	function SetFontStyle(wxFontStyle $fontStyle){}

	/**
	 * Sets the font underlining.
	 * @param bool $underlined
	 */
	function SetFontUnderlined($underlined){}

	/**
	 * Sets the font weight.
	 * @param wxFontWeight $fontWeight
	 */
	function SetFontWeight(wxFontWeight $fontWeight){}

	/**
	 * Sets the left indent and left subindent in tenths of a millimetre.
	 * @param integer $indent
	 * @param integer $subIndent
	 */
	function SetLeftIndent($indent, $subIndent){}

	/**
	 * Sets the line spacing.
	 * @param integer $spacing
	 */
	function SetLineSpacing($spacing){}

	/**
	 * Sets the list style name.
	 * @param string $name
	 */
	function SetListStyleName($name){}

	/**
	 * Specifies the outline level.
	 * @param integer $level
	 */
	function SetOutlineLevel($level){}

	/**
	 * Specifies a page break before this paragraph.
	 * @param bool $pageBreak
	 */
	function SetPageBreak($pageBreak=true){}

	/**
	 * Sets the spacing after a paragraph, in tenths of a millimetre.
	 * @param integer $spacing
	 */
	function SetParagraphSpacingAfter($spacing){}

	/**
	 * Sets the spacing before a paragraph, in tenths of a millimetre.
	 * @param integer $spacing
	 */
	function SetParagraphSpacingBefore($spacing){}

	/**
	 * Sets the name of the paragraph style.
	 * @param string $name
	 */
	function SetParagraphStyleName($name){}

	/**
	 * Sets the right indent in tenths of a millimetre.
	 * @param integer $indent
	 */
	function SetRightIndent($indent){}

	/**
	 * Sets the text foreground colour.
	 * @param wxColour $colText
	 */
	function SetTextColour(wxColour $colText){}

	/**
	 * Sets the text effect bits of interest.
	 * @param integer $flags
	 */
	function SetTextEffectFlags($flags){}

	/**
	 * Sets the text effects, a bit list of styles.
	 * @param integer $effects
	 */
	function SetTextEffects($effects){}

	/**
	 * Sets the URL for the content.
	 * @param string $url
	 */
	function SetURL($url){}
}

class wxTextCompleter
{
	/**
	 * Called to retrieve the next completion.
	 * @return string
	 */
	function GetNext(){}

	/**
	 * Function called to start iteration over the completions for the given prefix.
	 * @param string $prefix
	 * @return bool
	 */
	function Start($prefix){}
}

class wxTextCompleterSimple extends wxTextCompleter
{
	/**
	 * Pure virtual method returning all possible completions for the given prefix.
	 * @param string $prefix
	 * @param array $res
	 */
	function GetCompletions($prefix, array &$res){}
}

class wxTextCtrl extends wxTextEntry
{
	/**
	 * Default ctor.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param string $value
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param wxValidator $validator
	 * @param string $name
	 */
	function __construct(wxWindow &$parent, $id, $value=wxEmptyString, wxPoint $pos=null, wxSize $size=null, $style, wxValidator $validator=null, $name=wxTextCtrlNameStr){}

	/**
	 * Creates the text control for two-step construction.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param string $value
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param wxValidator $validator
	 * @param string $name
	 * @return bool
	 */
	function Create(wxWindow &$parent, $id, $value=wxEmptyString, wxPoint $pos=null, wxSize $size=null, $style, wxValidator $validator=null, $name=wxTextCtrlNameStr){}

	/**
	 * Copies the selected text to the clipboard and removes the selection.
	 */
	function Cut(){}

	/**
	 * Resets the internal modified flag as if the current changes had been saved.
	 */
	function DiscardEdits(){}

	/**
	 * This function inserts into the control the character which would have been inserted if the given key event had occurred in the text control.
	 * @param wxKeyEvent $event
	 * @return bool
	 */
	function EmulateKeyPress(wxKeyEvent $event){}

	/**
	 * Returns the style currently used for the new text.
	 * @return wxTextAttr
	 */
	function GetDefaultStyle(){}

	/**
	 * Gets the length of the specified line, not including any trailing newline character(s).
	 * @param integer $lineNo
	 * @return integer
	 */
	function GetLineLength($lineNo){}

	/**
	 * Returns the contents of a given line in the text control, not including any trailing newline character(s).
	 * @param integer $lineNo
	 * @return string
	 */
	function GetLineText($lineNo){}

	/**
	 * Returns the number of lines in the text control buffer.
	 * @return integer
	 */
	function GetNumberOfLines(){}

	/**
	 * Returns the style at this position in the text control.
	 * @param integer $position
	 * @param wxTextAttr $style
	 * @return bool
	 */
	function GetStyle($position, wxTextAttr &$style){}

	/**
	 * Returns true if the text has been modified by user.
	 * @return bool
	 */
	function IsModified(){}

	/**
	 * Returns true if this is a multi line edit control and false otherwise.
	 * @return bool
	 */
	function IsMultiLine(){}

	/**
	 * Returns true if this is a single line edit control and false otherwise.
	 * @return bool
	 */
	function IsSingleLine(){}

	/**
	 * Loads and displays the named file, if it exists.
	 * @param string $filename
	 * @param integer $fileType
	 * @return bool
	 */
	function LoadFile($filename, $fileType=wxTEXT_TYPE_ANY){}

	/**
	 * Mark text as modified (dirty).
	 */
	function MarkDirty(){}

	/**
	 * Converts given position to a zero-based column, line number pair.
	 * @param integer $pos
	 * @param integer $x
	 * @param integer $y
	 * @return bool
	 */
	function PositionToXY($pos, &$x, &$y){}

	/**
	 * Saves the contents of the control in a text file.
	 * @param string $filename
	 * @param integer $fileType
	 * @return bool
	 */
	function SaveFile($filename=wxEmptyString, $fileType=wxTEXT_TYPE_ANY){}

	/**
	 * Changes the default style to use for the new text which is going to be added to the control using WriteText() or AppendText().
	 * @param wxTextAttr $style
	 * @return bool
	 */
	function SetDefaultStyle(wxTextAttr $style){}

	/**
	 * Marks the control as being modified by the user or not.
	 * @param bool $modified
	 */
	function SetModified($modified){}

	/**
	 * Changes the style of the given range.
	 * @param integer $start
	 * @param integer $end
	 * @param wxTextAttr $style
	 * @return bool
	 */
	function SetStyle($start, $end, wxTextAttr $style){}

	/**
	 * Makes the line containing the given position visible.
	 * @param integer $pos
	 */
	function ShowPosition($pos){}

	/**
	 * Converts the given zero based column and line number to a position.
	 * @param integer $x
	 * @param integer $y
	 * @return integer
	 */
	function XYToPosition($x, $y){}
}

class wxTextDataObject extends wxDataObjectSimple
{
	/**
	 * Constructor, may be used to initialise the text (otherwise SetText() should be used later).
	 * @param string $text
	 */
	function __construct($text=wxEmptyString){}

	/**
	 * Returns all the formats supported by wxTextDataObject.
	 * @param wxDataFormat $formats
	 * @param Direction $dir
	 */
	function GetAllFormats(wxDataFormat &$formats, $dir=Get){}

	/**
	 * Returns the preferred format supported by this object.
	 * @return wxDataFormat
	 */
	function GetFormat(){}

	/**
	 * Returns 2 under wxMac and wxGTK, where text data coming from the clipboard may be provided as ANSI (wxDF_TEXT) or as Unicode text (wxDF_UNICODETEXT, but only when wxUSE_UNICODE==1).
	 * @param Direction $dir
	 * @return integer
	 */
	function GetFormatCount($dir=Get){}

	/**
	 * Returns the text associated with the data object.
	 * @return string
	 */
	function GetText(){}

	/**
	 * Returns the data size.
	 * @return integer
	 */
	function GetTextLength(){}

	/**
	 * Sets the text associated with the data object.
	 * @param string $strText
	 */
	function SetText($strText){}
}

class wxTextDropTarget extends wxDropTarget
{
	/**
	 * Constructor.
	 */
	function __construct(){}

	/**
	 * See wxDropTarget::OnDrop().
	 * @param integer $x
	 * @param integer $y
	 * @return bool
	 */
	function OnDrop($x, $y){}

	/**
	 * Override this function to receive dropped text.
	 * @param integer $x
	 * @param integer $y
	 * @param string $data
	 * @return bool
	 */
	function OnDropText($x, $y, $data){}
}

class wxTextEntry
{
	/**
	 * Writes the text into the text control at the current insertion position.
	 * @param string $text
	 */
	function WriteText($text){}

	/**
	 * If there is an undo facility and the last operation can be undone, undoes the last operation.
	 */
	function Undo(){}

	/**
	 * Sets the new text control value.
	 * @param string $value
	 */
	function SetValue($value){}

	/**
	 * Selects the text starting at the first position up to (but not including) the character at the last position.
	 * @param integer $from
	 * @param integer $to
	 */
	function SetSelection($from, $to){}

	/**
	 * This function sets the maximum number of characters the user can enter into the control.
	 * @param integer $len
	 */
	function SetMaxLength($len){}

	/**
	 * Attempts to set the control margins.
	 * @param integer $left
	 * @param integer $top
	 * @param wxPoint $pt
	 * @return bool
	 */
	function SetMargins($left, $top=-1, wxPoint $pt){}

	/**
	 * Sets the insertion point at the end of the text control.
	 */
	function SetInsertionPointEnd(){}

	/**
	 * Sets the insertion point at the given position.
	 * @param integer $pos
	 */
	function SetInsertionPoint($pos){}

	/**
	 * Sets a hint shown in an empty unfocused text control.
	 * @param string $hint
	 * @return bool
	 */
	function SetHint($hint){}

	/**
	 * Makes the text item editable or read-only, overriding the wxTE_READONLY flag.
	 * @param bool $editable
	 */
	function SetEditable($editable){}

	/**
	 * Selects all text in the control.
	 */
	function SelectAll(){}

	/**
	 * Replaces the text starting at the first position up to (but not including) the character at the last position with the given text.
	 * @param integer $from
	 * @param integer $to
	 * @param string $value
	 */
	function Replace($from, $to, $value){}

	/**
	 * Removes the text starting at the first given position up to (but not including) the character at the last position.
	 * @param integer $from
	 * @param integer $to
	 */
	function Remove($from, $to){}

	/**
	 * If there is a redo facility and the last operation can be redone, redoes the last operation.
	 */
	function Redo(){}

	/**
	 * Pastes text from the clipboard to the text item.
	 */
	function Paste(){}

	/**
	 * Returns true if the controls contents may be edited by user (note that it always can be changed by the program).
	 * @return bool
	 */
	function IsEditable(){}

	/**
	 * Gets the contents of the control.
	 * @return string
	 */
	function GetValue(){}

	/**
	 * Gets the text currently selected in the control.
	 * @return string
	 */
	function GetStringSelection(){}

	/**
	 * Gets the current selection span.
	 * @param integer $from
	 * @param integer $to
	 */
	function GetSelection(&$from, &$to){}

	/**
	 * Returns the string containing the text starting in the positions from and up to to in the control.
	 * @param integer $from
	 * @param integer $to
	 * @return string
	 */
	function GetRange($from, $to){}

	/**
	 * Returns the margins used by the control.
	 * @return wxPoint
	 */
	function GetMargins(){}

	/**
	 * Returns the zero based index of the last position in the text control, which is equal to the number of characters in the control.
	 * @return integer
	 */
	function GetLastPosition(){}

	/**
	 * Returns the insertion point, or cursor, position.
	 * @return integer
	 */
	function GetInsertionPoint(){}

	/**
	 * Returns the current hint string.
	 * @return string
	 */
	function GetHint(){}

	/**
	 * Copies the selected text to the clipboard.
	 */
	function Copy(){}

	/**
	 * Clears the text in the control.
	 */
	function Clear(){}

	/**
	 * Sets the new text control value.
	 * @param string $value
	 */
	function ChangeValue($value){}

	/**
	 * Returns true if there is an undo facility available and the last operation can be undone.
	 * @return bool
	 */
	function CanUndo(){}

	/**
	 * Returns true if there is a redo facility available and the last operation can be redone.
	 * @return bool
	 */
	function CanRedo(){}

	/**
	 * Returns true if the contents of the clipboard can be pasted into the text control.
	 * @return bool
	 */
	function CanPaste(){}

	/**
	 * Returns true if the selection can be cut to the clipboard.
	 * @return bool
	 */
	function CanCut(){}

	/**
	 * Returns true if the selection can be copied to the clipboard.
	 * @return bool
	 */
	function CanCopy(){}

	/**
	 * Call this function to enable auto-completion of the text typed in a single-line text control using all valid file system paths.
	 * @return bool
	 */
	function AutoCompleteFileNames(){}

	/**
	 * Call this function to enable auto-completion of the text using the file system directories.
	 * @return bool
	 */
	function AutoCompleteDirectories(){}

	/**
	 * Enable auto-completion using the provided completer object.
	 * @param wxTextCompleter $completer
	 * @param array $choices
	 * @return bool
	 */
	function AutoComplete(wxTextCompleter &$completer, array $choices){}

	/**
	 * Appends the text to the end of the text control.
	 * @param string $text
	 */
	function AppendText($text){}
}

class wxTextEntryDialog extends wxDialog
{
	/**
	 * Constructor.
	 * @param wxWindow $parent
	 * @param string $message
	 * @param string $caption
	 * @param string $value
	 * @param integer $style
	 * @param wxPoint $pos
	 */
	function __construct(wxWindow &$parent, $message, $caption=wxGetTextFromUserPromptStr, $value=wxEmptyString, $style=wxTextEntryDialogStyle, wxPoint $pos=null){}

	/**
	 * Returns the text that the user has entered if the user has pressed OK, or the original value if the user has pressed Cancel.
	 * @return string
	 */
	function GetValue(){}

	/**
	 * Sets the default text value.
	 * @param string $value
	 */
	function SetValue($value){}

	/**
	 * Shows the dialog, returning wxID_OK if the user pressed OK, and wxID_CANCEL otherwise.
	 * @return integer
	 */
	function ShowModal(){}
}

class wxTextValidator extends wxValidator
{
	/**
	 * Constructor taking a style and optional pointer to a wxString variable.
	 * @param integer $style
	 * @param string $valPtr
	 */
	function __construct($style=wxFILTER_NONE, &$valPtr=NULL){}

	/**
	 * Clones the text validator using the copy constructor.
	 * @return wxObject
	 */
	function CloneMethod(){}

	/**
	 * Returns a reference to the exclude list (the list of invalid values).
	 * @return array
	 */
	function GetExcludes(){}

	/**
	 * Returns a reference to the include list (the list of valid values).
	 * @return array
	 */
	function GetIncludes(){}

	/**
	 * Returns the validator style.
	 * @return integer
	 */
	function GetStyle(){}

	/**
	 * Returns true if the given style bit is set in the current style.
	 * @param wxTextValidatorStyle $style
	 * @return bool
	 */
	function HasFlag(wxTextValidatorStyle $style){}

	/**
	 * Returns the error message if the contents of val are invalid or the empty string if val is valid.
	 * @param string $val
	 * @return string
	 */
	function IsValid($val){}

	/**
	 * Breaks the given chars strings in single characters and sets the internal wxArrayString used to store the "excluded" characters (see SetExcludes()).
	 * @param string $chars
	 */
	function SetCharExcludes($chars){}

	/**
	 * Breaks the given chars strings in single characters and sets the internal wxArrayString used to store the "included" characters (see SetIncludes()).
	 * @param string $chars
	 */
	function SetCharIncludes($chars){}

	/**
	 * Sets the exclude list (invalid values for the user input).
	 * @param array $stringList
	 */
	function SetExcludes(array $stringList){}

	/**
	 * Sets the include list (valid values for the user input).
	 * @param array $stringList
	 */
	function SetIncludes(array $stringList){}

	/**
	 * Sets the validator style which must be a combination of one or more of the wxTextValidatorStyle values.
	 * @param integer $style
	 */
	function SetStyle($style){}

	/**
	 * Transfers the value in the text control to the string.
	 * @return bool
	 */
	function TransferFromWindow(){}

	/**
	 * Transfers the string value to the text control.
	 * @return bool
	 */
	function TransferToWindow(){}

	/**
	 * Validates the window contents against the include or exclude lists, depending on the validator style.
	 * @param wxWindow $parent
	 * @return bool
	 */
	function Validate(wxWindow &$parent){}
}

class wxThread
{
	/**
	 * This constructor creates a new detached (default) or joinable C++ thread object.
	 * @param wxThreadKind $kind
	 */
	function __construct(wxThreadKind $kind=null){}

	/**
	 * Creates a new thread.
	 * @param integer $stackSize
	 * @return wxThreadError
	 */
	function Create($stackSize){}

	/**
	 * Calling Delete() gracefully terminates a detached thread, either when the thread calls TestDestroy() or when it finishes processing.
	 * @param mixed $rc
	 * @param wxThreadWait $waitMode
	 * @return wxThreadError
	 */
	function Delete($rc=NULL, wxThreadWait $waitMode=null){}

	/**
	 * This is the entry point of the thread.
	 * @return mixed
	 */
	function Entry(){}

	/**
	 * Returns the number of system CPUs or -1 if the value is unknown.
	 * @return integer
	 */
	function GetCPUCount(){}

	/**
	 * Returns the platform specific thread ID of the current thread as a long.
	 * @return integer
	 */
	function GetCurrentId(){}

	/**
	 * Gets the thread identifier: this is a platform dependent number that uniquely identifies the thread throughout the system during its existence (i.e.
	 * @return integer
	 */
	function GetId(){}

	/**
	 * Returns the thread kind as it was given in the ctor.
	 * @return wxThreadKind
	 */
	function GetKind(){}

	/**
	 * Returns the thread ID of the main thread.
	 * @return integer
	 */
	function GetMainId(){}

	/**
	 * Gets the priority of the thread, between zero and 100.
	 * @return integer
	 */
	function GetPriority(){}

	/**
	 * Returns true if the thread is alive (i.e.
	 * @return bool
	 */
	function IsAlive(){}

	/**
	 * Returns true if the thread is of the detached kind, false if it is a joinable one.
	 * @return bool
	 */
	function IsDetached(){}

	/**
	 * Returns true if the calling thread is the main application thread.
	 * @return bool
	 */
	function IsMain(){}

	/**
	 * Returns true if the thread is paused.
	 * @return bool
	 */
	function IsPaused(){}

	/**
	 * Returns true if the thread is running.
	 * @return bool
	 */
	function IsRunning(){}

	/**
	 * Immediately terminates the target thread.
	 * @return wxThreadError
	 */
	function Kill(){}

	/**
	 * Suspends the thread.
	 * @return wxThreadError
	 */
	function Pause(){}

	/**
	 * Resumes a thread suspended by the call to Pause().
	 * @return wxThreadError
	 */
	function Resume(){}

	/**
	 * Starts the thread execution.
	 * @return wxThreadError
	 */
	function Run(){}

	/**
	 * Sets the thread concurrency level for this process.
	 * @param integer $level
	 * @return bool
	 */
	function SetConcurrency($level){}

	/**
	 * Sets the priority of the thread, between 0 and 100.
	 * @param integer $priority
	 */
	function SetPriority($priority){}

	/**
	 * Pauses the thread execution for the given amount of time.
	 * @param integer $milliseconds
	 */
	function Sleep($milliseconds){}

	/**
	 * This function should be called periodically by the thread to ensure that calls to Pause() and Delete() will work.
	 * @return bool
	 */
	function TestDestroy(){}

	/**
	 * Return the thread object for the calling thread.
	 * @return wxThread
	 */
	function This(){}

	/**
	 * Waits for a joinable thread to terminate and returns the value the thread returned from Entry() or "(ExitCode)-1" on error.
	 * @param wxThreadWait $flags
	 * @return mixed
	 */
	function Wait(wxThreadWait $flags=null){}

	/**
	 * Give the rest of the thread's time-slice to the system allowing the other threads to run.
	 */
	function Yield(){}
}

class wxThreadEvent extends wxEvent
{
	/**
	 * Constructor.
	 * @param integer $eventType
	 * @param integer $id
	 */
	function __construct($eventType=wxEVT_THREAD, $id=wxID_ANY){}

	/**
	 * Clones this event making sure that all internal members which use COW (only m_commandString for now; see Reference Counting) are unshared (see wxObject::UnShare).
	 * @return wxEvent
	 */
	function CloneMethod(){}

	/**
	 * Returns wxEVT_CATEGORY_THREAD.
	 * @return wxEventCategory
	 */
	function GetEventCategory(){}

	/**
	 * Returns extra information integer value.
	 * @return integer
	 */
	function GetExtraLong(){}

	/**
	 * Returns stored integer value.
	 * @return integer
	 */
	function GetInt(){}

	/**
	 * Returns stored string value.
	 * @return string
	 */
	function GetString(){}

	/**
	 * Sets the extra information value.
	 * @param integer $extraLong
	 */
	function SetExtraLong($extraLong){}

	/**
	 * Sets the integer value.
	 * @param integer $intCommand
	 */
	function SetInt($intCommand){}

	/**
	 * Sets the string value.
	 * @param string $string
	 */
	function SetString($string){}
}

class wxThreadHelper
{
	/**
	 * This is a public function that returns the wxThread object associated with the thread.
	 * @return wxThread
	 */
	function GetThread(){}

	/**
	 * Creates a new thread of the given kind.
	 * @param wxThreadKind $kind
	 * @param integer $stackSize
	 * @return wxThreadError
	 */
	function CreateThread(wxThreadKind $kind=null, $stackSize){}

	/**
	 * Create
	 * @param integer $stackSize
	 * @return wxThreadError
	 */
	function Create($stackSize){}
}

class wxTimePickerCtrl extends wxControl
{
	/**
	 * Initializes the object and calls Create() with all the parameters.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param timestamp $dt
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param wxValidator $validator
	 * @param string $name
	 */
	function __construct(wxWindow &$parent, $id, $dt=wxDefaultDateTime, wxPoint $pos=null, wxSize $size=null, $style=wxTP_DEFAULT, wxValidator $validator=null, $name="timectrl"){}

	/**
	 * Create the control window.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param timestamp $dt
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param wxValidator $validator
	 * @param string $name
	 * @return bool
	 */
	function Create(wxWindow &$parent, $id, $dt=wxDefaultDateTime, wxPoint $pos=null, wxSize $size=null, $style=null, wxValidator $validator=null, $name="timectrl"){}

	/**
	 * Returns the currently entered time.
	 * @return timestamp
	 */
	function GetValue(){}

	/**
	 * Changes the current value of the control.
	 * @param timestamp $dt
	 */
	function SetValue($dt){}
}

class wxTimer extends wxEvtHandler
{
	/**
	 * Default constructor.
	 * @param wxEvtHandler $owner
	 * @param integer $id
	 */
	function __construct(wxEvtHandler &$owner, $id=-1){}

	/**
	 * Returns the ID of the events generated by this timer.
	 * @return integer
	 */
	function GetId(){}

	/**
	 * Returns the current interval for the timer (in milliseconds).
	 * @return integer
	 */
	function GetInterval(){}

	/**
	 * Returns the current owner of the timer.
	 * @return wxEvtHandler
	 */
	function GetOwner(){}

	/**
	 * Returns true if the timer is one shot, i.e.
	 * @return bool
	 */
	function IsOneShot(){}

	/**
	 * Returns true if the timer is running, false if it is stopped.
	 * @return bool
	 */
	function IsRunning(){}

	/**
	 * This member should be overridden by the user if the default constructor was used and SetOwner() wasn't called.
	 */
	function Notify(){}

	/**
	 * Associates the timer with the given owner object.
	 * @param wxEvtHandler $owner
	 * @param integer $id
	 */
	function SetOwner(wxEvtHandler &$owner, $id=-1){}

	/**
	 * (Re)starts the timer.
	 * @param integer $milliseconds
	 * @param bool $oneShot
	 * @return bool
	 */
	function Start($milliseconds=-1, $oneShot=false){}

	/**
	 * Stops the timer.
	 */
	function Stop(){}
}

class wxTimerEvent extends wxEvent
{
	/**
	 * wxTimerEvent
	 * @param wxTimer $timer
	 */
	function __construct(wxTimer &$timer){}

	/**
	 * Returns the interval of the timer which generated this event.
	 * @return integer
	 */
	function GetInterval(){}
}

class wxTimerRunner
{
	/**
	 * wxTimerRunner
	 * @param wxTimer $timer
	 * @param integer $milli
	 * @param bool $oneShot
	 */
	function __construct(wxTimer &$timer, wxTimer &$timer, $milli, $oneShot=false){}

	/**
	 * Start
	 * @param integer $milli
	 * @param bool $oneShot
	 */
	function Start($milli, $oneShot=false){}
}

class wxToggleButton extends wxAnyButton
{
	/**
	 * Default constructor.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param string $label
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param wxValidator $val
	 * @param string $name
	 */
	function __construct(wxWindow &$parent, $id, $label, wxPoint $pos=null, wxSize $size=null, $style, wxValidator $val=null, $name=wxCheckBoxNameStr){}

	/**
	 * Creates the toggle button for two-step construction.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param string $label
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param wxValidator $val
	 * @param string $name
	 * @return bool
	 */
	function Create(wxWindow &$parent, $id, $label, wxPoint $pos=null, wxSize $size=null, $style, wxValidator $val=null, $name=wxCheckBoxNameStr){}

	/**
	 * Gets the state of the toggle button.
	 * @return bool
	 */
	function GetValue(){}

	/**
	 * Sets the toggle button to the given state.
	 * @param bool $state
	 */
	function SetValue($state){}
}

class wxToolBar extends wxControl
{
	/**
	 * Default constructor.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param string $name
	 */
	function __construct(wxWindow &$parent, $id, wxPoint $pos=null, wxSize $size=null, $style=wxTB_HORIZONTAL, $name=wxToolBarNameStr){}

	/**
	 * Adds a new check (or toggle) tool to the toolbar.
	 * @param integer $toolId
	 * @param string $label
	 * @param wxBitmap $bitmap1
	 * @param wxBitmap $bmpDisabled
	 * @param string $shortHelp
	 * @param string $longHelp
	 * @param wxObject $clientData
	 * @return wxToolBarToolBase
	 */
	function AddCheckTool($toolId, $label, wxBitmap $bitmap1, wxBitmap $bmpDisabled=null, $shortHelp=wxEmptyString, $longHelp=wxEmptyString, wxObject &$clientData=null){}

	/**
	 * Adds any control to the toolbar, typically e.g.
	 * @param wxControl $control
	 * @param string $label
	 * @return wxToolBarToolBase
	 */
	function AddControl(wxControl &$control, $label=wxEmptyString){}

	/**
	 * Adds a new radio tool to the toolbar.
	 * @param integer $toolId
	 * @param string $label
	 * @param wxBitmap $bitmap1
	 * @param wxBitmap $bmpDisabled
	 * @param string $shortHelp
	 * @param string $longHelp
	 * @param wxObject $clientData
	 * @return wxToolBarToolBase
	 */
	function AddRadioTool($toolId, $label, wxBitmap $bitmap1, wxBitmap $bmpDisabled=null, $shortHelp=wxEmptyString, $longHelp=wxEmptyString, wxObject &$clientData=null){}

	/**
	 * Adds a separator for spacing groups of tools.
	 * @return wxToolBarToolBase
	 */
	function AddSeparator(){}

	/**
	 * Adds a stretchable space to the toolbar.
	 * @return wxToolBarToolBase
	 */
	function AddStretchableSpace(){}

	/**
	 * Adds a tool to the toolbar.
	 * @param integer $toolId
	 * @param string $label
	 * @param wxBitmap $bitmap
	 * @param string $shortHelp
	 * @param wxItemKind $kind
	 * @param wxBitmap $bmpDisabled
	 * @param string $shortHelpString
	 * @param string $longHelpString
	 * @param wxObject $clientData
	 * @return wxToolBarToolBase
	 */
	function AddTool($toolId, $label, wxBitmap $bitmap, $shortHelp=wxEmptyString, wxItemKind $kind=null, $toolId, $label, wxBitmap $bitmap, wxBitmap $bmpDisabled, wxItemKind $kind=null, $shortHelpString=wxEmptyString, $longHelpString=wxEmptyString, wxObject &$clientData=null){}

	/**
	 * Deletes all the tools in the toolbar.
	 */
	function ClearTools(){}

	/**
	 * Removes the specified tool from the toolbar and deletes it.
	 * @param integer $toolId
	 * @return bool
	 */
	function DeleteTool($toolId){}

	/**
	 * This function behaves like DeleteTool() but it deletes the tool at the specified position and not the one with the given id.
	 * @param integer $pos
	 * @return bool
	 */
	function DeleteToolByPos($pos){}

	/**
	 * Enables or disables the tool.
	 * @param integer $toolId
	 * @param bool $enable
	 */
	function EnableTool($toolId, $enable){}

	/**
	 * Returns a pointer to the tool identified by id or NULL if no corresponding tool is found.
	 * @param integer $id
	 * @return wxToolBarToolBase
	 */
	function FindById($id){}

	/**
	 * Returns a pointer to the control identified by id or NULL if no corresponding control is found.
	 * @param integer $id
	 * @return wxControl
	 */
	function FindControl($id){}

	/**
	 * Finds a tool for the given mouse position.
	 * @param integer $x
	 * @param integer $y
	 * @return wxToolBarToolBase
	 */
	function FindToolForPosition($x, $y){}

	/**
	 * Returns the left/right and top/bottom margins, which are also used for inter-toolspacing.
	 * @return wxSize
	 */
	function GetMargins(){}

	/**
	 * Returns the size of bitmap that the toolbar expects to have.
	 * @return wxSize
	 */
	function GetToolBitmapSize(){}

	/**
	 * Returns a pointer to the tool at ordinal position pos.
	 * @param integer $pos
	 * @return wxToolBarToolBase
	 */
	function GetToolByPos($pos){}

	/**
	 * Get any client data associated with the tool.
	 * @param integer $toolId
	 * @return wxObject
	 */
	function GetToolClientData($toolId){}

	/**
	 * Called to determine whether a tool is enabled (responds to user input).
	 * @param integer $toolId
	 * @return bool
	 */
	function GetToolEnabled($toolId){}

	/**
	 * Returns the long help for the given tool.
	 * @param integer $toolId
	 * @return string
	 */
	function GetToolLongHelp($toolId){}

	/**
	 * Returns the value used for packing tools.
	 * @return integer
	 */
	function GetToolPacking(){}

	/**
	 * Returns the tool position in the toolbar, or wxNOT_FOUND if the tool is not found.
	 * @param integer $toolId
	 * @return integer
	 */
	function GetToolPos($toolId){}

	/**
	 * Returns the default separator size.
	 * @return integer
	 */
	function GetToolSeparation(){}

	/**
	 * Returns the short help for the given tool.
	 * @param integer $toolId
	 * @return string
	 */
	function GetToolShortHelp($toolId){}

	/**
	 * Returns the size of a whole button, which is usually larger than a tool bitmap because of added 3D effects.
	 * @return wxSize
	 */
	function GetToolSize(){}

	/**
	 * Gets the on/off state of a toggle tool.
	 * @param integer $toolId
	 * @return bool
	 */
	function GetToolState($toolId){}

	/**
	 * Returns the number of tools in the toolbar.
	 * @return integer
	 */
	function GetToolsCount(){}

	/**
	 * Inserts the control into the toolbar at the given position.
	 * @param integer $pos
	 * @param wxControl $control
	 * @param string $label
	 * @return wxToolBarToolBase
	 */
	function InsertControl($pos, wxControl &$control, $label=wxEmptyString){}

	/**
	 * Inserts the separator into the toolbar at the given position.
	 * @param integer $pos
	 * @return wxToolBarToolBase
	 */
	function InsertSeparator($pos){}

	/**
	 * Inserts a stretchable space at the given position.
	 * @param integer $pos
	 * @return wxToolBarToolBase
	 */
	function InsertStretchableSpace($pos){}

	/**
	 * Inserts the tool with the specified attributes into the toolbar at the given position.
	 * @param integer $pos
	 * @param wxToolBarToolBase $tool
	 * @param integer $toolId
	 * @param string $label
	 * @param wxBitmap $bitmap
	 * @param wxBitmap $bmpDisabled
	 * @param wxItemKind $kind
	 * @param string $shortHelp
	 * @param string $longHelp
	 * @param wxObject $clientData
	 * @return wxToolBarToolBase
	 */
	function InsertTool($pos, wxToolBarToolBase &$tool, $pos, $toolId, $label, wxBitmap $bitmap, wxBitmap $bmpDisabled=null, wxItemKind $kind=null, $shortHelp=wxEmptyString, $longHelp=wxEmptyString, wxObject &$clientData=null){}

	/**
	 * Called when the user clicks on a tool with the left mouse button.
	 * @param integer $toolId
	 * @param bool $toggleDown
	 * @return bool
	 */
	function OnLeftClick($toolId, $toggleDown){}

	/**
	 * This is called when the mouse cursor moves into a tool or out of the toolbar.
	 * @param integer $toolId
	 */
	function OnMouseEnter($toolId){}

	/**
	 * OnRightClick
	 * @param integer $toolId
	 * @param integer $x
	 * @param integer $y
	 */
	function OnRightClick($toolId, $x, $y){}

	/**
	 * This function should be called after you have added tools.
	 * @return bool
	 */
	function Realize(){}

	/**
	 * Removes the given tool from the toolbar but doesn't delete it.
	 * @param integer $id
	 * @return wxToolBarToolBase
	 */
	function RemoveTool($id){}

	/**
	 * Sets the dropdown menu for the tool given by its id.
	 * @param integer $id
	 * @param wxMenu $menu
	 * @return bool
	 */
	function SetDropdownMenu($id, wxMenu &$menu){}

	/**
	 * Set the margins for the toolbar.
	 * @param wxSize $size
	 */
	function SetMargins(wxSize $size){}

	/**
	 * Sets the default size of each tool bitmap.
	 * @param wxSize $size
	 */
	function SetToolBitmapSize(wxSize $size){}

	/**
	 * Sets the client data associated with the tool.
	 * @param integer $id
	 * @param wxObject $clientData
	 */
	function SetToolClientData($id, wxObject &$clientData){}

	/**
	 * Sets the bitmap to be used by the tool with the given ID when the tool is in a disabled state.
	 * @param integer $id
	 * @param wxBitmap $bitmap
	 */
	function SetToolDisabledBitmap($id, wxBitmap $bitmap){}

	/**
	 * Sets the long help for the given tool.
	 * @param integer $toolId
	 * @param string $helpString
	 */
	function SetToolLongHelp($toolId, $helpString){}

	/**
	 * Sets the bitmap to be used by the tool with the given ID.
	 * @param integer $id
	 * @param wxBitmap $bitmap
	 */
	function SetToolNormalBitmap($id, wxBitmap $bitmap){}

	/**
	 * Sets the value used for spacing tools.
	 * @param integer $packing
	 */
	function SetToolPacking($packing){}

	/**
	 * Sets the default separator size.
	 * @param integer $separation
	 */
	function SetToolSeparation($separation){}

	/**
	 * Sets the short help for the given tool.
	 * @param integer $toolId
	 * @param string $helpString
	 */
	function SetToolShortHelp($toolId, $helpString){}

	/**
	 * Toggles a tool on or off.
	 * @param integer $toolId
	 * @param bool $toggle
	 */
	function ToggleTool($toolId, $toggle){}
}

class wxToolBarToolBase extends wxObject
{
	/**
	 * Detach
	 */
	function Detach(){}

	/**
	 * CanBeToggled
	 * @return bool
	 */
	function CanBeToggled(){}

	/**
	 * Enable
	 * @param bool $enable
	 * @return bool
	 */
	function Enable($enable){}

	/**
	 * GetBitmap
	 * @return wxBitmap
	 */
	function GetBitmap(){}

	/**
	 * GetClientData
	 * @return wxObject
	 */
	function GetClientData(){}

	/**
	 * GetControl
	 * @return wxControl
	 */
	function GetControl(){}

	/**
	 * GetDisabledBitmap
	 * @return wxBitmap
	 */
	function GetDisabledBitmap(){}

	/**
	 * GetDropdownMenu
	 * @return wxMenu
	 */
	function GetDropdownMenu(){}

	/**
	 * GetId
	 * @return integer
	 */
	function GetId(){}

	/**
	 * GetKind
	 * @return wxItemKind
	 */
	function GetKind(){}

	/**
	 * GetLabel
	 * @return string
	 */
	function GetLabel(){}

	/**
	 * GetLongHelp
	 * @return string
	 */
	function GetLongHelp(){}

	/**
	 * GetNormalBitmap
	 * @return wxBitmap
	 */
	function GetNormalBitmap(){}

	/**
	 * GetShortHelp
	 * @return string
	 */
	function GetShortHelp(){}

	/**
	 * GetStyle
	 * @return integer
	 */
	function GetStyle(){}

	/**
	 * IsButton
	 * @return bool
	 */
	function IsButton(){}

	/**
	 * IsControl
	 * @return bool
	 */
	function IsControl(){}

	/**
	 * IsEnabled
	 * @return bool
	 */
	function IsEnabled(){}

	/**
	 * IsSeparator
	 * @return bool
	 */
	function IsSeparator(){}

	/**
	 * IsStretchable
	 * @return bool
	 */
	function IsStretchable(){}

	/**
	 * IsStretchableSpace
	 * @return bool
	 */
	function IsStretchableSpace(){}

	/**
	 * IsToggled
	 * @return bool
	 */
	function IsToggled(){}

	/**
	 * MakeStretchable
	 */
	function MakeStretchable(){}

	/**
	 * SetDropdownMenu
	 * @param wxMenu $menu
	 */
	function SetDropdownMenu(wxMenu &$menu){}

	/**
	 * SetLabel
	 * @param string $label
	 */
	function SetLabel($label){}

	/**
	 * SetLongHelp
	 * @param string $help
	 * @return bool
	 */
	function SetLongHelp($help){}

	/**
	 * SetNormalBitmap
	 * @param wxBitmap $bmp
	 */
	function SetNormalBitmap(wxBitmap $bmp){}

	/**
	 * SetShortHelp
	 * @param string $help
	 * @return bool
	 */
	function SetShortHelp($help){}

	/**
	 * SetToggle
	 * @param bool $toggle
	 * @return bool
	 */
	function SetToggle($toggle){}

	/**
	 * Toggle
	 */
	function Toggle(){}

	/**
	 * SetDisabledBitmap
	 * @param wxBitmap $bmp
	 */
	function SetDisabledBitmap(wxBitmap $bmp){}

	/**
	 * SetClientData
	 * @param wxObject $clientData
	 */
	function SetClientData(wxObject &$clientData){}
}

class wxToolTip extends wxObject
{
	/**
	 * Constructor.
	 * @param string $tip
	 */
	function __construct($tip){}

	/**
	 * Enable or disable tooltips globally.
	 * @param bool $flag
	 */
	function Enable($flag){}

	/**
	 * Get the tooltip text.
	 * @return string
	 */
	function GetTip(){}

	/**
	 * Get the associated window.
	 * @return wxWindow
	 */
	function GetWindow(){}

	/**
	 * Set the delay after which the tooltip disappears or how long a tooltip remains visible.
	 * @param integer $msecs
	 */
	function SetAutoPop($msecs){}

	/**
	 * Set the delay after which the tooltip appears.
	 * @param integer $msecs
	 */
	function SetDelay($msecs){}

	/**
	 * Set the delay between subsequent tooltips to appear.
	 * @param integer $msecs
	 */
	function SetReshow($msecs){}

	/**
	 * Set the tooltip text.
	 * @param string $tip
	 */
	function SetTip($tip){}
}

class wxToolbook extends wxBookCtrlBase
{
	/**
	 * Constructs a choicebook control.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param string $name
	 */
	function __construct(wxWindow &$parent, $id, wxPoint $pos=null, wxSize $size=null, $style, $name=wxEmptyString){}

	/**
	 * Returns the wxToolBarBase associated with the control.
	 * @return wxToolBar
	 */
	function GetToolBar(){}
}

class wxTopLevelWindow extends wxNonOwnedWindow
{
	/**
	 * Default ctor.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param string $title
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param string $name
	 */
	function __construct(wxWindow &$parent, $id, $title, wxPoint $pos=null, wxSize $size=null, $style=wxDEFAULT_FRAME_STYLE, $name=wxFrameNameStr){}

	/**
	 * Returns true if the platform supports making the window translucent.
	 * @return bool
	 */
	function CanSetTransparent(){}

	/**
	 * A synonym for CentreOnScreen().
	 * @param integer $direction
	 */
	function CenterOnScreen($direction){}

	/**
	 * Centres the window on screen.
	 * @param integer $direction
	 */
	function CentreOnScreen($direction=wxBOTH){}

	/**
	 * Creates the top level window.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param string $title
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param string $name
	 * @return bool
	 */
	function Create(wxWindow &$parent, $id, $title, wxPoint $pos=null, wxSize $size=null, $style=wxDEFAULT_FRAME_STYLE, $name=wxFrameNameStr){}

	/**
	 * Returns a pointer to the button which is the default for this window, or  NULL.
	 * @return wxWindow
	 */
	function GetDefaultItem(){}

	/**
	 * Get the default size for a new top level window.
	 * @return wxSize
	 */
	function GetDefaultSize(){}

	/**
	 * Returns the standard icon of the window.
	 * @return wxIcon
	 */
	function GetIcon(){}

	/**
	 * Returns all icons associated with the window, there will be none of them if neither SetIcon() nor SetIcons() had been called before.
	 * @return wxIconBundle
	 */
	function GetIcons(){}

	/**
	 * Gets a string containing the window title.
	 * @return string
	 */
	function GetTitle(){}

	/**
	 * GetTmpDefaultItem
	 * @return wxWindow
	 */
	function GetTmpDefaultItem(){}

	/**
	 * Iconizes or restores the window.
	 * @param bool $iconize
	 */
	function Iconize($iconize=true){}

	/**
	 * Returns true if this window is currently active, i.e.
	 * @return bool
	 */
	function IsActive(){}

	/**
	 * Returns true if this window is expected to be always maximized, either due to platform policy or due to local policy regarding particular class.
	 * @return bool
	 */
	function IsAlwaysMaximized(){}

	/**
	 * Returns true if the window is in fullscreen mode.
	 * @return bool
	 */
	function IsFullScreen(){}

	/**
	 * Returns true if the window is iconized.
	 * @return bool
	 */
	function IsIconized(){}

	/**
	 * Returns true if the window is maximized.
	 * @return bool
	 */
	function IsMaximized(){}

	/**
	 * See wxWindow::SetAutoLayout(): when auto layout is on, this function gets called automatically when the window is resized.
	 * @return bool
	 */
	function Layout(){}

	/**
	 * Maximizes or restores the window.
	 * @param bool $maximize
	 */
	function Maximize($maximize=true){}

	/**
	 * Use a system-dependent way to attract users attention to the window when it is in background.
	 * @param integer $flags
	 */
	function RequestUserAttention($flags=wxUSER_ATTENTION_INFO){}

	/**
	 * Changes the default item for the panel, usually win is a button.
	 * @param wxWindow $win
	 * @return wxWindow
	 */
	function SetDefaultItem(wxWindow &$win){}

	/**
	 * Sets the icon for this window.
	 * @param wxIcon $icon
	 */
	function SetIcon(wxIcon $icon){}

	/**
	 * Sets several icons of different sizes for this window: this allows to use different icons for different situations (e.g.
	 * @param wxIconBundle $icons
	 */
	function SetIcons(wxIconBundle $icons){}

	/**
	 * A simpler interface for setting the size hints than SetSizeHints().
	 * @param wxSize $size
	 */
	function SetMaxSize(wxSize $size){}

	/**
	 * A simpler interface for setting the size hints than SetSizeHints().
	 * @param wxSize $size
	 */
	function SetMinSize(wxSize $size){}

	/**
	 * Allows specification of minimum and maximum window sizes, and window size increments.
	 * @param integer $minW
	 * @param integer $minH
	 * @param integer $maxW
	 * @param integer $maxH
	 * @param integer $incW
	 * @param integer $incH
	 * @param wxSize $minSize
	 * @param wxSize $maxSize
	 * @param wxSize $incSize
	 */
	function SetSizeHints($minW, $minH, $maxW=-1, $maxH=-1, $incW=-1, $incH=-1, wxSize $minSize, wxSize $maxSize=null, wxSize $incSize=null){}

	/**
	 * Sets the window title.
	 * @param string $title
	 */
	function SetTitle($title){}

	/**
	 * SetTmpDefaultItem
	 * @param wxWindow $win
	 * @return wxWindow
	 */
	function SetTmpDefaultItem(wxWindow &$win){}

	/**
	 * If the platform supports it will set the window to be translucent.
	 * @param integer $alpha
	 * @return bool
	 */
	function SetTransparent($alpha){}

	/**
	 * This virtual function is not meant to be called directly but can be overridden to return false (it returns true by default) to allow the application to close even if this, presumably not very important, window is still opened.
	 * @return bool
	 */
	function ShouldPreventAppExit(){}

	/**
	 * Depending on the value of show parameter the window is either shown full screen or restored to its normal state.
	 * @param bool $show
	 * @param integer $style
	 * @return bool
	 */
	function ShowFullScreen($show, $style=wxFULLSCREEN_ALL){}
}

class wxTreeCtrl extends wxControl
{
	/**
	 * Default Constructor.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param wxValidator $validator
	 * @param string $name
	 */
	function __construct(wxWindow &$parent, $id=wxID_ANY, wxPoint $pos=null, wxSize $size=null, $style=wxTR_DEFAULT_STYLE, wxValidator $validator=null, $name=wxTreeCtrlNameStr){}

	/**
	 * Adds the root node to the tree, returning the new item.
	 * @param string $text
	 * @param integer $image
	 * @param integer $selImage
	 * @param wxTreeItemData $data
	 * @return wxTreeItemId
	 */
	function AddRoot($text, $image=-1, $selImage=-1, wxTreeItemData &$data=null){}

	/**
	 * Appends an item to the end of the branch identified by parent, return a new item id.
	 * @param wxTreeItemId $parent
	 * @param string $text
	 * @param integer $image
	 * @param integer $selImage
	 * @param wxTreeItemData $data
	 * @return wxTreeItemId
	 */
	function AppendItem(wxTreeItemId $parent, $text, $image=-1, $selImage=-1, wxTreeItemData &$data=null){}

	/**
	 * Sets the normal image list.
	 * @param wxImageList $imageList
	 */
	function AssignImageList(wxImageList &$imageList){}

	/**
	 * Sets the state image list.
	 * @param wxImageList $imageList
	 */
	function AssignStateImageList(wxImageList &$imageList){}

	/**
	 * Clears the currently focused item.
	 */
	function ClearFocusedItem(){}

	/**
	 * Collapses the given item.
	 * @param wxTreeItemId $item
	 */
	function Collapse(wxTreeItemId $item){}

	/**
	 * Collapses the root item.
	 */
	function CollapseAll(){}

	/**
	 * Collapses this item and all of its children, recursively.
	 * @param wxTreeItemId $item
	 */
	function CollapseAllChildren(wxTreeItemId $item){}

	/**
	 * Collapses the given item and removes all children.
	 * @param wxTreeItemId $item
	 */
	function CollapseAndReset(wxTreeItemId $item){}

	/**
	 * Creates the tree control.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param wxValidator $validator
	 * @param string $name
	 * @return bool
	 */
	function Create(wxWindow &$parent, $id=wxID_ANY, wxPoint $pos=null, wxSize $size=null, $style=wxTR_DEFAULT_STYLE, wxValidator $validator=null, $name=wxTreeCtrlNameStr){}

	/**
	 * Deletes the specified item.
	 * @param wxTreeItemId $item
	 */
	function Delete(wxTreeItemId $item){}

	/**
	 * Deletes all items in the control.
	 */
	function DeleteAllItems(){}

	/**
	 * Deletes all children of the given item (but not the item itself).
	 * @param wxTreeItemId $item
	 */
	function DeleteChildren(wxTreeItemId $item){}

	/**
	 * Ends label editing.
	 * @param wxTreeItemId $item
	 * @param bool $discardChanges
	 */
	function EndEditLabel(wxTreeItemId $item, $discardChanges=false){}

	/**
	 * Scrolls and/or expands items to ensure that the given item is visible.
	 * @param wxTreeItemId $item
	 */
	function EnsureVisible(wxTreeItemId $item){}

	/**
	 * Expands the given item.
	 * @param wxTreeItemId $item
	 */
	function Expand(wxTreeItemId $item){}

	/**
	 * Expands all items in the tree.
	 */
	function ExpandAll(){}

	/**
	 * Expands the given item and all its children recursively.
	 * @param wxTreeItemId $item
	 */
	function ExpandAllChildren(wxTreeItemId $item){}

	/**
	 * Retrieves the rectangle bounding the item.
	 * @param wxTreeItemId $item
	 * @param wxRect $rect
	 * @param bool $textOnly
	 * @return bool
	 */
	function GetBoundingRect(wxTreeItemId $item, wxRect &$rect, $textOnly=false){}

	/**
	 * Returns the number of items in the branch.
	 * @param wxTreeItemId $item
	 * @param bool $recursively
	 * @return integer
	 */
	function GetChildrenCount(wxTreeItemId $item, $recursively=true){}

	/**
	 * Returns the number of items in the control.
	 * @return integer
	 */
	function GetCount(){}

	/**
	 * Returns the edit control being currently used to edit a label.
	 * @return wxTextCtrl
	 */
	function GetEditControl(){}

	/**
	 * Returns the first visible item.
	 * @return wxTreeItemId
	 */
	function GetFirstVisibleItem(){}

	/**
	 * Returns the item last clicked or otherwise selected.
	 * @return wxTreeItemId
	 */
	function GetFocusedItem(){}

	/**
	 * Returns the normal image list.
	 * @return wxImageList
	 */
	function GetImageList(){}

	/**
	 * Returns the current tree control indentation.
	 * @return integer
	 */
	function GetIndent(){}

	/**
	 * Returns the background colour of the item.
	 * @param wxTreeItemId $item
	 * @return wxColour
	 */
	function GetItemBackgroundColour(wxTreeItemId $item){}

	/**
	 * Returns the tree item data associated with the item.
	 * @param wxTreeItemId $item
	 * @return wxTreeItemData
	 */
	function GetItemData(wxTreeItemId $item){}

	/**
	 * Returns the font of the item label.
	 * @param wxTreeItemId $item
	 * @return wxFont
	 */
	function GetItemFont(wxTreeItemId $item){}

	/**
	 * Gets the specified item image.
	 * @param wxTreeItemId $item
	 * @param wxTreeItemIcon $which
	 * @return integer
	 */
	function GetItemImage(wxTreeItemId $item, wxTreeItemIcon $which=null){}

	/**
	 * Returns the item's parent.
	 * @param wxTreeItemId $item
	 * @return wxTreeItemId
	 */
	function GetItemParent(wxTreeItemId $item){}

	/**
	 * Gets the specified item state.
	 * @param wxTreeItemId $item
	 * @return integer
	 */
	function GetItemState(wxTreeItemId $item){}

	/**
	 * Returns the item label.
	 * @param wxTreeItemId $item
	 * @return string
	 */
	function GetItemText(wxTreeItemId $item){}

	/**
	 * Returns the colour of the item label.
	 * @param wxTreeItemId $item
	 * @return wxColour
	 */
	function GetItemTextColour(wxTreeItemId $item){}

	/**
	 * Returns the last child of the item (or an invalid tree item if this item has no children).
	 * @param wxTreeItemId $item
	 * @return wxTreeItemId
	 */
	function GetLastChild(wxTreeItemId $item){}

	/**
	 * Returns the next sibling of the specified item; call GetPrevSibling() for the previous sibling.
	 * @param wxTreeItemId $item
	 * @return wxTreeItemId
	 */
	function GetNextSibling(wxTreeItemId $item){}

	/**
	 * Returns the next visible item or an invalid item if this item is the last visible one.
	 * @param wxTreeItemId $item
	 * @return wxTreeItemId
	 */
	function GetNextVisible(wxTreeItemId $item){}

	/**
	 * Returns the previous sibling of the specified item; call GetNextSibling() for the next sibling.
	 * @param wxTreeItemId $item
	 * @return wxTreeItemId
	 */
	function GetPrevSibling(wxTreeItemId $item){}

	/**
	 * Returns the previous visible item or an invalid item if this item is the first visible one.
	 * @param wxTreeItemId $item
	 * @return wxTreeItemId
	 */
	function GetPrevVisible(wxTreeItemId $item){}

	/**
	 * Returns true if the control will use a quick calculation for the best size, looking only at the first and last items.
	 * @return bool
	 */
	function GetQuickBestSize(){}

	/**
	 * Returns the root item for the tree control.
	 * @return wxTreeItemId
	 */
	function GetRootItem(){}

	/**
	 * Returns the selection, or an invalid item if there is no selection.
	 * @return wxTreeItemId
	 */
	function GetSelection(){}

	/**
	 * Returns the state image list (from which application-defined state images are taken).
	 * @return wxImageList
	 */
	function GetStateImageList(){}

	/**
	 * Calculates which (if any) item is under the given point, returning the tree item id at this point plus extra information flags.
	 * @param wxPoint $point
	 * @param integer $flags
	 * @return wxTreeItemId
	 */
	function HitTest(wxPoint $point, &$flags){}

	/**
	 * Inserts an item after a given one (previous).
	 * @param wxTreeItemId $parent
	 * @param wxTreeItemId $previous
	 * @param string $text
	 * @param integer $image
	 * @param integer $selImage
	 * @param wxTreeItemData $data
	 * @param integer $before
	 * @return wxTreeItemId
	 */
	function InsertItem(wxTreeItemId $parent, wxTreeItemId $previous, $text, $image=-1, $selImage=-1, wxTreeItemData &$data=null, wxTreeItemId $parent, $before, $text, $image=-1, $selImage=-1, wxTreeItemData &$data=null){}

	/**
	 * Returns true if the given item is in bold state.
	 * @param wxTreeItemId $item
	 * @return bool
	 */
	function IsBold(wxTreeItemId $item){}

	/**
	 * Returns true if the control is empty (i.e.
	 * @return bool
	 */
	function IsEmpty(){}

	/**
	 * Returns true if the item is expanded (only makes sense if it has children).
	 * @param wxTreeItemId $item
	 * @return bool
	 */
	function IsExpanded(wxTreeItemId $item){}

	/**
	 * Returns true if the item is selected.
	 * @param wxTreeItemId $item
	 * @return bool
	 */
	function IsSelected(wxTreeItemId $item){}

	/**
	 * Returns true if the item is visible on the screen.
	 * @param wxTreeItemId $item
	 * @return bool
	 */
	function IsVisible(wxTreeItemId $item){}

	/**
	 * Returns true if the item has children.
	 * @param wxTreeItemId $item
	 * @return bool
	 */
	function ItemHasChildren(wxTreeItemId $item){}

	/**
	 * Appends an item as the first child of parent, return a new item id.
	 * @param wxTreeItemId $parent
	 * @param string $text
	 * @param integer $image
	 * @param integer $selImage
	 * @param wxTreeItemData $data
	 * @return wxTreeItemId
	 */
	function PrependItem(wxTreeItemId $parent, $text, $image=-1, $selImage=-1, wxTreeItemData &$data=null){}

	/**
	 * Scrolls the specified item into view.
	 * @param wxTreeItemId $item
	 */
	function ScrollTo(wxTreeItemId $item){}

	/**
	 * Select all the immediate children of the given parent.
	 * @param wxTreeItemId $parent
	 */
	function SelectChildren(wxTreeItemId $parent){}

	/**
	 * Selects the given item.
	 * @param wxTreeItemId $item
	 * @param bool $select
	 */
	function SelectItem(wxTreeItemId $item, $select=true){}

	/**
	 * Sets the currently focused item.
	 * @param wxTreeItemId $item
	 */
	function SetFocusedItem(wxTreeItemId $item){}

	/**
	 * Sets the normal image list.
	 * @param wxImageList $imageList
	 */
	function SetImageList(wxImageList &$imageList){}

	/**
	 * Sets the indentation for the tree control.
	 * @param integer $indent
	 */
	function SetIndent($indent){}

	/**
	 * Sets the colour of the item's background.
	 * @param wxTreeItemId $item
	 * @param wxColour $col
	 */
	function SetItemBackgroundColour(wxTreeItemId $item, wxColour $col){}

	/**
	 * Makes item appear in bold font if bold parameter is true or resets it to the normal state.
	 * @param wxTreeItemId $item
	 * @param bool $bold
	 */
	function SetItemBold(wxTreeItemId $item, $bold=true){}

	/**
	 * Sets the item client data.
	 * @param wxTreeItemId $item
	 * @param wxTreeItemData $data
	 */
	function SetItemData(wxTreeItemId $item, wxTreeItemData &$data){}

	/**
	 * Gives the item the visual feedback for Drag'n'Drop actions, which is useful if something is dragged from the outside onto the tree control (as opposed to a DnD operation within the tree control, which already is implemented internally).
	 * @param wxTreeItemId $item
	 * @param bool $highlight
	 */
	function SetItemDropHighlight(wxTreeItemId $item, $highlight=true){}

	/**
	 * Sets the item's font.
	 * @param wxTreeItemId $item
	 * @param wxFont $font
	 */
	function SetItemFont(wxTreeItemId $item, wxFont $font){}

	/**
	 * Force appearance of the button next to the item.
	 * @param wxTreeItemId $item
	 * @param bool $hasChildren
	 */
	function SetItemHasChildren(wxTreeItemId $item, $hasChildren=true){}

	/**
	 * Sets the specified item's image.
	 * @param wxTreeItemId $item
	 * @param integer $image
	 * @param wxTreeItemIcon $which
	 */
	function SetItemImage(wxTreeItemId $item, $image, wxTreeItemIcon $which=null){}

	/**
	 * Sets the specified item state.
	 * @param wxTreeItemId $item
	 * @param integer $state
	 */
	function SetItemState(wxTreeItemId $item, $state){}

	/**
	 * Sets the item label.
	 * @param wxTreeItemId $item
	 * @param string $text
	 */
	function SetItemText(wxTreeItemId $item, $text){}

	/**
	 * Sets the colour of the item's text.
	 * @param wxTreeItemId $item
	 * @param wxColour $col
	 */
	function SetItemTextColour(wxTreeItemId $item, wxColour $col){}

	/**
	 * If true is passed, specifies that the control will use a quick calculation for the best size, looking only at the first and last items.
	 * @param bool $quickBestSize
	 */
	function SetQuickBestSize($quickBestSize){}

	/**
	 * Sets the state image list (from which application-defined state images are taken).
	 * @param wxImageList $imageList
	 */
	function SetStateImageList(wxImageList &$imageList){}

	/**
	 * Sets the mode flags associated with the display of the tree control.
	 * @param integer $styles
	 */
	function SetWindowStyle($styles){}

	/**
	 * Sorts the children of the given item using OnCompareItems().
	 * @param wxTreeItemId $item
	 */
	function SortChildren(wxTreeItemId $item){}

	/**
	 * Toggles the given item between collapsed and expanded states.
	 * @param wxTreeItemId $item
	 */
	function Toggle(wxTreeItemId $item){}

	/**
	 * Toggles the given item between selected and unselected states.
	 * @param wxTreeItemId $item
	 */
	function ToggleItemSelection(wxTreeItemId $item){}

	/**
	 * Removes the selection from the currently selected item (if any).
	 */
	function Unselect(){}

	/**
	 * This function either behaves the same as Unselect() if the control doesn't have wxTR_MULTIPLE style, or removes the selection from all items if it does have this style.
	 */
	function UnselectAll(){}

	/**
	 * Unselects the given item.
	 * @param wxTreeItemId $item
	 */
	function UnselectItem(wxTreeItemId $item){}
}

class wxTreeEvent extends wxNotifyEvent
{
	/**
	 * Constructor, used by wxWidgets itself only.
	 * @param integer $commandType
	 * @param wxTreeCtrl $tree
	 * @param wxTreeItemId $item
	 */
	function __construct($commandType, wxTreeCtrl &$tree, wxTreeItemId $item=null){}

	/**
	 * Returns the item (valid for all events).
	 * @return wxTreeItemId
	 */
	function GetItem(){}

	/**
	 * Returns the key code if the event is a key event.
	 * @return integer
	 */
	function GetKeyCode(){}

	/**
	 * Returns the key event for EVT_TREE_KEY_DOWN events.
	 * @return wxKeyEvent
	 */
	function GetKeyEvent(){}

	/**
	 * Returns the label if the event is a begin or end edit label event.
	 * @return string
	 */
	function GetLabel(){}

	/**
	 * Returns the old item index (valid for EVT_TREE_ITEM_CHANGING and EVT_TREE_ITEM_CHANGED events).
	 * @return wxTreeItemId
	 */
	function GetOldItem(){}

	/**
	 * Returns the position of the mouse pointer if the event is a drag or menu-context event.
	 * @return wxPoint
	 */
	function GetPoint(){}

	/**
	 * Returns true if the label edit was cancelled.
	 * @return bool
	 */
	function IsEditCancelled(){}

	/**
	 * Set the tooltip for the item (valid for EVT_TREE_ITEM_GETTOOLTIP events).
	 * @param string $tooltip
	 */
	function SetToolTip($tooltip){}
}

class wxTreeItemData extends wxClientData
{
	/**
	 * Default constructor.
	 */
	function __construct(){}

	/**
	 * Returns the item associated with this node.
	 * @return wxTreeItemId
	 */
	function GetId(){}

	/**
	 * Sets the item associated with this node.
	 * @param wxTreeItemId $id
	 */
	function SetId(wxTreeItemId $id){}
}

class wxTreeItemId
{
	/**
	 * Default constructor.
	 */
	function __construct(){}

	/**
	 * Returns true if this instance is referencing a valid tree item.
	 * @return bool
	 */
	function IsOk(){}
}

class wxTreeListCtrl extends wxWindow
{
	/**
	 * Full constructing, creating the object and its window.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param string $name
	 */
	function __construct(wxWindow &$parent, $id, wxPoint $pos=null, wxSize $size=null, $style=wxTL_DEFAULT_STYLE, $name=wxTreeListCtrlNameStr){}

	/**
	 * Column methods.
	 * @param string $title
	 * @param integer $width
	 * @param wxAlignment $align
	 * @param integer $flags
	 * @return integer
	 */
	function AppendColumn($title, $width=wxCOL_WIDTH_AUTOSIZE, wxAlignment $align=null, $flags=wxCOL_RESIZABLE){}

	/**
	 * Adding and removing items.
	 * @param wxTreeListItem $parent
	 * @param string $text
	 * @param integer $imageClosed
	 * @param integer $imageOpened
	 * @param wxClientData $data
	 * @return wxTreeListItem
	 */
	function AppendItem(wxTreeListItem $parent, $text, $imageClosed=NO_IMAGE, $imageOpened=NO_IMAGE, wxClientData &$data=null){}

	/**
	 * Return true if all children of the given item are in the specified state.
	 * @param wxTreeListItem $item
	 * @param wxCheckBoxState $state
	 * @return bool
	 */
	function AreAllChildrenInState(wxTreeListItem $item, wxCheckBoxState $state){}

	/**
	 * Sets the image list and gives its ownership to the control.
	 * @param wxImageList $imageList
	 */
	function AssignImageList(wxImageList &$imageList){}

	/**
	 * Checkbox handling.
	 * @param wxTreeListItem $item
	 * @param wxCheckBoxState $state
	 */
	function CheckItem(wxTreeListItem $item, wxCheckBoxState $state=null){}

	/**
	 * Change the checked state of the given item and all its children.
	 * @param wxTreeListItem $item
	 * @param wxCheckBoxState $state
	 */
	function CheckItemRecursively(wxTreeListItem $item, wxCheckBoxState $state=null){}

	/**
	 * Delete all columns.
	 */
	function ClearColumns(){}

	/**
	 * Collapse the given tree branch.
	 * @param wxTreeListItem $item
	 */
	function Collapse(wxTreeListItem $item){}

	/**
	 * Create the control window.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param string $name
	 * @return bool
	 */
	function Create(wxWindow &$parent, $id, wxPoint $pos=null, wxSize $size=null, $style=wxTL_DEFAULT_STYLE, $name=wxTreeListCtrlNameStr){}

	/**
	 * Delete all tree items.
	 */
	function DeleteAllItems(){}

	/**
	 * Delete the column with the given index.
	 * @param integer $col
	 * @return bool
	 */
	function DeleteColumn($col){}

	/**
	 * Delete the specified item.
	 * @param wxTreeListItem $item
	 */
	function DeleteItem(wxTreeListItem $item){}

	/**
	 * Expanding and collapsing tree branches.
	 * @param wxTreeListItem $item
	 */
	function Expand(wxTreeListItem $item){}

	/**
	 * Return the checked state of the item.
	 * @param wxTreeListItem $item
	 * @return wxCheckBoxState
	 */
	function GetCheckedState(wxTreeListItem $item){}

	/**
	 * Return the total number of columns.
	 * @return integer
	 */
	function GetColumnCount(){}

	/**
	 * Get the current width of the given column in pixels.
	 * @param integer $col
	 * @return integer
	 */
	function GetColumnWidth($col){}

	/**
	 * Return the view part of this control as wxDataViewCtrl.
	 * @return wxDataViewCtrl
	 */
	function GetDataView(){}

	/**
	 * Return the first child of the given item.
	 * @param wxTreeListItem $item
	 * @return wxTreeListItem
	 */
	function GetFirstChild(wxTreeListItem $item){}

	/**
	 * Return the first item in the tree.
	 * @return wxTreeListItem
	 */
	function GetFirstItem(){}

	/**
	 * Return the parent of the given item.
	 * @param wxTreeListItem $item
	 * @return wxTreeListItem
	 */
	function GetItemParent(wxTreeListItem $item){}

	/**
	 * Items attributes.
	 * @param wxTreeListItem $item
	 * @param integer $col
	 * @return string
	 */
	function GetItemText(wxTreeListItem $item, $col){}

	/**
	 * Get item after the given one in the depth-first tree-traversal order.
	 * @param wxTreeListItem $item
	 * @return wxTreeListItem
	 */
	function GetNextItem(wxTreeListItem $item){}

	/**
	 * Return the next sibling of the given item.
	 * @param wxTreeListItem $item
	 * @return wxTreeListItem
	 */
	function GetNextSibling(wxTreeListItem $item){}

	/**
	 * Methods for the tree navigation.
	 * @return wxTreeListItem
	 */
	function GetRootItem(){}

	/**
	 * Selection methods.
	 * @return wxTreeListItem
	 */
	function GetSelection(){}

	/**
	 * Return the column currently used for sorting, if any.
	 * @param integer $col
	 * @param bool $ascendingOrder
	 * @return bool
	 */
	function GetSortColumn(&$col, &$ascendingOrder=NULL){}

	/**
	 * View window.
	 * @return wxWindow
	 */
	function GetView(){}

	/**
	 * Insert a new item into the tree.
	 * @param wxTreeListItem $parent
	 * @param wxTreeListItem $previous
	 * @param string $text
	 * @param integer $imageClosed
	 * @param integer $imageOpened
	 * @param wxClientData $data
	 * @return wxTreeListItem
	 */
	function InsertItem(wxTreeListItem $parent, wxTreeListItem $previous, $text, $imageClosed=NO_IMAGE, $imageOpened=NO_IMAGE, wxClientData &$data=null){}

	/**
	 * Return whether the given item is expanded.
	 * @param wxTreeListItem $item
	 * @return bool
	 */
	function IsExpanded(wxTreeListItem $item){}

	/**
	 * Return true if the item is selected.
	 * @param wxTreeListItem $item
	 * @return bool
	 */
	function IsSelected(wxTreeListItem $item){}

	/**
	 * Same as InsertItem() with wxTLI_FIRST.
	 * @param wxTreeListItem $parent
	 * @param string $text
	 * @param integer $imageClosed
	 * @param integer $imageOpened
	 * @param wxClientData $data
	 * @return wxTreeListItem
	 */
	function PrependItem(wxTreeListItem $parent, $text, $imageClosed=NO_IMAGE, $imageOpened=NO_IMAGE, wxClientData &$data=null){}

	/**
	 * Select the given item.
	 * @param wxTreeListItem $item
	 */
	function Select(wxTreeListItem $item){}

	/**
	 * Select all the control items.
	 */
	function SelectAll(){}

	/**
	 * Change the width of the given column.
	 * @param integer $col
	 * @param integer $width
	 */
	function SetColumnWidth($col, $width){}

	/**
	 * Sets the image list.
	 * @param wxImageList $imageList
	 */
	function SetImageList(wxImageList &$imageList){}

	/**
	 * Set the data associated with the given item.
	 * @param wxTreeListItem $item
	 * @param wxClientData $data
	 */
	function SetItemData(wxTreeListItem $item, wxClientData &$data){}

	/**
	 * Set the images for the given item.
	 * @param wxTreeListItem $item
	 * @param integer $closed
	 * @param integer $opened
	 */
	function SetItemImage(wxTreeListItem $item, $closed, $opened=NO_IMAGE){}

	/**
	 * Set the text of the first column of the given item.
	 * @param wxTreeListItem $item
	 * @param string $text
	 * @param integer $col
	 */
	function SetItemText(wxTreeListItem $item, $text, wxTreeListItem $item, $col, $text){}

	/**
	 * Sorting.
	 * @param integer $col
	 * @param bool $ascendingOrder
	 */
	function SetSortColumn($col, $ascendingOrder=true){}

	/**
	 * Uncheck the given item.
	 * @param wxTreeListItem $item
	 */
	function UncheckItem(wxTreeListItem $item){}

	/**
	 * Deselect the given item.
	 * @param wxTreeListItem $item
	 */
	function Unselect(wxTreeListItem $item){}

	/**
	 * Deselect all the control items.
	 */
	function UnselectAll(){}

	/**
	 * Update the state of the parent item to reflect the checked state of its children.
	 * @param wxTreeListItem $item
	 */
	function UpdateItemParentStateRecursively(wxTreeListItem $item){}

	/**
	 * Get the width appropriate for showing the given text.
	 * @param string $text
	 * @return integer
	 */
	function WidthFor($text){}
}

class wxTreeListItem
{
	/**
	 * Only the default constructor is publicly accessible.
	 */
	function __construct(){}

	/**
	 * Return true if the item is valid.
	 * @return bool
	 */
	function IsOk(){}
}

class wxTreebook extends wxBookCtrlBase
{
	/**
	 * Default constructor.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param string $name
	 */
	function __construct(wxWindow &$parent, $id, wxPoint $pos=null, wxSize $size=null, $style=wxBK_DEFAULT, $name=wxEmptyString){}

	/**
	 * Adds a new page.
	 * @param wxWindow $page
	 * @param string $text
	 * @param bool $bSelect
	 * @param integer $imageId
	 * @return bool
	 */
	function AddPage(wxWindow &$page, $text, $bSelect=false, $imageId=wxNOT_FOUND){}

	/**
	 * Adds a new child-page to the last top-level page.
	 * @param wxWindow $page
	 * @param string $text
	 * @param bool $bSelect
	 * @param integer $imageId
	 * @return bool
	 */
	function AddSubPage(wxWindow &$page, $text, $bSelect=false, $imageId=wxNOT_FOUND){}

	/**
	 * Shortcut for ExpandNode( pageId, false ).
	 * @param integer $pageId
	 * @return bool
	 */
	function CollapseNode($pageId){}

	/**
	 * Creates a treebook control.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param string $name
	 * @return bool
	 */
	function Create(wxWindow &$parent, $id, wxPoint $pos=null, wxSize $size=null, $style=wxBK_DEFAULT, $name=wxEmptyString){}

	/**
	 * Deletes the page at the specified position and all its children.
	 * @param integer $pagePos
	 * @return bool
	 */
	function DeletePage($pagePos){}

	/**
	 * Expands (collapses) the pageId node.
	 * @param integer $pageId
	 * @param bool $expand
	 * @return bool
	 */
	function ExpandNode($pageId, $expand=true){}

	/**
	 * Returns the parent page of the given one or wxNOT_FOUND if this is a top-level page.
	 * @param integer $page
	 * @return integer
	 */
	function GetPageParent($page){}

	/**
	 * Returns the currently selected page, or wxNOT_FOUND if none was selected.
	 * @return integer
	 */
	function GetSelection(){}

	/**
	 * Inserts a new page just before the page indicated by pagePos.
	 * @param integer $pagePos
	 * @param wxWindow $page
	 * @param string $text
	 * @param bool $bSelect
	 * @param integer $imageId
	 * @return bool
	 */
	function InsertPage($pagePos, wxWindow &$page, $text, $bSelect=false, $imageId=wxNOT_FOUND){}

	/**
	 * Inserts a sub page under the specified page.
	 * @param integer $pagePos
	 * @param wxWindow $page
	 * @param string $text
	 * @param bool $bSelect
	 * @param integer $imageId
	 * @return bool
	 */
	function InsertSubPage($pagePos, wxWindow &$page, $text, $bSelect=false, $imageId=wxNOT_FOUND){}

	/**
	 * Returns true if the page represented by pageId is expanded.
	 * @param integer $pageId
	 * @return bool
	 */
	function IsNodeExpanded($pageId){}
}

class wxURLDataObject extends wxTextDataObject
{
	/**
	 * Constructor, may be used to initialize the URL.
	 * @param string $url
	 */
	function __construct($url=wxEmptyString){}

	/**
	 * Returns the URL stored by this object, as a string.
	 * @return string
	 */
	function GetURL(){}

	/**
	 * Sets the URL stored by this object.
	 * @param string $url
	 */
	function SetURL($url){}
}

class wxUpdateUIEvent extends wxCommandEvent
{
	/**
	 * Constructor.
	 * @param integer $commandId
	 */
	function __construct($commandId){}

	/**
	 * Returns true if it is appropriate to update (send UI update events to) this window.
	 * @param wxWindow $window
	 * @return bool
	 */
	function CanUpdate(wxWindow &$window){}

	/**
	 * Check or uncheck the UI element.
	 * @param bool $check
	 */
	function Check($check){}

	/**
	 * Enable or disable the UI element.
	 * @param bool $enable
	 */
	function Enable($enable){}

	/**
	 * Returns true if the UI element should be checked.
	 * @return bool
	 */
	function GetChecked(){}

	/**
	 * Returns true if the UI element should be enabled.
	 * @return bool
	 */
	function GetEnabled(){}

	/**
	 * Static function returning a value specifying how wxWidgets will send update events: to all windows, or only to those which specify that they will process the events.
	 * @return wxUpdateUIMode
	 */
	function GetMode(){}

	/**
	 * Returns true if the application has called Check().
	 * @return bool
	 */
	function GetSetChecked(){}

	/**
	 * Returns true if the application has called Enable().
	 * @return bool
	 */
	function GetSetEnabled(){}

	/**
	 * Returns true if the application has called Show().
	 * @return bool
	 */
	function GetSetShown(){}

	/**
	 * Returns true if the application has called SetText().
	 * @return bool
	 */
	function GetSetText(){}

	/**
	 * Returns true if the UI element should be shown.
	 * @return bool
	 */
	function GetShown(){}

	/**
	 * Returns the text that should be set for the UI element.
	 * @return string
	 */
	function GetText(){}

	/**
	 * Returns the current interval between updates in milliseconds.
	 * @return integer
	 */
	function GetUpdateInterval(){}

	/**
	 * Used internally to reset the last-updated time to the current time.
	 */
	function ResetUpdateTime(){}

	/**
	 * Specify how wxWidgets will send update events: to all windows, or only to those which specify that they will process the events.
	 * @param wxUpdateUIMode $mode
	 */
	function SetMode(wxUpdateUIMode $mode){}

	/**
	 * Sets the text for this UI element.
	 * @param string $text
	 */
	function SetText($text){}

	/**
	 * Sets the interval between updates in milliseconds.
	 * @param integer $updateInterval
	 */
	function SetUpdateInterval($updateInterval){}

	/**
	 * Show or hide the UI element.
	 * @param bool $show
	 */
	function Show($show){}
}

class wxVListBox extends wxVScrolledWindow
{
	/**
	 * Normal constructor which calls Create() internally.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param string $name
	 */
	function __construct(wxWindow &$parent, $id=wxID_ANY, wxPoint $pos=null, wxSize $size=null, $style, $name=wxVListBoxNameStr){}

	/**
	 * Deletes all items from the control.
	 */
	function Clear(){}

	/**
	 * Creates the control.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param string $name
	 * @return bool
	 */
	function Create(wxWindow &$parent, $id=wxID_ANY, wxPoint $pos=null, wxSize $size=null, $style, $name=wxVListBoxNameStr){}

	/**
	 * Deselects all the items in the listbox.
	 * @return bool
	 */
	function DeselectAll(){}

	/**
	 * Returns the index of the first selected item in the listbox or wxNOT_FOUND if no items are currently selected.
	 * @param integer $cookie
	 * @return integer
	 */
	function GetFirstSelected(&$cookie){}

	/**
	 * Get the number of items in the control.
	 * @return integer
	 */
	function GetItemCount(){}

	/**
	 * Returns the rectangle occupied by this item in physical coordinates.
	 * @param integer $item
	 * @return wxRect
	 */
	function GetItemRect($item){}

	/**
	 * Returns the margins used by the control.
	 * @return wxPoint
	 */
	function GetMargins(){}

	/**
	 * Returns the index of the next selected item or wxNOT_FOUND if there are no more.
	 * @param integer $cookie
	 * @return integer
	 */
	function GetNextSelected(&$cookie){}

	/**
	 * Returns the number of the items currently selected.
	 * @return integer
	 */
	function GetSelectedCount(){}

	/**
	 * Get the currently selected item or wxNOT_FOUND if there is no selection.
	 * @return integer
	 */
	function GetSelection(){}

	/**
	 * Returns the background colour used for the selected cells.
	 * @return wxColour
	 */
	function GetSelectionBackground(){}

	/**
	 * Returns true if the listbox was created with wxLB_MULTIPLE style and so supports multiple selection or false if it is a single selection listbox.
	 * @return bool
	 */
	function HasMultipleSelection(){}

	/**
	 * Returns true if this item is the current one, false otherwise.
	 * @param integer $item
	 * @return bool
	 */
	function IsCurrent($item){}

	/**
	 * Returns true if this item is selected, false otherwise.
	 * @param integer $item
	 * @return bool
	 */
	function IsSelected($item){}

	/**
	 * This method is used to draw the items background and, maybe, a border around it.
	 * @param wxDC $dc
	 * @param wxRect $rect
	 * @param integer $n
	 */
	function OnDrawBackground(wxDC &$dc, wxRect $rect, $n){}

	/**
	 * The derived class must implement this function to actually draw the item with the given index on the provided DC.
	 * @param wxDC $dc
	 * @param wxRect $rect
	 * @param integer $n
	 */
	function OnDrawItem(wxDC &$dc, wxRect $rect, $n){}

	/**
	 * This method may be used to draw separators between the lines.
	 * @param wxDC $dc
	 * @param wxRect $rect
	 * @param integer $n
	 */
	function OnDrawSeparator(wxDC &$dc, wxRect &$rect, $n){}

	/**
	 * The derived class must implement this method to return the height of the specified item (in pixels).
	 * @param integer $n
	 * @return integer
	 */
	function OnMeasureItem($n){}

	/**
	 * Selects or deselects the specified item which must be valid (i.e.
	 * @param integer $item
	 * @param bool $select
	 * @return bool
	 */
	function Select($item, $select=true){}

	/**
	 * Selects all the items in the listbox.
	 * @return bool
	 */
	function SelectAll(){}

	/**
	 * Selects all items in the specified range which may be given in any order.
	 * @param integer $from
	 * @param integer $to
	 * @return bool
	 */
	function SelectRange($from, $to){}

	/**
	 * Set the number of items to be shown in the control.
	 * @param integer $count
	 */
	function SetItemCount($count){}

	/**
	 * Set the margins: horizontal margin is the distance between the window border and the item contents while vertical margin is half of the distance between items.
	 * @param integer $x
	 * @param integer $y
	 * @param wxPoint $pt
	 */
	function SetMargins($x, $y, wxPoint $pt){}

	/**
	 * Set the selection to the specified item, if it is -1 the selection is unset.
	 * @param integer $selection
	 */
	function SetSelection($selection){}

	/**
	 * Sets the colour to be used for the selected cells background.
	 * @param wxColour $col
	 */
	function SetSelectionBackground(wxColour $col){}

	/**
	 * Toggles the state of the specified item, i.e.
	 * @param integer $item
	 */
	function Toggle($item){}
}

class wxValidator extends wxEvtHandler
{
	/**
	 * Constructor.
	 */
	function __construct(){}

	/**
	 * All validator classes must implement the Clone() function, which returns an identical copy of itself.
	 * @return wxObject
	 */
	function CloneMethod(){}

	/**
	 * Returns the window associated with the validator.
	 * @return wxWindow
	 */
	function GetWindow(){}

	/**
	 * Associates a window with the validator.
	 * @param wxWindow $window
	 */
	function SetWindow(wxWindow &$window){}

	/**
	 * This functions switches on or turns off the error sound produced by the validators if an invalid key is pressed.
	 * @param bool $suppress
	 */
	function SuppressBellOnError($suppress=true){}

	/**
	 * This overridable function is called when the value in the window must be transferred to the validator.
	 * @return bool
	 */
	function TransferFromWindow(){}

	/**
	 * This overridable function is called when the value associated with the validator must be transferred to the window.
	 * @return bool
	 */
	function TransferToWindow(){}

	/**
	 * This overridable function is called when the value in the associated window must be validated.
	 * @param wxWindow $parent
	 * @return bool
	 */
	function Validate(wxWindow &$parent){}
}

class wxVariant extends wxObject
{
	/**
	 * Constructs a variant from a string.
	 * @param string $value
	 * @param string $name
	 * @param timestamp $val
	 * @param wxVariant $variant
	 */
	function __construct($value, $name=wxEmptyString, $value, $name=wxEmptyString, $value, $name=wxEmptyString, $value, $name=wxEmptyString, $value, $name=wxEmptyString, wxObject &$value, $name=wxEmptyString, $val, $name=wxEmptyString, array $val, $name=wxEmptyString, wxVariant $variant){}

	/**
	 * Appends a value to the list.
	 * @param wxVariant $value
	 */
	function Append(wxVariant $value){}

	/**
	 * Makes the variant null by deleting the internal data and set the name to wxEmptyString.
	 */
	function Clear(){}

	/**
	 * Deletes the contents of the list.
	 */
	function ClearList(){}

	/**
	 * Retrieves and converts the value of this variant to the type that value is.
	 * @param integer $value
	 * @return bool
	 */
	function Convert(&$value, &$value, &$value, &$value, &$value){}

	/**
	 * Deletes the zero-based item from the list.
	 * @param integer $item
	 * @return bool
	 */
	function Delete($item){}

	/**
	 * Returns the string array value.
	 * @return array
	 */
	function GetArrayString(){}

	/**
	 * Returns the boolean value.
	 * @return bool
	 */
	function GetBool(){}

	/**
	 * Returns the number of elements in the list.
	 * @return integer
	 */
	function GetCount(){}

	/**
	 * Returns a pointer to the internal variant data.
	 * @return wxVariantData
	 */
	function GetData(){}

	/**
	 * Returns the date value.
	 * @return timestamp
	 */
	function GetDateTime(){}

	/**
	 * Returns the floating point value.
	 * @return float
	 */
	function GetDouble(){}

	/**
	 * Returns the integer value.
	 * @return integer
	 */
	function GetLong(){}

	/**
	 * Returns a constant reference to the variant name.
	 * @return string
	 */
	function GetName(){}

	/**
	 * Gets the string value.
	 * @return string
	 */
	function GetString(){}

	/**
	 * Returns the value type as a string.
	 * @return string
	 */
	function GetType(){}

	/**
	 * Gets the void pointer value.
	 * @return mixed
	 */
	function GetVoidPtr(){}

	/**
	 * Gets the wxObject pointer value.
	 * @return wxObject
	 */
	function GetWxObjectPtr(){}

	/**
	 * Inserts a value at the front of the list.
	 * @param wxVariant $value
	 */
	function Insert(wxVariant $value){}

	/**
	 * Returns true if there is no data associated with this variant, false if there is data.
	 * @return bool
	 */
	function IsNull(){}

	/**
	 * Returns true if type matches the type of the variant, false otherwise.
	 * @param string $type
	 * @return bool
	 */
	function IsType($type){}

	/**
	 * Returns true if the data is derived from the class described by type, false otherwise.
	 * @param wxClassInfo $type
	 * @return bool
	 */
	function IsValueKindOf(wxClassInfo $type){}

	/**
	 * Makes the variant null by deleting the internal data.
	 */
	function MakeNull(){}

	/**
	 * Makes a string representation of the variant value (for any type).
	 * @return string
	 */
	function MakeString(){}

	/**
	 * Returns true if value matches an element in the list.
	 * @param wxVariant $value
	 * @return bool
	 */
	function Member(wxVariant $value){}

	/**
	 * Makes an empty list.
	 */
	function NullList(){}

	/**
	 * Sets the internal variant data, deleting the existing data if there is any.
	 * @param wxVariantData $data
	 */
	function SetData(wxVariantData &$data){}
}

class wxVariantData extends wxObjectRefData
{
	/**
	 * Default constructor.
	 */
	function __construct(){}

	/**
	 * This function can be overridden to clone the data.
	 * @return wxVariantData
	 */
	function CloneMethod(){}

	/**
	 * Decreases reference count.
	 */
	function DecRef(){}

	/**
	 * Returns true if this object is equal to data.
	 * @param wxVariantData $data
	 * @return bool
	 */
	function Eq(wxVariantData &$data){}

	/**
	 * Returns the string type of the data.
	 * @return string
	 */
	function GetType(){}

	/**
	 * If the data is a wxObject returns a pointer to the objects wxClassInfo structure, if the data isn't a wxObject the method returns NULL.
	 * @return wxClassInfo
	 */
	function GetValueClassInfo(){}

	/**
	 * Increases reference count.
	 */
	function IncRef(){}

	/**
	 * Reads the data from string.
	 * @param string $string
	 * @return bool
	 */
	function Read(&$string){}

	/**
	 * Writes the data to string.
	 * @param string $string
	 * @return bool
	 */
	function Write(&$string){}
}

class wxVersionInfo
{
	/**
	 * Constructor.
	 * @param string $name
	 * @param integer $major
	 * @param integer $minor
	 * @param integer $micro
	 * @param string $description
	 * @param string $copyright
	 */
	function __construct($name='', $major, $minor, $micro, $description='', $copyright=''){}

	/**
	 * Get the copyright string.
	 * @return string
	 */
	function GetCopyright(){}

	/**
	 * Get the description string.
	 * @return string
	 */
	function GetDescription(){}

	/**
	 * Get the major version number.
	 * @return integer
	 */
	function GetMajor(){}

	/**
	 * Get the micro version, or release number.
	 * @return integer
	 */
	function GetMicro(){}

	/**
	 * Get the minor version number.
	 * @return integer
	 */
	function GetMinor(){}

	/**
	 * Get the name of the object (library).
	 * @return string
	 */
	function GetName(){}

	/**
	 * Get the string representation.
	 * @return string
	 */
	function GetVersionString(){}

	/**
	 * Returns true if a copyright string has been specified.
	 * @return bool
	 */
	function HasCopyright(){}

	/**
	 * Return true if a description string has been specified.
	 * @return bool
	 */
	function HasDescription(){}

	/**
	 * Get the string representation of this version object.
	 * @return string
	 */
	function ToString(){}
}

class wxVideoMode
{
	/**
	 * Constructs this class using the given parameters.
	 * @param integer $width
	 * @param integer $height
	 * @param integer $depth
	 * @param integer $freq
	 */
	function __construct($width, $height, $depth, $freq){}

	/**
	 * Returns bits per pixel (e.g.
	 * @return integer
	 */
	function GetDepth(){}

	/**
	 * Returns the screen height in pixels (e.g.
	 * @return integer
	 */
	function GetHeight(){}

	/**
	 * Returns the screen width in pixels (e.g.
	 * @return integer
	 */
	function GetWidth(){}

	/**
	 * Returns true if the object has been initialized.
	 * @return bool
	 */
	function IsOk(){}

	/**
	 * Returns true if this mode matches the other one in the sense that all non zero fields of the other mode have the same value in this one (except for refresh which is allowed to have a greater value).
	 * @param wxVideoMode $other
	 * @return bool
	 */
	function Matches(wxVideoMode $other){}
}

class wxWebView extends wxControl
{
	/**
	 * Returns true if the current selection can be copied.
	 * @return bool
	 */
	function CanCopy(){}

	/**
	 * Returns true if the current selection can be cut.
	 * @return bool
	 */
	function CanCut(){}

	/**
	 * Returns true if it is possible to navigate backward in the history of visited pages.
	 * @return bool
	 */
	function CanGoBack(){}

	/**
	 * Returns true if it is possible to navigate forward in the history of visited pages.
	 * @return bool
	 */
	function CanGoForward(){}

	/**
	 * Returns true if data can be pasted.
	 * @return bool
	 */
	function CanPaste(){}

	/**
	 * Returns true if there is an action to redo.
	 * @return bool
	 */
	function CanRedo(){}

	/**
	 * Retrieve whether the current HTML engine supports a zoom type.
	 * @param wxWebViewZoomType $type
	 * @return bool
	 */
	function CanSetZoomType(wxWebViewZoomType $type){}

	/**
	 * Returns true if there is an action to undo.
	 * @return bool
	 */
	function CanUndo(){}

	/**
	 * Clear the history, this will also remove the visible page.
	 */
	function ClearHistory(){}

	/**
	 * Clears the current selection.
	 */
	function ClearSelection(){}

	/**
	 * Copies the current selection.
	 */
	function Copy(){}

	/**
	 * Creation function for two-step creation.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param string $url
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param string $name
	 * @return bool
	 */
	function Create(wxWindow &$parent, $id, $url=wxWebViewDefaultURLStr, wxPoint $pos=null, wxSize $size=null, $style, $name=wxWebViewNameStr){}

	/**
	 * Cuts the current selection.
	 */
	function Cut(){}

	/**
	 * Deletes the current selection.
	 */
	function DeleteSelection(){}

	/**
	 * Enable or disable the history.
	 * @param bool $enable
	 */
	function EnableHistory($enable=true){}

	/**
	 * Undos the last action.
	 */
	function Undo(){}

	/**
	 * Stop the current page loading process, if any.
	 */
	function Stop(){}

	/**
	 * Set how to interpret the zoom factor.
	 * @param wxWebViewZoomType $zoomType
	 */
	function SetZoomType(wxWebViewZoomType $zoomType){}

	/**
	 * Set the zoom factor of the page.
	 * @param wxWebViewZoom $zoom
	 */
	function SetZoom(wxWebViewZoom $zoom){}

	/**
	 * Set the displayed page source to the contents of the given string.
	 * @param string $html
	 * @param string $baseUrl
	 */
	function SetPage($html, $baseUrl){}

	/**
	 * Set the editable property of the web control.
	 * @param bool $enable
	 */
	function SetEditable($enable=true){}

	/**
	 * Selects the entire page.
	 */
	function SelectAll(){}

	/**
	 * Runs the given javascript code.
	 * @param string $javascript
	 */
	function RunScript($javascript){}

	/**
	 * Reload the currently displayed URL.
	 * @param wxWebViewReloadFlags $flags
	 */
	function Reload(wxWebViewReloadFlags $flags=null){}

	/**
	 * Redos the last action.
	 */
	function Redo(){}

	/**
	 * Opens a print dialog so that the user may print the currently displayed page.
	 */
	function PrintMethod(){}

	/**
	 * Pastes the current data.
	 */
	function Paste(){}

	/**
	 * Factory function to create a new wxWebView.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param string $url
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param wxWebViewBackend $backend
	 * @param integer $style
	 * @param string $name
	 * @return wxWebView
	 */
	function NewMethod(wxWindow &$parent, $id, $url=wxWebViewDefaultURLStr, wxPoint $pos=null, wxSize $size=null, wxWebViewBackend $backend=null, $style, $name=wxWebViewNameStr, wxWebViewBackend $backend=null){}

	/**
	 * Load a web page from a URL.
	 * @param string $url
	 */
	function LoadURL($url){}

	/**
	 * Returns whether the web control is currently editable.
	 * @return bool
	 */
	function IsEditable(){}

	/**
	 * Returns whether the web control is currently busy (e.g.
	 * @return bool
	 */
	function IsBusy(){}

	/**
	 * Returns true if there is a current selection.
	 * @return bool
	 */
	function HasSelection(){}

	/**
	 * Navigate forward in the history of visited pages.
	 */
	function GoForward(){}

	/**
	 * Navigate back in the history of visited pages.
	 */
	function GoBack(){}

	/**
	 * Get the title of the current web page, or its URL/path if title is not available.
	 * @return string
	 */
	function GetCurrentTitle(){}

	/**
	 * Get the URL of the currently displayed document.
	 * @return string
	 */
	function GetCurrentURL(){}

	/**
	 * Get the HTML source code of the currently displayed document.
	 * @return string
	 */
	function GetPageSource(){}

	/**
	 * Get the text of the current page.
	 * @return string
	 */
	function GetPageText(){}

	/**
	 * Returns the currently selected source, if any.
	 * @return string
	 */
	function GetSelectedSource(){}

	/**
	 * Returns the currently selected text, if any.
	 * @return string
	 */
	function GetSelectedText(){}

	/**
	 * Get the zoom factor of the page.
	 * @return wxWebViewZoom
	 */
	function GetZoom(){}

	/**
	 * Get how the zoom factor is currently interpreted.
	 * @return wxWebViewZoomType
	 */
	function GetZoomType(){}
}

class wxWebViewArchiveHandler extends wxWebViewHandler
{
	/**
	 * Constructor.
	 * @param string $scheme
	 */
	function __construct($scheme){}

	/**
	 * GetFile
	 * @param string $uri
	 * @return wxFSFile
	 */
	function GetFile($uri){}
}

class wxWebViewEvent extends wxNotifyEvent
{
	/**
	 * wxWebViewEvent
	 * @param integer $type
	 * @param integer $id
	 * @param string $href
	 * @param string $target
	 */
	function __construct($type, $id, $href, $target){}

	/**
	 * Get the name of the target frame which the url of this event has been or will be loaded into.
	 * @return string
	 */
	function GetTarget(){}

	/**
	 * Get the URL being visited.
	 * @return string
	 */
	function GetURL(){}
}

class wxWebViewHandler
{
	/**
	 * Constructor.
	 * @param string $scheme
	 */
	function __construct($scheme){}

	/**
	 * GetFile
	 * @param string $uri
	 * @return wxFSFile
	 */
	function GetFile($uri){}

	/**
	 * GetName
	 * @return string
	 */
	function GetName(){}
}

class wxWebViewHistoryItem
{
	/**
	 * Construtor.
	 * @param string $url
	 * @param string $title
	 */
	function __construct($url, $title){}

	/**
	 * GetTitle
	 * @return string
	 */
	function GetTitle(){}

	/**
	 * GetUrl
	 * @return string
	 */
	function GetUrl(){}
}

class wxWindow extends wxEvtHandler
{
	/**
	 * Constructs a window, which can be a child of a frame, dialog or any other non-control window.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param string $name
	 */
	function __construct(wxWindow &$parent, $id, wxPoint $pos=null, wxSize $size=null, $style, $name=wxPanelNameStr){}

	/**
	 * This method may be overridden in the derived classes to return false to indicate that this control doesn't accept input at all (i.e.
	 * @return bool
	 */
	function AcceptsFocus(){}

	/**
	 * This method may be overridden in the derived classes to return false to indicate that while this control can, in principle, have focus if the user clicks it with the mouse, it shouldn't be included in the TAB traversal chain when using the keyboard.
	 * @return bool
	 */
	function AcceptsFocusFromKeyboard(){}

	/**
	 * Overridden to indicate whether this window or one of its children accepts focus.
	 * @return bool
	 */
	function AcceptsFocusRecursively(){}

	/**
	 * Adds a child window.
	 * @param wxWindow $child
	 */
	function AddChild(wxWindow &$child){}

	/**
	 * See ProcessEvent() for more info about why you shouldn't use this function and the reason for making this function protected in wxWindow.
	 * @param wxEvent $event
	 */
	function AddPendingEvent(wxEvent $event){}

	/**
	 * Call this function to force one or both scrollbars to be always shown, even if the window is big enough to show its entire contents without scrolling.
	 * @param bool $hflag
	 * @param bool $vflag
	 */
	function AlwaysShowScrollbars($hflag=true, $vflag=true){}

	/**
	 * Sets the cached best size value.
	 * @param wxSize $size
	 */
	function CacheBestSize(wxSize $size){}

	/**
	 * Returns true if this window can have a scroll bar in this orientation.
	 * @param integer $orient
	 * @return bool
	 */
	function CanScroll($orient){}

	/**
	 * Returns true if the system supports transparent windows and calling SetTransparent() may succeed.
	 * @return bool
	 */
	function CanSetTransparent(){}

	/**
	 * Directs all mouse input to this window.
	 */
	function CaptureMouse(){}

	/**
	 * A synonym for Centre().
	 * @param integer $dir
	 */
	function Center($dir=wxBOTH){}

	/**
	 * A synonym for CentreOnParent().
	 * @param integer $dir
	 */
	function CenterOnParent($dir=wxBOTH){}

	/**
	 * Centres the window.
	 * @param integer $direction
	 */
	function Centre($direction=wxBOTH){}

	/**
	 * Centres the window on its parent.
	 * @param integer $direction
	 */
	function CentreOnParent($direction=wxBOTH){}

	/**
	 * Clears the window by filling it with the current background colour.
	 */
	function ClearBackground(){}

	/**
	 * Converts to screen coordinates from coordinates relative to this window.
	 * @param wxPoint $pt
	 * @return wxPoint
	 */
	function ClientToScreen(wxPoint $pt){}

	/**
	 * Converts client area size size to corresponding window size.
	 * @param wxSize $size
	 * @return wxSize
	 */
	function ClientToWindowSize(wxSize $size){}

	/**
	 * This function simply generates a wxCloseEvent whose handler usually tries to close the window.
	 * @param bool $force
	 * @return bool
	 */
	function Close($force=false){}

	/**
	 * Converts a point or size from dialog units to pixels.
	 * @param wxPoint $pt
	 * @param wxSize $sz
	 * @return wxSize
	 */
	function ConvertDialogToPixels(wxPoint $pt, wxSize $sz){}

	/**
	 * Converts a point or size from pixels to dialog units.
	 * @param wxPoint $pt
	 * @param wxSize $sz
	 * @return wxSize
	 */
	function ConvertPixelsToDialog(wxPoint $pt, wxSize $sz){}

	/**
	 * Create
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param wxPoint $pos
	 * @param wxSize $size
	 * @param integer $style
	 * @param string $name
	 * @return bool
	 */
	function Create(wxWindow &$parent, $id, wxPoint $pos=null, wxSize $size=null, $style, $name=wxPanelNameStr){}

	/**
	 * Destroys the window safely.
	 * @return bool
	 */
	function Destroy(){}

	/**
	 * Destroys all children of a window.
	 * @return bool
	 */
	function DestroyChildren(){}

	/**
	 * Disables the window.
	 * @return bool
	 */
	function Disable(){}

	/**
	 * Does the window-specific updating after processing the update event.
	 * @param wxUpdateUIEvent $event
	 */
	function DoUpdateWindowUI(wxUpdateUIEvent &$event){}

	/**
	 * Enables or disables eligibility for drop file events (OnDropFiles).
	 * @param bool $accept
	 */
	function DragAcceptFiles($accept){}

	/**
	 * Enable or disable the window for user input.
	 * @param bool $enable
	 * @return bool
	 */
	function Enable($enable=true){}

	/**
	 * Finds the window or control which currently has the keyboard focus.
	 * @return wxWindow
	 */
	function FindFocus(){}

	/**
	 * Find a child of this window, by name.
	 * @param string $name
	 * @param integer $id
	 * @return wxWindow
	 */
	function FindWindow($name, $id){}

	/**
	 * Find the first window with the given id.
	 * @param integer $id
	 * @param wxWindow $parent
	 * @return wxWindow
	 */
	function FindWindowById($id, wxWindow $parent){}

	/**
	 * Find a window by its label.
	 * @param string $label
	 * @param wxWindow $parent
	 * @return wxWindow
	 */
	function FindWindowByLabel($label, wxWindow $parent){}

	/**
	 * Find a window by its name (as given in a window constructor or Create() function call).
	 * @param string $name
	 * @param wxWindow $parent
	 * @return wxWindow
	 */
	function FindWindowByName($name, wxWindow $parent){}

	/**
	 * Sizes the window so that it fits around its subwindows.
	 */
	function Fit(){}

	/**
	 * Similar to Fit(), but sizes the interior (virtual) size of a window.
	 */
	function FitInside(){}

	/**
	 * Freezes the window or, in other words, prevents any updates from taking place on screen, the window is not redrawn at all.
	 */
	function Freeze(){}

	/**
	 * Returns the sizer of which this window is a member, if any, otherwise NULL.
	 * @return bool
	 */
	function GetAutoLayout(){}

	/**
	 * Returns the background colour of the window.
	 * @return wxColour
	 */
	function GetBackgroundColour(){}

	/**
	 * Returns the background style of the window.
	 * @return wxBackgroundStyle
	 */
	function GetBackgroundStyle(){}

	/**
	 * This functions returns the best acceptable minimal size for the window.
	 * @return wxSize
	 */
	function GetBestSize(){}

	/**
	 * Return the largest of ClientSize and BestSize (as determined by a sizer, interior children, or other means)
	 * @return wxSize
	 */
	function GetBestVirtualSize(){}

	/**
	 * Get the window border style from the given flags: this is different from simply doing flags & wxBORDER_MASK because it uses GetDefaultBorder() to translate wxBORDER_DEFAULT to something reasonable.
	 * @param integer $flags
	 * @return wxBorder
	 */
	function GetBorder($flags){}

	/**
	 * Returns the currently captured window.
	 * @return wxWindow
	 */
	function GetCapture(){}

	/**
	 * Returns the caret() associated with the window.
	 * @return wxCaret
	 */
	function GetCaret(){}

	/**
	 * Returns the character height for this window.
	 * @return integer
	 */
	function GetCharHeight(){}

	/**
	 * Returns the average character width for this window.
	 * @return integer
	 */
	function GetCharWidth(){}

	/**
	 * Get the origin of the client area of the window relative to the window top left corner (the client area may be shifted because of the borders, scrollbars, other decorations...)
	 * @return wxPoint
	 */
	function GetClientAreaOrigin(){}

	/**
	 * Get the client rectangle in window (i.e.
	 * @return wxRect
	 */
	function GetClientRect(){}

	/**
	 * This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.
	 * @return wxSize
	 */
	function GetClientSize(){}

	/**
	 * Returns the sizer of which this window is a member, if any, otherwise NULL.
	 * @return wxSizer
	 */
	function GetContainingSizer(){}

	/**
	 * Return the cursor associated with this window.
	 * @return wxCursor
	 */
	function GetCursor(){}

	/**
	 * Merges the window's best size into the min size and returns the result.
	 * @return wxSize
	 */
	function GetEffectiveMinSize(){}

	/**
	 * Returns the event handler for this window.
	 * @return wxEvtHandler
	 */
	function GetEventHandler(){}

	/**
	 * Returns the extra style bits for the window.
	 * @return integer
	 */
	function GetExtraStyle(){}

	/**
	 * Returns the font for this window.
	 * @return wxFont
	 */
	function GetFont(){}

	/**
	 * Returns the foreground colour of the window.
	 * @return wxColour
	 */
	function GetForegroundColour(){}

	/**
	 * Returns the grandparent of a window, or NULL if there isn't one.
	 * @return wxWindow
	 */
	function GetGrandParent(){}

	/**
	 * Gets the help text to be used as context-sensitive help for this window.
	 * @return string
	 */
	function GetHelpText(){}

	/**
	 * Gets the help text to be used as context-sensitive help for this window.
	 * @param wxPoint $point
	 * @param wxHelpEvent::Origin $origin
	 * @return string
	 */
	function GetHelpTextAtPoint(wxPoint $point, $origin){}

	/**
	 * Returns the identifier of the window.
	 * @return integer
	 */
	function GetId(){}

	/**
	 * Generic way of getting a label from any window, for identification purposes.
	 * @return string
	 */
	function GetLabel(){}

	/**
	 * Returns the layout direction for this window, Note that wxLayout_Default is returned if layout direction is not supported.
	 * @return wxLayoutDirection
	 */
	function GetLayoutDirection(){}

	/**
	 * Returns the maximum size of window's client area.
	 * @return wxSize
	 */
	function GetMaxClientSize(){}

	/**
	 * Sets the cached best size value.
	 * @return integer
	 */
	function GetMaxHeight(){}

	/**
	 * Returns the maximum size of the window.
	 * @return wxSize
	 */
	function GetMaxSize(){}

	/**
	 * Sets the cached best size value.
	 * @return integer
	 */
	function GetMaxWidth(){}

	/**
	 * Returns the minimum size of window's client area, an indication to the sizer layout mechanism that this is the minimum required size of its client area.
	 * @return wxSize
	 */
	function GetMinClientSize(){}

	/**
	 * Sets the cached best size value.
	 * @return integer
	 */
	function GetMinHeight(){}

	/**
	 * Returns the minimum size of the window, an indication to the sizer layout mechanism that this is the minimum required size.
	 * @return wxSize
	 */
	function GetMinSize(){}

	/**
	 * Sets the cached best size value.
	 * @return integer
	 */
	function GetMinWidth(){}

	/**
	 * Returns the window's name.
	 * @return string
	 */
	function GetName(){}

	/**
	 * Returns the next window after this one among the parent's children or NULL if this window is the last child.
	 * @return wxWindow
	 */
	function GetNextSibling(){}

	/**
	 * Returns the parent of the window, or NULL if there is no parent.
	 * @return wxWindow
	 */
	function GetParent(){}

	/**
	 * This function shows a popup menu at the given position in this window and returns the selected id.
	 * @param wxMenu $menu
	 * @param wxPoint $pos
	 * @param integer $x
	 * @param integer $y
	 * @return integer
	 */
	function GetPopupMenuSelectionFromUser(wxMenu &$menu, wxPoint $pos=null, wxMenu &$menu, $x, $y){}

	/**
	 * This gets the position of the window in pixels, relative to the parent window for the child windows or relative to the display origin for the top level windows.
	 * @return wxPoint
	 */
	function GetPosition(){}

	/**
	 * Returns the previous window before this one among the parent's children or  NULL if this window is the first child.
	 * @return wxWindow
	 */
	function GetPrevSibling(){}

	/**
	 * Returns the position and size of the window as a wxRect object.
	 * @return wxRect
	 */
	function GetRect(){}

	/**
	 * Returns the window position in screen coordinates, whether the window is a child window or a top level one.
	 * @return wxPoint
	 */
	function GetScreenPosition(){}

	/**
	 * Returns the position and size of the window on the screen as a wxRect object.
	 * @return wxRect
	 */
	function GetScreenRect(){}

	/**
	 * Returns the built-in scrollbar position.
	 * @param integer $orientation
	 * @return integer
	 */
	function GetScrollPos($orientation){}

	/**
	 * Returns the built-in scrollbar range.
	 * @param integer $orientation
	 * @return integer
	 */
	function GetScrollRange($orientation){}

	/**
	 * Returns the built-in scrollbar thumb size.
	 * @param integer $orientation
	 * @return integer
	 */
	function GetScrollThumb($orientation){}

	/**
	 * See the GetSize(int*,int*) overload for more info.
	 * @return wxSize
	 */
	function GetSize(){}

	/**
	 * Returns the sizer associated with the window by a previous call to SetSizer(), or NULL.
	 * @return wxSizer
	 */
	function GetSizer(){}

	/**
	 * Gets the dimensions of the string as it would be drawn on the window with the currently selected font.
	 * @param string $string
	 * @return wxSize
	 */
	function GetTextExtent($string){}

	/**
	 * Get the associated tooltip or NULL if none.
	 * @return wxToolTip
	 */
	function GetToolTip(){}

	/**
	 * Get the text of the associated tooltip or empty string if none.
	 * @return string
	 */
	function GetToolTipText(){}

	/**
	 * Get the update rectangle bounding box in client coords.
	 * @return wxRect
	 */
	function GetUpdateClientRect(){}

	/**
	 * Returns the region specifying which parts of the window have been damaged.
	 * @return wxRegion
	 */
	function GetUpdateRegion(){}

	/**
	 * Validator functions.
	 * @return wxValidator
	 */
	function GetValidator(){}

	/**
	 * This gets the virtual size of the window in pixels.
	 * @return wxSize
	 */
	function GetVirtualSize(){}

	/**
	 * Returns the size of the left/right and top/bottom borders of this window in x and y components of the result respectively.
	 * @return wxSize
	 */
	function GetWindowBorderSize(){}

	/**
	 * See GetWindowStyleFlag() for more info.
	 * @return integer
	 */
	function GetWindowStyle(){}

	/**
	 * Gets the window style that was passed to the constructor or Create() method.
	 * @return integer
	 */
	function GetWindowStyleFlag(){}

	/**
	 * Returns the value previously passed to SetWindowVariant().
	 * @return wxWindowVariant
	 */
	function GetWindowVariant(){}

	/**
	 * This function will generate the appropriate call to Navigate() if the key event is one normally used for keyboard navigation and return true in this case.
	 * @param wxKeyEvent $event
	 * @return bool
	 */
	function HandleAsNavigationKey(wxKeyEvent $event){}

	/**
	 * Shorthand for:
	 * @param wxEvent $event
	 * @return bool
	 */
	function HandleWindowEvent(wxEvent &$event){}

	/**
	 * Returns true if this window has the current mouse capture.
	 * @return bool
	 */
	function HasCapture(){}

	/**
	 * Returns true if the window has the given exFlag bit set in its extra styles.
	 * @param integer $exFlag
	 * @return bool
	 */
	function HasExtraStyle($exFlag){}

	/**
	 * Returns true if the window has the given flag bit set.
	 * @param integer $flag
	 * @return bool
	 */
	function HasFlag($flag){}

	/**
	 * Returns true if the window (or in case of composite controls, its main child window) has focus.
	 * @return bool
	 */
	function HasFocus(){}

	/**
	 * This method should be overridden to return true if this window has multiple pages.
	 * @return bool
	 */
	function HasMultiplePages(){}

	/**
	 * Returns true if this window currently has a scroll bar for this orientation.
	 * @param integer $orient
	 * @return bool
	 */
	function HasScrollbar($orient){}

	/**
	 * Returns true if this window background is transparent (as, for example, for wxStaticText) and should show the parent window background.
	 * @return bool
	 */
	function HasTransparentBackground(){}

	/**
	 * Equivalent to calling wxWindow::Show(false).
	 * @return bool
	 */
	function Hide(){}

	/**
	 * Get the window border style from the given flags: this is different from simply doing flags & wxBORDER_MASK because it uses GetDefaultBorder() to translate wxBORDER_DEFAULT to something reasonable.
	 * @param integer $x
	 * @param integer $y
	 * @param wxPoint $pt
	 * @return wxHitTest
	 */
	function HitTest($x, $y, wxPoint $pt){}

	/**
	 * wxSizer and friends use this to give a chance to a component to recalc its min size once one of the final size components is known.
	 * @param integer $direction
	 * @param integer $size
	 * @param integer $availableOtherDir
	 * @return bool
	 */
	function InformFirstDirection($direction, $size, $availableOtherDir){}

	/**
	 * This function is (or should be, in case of custom controls) called during window creation to intelligently set up the window visual attributes, that is the font and the foreground and background colours.
	 */
	function InheritAttributes(){}

	/**
	 * Sends an wxEVT_INIT_DIALOG event, whose handler usually transfers data to the dialog via validators.
	 */
	function InitDialog(){}

	/**
	 * Resets the cached best size value so it will be recalculated the next time it is needed.
	 */
	function InvalidateBestSize(){}

	/**
	 * Returns true if this window is in process of being destroyed.
	 * @return bool
	 */
	function IsBeingDeleted(){}

	/**
	 * Returns true if the window contents is double-buffered by the system, i.e.
	 * @return bool
	 */
	function IsDoubleBuffered(){}

	/**
	 * Returns true if the window is enabled, i.e.
	 * @return bool
	 */
	function IsEnabled(){}

	/**
	 * Returns true if the given point or rectangle area has been exposed since the last repaint.
	 * @param integer $x
	 * @param integer $y
	 * @param wxPoint $pt
	 * @param integer $w
	 * @param integer $h
	 * @param wxRect $rect
	 * @return bool
	 */
	function IsExposed($x, $y, wxPoint &$pt, $x, $y, $w, $h, wxRect &$rect){}

	/**
	 * Returns true if the window is currently frozen by a call to Freeze().
	 * @return bool
	 */
	function IsFrozen(){}

	/**
	 * Returns true if the window is retained, false otherwise.
	 * @return bool
	 */
	function IsRetained(){}

	/**
	 * Return whether a scrollbar is always shown.
	 * @param integer $orient
	 * @return bool
	 */
	function IsScrollbarAlwaysShown($orient){}

	/**
	 * Returns true if the window is shown, false if it has been hidden.
	 * @return bool
	 */
	function IsShown(){}

	/**
	 * Returns true if the window is physically visible on the screen, i.e.
	 * @return bool
	 */
	function IsShownOnScreen(){}

	/**
	 * Returns true if this window is intrinsically enabled, false otherwise, i.e.
	 * @return bool
	 */
	function IsThisEnabled(){}

	/**
	 * Returns true if the given window is a top-level one.
	 * @return bool
	 */
	function IsTopLevel(){}

	/**
	 * Invokes the constraint-based layout algorithm or the sizer-based algorithm for this window.
	 * @return bool
	 */
	function Layout(){}

	/**
	 * Same as ScrollLines (1).
	 * @return bool
	 */
	function LineDown(){}

	/**
	 * Same as ScrollLines (-1).
	 * @return bool
	 */
	function LineUp(){}

	/**
	 * Lowers the window to the bottom of the window hierarchy (Z-order).
	 */
	function Lower(){}

	/**
	 * Moves the window to the given position.
	 * @param integer $x
	 * @param integer $y
	 * @param integer $flags
	 * @param wxPoint $pt
	 */
	function Move($x, $y, $flags=wxSIZE_USE_EXISTING, wxPoint $pt, $flags=wxSIZE_USE_EXISTING){}

	/**
	 * Moves this window in the tab navigation order after the specified win.
	 * @param wxWindow $win
	 */
	function MoveAfterInTabOrder(wxWindow &$win){}

	/**
	 * Same as MoveAfterInTabOrder() except that it inserts this window just before win instead of putting it right after it.
	 * @param wxWindow $win
	 */
	function MoveBeforeInTabOrder(wxWindow &$win){}

	/**
	 * Performs a keyboard navigation action starting from this window.
	 * @param integer $flags
	 * @return bool
	 */
	function Navigate($flags=wxNavigationKeyEvent::IsForward){}

	/**
	 * Performs a keyboard navigation action inside this window.
	 * @param integer $flags
	 * @return bool
	 */
	function NavigateIn($flags=wxNavigationKeyEvent::IsForward){}

	/**
	 * Create a new ID or range of IDs that are not currently in use.
	 * @param integer $count
	 * @return integer
	 */
	function NewControlId($count=1){}

	/**
	 * This virtual function is normally only used internally, but sometimes an application may need it to implement functionality that should not be disabled by an application defining an OnIdle handler in a derived class.
	 */
	function OnInternalIdle(){}

	/**
	 * Same as ScrollPages (1).
	 * @return bool
	 */
	function PageDown(){}

	/**
	 * Same as ScrollPages (-1).
	 * @return bool
	 */
	function PageUp(){}

	/**
	 * Pops up the given menu at the specified coordinates, relative to this window, and returns control when the user has dismissed the menu.
	 * @param wxMenu $menu
	 * @param wxPoint $pos
	 * @param integer $x
	 * @param integer $y
	 * @return bool
	 */
	function PopupMenu(wxMenu &$menu, wxPoint $pos=null, wxMenu &$menu, $x, $y){}

	/**
	 * Posts a size event to the window.
	 */
	function PostSizeEvent(){}

	/**
	 * Posts a size event to the parent of this window.
	 */
	function PostSizeEventToParent(){}

	/**
	 * This function is public in wxEvtHandler but protected in wxWindow because for wxWindows you should always call ProcessEvent() on the pointer returned by GetEventHandler() and not on the wxWindow object itself.
	 * @param wxEvent $event
	 * @return bool
	 */
	function ProcessEvent(wxEvent &$event){}

	/**
	 * Convenient wrapper for ProcessEvent().
	 * @param wxEvent $event
	 * @return bool
	 */
	function ProcessWindowEvent(wxEvent &$event){}

	/**
	 * Wrapper for wxEvtHandler::ProcessEventLocally().
	 * @param wxEvent $event
	 * @return bool
	 */
	function ProcessWindowEventLocally(wxEvent &$event){}

	/**
	 * Pushes this event handler onto the event stack for the window.
	 * @param wxEvtHandler $handler
	 */
	function PushEventHandler(wxEvtHandler &$handler){}

	/**
	 * See ProcessEvent() for more info about why you shouldn't use this function and the reason for making this function protected in wxWindow.
	 * @param wxEvent $event
	 */
	function QueueEvent(wxEvent &$event){}

	/**
	 * Raises the window to the top of the window hierarchy (Z-order).
	 */
	function Raise(){}

	/**
	 * Causes this window, and all of its children recursively (except under wxGTK1 where this is not implemented), to be repainted.
	 * @param bool $eraseBackground
	 * @param wxRect $rect
	 */
	function Refresh($eraseBackground=true, wxRect $rect=null){}

	/**
	 * Redraws the contents of the given rectangle: only the area inside it will be repainted.
	 * @param wxRect $rect
	 * @param bool $eraseBackground
	 */
	function RefreshRect(wxRect $rect, $eraseBackground=true){}

	/**
	 * Releases mouse input captured with CaptureMouse().
	 */
	function ReleaseMouse(){}

	/**
	 * Removes a child window.
	 * @param wxWindow $child
	 */
	function RemoveChild(wxWindow &$child){}

	/**
	 * Find the given handler in the windows event handler stack and removes (but does not delete) it from the stack.
	 * @param wxEvtHandler $handler
	 * @return bool
	 */
	function RemoveEventHandler(wxEvtHandler &$handler){}

	/**
	 * Reparents the window, i.e.
	 * @param wxWindow $newParent
	 * @return bool
	 */
	function Reparent(wxWindow &$newParent){}

	/**
	 * Converts from screen to client window coordinates.
	 * @param wxPoint $pt
	 * @return wxPoint
	 */
	function ScreenToClient(wxPoint $pt){}

	/**
	 * Scrolls the window by the given number of lines down (if lines is positive) or up.
	 * @param integer $lines
	 * @return bool
	 */
	function ScrollLines($lines){}

	/**
	 * Scrolls the window by the given number of pages down (if pages is positive) or up.
	 * @param integer $pages
	 * @return bool
	 */
	function ScrollPages($pages){}

	/**
	 * This function sends a dummy size event to the window allowing it to re-layout its children positions.
	 * @param integer $flags
	 */
	function SendSizeEvent($flags){}

	/**
	 * Safe wrapper for GetParent()->SendSizeEvent().
	 * @param integer $flags
	 */
	function SendSizeEventToParent($flags){}

	/**
	 * Determines whether the Layout() function will be called automatically when the window is resized.
	 * @param bool $autoLayout
	 */
	function SetAutoLayout($autoLayout){}

	/**
	 * Sets the background colour of the window.
	 * @param wxColour $colour
	 * @return bool
	 */
	function SetBackgroundColour(wxColour $colour){}

	/**
	 * Sets the background style of the window.
	 * @param wxBackgroundStyle $style
	 * @return bool
	 */
	function SetBackgroundStyle(wxBackgroundStyle $style){}

	/**
	 * This method is only implemented by ports which have support for native TAB traversal (such as GTK+ 2.0).
	 * @param bool $canFocus
	 */
	function SetCanFocus($canFocus){}

	/**
	 * Sets the caret() associated with the window.
	 * @param wxCaret $caret
	 */
	function SetCaret(wxCaret &$caret){}

	/**
	 * This sets the size of the window client area in pixels.
	 * @param integer $width
	 * @param integer $height
	 * @param wxSize $size
	 * @param wxRect $rect
	 */
	function SetClientSize($width, $height, wxSize $size, wxRect $rect){}

	/**
	 * Sets the window to have the given layout constraints.
	 * @param wxLayoutConstraints $constraints
	 */
	function SetConstraints(wxLayoutConstraints &$constraints){}

	/**
	 * This normally does not need to be called by user code.
	 * @param wxSizer $sizer
	 */
	function SetContainingSizer(wxSizer &$sizer){}

	/**
	 * Sets the window's cursor.
	 * @param wxCursor $cursor
	 * @return bool
	 */
	function SetCursor(wxCursor $cursor){}

	/**
	 * Associates a drop target with this window.
	 * @param wxDropTarget $target
	 */
	function SetDropTarget(wxDropTarget &$target){}

	/**
	 * Sets the event handler for this window.
	 * @param wxEvtHandler $handler
	 */
	function SetEventHandler(wxEvtHandler &$handler){}

	/**
	 * Sets the extra style bits for the window.
	 * @param integer $exStyle
	 */
	function SetExtraStyle($exStyle){}

	/**
	 * This sets the window to receive keyboard input.
	 */
	function SetFocus(){}

	/**
	 * This function is called by wxWidgets keyboard navigation code when the user gives the focus to this window from keyboard (e.g.
	 */
	function SetFocusFromKbd(){}

	/**
	 * Sets the font for this window.
	 * @param wxFont $font
	 * @return bool
	 */
	function SetFont(wxFont $font){}

	/**
	 * Sets the foreground colour of the window.
	 * @param wxColour $colour
	 * @return bool
	 */
	function SetForegroundColour(wxColour $colour){}

	/**
	 * Sets the help text to be used as context-sensitive help for this window.
	 * @param string $helpText
	 */
	function SetHelpText($helpText){}

	/**
	 * Sets the identifier of the window.
	 * @param integer $winid
	 */
	function SetId($winid){}

	/**
	 * Sets the initial window size if none is given (i.e.
	 * @param wxSize $size
	 */
	function SetInitialBestSize(wxSize $size){}

	/**
	 * A smart SetSize that will fill in default size components with the window's best size values.
	 * @param wxSize $size
	 */
	function SetInitialSize(wxSize $size=null){}

	/**
	 * Sets the window's label.
	 * @param string $label
	 */
	function SetLabel($label){}

	/**
	 * Sets the layout direction for this window.
	 * @param wxLayoutDirection $dir
	 */
	function SetLayoutDirection(wxLayoutDirection $dir){}

	/**
	 * Sets the maximum client size of the window, to indicate to the sizer layout mechanism that this is the maximum possible size of its client area.
	 * @param wxSize $size
	 */
	function SetMaxClientSize(wxSize $size){}

	/**
	 * Sets the maximum size of the window, to indicate to the sizer layout mechanism that this is the maximum possible size.
	 * @param wxSize $size
	 */
	function SetMaxSize(wxSize $size){}

	/**
	 * Sets the minimum client size of the window, to indicate to the sizer layout mechanism that this is the minimum required size of window's client area.
	 * @param wxSize $size
	 */
	function SetMinClientSize(wxSize $size){}

	/**
	 * Sets the minimum size of the window, to indicate to the sizer layout mechanism that this is the minimum required size.
	 * @param wxSize $size
	 */
	function SetMinSize(wxSize $size){}

	/**
	 * Sets the window's name.
	 * @param string $name
	 */
	function SetName($name){}

	/**
	 * wxWindows cannot be used to form event handler chains; this function thus will assert when called.
	 * @param wxEvtHandler $handler
	 */
	function SetNextHandler(wxEvtHandler &$handler){}

	/**
	 * Sets the background colour of the window but prevents it from being inherited by the children of this window.
	 * @param wxColour $colour
	 */
	function SetOwnBackgroundColour(wxColour $colour){}

	/**
	 * Sets the font of the window but prevents it from being inherited by the children of this window.
	 * @param wxFont $font
	 */
	function SetOwnFont(wxFont $font){}

	/**
	 * Sets the foreground colour of the window but prevents it from being inherited by the children of this window.
	 * @param wxColour $colour
	 */
	function SetOwnForegroundColour(wxColour $colour){}

	/**
	 * SetPalette
	 * @param wxPalette $pal
	 */
	function SetPalette(wxPalette $pal){}

	/**
	 * A synonym for Centre().
	 * @param wxPoint $pt
	 */
	function SetPosition(wxPoint $pt){}

	/**
	 * wxWindows cannot be used to form event handler chains; this function thus will assert when called.
	 * @param wxEvtHandler $handler
	 */
	function SetPreviousHandler(wxEvtHandler &$handler){}

	/**
	 * Sets the position of one of the built-in scrollbars.
	 * @param integer $orientation
	 * @param integer $pos
	 * @param bool $refresh
	 */
	function SetScrollPos($orientation, $pos, $refresh=true){}

	/**
	 * Sets the scrollbar properties of a built-in scrollbar.
	 * @param integer $orientation
	 * @param integer $position
	 * @param integer $thumbSize
	 * @param integer $range
	 * @param bool $refresh
	 */
	function SetScrollbar($orientation, $position, $thumbSize, $range, $refresh=true){}

	/**
	 * This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.
	 * @param integer $width
	 * @param integer $height
	 * @param wxSize $size
	 * @param wxRect $rect
	 * @param integer $x
	 * @param integer $y
	 * @param integer $sizeFlags
	 */
	function SetSize($width, $height, wxSize $size, wxRect $rect, $x, $y, $width, $height, $sizeFlags=wxSIZE_AUTO){}

	/**
	 * Sets the cached best size value.
	 * @param integer $minW
	 * @param integer $minH
	 * @param integer $maxW
	 * @param integer $maxH
	 * @param integer $incW
	 * @param integer $incH
	 * @param wxSize $minSize
	 * @param wxSize $maxSize
	 * @param wxSize $incSize
	 */
	function SetSizeHints($minW, $minH, $maxW=-1, $maxH=-1, $incW=-1, $incH=-1, wxSize $minSize, wxSize $maxSize=null, wxSize $incSize=null){}

	/**
	 * Sets the window to have the given layout sizer.
	 * @param wxSizer $sizer
	 * @param bool $deleteOld
	 */
	function SetSizer(wxSizer &$sizer, $deleteOld=true){}

	/**
	 * This method calls SetSizer() and then wxSizer::SetSizeHints which sets the initial window size to the size needed to accommodate all sizer elements and sets the size hints which, if this window is a top level one, prevent the user from resizing it to be less than this minimal size.
	 * @param wxSizer $sizer
	 * @param bool $deleteOld
	 */
	function SetSizerAndFit(wxSizer &$sizer, $deleteOld=true){}

	/**
	 * This function tells a window if it should use the system's "theme" code to draw the windows' background instead of its own background drawing code.
	 * @param bool $enable
	 */
	function SetThemeEnabled($enable){}

	/**
	 * Attach a tooltip to the window.
	 * @param string $tipString
	 * @param wxToolTip $tip
	 */
	function SetToolTip($tipString, wxToolTip &$tip){}

	/**
	 * Set the transparency of the window.
	 * @param integer $alpha
	 * @return bool
	 */
	function SetTransparent($alpha){}

	/**
	 * Deletes the current validator (if any) and sets the window validator, having called wxValidator::Clone to create a new validator of this type.
	 * @param wxValidator $validator
	 */
	function SetValidator(wxValidator $validator){}

	/**
	 * This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.
	 * @param wxSize $size
	 * @param integer $width
	 * @param integer $height
	 */
	function SetVirtualSize(wxSize $size, $width, $height){}

	/**
	 * See SetWindowStyleFlag() for more info.
	 * @param integer $style
	 */
	function SetWindowStyle($style){}

	/**
	 * Sets the style of the window.
	 * @param integer $style
	 */
	function SetWindowStyleFlag($style){}

	/**
	 * This function can be called under all platforms but only does anything under Mac OS X 10.3+ currently.
	 * @param wxWindowVariant $variant
	 */
	function SetWindowVariant(wxWindowVariant $variant){}

	/**
	 * Return true from here to allow the colours of this window to be changed by InheritAttributes().
	 * @return bool
	 */
	function ShouldInheritColours(){}

	/**
	 * Shows or hides the window.
	 * @param bool $show
	 * @return bool
	 */
	function Show($show=true){}

	/**
	 * Re-enables window updating after a previous call to Freeze().
	 */
	function Thaw(){}

	/**
	 * Turns the given flag on if it's currently turned off and vice versa.
	 * @param integer $flag
	 * @return bool
	 */
	function ToggleWindowStyle($flag){}

	/**
	 * Transfers values from child controls to data areas specified by their validators.
	 * @return bool
	 */
	function TransferDataFromWindow(){}

	/**
	 * Transfers values to child controls from data areas specified by their validators.
	 * @return bool
	 */
	function TransferDataToWindow(){}

	/**
	 * Unreserve an ID or range of IDs that was reserved by NewControlId().
	 * @param integer $id
	 * @param integer $count
	 */
	function UnreserveControlId($id, $count=1){}

	/**
	 * Unset any existing tooltip.
	 */
	function UnsetToolTip(){}

	/**
	 * Calling this method immediately repaints the invalidated area of the window and all of its children recursively (this normally only happens when the flow of control returns to the event loop).
	 */
	function Update(){}

	/**
	 * This function sends one or more wxUpdateUIEvent to the window.
	 * @param integer $flags
	 */
	function UpdateWindowUI($flags=wxUPDATE_UI_NONE){}

	/**
	 * Validates the current values of the child controls using their validators.
	 * @return bool
	 */
	function Validate(){}

	/**
	 * Moves the pointer to the given position on the window.
	 * @param integer $x
	 * @param integer $y
	 */
	function WarpPointer($x, $y){}

	/**
	 * Converts window size size to corresponding client area size In other words, the returned value is what would GetClientSize() return if this window had given window size.
	 * @param wxSize $size
	 * @return wxSize
	 */
	function WindowToClientSize(wxSize $size){}
}

class wxWindowCreateEvent extends wxCommandEvent
{
	/**
	 * Constructor.
	 * @param wxWindow $win
	 */
	function __construct(wxWindow &$win=null){}

	/**
	 * Return the window being created.
	 * @return wxWindow
	 */
	function GetWindow(){}
}

class wxWindowDC extends wxDC
{
	/**
	 * Constructor.
	 * @param wxWindow $window
	 */
	function __construct(wxWindow &$window){}
}

class wxWindowDestroyEvent extends wxCommandEvent
{
	/**
	 * Constructor.
	 * @param wxWindow $win
	 */
	function __construct(wxWindow &$win=null){}

	/**
	 * Return the window being destroyed.
	 * @return wxWindow
	 */
	function GetWindow(){}
}

class wxWindowDisabler
{
	/**
	 * Disables all top level windows of the applications.
	 * @param bool $disable
	 * @param wxWindow $winToSkip
	 */
	function __construct($disable=true, wxWindow &$winToSkip){}
}

class wxWindowModalDialogEvent extends wxCommandEvent
{
	/**
	 * wxWindowModalDialogEvent
	 * @param integer $commandType
	 * @param integer $id
	 */
	function __construct($commandType=wxEVT_NULL, $id){}

	/**
	 * Returns a copy of the event.
	 * @return wxEvent
	 */
	function CloneMethod(){}

	/**
	 * GetDialog
	 * @return wxDialog
	 */
	function GetDialog(){}

	/**
	 * GetReturnCode
	 * @return integer
	 */
	function GetReturnCode(){}
}

class wxWithImages
{
	/**
	 * wxWithImages
	 */
	function __construct(){}

	/**
	 * Sets the image list for the page control and takes ownership of the list.
	 * @param wxImageList $imageList
	 */
	function AssignImageList(wxImageList &$imageList){}

	/**
	 * Returns the associated image list, may be NULL.
	 * @return wxImageList
	 */
	function GetImageList(){}

	/**
	 * Sets the image list to use.
	 * @param wxImageList $imageList
	 */
	function SetImageList(wxImageList &$imageList){}
}

class wxWizard extends wxDialog
{
	/**
	 * Default constructor.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param string $title
	 * @param wxBitmap $bitmap
	 * @param wxPoint $pos
	 * @param integer $style
	 */
	function __construct(wxWindow &$parent, $id=wxID_ANY, $title=wxEmptyString, wxBitmap $bitmap=null, wxPoint $pos=null, $style=wxDEFAULT_DIALOG_STYLE){}

	/**
	 * Creates the wizard dialog.
	 * @param wxWindow $parent
	 * @param integer $id
	 * @param string $title
	 * @param wxBitmap $bitmap
	 * @param wxPoint $pos
	 * @param integer $style
	 * @return bool
	 */
	function Create(wxWindow &$parent, $id=wxID_ANY, $title=wxEmptyString, wxBitmap $bitmap=null, wxPoint $pos=null, $style=536877056){}

	/**
	 * This method is obsolete, use GetPageAreaSizer() instead.
	 * @param wxWizardPage $firstPage
	 */
	function FitToPage(wxWizardPage $firstPage){}

	/**
	 * Returns the bitmap used for the wizard.
	 * @return wxBitmap
	 */
	function GetBitmap(){}

	/**
	 * Returns the colour that should be used to fill the area not taken up by the wizard or page bitmap, if a non-zero bitmap placement flag has been set.
	 * @return wxColour
	 */
	function GetBitmapBackgroundColour(){}

	/**
	 * Returns the flags indicating how the wizard or page bitmap should be expanded and positioned to fit the page height.
	 * @return integer
	 */
	function GetBitmapPlacement(){}

	/**
	 * Get the current page while the wizard is running.
	 * @return wxWizardPage
	 */
	function GetCurrentPage(){}

	/**
	 * Returns the minimum width for the bitmap that will be constructed to contain the actual wizard or page bitmap if a non-zero bitmap placement flag has been set.
	 * @return integer
	 */
	function GetMinimumBitmapWidth(){}

	/**
	 * Returns pointer to page area sizer.
	 * @return wxSizer
	 */
	function GetPageAreaSizer(){}

	/**
	 * Returns the size available for the pages.
	 * @return wxSize
	 */
	function GetPageSize(){}

	/**
	 * Return true if this page is not the last one in the wizard.
	 * @param wxWizardPage $page
	 * @return bool
	 */
	function HasNextPage(wxWizardPage &$page){}

	/**
	 * Returns true if this page is not the last one in the wizard.
	 * @param wxWizardPage $page
	 * @return bool
	 */
	function HasPrevPage(wxWizardPage &$page){}

	/**
	 * Executes the wizard starting from the given page, returning true if it was successfully finished or false if user cancelled it.
	 * @param wxWizardPage $firstPage
	 * @return bool
	 */
	function RunWizard(wxWizardPage &$firstPage){}

	/**
	 * Sets the bitmap used for the wizard.
	 * @param wxBitmap $bitmap
	 */
	function SetBitmap(wxBitmap $bitmap){}

	/**
	 * Sets the colour that should be used to fill the area not taken up by the wizard or page bitmap, if a non-zero bitmap placement flag has been set.
	 * @param wxColour $colour
	 */
	function SetBitmapBackgroundColour(wxColour $colour){}

	/**
	 * Sets the flags indicating how the wizard or page bitmap should be expanded and positioned to fit the page height.
	 * @param integer $placement
	 */
	function SetBitmapPlacement($placement){}

	/**
	 * Sets width of border around page area.
	 * @param integer $border
	 */
	function SetBorder($border){}

	/**
	 * Sets the minimum width for the bitmap that will be constructed to contain the actual wizard or page bitmap if a non-zero bitmap placement flag has been set.
	 * @param integer $width
	 */
	function SetMinimumBitmapWidth($width){}

	/**
	 * Sets the minimal size to be made available for the wizard pages.
	 * @param wxSize $sizePage
	 */
	function SetPageSize(wxSize $sizePage){}
}

class wxWizardEvent extends wxNotifyEvent
{
	/**
	 * Constructor.
	 * @param integer $type
	 * @param integer $id
	 * @param bool $direction
	 * @param wxWizardPage $page
	 */
	function __construct($type=wxEVT_NULL, $id=wxID_ANY, $direction=true, wxWizardPage &$page){}

	/**
	 * Return the direction in which the page is changing: for EVT_WIZARD_PAGE_CHANGING, return true if we're going forward or false otherwise and for EVT_WIZARD_PAGE_CHANGED return true if we came from the previous page and false if we returned from the next one.
	 * @return bool
	 */
	function GetDirection(){}

	/**
	 * Returns the wxWizardPage which was active when this event was generated.
	 * @return wxWizardPage
	 */
	function GetPage(){}
}

class wxWizardPage extends wxPanel
{
	/**
	 * Constructor accepts an optional bitmap which will be used for this page instead of the default one for this wizard (note that all bitmaps used should be of the same size).
	 * @param wxWizard $parent
	 * @param wxBitmap $bitmap
	 */
	function __construct(wxWizard &$parent, wxBitmap $bitmap=null){}

	/**
	 * This method is called by wxWizard to get the bitmap to display alongside the page.
	 * @return wxBitmap
	 */
	function GetBitmap(){}

	/**
	 * Get the page which should be shown when the user chooses the "Next" button: if NULL is returned, this button will be disabled.
	 * @return wxWizardPage
	 */
	function GetNext(){}

	/**
	 * Get the page which should be shown when the user chooses the "Back" button: if NULL is returned, this button will be disabled.
	 * @return wxWizardPage
	 */
	function GetPrev(){}
}

class wxWizardPageSimple extends wxWizardPage
{
	/**
	 * Constructor takes the previous and next pages.
	 * @param wxWizard $parent
	 * @param wxWizardPage $prev
	 * @param wxWizardPage $next
	 * @param wxBitmap $bitmap
	 */
	function __construct(wxWizard &$parent, wxWizardPage &$prev=null, wxWizardPage &$next=null, wxBitmap $bitmap=null){}

	/**
	 * A convenience function to make the pages follow each other.
	 * @param wxWizardPageSimple $first
	 * @param wxWizardPageSimple $second
	 */
	function Chain(wxWizardPageSimple &$first, wxWizardPageSimple &$second){}

	/**
	 * Sets the next page.
	 * @param wxWizardPage $next
	 */
	function SetNext(wxWizardPage &$next){}

	/**
	 * Sets the previous page.
	 * @param wxWizardPage $prev
	 */
	function SetPrev(wxWizardPage &$prev){}
}

class wxWrapSizer extends wxBoxSizer
{
	/**
	 * Constructor for a wxWrapSizer.
	 * @param integer $orient
	 * @param integer $flags
	 */
	function __construct($orient=wxHORIZONTAL, $flags=wxWRAPSIZER_DEFAULT_FLAGS){}

	/**
	 * Implements the calculation of a box sizer's minimal.
	 * @return wxSize
	 */
	function CalcMin(){}

	/**
	 * Not used by an application.
	 * @param integer $direction
	 * @param integer $size
	 * @param integer $availableOtherDir
	 * @return bool
	 */
	function InformFirstDirection($direction, $size, $availableOtherDir){}

	/**
	 * Can be overridden in the derived classes to treat some normal items as spacers.
	 * @param wxSizerItem $item
	 * @return bool
	 */
	function IsSpaceItem(wxSizerItem &$item){}

	/**
	 * Implements the calculation of a box sizer's dimensions and then sets the size of its children (calling wxWindow::SetSize if the child is a window).
	 */
	function RecalcSizes(){}
}

class wxXmlAttribute
{
	/**
	 * Default constructor.
	 * @param string $name
	 * @param string $value
	 * @param wxXmlAttribute $next
	 */
	function __construct($name, $value, wxXmlAttribute &$next=null){}

	/**
	 * Returns the name of this attribute.
	 * @return string
	 */
	function GetName(){}

	/**
	 * Returns the sibling of this attribute or NULL if there are no siblings.
	 * @return wxXmlAttribute
	 */
	function GetNext(){}

	/**
	 * Returns the value of this attribute.
	 * @return string
	 */
	function GetValue(){}

	/**
	 * Sets the name of this attribute.
	 * @param string $name
	 */
	function SetName($name){}

	/**
	 * Sets the sibling of this attribute.
	 * @param wxXmlAttribute $next
	 */
	function SetNext(wxXmlAttribute &$next){}

	/**
	 * Sets the value of this attribute.
	 * @param string $value
	 */
	function SetValue($value){}
}

class wxXmlDocument extends wxObject
{
	/**
	 * Default constructor.
	 * @param wxXmlDocument $doc
	 * @param string $filename
	 * @param string $encoding
	 * @param wxInputStream $stream
	 */
	function __construct(wxXmlDocument $doc, $filename, $encoding="UTF-8", wxInputStream &$stream, $encoding="UTF-8"){}

	/**
	 * Appends a Process Instruction or Comment node to the document prologue.
	 * @param wxXmlNode $node
	 */
	function AppendToProlog(wxXmlNode &$node){}

	/**
	 * Detaches the document node and returns it.
	 * @return wxXmlNode
	 */
	function DetachDocumentNode(){}

	/**
	 * Detaches the root entity node and returns it.
	 * @return wxXmlNode
	 */
	function DetachRoot(){}

	/**
	 * Returns the document node of the document.
	 * @return wxXmlNode
	 */
	function GetDocumentNode(){}

	/**
	 * Returns encoding of document (may be empty).
	 * @return string
	 */
	function GetFileEncoding(){}

	/**
	 * Get expat library version information.
	 * @return wxVersionInfo
	 */
	function GetLibraryVersionInfo(){}

	/**
	 * Returns the root element node of the document.
	 * @return wxXmlNode
	 */
	function GetRoot(){}

	/**
	 * Returns the version of document.
	 * @return string
	 */
	function GetVersion(){}

	/**
	 * Returns true if the document has been loaded successfully.
	 * @return bool
	 */
	function IsOk(){}

	/**
	 * Parses filename as an xml document and loads its data.
	 * @param string $filename
	 * @param string $encoding
	 * @param integer $flags
	 * @param wxInputStream $stream
	 * @return bool
	 */
	function Load($filename, $encoding="UTF-8", $flags=wxXMLDOC_NONE, wxInputStream &$stream, $encoding="UTF-8", $flags=wxXMLDOC_NONE){}

	/**
	 * Saves XML tree creating a file named with given string.
	 * @param string $filename
	 * @param integer $indentstep
	 * @param wxOutputStream $stream
	 * @return bool
	 */
	function Save($filename, $indentstep=2, wxOutputStream &$stream, $indentstep=2){}

	/**
	 * Sets the document node of this document.
	 * @param wxXmlNode $node
	 */
	function SetDocumentNode(wxXmlNode &$node){}

	/**
	 * Sets the enconding of the file which will be used to save the document.
	 * @param string $encoding
	 */
	function SetFileEncoding($encoding){}

	/**
	 * Sets the root element node of this document.
	 * @param wxXmlNode $node
	 */
	function SetRoot(wxXmlNode &$node){}

	/**
	 * Sets the version of the XML file which will be used to save the document.
	 * @param string $version
	 */
	function SetVersion($version){}
}

class wxXmlNode
{
	/**
	 * Creates this XML node and eventually insert it into an existing XML tree.
	 * @param wxXmlNode $parent
	 * @param wxXmlNodeType $type
	 * @param string $name
	 * @param string $content
	 * @param wxXmlAttribute $attrs
	 * @param wxXmlNode $next
	 * @param integer $lineNo
	 * @param wxXmlNode $node
	 */
	function __construct(wxXmlNode &$parent, wxXmlNodeType $type, $name, $content=wxEmptyString, wxXmlAttribute &$attrs=null, wxXmlNode &$next=null, $lineNo=-1, wxXmlNodeType $type, $name, $content=wxEmptyString, $lineNo=-1, wxXmlNode $node){}

	/**
	 * Appends a attribute with given name and value to the list of attributes for this node.
	 * @param string $name
	 * @param string $value
	 * @param wxXmlAttribute $attr
	 */
	function AddAttribute($name, $value, wxXmlAttribute &$attr){}

	/**
	 * Adds node child as the last child of this node.
	 * @param wxXmlNode $child
	 */
	function AddChild(wxXmlNode &$child){}

	/**
	 * Removes the first attributes which has the given name from the list of attributes for this node.
	 * @param string $name
	 * @return bool
	 */
	function DeleteAttribute($name){}

	/**
	 * Returns true if a attribute named attrName could be found.
	 * @param string $attrName
	 * @param string $value
	 * @param string $defaultVal
	 * @return string
	 */
	function GetAttribute($attrName, &$value, $attrName, $defaultVal=wxEmptyString){}

	/**
	 * Return a pointer to the first attribute of this node.
	 * @return wxXmlAttribute
	 */
	function GetAttributes(){}

	/**
	 * Returns the first child of this node.
	 * @return wxXmlNode
	 */
	function GetChildren(){}

	/**
	 * Returns the content of this node.
	 * @return string
	 */
	function GetContent(){}

	/**
	 * Returns the number of nodes which separate this node from grandparent.
	 * @param wxXmlNode $grandparent
	 * @return integer
	 */
	function GetDepth(wxXmlNode &$grandparent=null){}

	/**
	 * Returns line number of the node in the input XML file or -1 if it is unknown.
	 * @return integer
	 */
	function GetLineNumber(){}

	/**
	 * Returns the name of this node.
	 * @return string
	 */
	function GetName(){}

	/**
	 * Returns a pointer to the sibling of this node or NULL if there are no siblings.
	 * @return wxXmlNode
	 */
	function GetNext(){}

	/**
	 * Returns a flag indicating whether encoding conversion is necessary when saving.
	 * @return bool
	 */
	function GetNoConversion(){}

	/**
	 * Returns the content of the first child node of type wxXML_TEXT_NODE or wxXML_CDATA_SECTION_NODE.
	 * @return string
	 */
	function GetNodeContent(){}

	/**
	 * Returns a pointer to the parent of this node or NULL if this node has no parent.
	 * @return wxXmlNode
	 */
	function GetParent(){}

	/**
	 * Returns the type of this node.
	 * @return wxXmlNodeType
	 */
	function GetType(){}

	/**
	 * Returns true if this node has a attribute named attrName.
	 * @param string $attrName
	 * @return bool
	 */
	function HasAttribute($attrName){}

	/**
	 * Inserts the child node immediately before followingNode in the children list.
	 * @param wxXmlNode $child
	 * @param wxXmlNode $followingNode
	 * @return bool
	 */
	function InsertChild(wxXmlNode &$child, wxXmlNode &$followingNode){}

	/**
	 * Inserts the child node immediately after precedingNode in the children list.
	 * @param wxXmlNode $child
	 * @param wxXmlNode $precedingNode
	 * @return bool
	 */
	function InsertChildAfter(wxXmlNode &$child, wxXmlNode &$precedingNode){}

	/**
	 * Returns true if the content of this node is a string containing only whitespaces (spaces, tabs, new lines, etc).
	 * @return bool
	 */
	function IsWhitespaceOnly(){}

	/**
	 * Removes the given node from the children list.
	 * @param wxXmlNode $child
	 * @return bool
	 */
	function RemoveChild(wxXmlNode &$child){}

	/**
	 * Sets as first attribute the given wxXmlAttribute object.
	 * @param wxXmlAttribute $attr
	 */
	function SetAttributes(wxXmlAttribute &$attr){}

	/**
	 * Sets as first child the given node.
	 * @param wxXmlNode $child
	 */
	function SetChildren(wxXmlNode &$child){}

	/**
	 * Sets the content of this node.
	 * @param string $con
	 */
	function SetContent($con){}

	/**
	 * Sets the name of this node.
	 * @param string $name
	 */
	function SetName($name){}

	/**
	 * Sets as sibling the given node.
	 * @param wxXmlNode $next
	 */
	function SetNext(wxXmlNode &$next){}

	/**
	 * Sets a flag to indicate whether encoding conversion is necessary when saving.
	 * @param bool $noconversion
	 */
	function SetNoConversion($noconversion){}

	/**
	 * Sets as parent the given node.
	 * @param wxXmlNode $parent
	 */
	function SetParent(wxXmlNode &$parent){}

	/**
	 * Sets the type of this node.
	 * @param wxXmlNodeType $type
	 */
	function SetType(wxXmlNodeType $type){}
}

class wxXmlResource extends wxObject
{
	/**
	 * Constructor.
	 * @param string $filemask
	 * @param integer $flags
	 * @param string $domain
	 */
	function __construct($filemask, $flags=wxXRC_USE_LOCALE, $domain=wxEmptyString, $flags=wxXRC_USE_LOCALE, $domain=wxEmptyString){}

	/**
	 * Initializes only a specific handler (or custom handler).
	 * @param wxXmlResourceHandler $handler
	 */
	function AddHandler(wxXmlResourceHandler &$handler){}

	/**
	 * Attaches an unknown control to the given panel/window/dialog.
	 * @param string $name
	 * @param wxWindow $control
	 * @param wxWindow $parent
	 * @return bool
	 */
	function AttachUnknownControl($name, wxWindow &$control, wxWindow &$parent=null){}

	/**
	 * Removes all handlers and deletes them (this means that any handlers added using AddHandler() must be allocated on the heap).
	 */
	function ClearHandlers(){}

	/**
	 * Compares the XRC version to the argument.
	 * @param integer $major
	 * @param integer $minor
	 * @param integer $release
	 * @param integer $revision
	 * @return integer
	 */
	function CompareVersion($major, $minor, $release, $revision){}

	/**
	 * Implementation of XRC resources errors reporting.
	 * @param string $xrcFile
	 * @param wxXmlNode $position
	 * @param string $message
	 */
	function DoReportError($xrcFile, wxXmlNode $position, $message){}

	/**
	 * Returns a string ID corresponding to the given numeric ID.
	 * @param integer $numId
	 * @return string
	 */
	function FindXRCIDById($numId){}

	/**
	 * Gets the global resources object or creates one if none exists.
	 * @return wxXmlResource
	 */
	function Get(){}

	/**
	 * Returns the domain (message catalog) that will be used to load translatable strings in the XRC.
	 * @return string
	 */
	function GetDomain(){}

	/**
	 * Returns flags, which may be a bitlist of wxXmlResourceFlags enumeration values.
	 * @return integer
	 */
	function GetFlags(){}

	/**
	 * Returns the wxXmlNode containing the definition of the object with the given name or NULL.
	 * @param string $name
	 * @return wxXmlNode
	 */
	function GetResourceNode($name){}

	/**
	 * Returns version information (a.b.c.d = d + 256*c + 2562*b + 2563*a).
	 * @return integer
	 */
	function GetVersion(){}

	/**
	 * Returns a numeric ID that is equivalent to the string ID used in an XML resource.
	 * @param string $str_id
	 * @param integer $value_if_not_found
	 * @return integer
	 */
	function GetXRCID($str_id, $value_if_not_found=wxID_NONE){}

	/**
	 * Initializes handlers for all supported controls/windows.
	 */
	function InitAllHandlers(){}

	/**
	 * Loads resources from XML files that match given filemask.
	 * @param string $filemask
	 * @return bool
	 */
	function Load($filemask){}

	/**
	 * Loads all .xrc files from directory dirname.
	 * @param string $dirname
	 * @return bool
	 */
	function LoadAllFiles($dirname){}

	/**
	 * Loads a bitmap resource from a file.
	 * @param string $name
	 * @return wxBitmap
	 */
	function LoadBitmap($name){}

	/**
	 * Loads a dialog.
	 * @param wxWindow $parent
	 * @param string $name
	 * @param wxDialog $dlg
	 * @return bool
	 */
	function LoadDialog(wxWindow &$parent, $name, wxDialog &$dlg, wxWindow &$parent, $name){}

	/**
	 * Simpler form of Load() for loading a single XRC file.
	 * @param wxFileName $file
	 * @return bool
	 */
	function LoadFile(wxFileName $file){}

	/**
	 * Loads a frame.
	 * @param wxFrame $frame
	 * @param wxWindow $parent
	 * @param string $name
	 * @return bool
	 */
	function LoadFrame(wxFrame &$frame, wxWindow &$parent, $name){}

	/**
	 * Loads an icon resource from a file.
	 * @param string $name
	 * @return wxIcon
	 */
	function LoadIcon($name){}

	/**
	 * Loads menu from resource.
	 * @param string $name
	 * @return wxMenu
	 */
	function LoadMenu($name){}

	/**
	 * Loads a menubar from resource.
	 * @param wxWindow $parent
	 * @param string $name
	 * @return wxMenuBar
	 */
	function LoadMenuBar(wxWindow &$parent, $name, $name){}

	/**
	 * Load an object from the resource specifying both the resource name and the class name.
	 * @param wxWindow $parent
	 * @param string $name
	 * @param string $classname
	 * @param wxObject $instance
	 * @return bool
	 */
	function LoadObject(wxWindow &$parent, $name, $classname, wxObject &$instance, wxWindow &$parent, $name, $classname){}

	/**
	 * Load an object from anywhere in the resource tree.
	 * @param wxWindow $parent
	 * @param string $name
	 * @param string $classname
	 * @param wxObject $instance
	 * @return bool
	 */
	function LoadObjectRecursively(wxWindow &$parent, $name, $classname, wxObject &$instance, wxWindow &$parent, $name, $classname){}

	/**
	 * Loads a panel.
	 * @param wxWindow $parent
	 * @param string $name
	 * @param wxPanel $panel
	 * @return bool
	 */
	function LoadPanel(wxWindow &$parent, $name, wxPanel &$panel, wxWindow &$parent, $name){}

	/**
	 * Loads a toolbar.
	 * @param wxWindow $parent
	 * @param string $name
	 * @return wxToolBar
	 */
	function LoadToolBar(wxWindow &$parent, $name){}

	/**
	 * Sets the global resources object and returns a pointer to the previous one (may be NULL).
	 * @param wxXmlResource $res
	 * @return wxXmlResource
	 */
	function Set(wxXmlResource &$res){}

	/**
	 * Sets the domain (message catalog) that will be used to load translatable strings in the XRC.
	 * @param string $domain
	 */
	function SetDomain($domain){}

	/**
	 * Sets flags (bitlist of wxXmlResourceFlags enumeration values).
	 * @param integer $flags
	 */
	function SetFlags($flags){}

	/**
	 * This function unloads a resource previously loaded by Load().
	 * @param string $filename
	 * @return bool
	 */
	function Unload($filename){}
}

class wxXmlResourceHandler extends wxObject
{
	/**
	 * Default constructor.
	 */
	function __construct(){}

	/**
	 * Returns true if it understands this node and can create a resource from it, false otherwise.
	 * @param wxXmlNode $node
	 * @return bool
	 */
	function CanHandle(wxXmlNode &$node){}

	/**
	 * Creates an object (menu, dialog, control, ...) from an XML node.
	 * @param wxXmlNode $node
	 * @param wxObject $parent
	 * @param wxObject $instance
	 * @return wxObject
	 */
	function CreateResource(wxXmlNode &$node, wxObject &$parent, wxObject &$instance){}

	/**
	 * Called from CreateResource after variables were filled.
	 * @return wxObject
	 */
	function DoCreateResource(){}

	/**
	 * Sets the parent resource.
	 * @param wxXmlResource $res
	 */
	function SetParentResource(wxXmlResource &$res){}
}

?>
